
C:\Users\Mister\AppData\Local\Temp\arduino_build_917571/HB-UNI-Sen-POOL_1.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 20 04 	jmp	0x840	; 0x840 <__ctors_end>
       4:	0c 94 a1 3e 	jmp	0x7d42	; 0x7d42 <__vector_1>
       8:	0c 94 76 3e 	jmp	0x7cec	; 0x7cec <__vector_2>
       c:	0c 94 4b 3e 	jmp	0x7c96	; 0x7c96 <__vector_3>
      10:	0c 94 10 42 	jmp	0x8420	; 0x8420 <__vector_4>
      14:	0c 94 9b 41 	jmp	0x8336	; 0x8336 <__vector_5>
      18:	0c 94 26 41 	jmp	0x824c	; 0x824c <__vector_6>
      1c:	0c 94 b1 40 	jmp	0x8162	; 0x8162 <__vector_7>
      20:	0c 94 fc 3f 	jmp	0x7ff8	; 0x7ff8 <__vector_8>
      24:	0c 94 13 40 	jmp	0x8026	; 0x8026 <__vector_9>
      28:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
      2c:	0c 94 59 40 	jmp	0x80b2	; 0x80b2 <__vector_11>
      30:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
      34:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
      38:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
      3c:	0c 94 87 40 	jmp	0x810e	; 0x810e <__vector_15>
      40:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
      44:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
      48:	0c 94 01 3e 	jmp	0x7c02	; 0x7c02 <__vector_18>
      4c:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
      50:	0c 94 cb 3d 	jmp	0x7b96	; 0x7b96 <__vector_20>
      54:	0c 94 a1 3d 	jmp	0x7b42	; 0x7b42 <__vector_21>
      58:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
      5c:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
      60:	0c 94 4f 40 	jmp	0x809e	; 0x809e <__vector_24>
      64:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
      68:	0c 94 cc 3e 	jmp	0x7d98	; 0x7d98 <__vector_26>
      6c:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
      70:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
      74:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
      78:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
      7c:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
      80:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
      84:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
      88:	0c 94 4a 04 	jmp	0x894	; 0x894 <__bad_interrupt>
      8c:	08 00       	.word	0x0008	; ????
      8e:	00 00       	nop
      90:	be 92       	st	-X, r11
      92:	24 49       	sbci	r18, 0x94	; 148
      94:	12 3e       	cpi	r17, 0xE2	; 226
      96:	ab aa       	std	Y+51, r10	; 0x33
      98:	aa 2a       	or	r10, r26
      9a:	be cd       	rjmp	.-1156   	; 0xfffffc18 <__eeprom_end+0xff7efc18>
      9c:	cc cc       	rjmp	.-1640   	; 0xfffffa36 <__eeprom_end+0xff7efa36>
      9e:	4c 3e       	cpi	r20, 0xEC	; 236
      a0:	00 00       	nop
      a2:	00 80       	ld	r0, Z
      a4:	be ab       	std	Y+54, r27	; 0x36
      a6:	aa aa       	std	Y+50, r10	; 0x32
      a8:	aa 3e       	cpi	r26, 0xEA	; 234
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	bf 00       	.word	0x00bf	; ????
      b0:	00 00       	nop
      b2:	80 3f       	cpi	r24, 0xF0	; 240
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	00 08       	sbc	r0, r0
      ba:	41 78       	andi	r20, 0x81	; 129
      bc:	d3 bb       	out	0x13, r29	; 19
      be:	43 87       	std	Z+11, r20	; 0x0b
      c0:	d1 13       	cpse	r29, r17
      c2:	3d 19       	sub	r19, r13
      c4:	0e 3c       	cpi	r16, 0xCE	; 206
      c6:	c3 bd       	out	0x23, r28	; 35
      c8:	42 82       	std	Z+2, r4	; 0x02
      ca:	ad 2b       	or	r26, r29
      cc:	3e 68       	ori	r19, 0x8E	; 142
      ce:	ec 82       	std	Y+4, r14	; 0x04
      d0:	76 be       	out	0x36, r7	; 54
      d2:	d9 8f       	std	Y+25, r29	; 0x19
      d4:	e1 a9       	ldd	r30, Z+49	; 0x31
      d6:	3e 4c       	sbci	r19, 0xCE	; 206
      d8:	80 ef       	ldi	r24, 0xF0	; 240
      da:	ff be       	out	0x3f, r15	; 63
      dc:	01 c4       	rjmp	.+2050   	; 0x8e0 <TwoWire::endTransmission() [clone .constprop.152]+0x48>
      de:	ff 7f       	andi	r31, 0xFF	; 255
      e0:	3f 00       	.word	0x003f	; ????
      e2:	00 00       	nop
	...

000000e6 <__trampolines_end>:
__trampolines_start():
      e6:	00 40       	sbci	r16, 0x00	; 0
      e8:	7a 10       	cpse	r7, r10
      ea:	f3 5a       	subi	r31, 0xA3	; 163
      ec:	00 a0       	ldd	r0, Z+32	; 0x20
      ee:	72 4e       	sbci	r23, 0xE2	; 226
      f0:	18 09       	sbc	r17, r8
      f2:	00 10       	cpse	r0, r0
      f4:	a5 d4       	rcall	.+2378   	; 0xa40 <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0xf8>
      f6:	e8 00       	.word	0x00e8	; ????
      f8:	00 e8       	ldi	r16, 0x80	; 128
      fa:	76 48       	sbci	r23, 0x86	; 134
      fc:	17 00       	.word	0x0017	; ????
      fe:	00 e4       	ldi	r16, 0x40	; 64
     100:	0b 54       	subi	r16, 0x4B	; 75
     102:	02 00       	.word	0x0002	; ????
     104:	00 ca       	rjmp	.-3072   	; 0xfffff506 <__eeprom_end+0xff7ef506>
     106:	9a 3b       	cpi	r25, 0xBA	; 186
     108:	00 00       	nop
     10a:	00 e1       	ldi	r16, 0x10	; 16
     10c:	f5 05       	cpc	r31, r5
     10e:	00 00       	nop
     110:	80 96       	adiw	r24, 0x20	; 32
     112:	98 00       	.word	0x0098	; ????
     114:	00 00       	nop
     116:	40 42       	sbci	r20, 0x20	; 32
     118:	0f 00       	.word	0x000f	; ????
     11a:	00 00       	nop
     11c:	a0 86       	std	Z+8, r10	; 0x08
     11e:	01 00       	.word	0x0001	; ????
     120:	00 00       	nop
     122:	10 27       	eor	r17, r16
     124:	00 00       	nop
     126:	00 00       	nop
     128:	e8 03       	fmulsu	r22, r16
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	64 00       	.word	0x0064	; ????
     130:	00 00       	nop
     132:	00 00       	nop
     134:	0a 00       	.word	0x000a	; ????
     136:	00 00       	nop
     138:	00 00       	nop
     13a:	01 00       	.word	0x0001	; ????
     13c:	00 00       	nop
     13e:	00 00       	nop
     140:	2c 76       	andi	r18, 0x6C	; 108
     142:	d8 88       	ldd	r13, Y+16	; 0x10
     144:	dc 67       	ori	r29, 0x7C	; 124
     146:	4f 08       	sbc	r4, r15
     148:	23 df       	rcall	.-442    	; 0xffffff90 <__eeprom_end+0xff7eff90>
     14a:	c1 df       	rcall	.-126    	; 0xce <__SREG__+0x8f>
     14c:	ae 59       	subi	r26, 0x9E	; 158
     14e:	e1 b1       	in	r30, 0x01	; 1
     150:	b7 96       	adiw	r30, 0x27	; 39
     152:	e5 e3       	ldi	r30, 0x35	; 53
     154:	e4 53       	subi	r30, 0x34	; 52
     156:	c6 3a       	cpi	r28, 0xA6	; 166
     158:	e6 51       	subi	r30, 0x16	; 22
     15a:	99 76       	andi	r25, 0x69	; 105
     15c:	96 e8       	ldi	r25, 0x86	; 134
     15e:	e6 c2       	rjmp	.+1484   	; 0x72c <setup::__c+0x4>
     160:	84 26       	eor	r8, r20
     162:	eb 89       	ldd	r30, Y+19	; 0x13
     164:	8c 9b       	sbis	0x11, 4	; 17
     166:	62 ed       	ldi	r22, 0xD2	; 210
     168:	40 7c       	andi	r20, 0xC0	; 192
     16a:	6f fc       	.word	0xfc6f	; ????
     16c:	ef bc       	out	0x2f, r14	; 47
     16e:	9c 9f       	mul	r25, r28
     170:	40 f2       	brcs	.-112    	; 0x102 <__trampolines_end+0x1c>
     172:	ba a5       	ldd	r27, Y+42	; 0x2a
     174:	6f a5       	ldd	r22, Y+47	; 0x2f
     176:	f4 90       	lpm	r15, Z
     178:	05 5a       	subi	r16, 0xA5	; 165
     17a:	2a f7       	brpl	.-54     	; 0x146 <__trampolines_end+0x60>
     17c:	5c 93       	st	X, r21
     17e:	6b 6c       	ori	r22, 0xCB	; 203
     180:	f9 67       	ori	r31, 0x79	; 121
     182:	6d c1       	rjmp	.+730    	; 0x45e <MeasureChannel::readPressure()::__c+0x5>
     184:	1b fc       	.word	0xfc1b	; ????
     186:	e0 e4       	ldi	r30, 0x40	; 64
     188:	0d 47       	sbci	r16, 0x7D	; 125
     18a:	fe f5       	brtc	.+126    	; 0x20a <as::Message::dump() const::__c+0x2>
     18c:	20 e6       	ldi	r18, 0x60	; 96
     18e:	b5 00       	.word	0x00b5	; ????
     190:	d0 ed       	ldi	r29, 0xD0	; 208
     192:	90 2e       	mov	r9, r16
     194:	03 00       	.word	0x0003	; ????
     196:	94 35       	cpi	r25, 0x54	; 84
     198:	77 05       	cpc	r23, r7
     19a:	00 80       	ld	r0, Z
     19c:	84 1e       	adc	r8, r20
     19e:	08 00       	.word	0x0008	; ????
     1a0:	00 20       	and	r0, r0
     1a2:	4e 0a       	sbc	r4, r30
     1a4:	00 00       	nop
     1a6:	00 c8       	rjmp	.-4096   	; 0xfffff1a8 <__eeprom_end+0xff7ef1a8>
     1a8:	0c 33       	cpi	r16, 0x3C	; 60
     1aa:	33 33       	cpi	r19, 0x33	; 51
     1ac:	33 0f       	add	r19, r19
     1ae:	98 6e       	ori	r25, 0xE8	; 232
     1b0:	12 83       	std	Z+2, r17	; 0x02
     1b2:	11 41       	sbci	r17, 0x11	; 17
     1b4:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1b6:	21 14       	cp	r2, r1
     1b8:	89 3b       	cpi	r24, 0xB9	; 185
     1ba:	e6 55       	subi	r30, 0x56	; 86
     1bc:	16 cf       	rjmp	.-468    	; 0xffffffea <__eeprom_end+0xff7effea>
     1be:	fe e6       	ldi	r31, 0x6E	; 110
     1c0:	db 18       	sub	r13, r11
     1c2:	d1 84       	ldd	r13, Z+9	; 0x09
     1c4:	4b 38       	cpi	r20, 0x8B	; 139
     1c6:	1b f7       	brvc	.-58     	; 0x18e <__trampolines_end+0xa8>
     1c8:	7c 1d       	adc	r23, r12
     1ca:	90 1d       	adc	r25, r0
     1cc:	a4 bb       	out	0x14, r26	; 20
     1ce:	e4 24       	eor	r14, r4
     1d0:	20 32       	cpi	r18, 0x20	; 32
     1d2:	84 72       	andi	r24, 0x24	; 36
     1d4:	5e 22       	and	r5, r30
     1d6:	81 00       	.word	0x0081	; ????
     1d8:	c9 f1       	breq	.+114    	; 0x24c <MeasureChannel::savePHCalibrationValues()::__c>
     1da:	24 ec       	ldi	r18, 0xC4	; 196
     1dc:	a1 e5       	ldi	r26, 0x51	; 81
     1de:	3d 27       	eor	r19, r29

000001e0 <DHEX(unsigned long)::__c>:
     1e0:	30 00                                               0.

000001e2 <DHEX(unsigned long)::__c>:
     1e2:	30 30 00                                            00.

000001e5 <DHEX(unsigned long)::__c>:
     1e5:	30 30 30 00                                         000.

000001e9 <DHEX(unsigned long)::__c>:
     1e9:	30 30 30 30 00                                      0000.

000001ee <DHEX(unsigned long)::__c>:
     1ee:	30 30 30 30 30 00                                   00000.

000001f4 <DHEX(unsigned long)::__c>:
     1f4:	30 30 30 30 30 30 00                                000000.

000001fb <DHEX(unsigned long)::__c>:
     1fb:	30 30 30 30 30 30 30 00                             0000000.

00000203 <DHEXLN(unsigned char)::__c>:
     203:	0d 0a 00                                            ...

00000206 <DHEX(unsigned char const*, unsigned char)::__c>:
     206:	20 00                                                .

00000208 <as::Message::dump() const::__c>:
     208:	20 2d 20 00                                          - .

0000020c <as::Message::dump() const::__c>:
     20c:	20 00                                                .

0000020e <as::Message::dump() const::__c>:
     20e:	20 00                                                .

00000210 <as::Message::dump() const::__c>:
     210:	20 00                                                .

00000212 <as::Message::dump() const::__c>:
     212:	20 00                                                .

00000214 <as::Message::dump() const::__c>:
     214:	20 00                                                .

00000216 <as::Message::dump() const::__c>:
     216:	20 00                                                .

00000218 <MeasureChannel::ShowCalibAnalogValueAlarm::trigger(as::AlarmClock&)::__c>:
     218:	20 20 20 20 20 00                                        .

0000021e <MeasureChannel::readTemperature1()::__c>:
     21e:	31 2e 20 54 65 6d 70 65 72 61 74 75 72 20 20 20     1. Temperatur   
     22e:	20 20 3a 20 00                                        : .

00000233 <MeasureChannel::disablePHCalibrationMode()::__c>:
     233:	45 78 69 74 69 6e 67 20 43 61 6c 69 62 72 61 74     Exiting Calibrat
     243:	69 6f 6e 20 4d 6f 64 65 00                          ion Mode.

0000024c <MeasureChannel::savePHCalibrationValues()::__c>:
     24c:	2d 43 41 4c 20 74 65 6d 70 65 72 61 74 75 72 65     -CAL temperature
     25c:	20 20 20 3a 20 00                                      : .

00000262 <MeasureChannel::savePHCalibrationValues()::__c>:
     262:	2d 43 41 4c 20 61 63 69 64 56 6f 6c 74 61 67 65     -CAL acidVoltage
     272:	20 20 20 3a 20 00                                      : .

00000278 <MeasureChannel::savePHCalibrationValues()::__c>:
     278:	2d 43 41 4c 20 6e 65 75 74 72 61 6c 56 6f 6c 74     -CAL neutralVolt
     288:	61 67 65 3a 20 00                                   age: .

0000028e <MeasureChannel::savePHCalibrationValues()::__c>:
     28e:	53 61 76 69 6e 67 20 43 61 6c 69 62 72 61 74 69     Saving Calibrati
     29e:	6f 6e 20 56 61 6c 75 65 73 3a 00                    on Values:.

000002a9 <_ZZN7LcdType19showCalibrationMenuEhjjiE3__c__15_>:
     2a9:	53 54 41 52 54 49 4e 47 20 41 47 41 49 4e 00        STARTING AGAIN.

000002b8 <_ZZN7LcdType19showCalibrationMenuEhjjiE3__c__14_>:
     2b8:	43 41 4c 20 46 41 49 4c 45 44 00                    CAL FAILED.

000002c3 <_ZZN7LcdType19showCalibrationMenuEhjjiE3__c__13_>:
     2c3:	50 48 20 34 20 3a 20 00                             PH 4 : .

000002cb <_ZZN7LcdType19showCalibrationMenuEhjjiE3__c__12_>:
     2cb:	50 48 20 37 20 3a 20 00                             PH 7 : .

000002d3 <_ZZN7LcdType19showCalibrationMenuEhjjiE3__c__11_>:
     2d3:	43 00                                               C.

000002d5 <_ZZN7LcdType19showCalibrationMenuEhjjiE3__c__10_>:
     2d5:	54 65 6d 70 2e 3a 20 00                             Temp.: .

000002dd <LcdType::showCalibrationMenu(unsigned char, unsigned int, unsigned int, int)::__c>:
     2dd:	53 61 76 69 6e 67 20 63 61 6c 69 62 2e 20 64 61     Saving calib. da
     2ed:	74 61 00                                            ta.

000002f0 <LcdType::showCalibrationMenu(unsigned char, unsigned int, unsigned int, int)::__c>:
     2f0:	50 72 65 73 73 20 62 75 74 74 6f 6e 00              Press button.

000002fd <LcdType::showCalibrationMenu(unsigned char, unsigned int, unsigned int, int)::__c>:
     2fd:	52 65 61 64 69 6e 67 20 34 2e 30 20 44 4f 4e 45     Reading 4.0 DONE
	...

0000030e <LcdType::showCalibrationMenu(unsigned char, unsigned int, unsigned int, int)::__c>:
     30e:	50 72 65 73 73 20 62 75 74 74 6f 6e 00              Press button.

0000031b <LcdType::showCalibrationMenu(unsigned char, unsigned int, unsigned int, int)::__c>:
     31b:	50 75 74 20 69 6e 20 34 2e 30 20 73 6f 6c 75 74     Put in 4.0 solut
     32b:	69 6f 6e 00                                         ion.

0000032f <LcdType::showCalibrationMenu(unsigned char, unsigned int, unsigned int, int)::__c>:
     32f:	50 72 65 73 73 20 62 75 74 74 6f 6e 00              Press button.

0000033c <LcdType::showCalibrationMenu(unsigned char, unsigned int, unsigned int, int)::__c>:
     33c:	52 65 61 64 69 6e 67 20 37 2e 30 20 44 4f 4e 45     Reading 7.0 DONE
	...

0000034d <LcdType::showCalibrationMenu(unsigned char, unsigned int, unsigned int, int)::__c>:
     34d:	50 72 65 73 73 20 62 75 74 74 6f 6e 00              Press button.

0000035a <LcdType::showCalibrationMenu(unsigned char, unsigned int, unsigned int, int)::__c>:
     35a:	50 75 74 20 69 6e 20 37 2e 30 20 73 6f 6c 75 74     Put in 7.0 solut
     36a:	69 6f 6e 00                                         ion.

0000036e <LcdType::showCalibrationMenu(unsigned char, unsigned int, unsigned int, int)::__c>:
     36e:	50 72 65 73 73 20 62 75 74 74 6f 6e 00              Press button.

0000037b <LcdType::showCalibrationMenu(unsigned char, unsigned int, unsigned int, int)::__c>:
     37b:	43 41 4c 49 42 52 41 54 49 4f 4e 20 4d 4f 44 45     CALIBRATION MODE
	...

0000038c <MeasureChannel::nextCalibrationStep()::__c>:
     38c:	43 41 4c 49 42 20 53 54 45 50 20 00                 CALIB STEP .

00000398 <MeasureChannel::readTemperature2()::__c>:
     398:	32 2e 20 54 65 6d 70 65 72 61 74 75 72 20 20 20     2. Temperatur   
     3a8:	20 20 3a 20 00                                        : .

000003ad <MeasureChannel::readORP()::__c>:
     3ad:	20 20 20 20 20 20 20 20 4f 52 50 20 20 20 20 20             ORP     
     3bd:	20 20 3a 20 00                                        : .

000003c2 <void DPRINTLN<char const*>(char const*)::__c>:
     3c2:	0d 0a 00                                            ...

000003c5 <MeasureChannel::restorePHCalibrationValues()::__c>:
     3c5:	2d 43 41 4c 20 74 65 6d 70 65 72 61 74 75 72 65     -CAL temperature
     3d5:	20 20 20 3a 20 00                                      : .

000003db <MeasureChannel::restorePHCalibrationValues()::__c>:
     3db:	2d 43 41 4c 20 61 63 69 64 56 6f 6c 74 61 67 65     -CAL acidVoltage
     3eb:	20 20 20 3a 20 00                                      : .

000003f1 <MeasureChannel::restorePHCalibrationValues()::__c>:
     3f1:	2d 43 41 4c 20 6e 65 75 74 72 61 6c 56 6f 6c 74     -CAL neutralVolt
     401:	61 67 65 3a 20 00                                   age: .

00000407 <MeasureChannel::restorePHCalibrationValues()::__c>:
     407:	52 65 73 74 6f 72 65 64 20 43 61 6c 69 62 72 61     Restored Calibra
     417:	74 69 6f 6e 20 56 61 6c 75 65 73 3a 00              tion Values:.

00000424 <MeasureChannel::readPH()::__c>:
     424:	20 20 20 20 20 20 20 20 20 50 48 20 20 20 20 20              PH     
     434:	20 20 3a 20 00                                        : .

00000439 <void DDECLN<float>(float)::__c>:
     439:	0d 0a 00                                            ...

0000043c <MeasureChannel::readPressure()::__c>:
     43c:	29 20 20 20 20 20 20 20 6d 42 61 72 3a 20 00        )       mBar: .

0000044b <MeasureChannel::readPressure()::__c>:
     44b:	2b 50 72 65 73 73 75 72 65 20 20 28 23 00           +Pressure  (#.

00000459 <MeasureChannel::readPressure()::__c>:
     459:	29 20 41 6e 61 6c 6f 67 77 65 72 74 3a 20 00        ) Analogwert: .

00000468 <MeasureChannel::readPressure()::__c>:
     468:	2b 50 72 65 73 73 75 72 65 20 20 28 23 00           +Pressure  (#.

00000476 <MeasureChannel::run()::__c>:
     476:	4d 65 73 73 75 6e 67 20 23 00                       Messung #.

00000480 <UType::configChanged()::__c>:
     480:	2a 4c 43 44 20 42 61 63 6b 6c 69 67 68 74 20 4f     *LCD Backlight O
     490:	6e 74 69 6d 65 20 3a 20 00                          ntime : .

00000499 <UType::configChanged()::__c>:
     499:	2a 53 65 6e 64 65 69 6e 74 65 72 76 61 6c 6c 20     *Sendeintervall 
     4a9:	20 20 20 20 20 20 3a 20 00                                : .

000004b2 <UType::configChanged()::__c>:
     4b2:	2a 4d 65 73 73 69 6e 74 65 72 76 61 6c 6c 20 20     *Messintervall  
     4c2:	20 20 20 20 20 20 3a 20 00                                : .

000004cb <MeasureChannel::enablePHCalibrationMode()::__c>:
     4cb:	45 6e 74 65 72 69 6e 67 20 43 61 6c 69 62 72 61     Entering Calibra
     4db:	74 69 6f 6e 20 4d 6f 64 65 00                       tion Mode.

000004e5 <void DDECLN<unsigned char>(unsigned char)::__c>:
     4e5:	0d 0a 00                                            ...

000004e8 <void DDECLN<unsigned long>(unsigned long)::__c>:
     4e8:	0d 0a 00                                            ...

000004eb <void DDECLN<unsigned int>(unsigned int)::__c>:
     4eb:	0d 0a 00                                            ...

000004ee <void DDECLN<int>(int)::__c>:
     4ee:	0d 0a 00                                            ...

000004f1 <void DPRINTLN<__FlashStringHelper const*>(__FlashStringHelper const*)::__c>:
     4f1:	0d 0a 00                                            ...

000004f4 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::state(unsigned char)::__c>:
	...

000004f5 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::state(unsigned char)::__c>:
     4f5:	20 6c 6f 6e 67 72 65 6c 65 61 73 65 64 00            longreleased.

00000503 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::state(unsigned char)::__c>:
     503:	20 6c 6f 6e 67 70 72 65 73 73 65 64 00               longpressed.

00000510 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::state(unsigned char)::__c>:
     510:	20 64 65 62 6f 75 6e 63 65 00                        debounce.

0000051a <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::state(unsigned char)::__c>:
     51a:	20 70 72 65 73 73 65 64 00                           pressed.

00000523 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::state(unsigned char)::__c>:
     523:	20 72 65 6c 65 61 73 65 64 00                        released.

0000052d <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::reset()::__c>:
     52d:	52 45 53 45 54 00                                   RESET.

00000533 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::waitResponse(as::Message const&, as::Message&, unsigned char)::__c>:
     533:	2d 3e 20 00                                         -> .

00000537 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&)::__c>:
	...

00000538 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&)::__c>:
     538:	77 61 69 74 41 63 6b 3a 20 00                       waitAck: .

00000542 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&)::__c>:
     542:	3c 2d 20 00                                         <- .

00000546 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::bootloader()::__c>:
     546:	42 4f 4f 54 4c 4f 41 44 45 52 00                    BOOTLOADER.

00000551 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)::__c>:
     551:	48 41 56 45 20 44 41 54 41 00                       HAVE DATA.

0000055b <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)::__c>:
     55b:	2d 3e 20 00                                         -> .

0000055f <void DDECLN<long>(long)::__c>:
     55f:	0d 0a 00                                            ...

00000562 <MeasureChannel::configChanged()::__c>:
     562:	2a 54 6f 67 67 6c 65 57 61 69 74 54 69 6d 65 20     *ToggleWaitTime 
     572:	20 20 20 20 20 20 3a 20 00                                : .

0000057b <MeasureChannel::configChanged()::__c>:
     57b:	2a 46 6c 6f 77 52 61 74 65 51 46 61 63 74 6f 72     *FlowRateQFactor
     58b:	20 20 20 20 20 20 3a 20 00                                : .

00000594 <MeasureChannel::configChanged()::__c>:
     594:	2a 4f 72 70 20 20 20 20 20 20 20 20 20 4f 66 66     *Orp         Off
     5a4:	73 65 74 20 20 20 3a 20 00                          set   : .

000005ad <MeasureChannel::configChanged()::__c>:
     5ad:	2a 32 2e 54 65 6d 70 65 72 61 74 75 72 65 20 4f     *2.Temperature O
     5bd:	66 66 73 65 74 20 3a 20 00                          ffset : .

000005c6 <MeasureChannel::configChanged()::__c>:
     5c6:	2a 31 2e 54 65 6d 70 65 72 61 74 75 72 65 20 4f     *1.Temperature O
     5d6:	66 66 73 65 74 20 3a 20 00                          ffset : .

000005df <as::__DefaultRegisterList4Register__>:
     5df:	01                                                  .

000005e0 <__Reg1Register__>:
     5e0:	08 20 21 22 30                                      . !"0

000005e5 <as::__SwitchReg1Register__>:
     5e5:	08 30 56 57                                         .0VW

000005e9 <as::__SwitchReg3Register__>:
     5e9:	02 03 04 05 06 07 08 09 0a 0b 0c                    ...........

000005f4 <MeasureChannel::readVoltage()::__c>:
     5f4:	6d 65 61 73 75 72 65 64 20 56 6f 6c 74 61 67 65     measured Voltage
     604:	20 20 3a 20 00                                        : .

00000609 <MeasureChannel::readVoltage()::__c>:
     609:	29 20 20 3a 20 00                                   )  : .

0000060f <MeasureChannel::readVoltage()::__c>:
     60f:	61 6e 61 6c 6f 67 56 61 6c 75 65 20 28 00           analogValue (.

0000061d <as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255>::rcvData(unsigned char*, unsigned char)::__c>:
     61d:	50 61 63 6b 65 74 20 74 6f 6f 20 62 69 67 3a 20     Packet too big: 
	...

0000062e <as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255>::rcvData(unsigned char*, unsigned char)::__c>:
     62e:	43 52 43 20 46 61 69 6c 65 64 00                    CRC Failed.

00000639 <port_to_output_PGM>:
     639:	00 00 22 00 25 00 28 00 2b 00                       ..".%.(.+.

00000643 <digital_pin_to_timer_PGM>:
     643:	00 00 00 02 03 00 0a 0b 00 00 00 00 05 04 09 08     ................
	...

00000663 <as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>::config(as::StorageConfig const&)::__c>:
     663:	43 6f 6e 66 69 67 20 46 72 65 71 3a 20 30 78 32     Config Freq: 0x2
     673:	31 00                                               1.

00000675 <port_to_mode_PGM>:
     675:	00 00 21 00 24 00 27 00 2a 00                       ..!.$.'.*.

0000067f <as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255>::init()::__c>:
     67f:	20 2d 20 72 65 61 64 79 00                           - ready.

00000688 <as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255>::init()::__c>:
     688:	43 43 20 56 65 72 73 69 6f 6e 3a 20 00              CC Version: .

00000695 <as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255>::init()::initVal>:
     695:	00 2e 02 06 03 0d 04 e9 05 ca 07 0c 0b 06 0d 21     ...............!
     6a5:	0e 65 0f 6a 10 c8 11 93 12 03 15 34 17 03 18 18     .e.j.......4....
     6b5:	19 16 1b 43 1e 2f 1f 65 20 78 23 e9 24 2a 25 1f     ...C./.e x#.$*%.
     6c5:	26 11 3e 03                                         &.>.

000006c9 <as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >::init()::__c>:
     6c9:	31 00                                               1.

000006cb <as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >::init()::__c>:
     6cb:	43 43 20 69 6e 69 74 00                             CC init.

000006d3 <DHEXLN(unsigned long)::__c>:
     6d3:	0d 0a 00                                            ...

000006d6 <as::StorageWrapper<as::InternalEprom>::setup(unsigned int)::__c>:
     6d6:	49 6e 69 74 20 53 74 6f 72 61 67 65 3a 20 00        Init Storage: .

000006e5 <__UReg0Register__>:
     6e5:	0a 0b 0c 1f 20 21 0e 02                             .... !..

000006ed <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::dumpSize()::__c>:
     6ed:	20 2d 20 00                                          - .

000006f1 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::dumpSize()::__c>:
     6f1:	41 64 64 72 65 73 73 20 53 70 61 63 65 3a 20 00     Address Space: .

00000701 <LcdType::initLCD(unsigned char*)::__c>:
     701:	4d 61 72 20 31 30 20 32 30 32 33 20 31 39 3a 32     Mar 10 2023 19:2
     711:	30 3a 34 38 00                                      0:48.

00000716 <LcdType::initLCD(unsigned char*)::__c>:
     716:	20 20 41 73 6b 53 69 6e 2b 2b 20 76 35 2e 30 2e       AskSin++ v5.0.
     726:	32 00                                               2.

00000728 <setup::__c>:
     728:	41 73 6b 53 69 6e 2b 2b 20 76 35 2e 30 2e 32 20     AskSin++ v5.0.2 
     738:	28 4d 61 72 20 31 30 20 32 30 32 33 20 31 39 3a     (Mar 10 2023 19:
     748:	32 30 3a 34 38 29 00                                20:48).

0000074f <as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255>::initReg(unsigned char, unsigned char, unsigned char)::__c>:
     74f:	20 72 65 61 64 3a 20 00                              read: .

00000757 <as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255>::initReg(unsigned char, unsigned char, unsigned char)::__c>:
     757:	20 65 78 70 65 63 74 65 64 3a 20 00                  expected: .

00000763 <as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255>::initReg(unsigned char, unsigned char, unsigned char)::__c>:
     763:	45 72 72 6f 72 20 61 74 20 00                       Error at .

0000076d <as::LedStates::single>:
	...
     775:	02 14 05 05 00 00 00 00 02 01 0a 01 00 00 00 00     ................
	...
     795:	06 03 05 01 01 01 01 0a 06 01 01 01 05 01 05 0a     ................
     7a5:	02 06 02 02 00 00 00 00 05 01 08 04 04 04 04 00     ................

000007b5 <__UReg1Register__>:
     7b5:	01 02 03 04 05 06 07 08 09 0a                       ..........

000007bf <port_to_input_PGM>:
     7bf:	00 00 20 00 23 00 26 00 29 00                       .. .#.&.).

000007c9 <digital_pin_to_port_bit_number_PGM>:
     7c9:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
     7d9:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................

000007e9 <digital_pin_to_port_PGM>:
     7e9:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
     7f9:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

00000809 <digital_pin_to_bit_mask_PGM>:
     809:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     819:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

00000829 <devinfo>:
     829:	f3 18 01 55 4e 49 50 4f 4f 4c 47 30 31 00 f3 18     ...UNIPOOLG01...
     839:	10 53 01 01 00                                      .S...

0000083e <__ctors_start>:
__ctors_start():
     83e:	44 43       	sbci	r20, 0x34	; 52

00000840 <__ctors_end>:
__dtors_end():
     840:	11 24       	eor	r1, r1
     842:	1f be       	out	0x3f, r1	; 63
     844:	cf ef       	ldi	r28, 0xFF	; 255
     846:	d0 e4       	ldi	r29, 0x40	; 64
     848:	de bf       	out	0x3e, r29	; 62
     84a:	cd bf       	out	0x3d, r28	; 61

0000084c <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     84c:	27 e0       	ldi	r18, 0x07	; 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     84e:	aa ed       	ldi	r26, 0xDA	; 218
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     850:	b3 e0       	ldi	r27, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     852:	01 c0       	rjmp	.+2      	; 0x856 <.do_clear_bss_start>

00000854 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     854:	1d 92       	st	X+, r1

00000856 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     856:	ac 3f       	cpi	r26, 0xFC	; 252
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     858:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     85a:	e1 f7       	brne	.-8      	; 0x854 <.do_clear_bss_loop>

0000085c <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     85c:	13 e0       	ldi	r17, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     85e:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     860:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     862:	ec e9       	ldi	r30, 0x9C	; 156
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     864:	f6 ea       	ldi	r31, 0xA6	; 166
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     866:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     868:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     86a:	02 c0       	rjmp	.+4      	; 0x870 <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     86c:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     86e:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     870:	aa 3d       	cpi	r26, 0xDA	; 218
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     872:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     874:	d9 f7       	brne	.-10     	; 0x86c <__do_copy_data+0x10>

00000876 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     876:	14 e0       	ldi	r17, 0x04	; 4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     878:	c0 e2       	ldi	r28, 0x20	; 32
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     87a:	d4 e0       	ldi	r29, 0x04	; 4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     87e:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     880:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     882:	0e 94 19 51 	call	0xa232	; 0xa232 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     886:	cf 31       	cpi	r28, 0x1F	; 31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     888:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     88a:	c9 f7       	brne	.-14     	; 0x87e <__do_global_ctors+0x8>
     88c:	0e 94 b1 45 	call	0x8b62	; 0x8b62 <main>
     890:	0c 94 4c 53 	jmp	0xa698	; 0xa698 <_exit>

00000894 <__bad_interrupt>:
__vector_22():
     894:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000898 <TwoWire::endTransmission() [clone .constprop.152]>:
_ZN7TwoWire15endTransmissionEv.constprop.152():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:225
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
     898:	90 91 d8 04 	lds	r25, 0x04D8	; 0x8004d8 <TwoWire::txBufferLength>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:269
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
     89c:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:268
 *          5 .. timeout
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
     89e:	91 32       	cpi	r25, 0x21	; 33
     8a0:	08 f0       	brcs	.+2      	; 0x8a4 <TwoWire::endTransmission() [clone .constprop.152]+0xc>
     8a2:	43 c0       	rjmp	.+134    	; 0x92a <TwoWire::endTransmission() [clone .constprop.152]+0x92>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:282
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    }
  #else
    while(TWI_READY != twi_state){
     8a4:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <twi_state>
     8a8:	81 11       	cpse	r24, r1
     8aa:	fc cf       	rjmp	.-8      	; 0x8a4 <TwoWire::endTransmission() [clone .constprop.152]+0xc>
_ZN7TwoWire15endTransmissionEv.constprop.152():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:225
     8ac:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <TwoWire::txAddress>
twi_writeTo():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:287
      continue;
    }
  #endif

  twi_state = TWI_MTX;
     8b0:	22 e0       	ldi	r18, 0x02	; 2
     8b2:	20 93 b4 04 	sts	0x04B4, r18	; 0x8004b4 <twi_state>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:288
  twi_sendStop = sendStop;
     8b6:	21 e0       	ldi	r18, 0x01	; 1
     8b8:	20 93 b3 04 	sts	0x04B3, r18	; 0x8004b3 <twi_sendStop>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:290
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
     8bc:	2f ef       	ldi	r18, 0xFF	; 255
     8be:	20 93 b2 04 	sts	0x04B2, r18	; 0x8004b2 <twi_error>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:293

  // initialize buffer iteration vars
  twi_masterBuffer = data;
     8c2:	27 eb       	ldi	r18, 0xB7	; 183
     8c4:	34 e0       	ldi	r19, 0x04	; 4
     8c6:	30 93 b1 04 	sts	0x04B1, r19	; 0x8004b1 <twi_masterBuffer+0x1>
     8ca:	20 93 b0 04 	sts	0x04B0, r18	; 0x8004b0 <twi_masterBuffer>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:294
  twi_masterBufferIndex = 0;
     8ce:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <twi_masterBufferIndex>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:295
  twi_masterBufferLength = length;
     8d2:	90 93 ae 04 	sts	0x04AE, r25	; 0x8004ae <twi_masterBufferLength>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:298

  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
     8d6:	10 92 ad 04 	sts	0x04AD, r1	; 0x8004ad <twi_slarw>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:299
  twi_slarw |= address << 1;
     8da:	90 91 ad 04 	lds	r25, 0x04AD	; 0x8004ad <twi_slarw>
     8de:	88 0f       	add	r24, r24
     8e0:	89 2b       	or	r24, r25
     8e2:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <twi_slarw>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:304

  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
     8e6:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <twi_inRepStart>
     8ea:	81 30       	cpi	r24, 0x01	; 1
     8ec:	29 f5       	brne	.+74     	; 0x938 <TwoWire::endTransmission() [clone .constprop.152]+0xa0>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:311
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
     8ee:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <twi_inRepStart>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:322
          return (5);
        }
      } while(TWCR & _BV(TWWC));
    #else
      do {
        TWDR = twi_slarw;
     8f2:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <twi_slarw>
     8f6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:323
      } while(TWCR & _BV(TWWC));
     8fa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     8fe:	83 fd       	sbrc	r24, 3
     900:	f8 cf       	rjmp	.-16     	; 0x8f2 <TwoWire::endTransmission() [clone .constprop.152]+0x5a>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:325
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
     902:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:329
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     904:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:341
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    }
  #else
    while(wait && (TWI_MTX == twi_state)){
     908:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <twi_state>
     90c:	82 30       	cpi	r24, 0x02	; 2
     90e:	e1 f3       	breq	.-8      	; 0x908 <TwoWire::endTransmission() [clone .constprop.152]+0x70>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:346
      continue;
    }
  #endif

  if (twi_error == 0xFF)
     910:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <twi_error>
     914:	8f 3f       	cpi	r24, 0xFF	; 255
     916:	91 f0       	breq	.+36     	; 0x93c <TwoWire::endTransmission() [clone .constprop.152]+0xa4>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:348
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
     918:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <twi_error>
     91c:	80 32       	cpi	r24, 0x20	; 32
     91e:	81 f0       	breq	.+32     	; 0x940 <TwoWire::endTransmission() [clone .constprop.152]+0xa8>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:350
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     920:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <twi_error>
     924:	80 33       	cpi	r24, 0x30	; 48
     926:	71 f0       	breq	.+28     	; 0x944 <TwoWire::endTransmission() [clone .constprop.152]+0xac>
_ZN7TwoWire15endTransmissionEv.constprop.152():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:353
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
     928:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:227
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     92a:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <TwoWire::txBufferIndex>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:228
  txBufferLength = 0;
     92e:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <TwoWire::txBufferLength>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:230
  // indicate that we are done transmitting
  transmitting = 0;
     932:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <TwoWire::transmitting>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:240
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
     936:	08 95       	ret
twi_writeTo():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:329
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     938:	85 ee       	ldi	r24, 0xE5	; 229
     93a:	e4 cf       	rjmp	.-56     	; 0x904 <TwoWire::endTransmission() [clone .constprop.152]+0x6c>
_ZN7TwoWire15endTransmissionEv.constprop.152():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:347
      continue;
    }
  #endif

  if (twi_error == 0xFF)
    return 0; // success
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	f5 cf       	rjmp	.-22     	; 0x92a <TwoWire::endTransmission() [clone .constprop.152]+0x92>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:349
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
     940:	82 e0       	ldi	r24, 0x02	; 2
     942:	f3 cf       	rjmp	.-26     	; 0x92a <TwoWire::endTransmission() [clone .constprop.152]+0x92>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:351
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
     944:	83 e0       	ldi	r24, 0x03	; 3
     946:	f1 cf       	rjmp	.-30     	; 0x92a <TwoWire::endTransmission() [clone .constprop.152]+0x92>

00000948 <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]>:
_Z15enableInterrupthPFvvEh.constprop.140():
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1233

/*{{{*/
#if defined ARDUINO_328
  if ( (interruptDesignator & PINCHANGEINTERRUPT) || (arduinoPin != 2 && arduinoPin != 3) ) {
#elif defined MIGHTY1284
  if ( (interruptDesignator & PINCHANGEINTERRUPT) ||
     948:	82 30       	cpi	r24, 0x02	; 2
     94a:	09 f4       	brne	.+2      	; 0x94e <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0x6>
     94c:	c4 c0       	rjmp	.+392    	; 0xad6 <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0x18e>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1234
     (arduinoPin != ARDUINO_PIN_B2 && arduinoPin != ARDUINO_PIN_D2 && arduinoPin != ARDUINO_PIN_D3) ) {
     94e:	96 ef       	ldi	r25, 0xF6	; 246
     950:	98 0f       	add	r25, r24
     952:	92 30       	cpi	r25, 0x02	; 2
     954:	08 f4       	brcc	.+2      	; 0x958 <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0x10>
     956:	bf c0       	rjmp	.+382    	; 0xad6 <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0x18e>
     958:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1243
  if ( (interruptDesignator & PINCHANGEINTERRUPT) || (arduinoPin != 8) ) {
#elif defined EI_ATTINY25
  if ( (interruptDesignator & PINCHANGEINTERRUPT) || (arduinoPin != 2) ) {
#endif
#if defined ARDUINO_328 || defined MIGHTY1284 || defined ARDUINO_LEONARDO
    portMask=pgm_read_byte(&digital_pin_to_bit_mask_PGM[arduinoPin]);
     95a:	fc 01       	movw	r30, r24
     95c:	e7 5f       	subi	r30, 0xF7	; 247
     95e:	f7 4f       	sbci	r31, 0xF7	; 247
     960:	24 91       	lpm	r18, Z
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1244
    portNumber=pgm_read_byte(&digital_pin_to_port_PGM[arduinoPin]);
     962:	fc 01       	movw	r30, r24
     964:	e7 51       	subi	r30, 0x17	; 23
     966:	f8 4f       	sbci	r31, 0xF8	; 248
     968:	34 91       	lpm	r19, Z
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:3
#ifdef EI_SECTION_RISING
#ifndef EI_NOTPORTA
if (portNumber==PA) {
     96a:	31 30       	cpi	r19, 0x01	; 1
     96c:	91 f5       	brne	.+100    	; 0x9d2 <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0x8a>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:4
  risingPinsPORTA |= portMask;
     96e:	40 91 ab 04 	lds	r20, 0x04AB	; 0x8004ab <risingPinsPORTA>
     972:	42 2b       	or	r20, r18
     974:	40 93 ab 04 	sts	0x04AB, r20	; 0x8004ab <risingPinsPORTA>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:27
#endif // EI_SECTION_RISING

#ifdef EI_SECTION_FALLING
#ifndef EI_NOTPORTA
if (portNumber==PA) {
  fallingPinsPORTA |= portMask;
     978:	40 91 a7 04 	lds	r20, 0x04A7	; 0x8004a7 <fallingPinsPORTA>
     97c:	42 2b       	or	r20, r18
     97e:	40 93 a7 04 	sts	0x04A7, r20	; 0x8004a7 <fallingPinsPORTA>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1326
    }

#ifndef NEEDFORSPEED
    // When an interrupted pin is found, this will be used to choose the function.
    // This is used in the utility/<#included files>, below.
    portBitNumber=pgm_read_byte(&digital_pin_to_port_bit_number_PGM[arduinoPin]);
     982:	87 53       	subi	r24, 0x37	; 55
     984:	98 4f       	sbci	r25, 0xF8	; 248
     986:	fc 01       	movw	r30, r24
     988:	a4 91       	lpm	r26, Z
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:49
#endif
#endif // EI_SECTION_FALLING

#if defined EI_SECTION_ASSIGNFUNCTIONSREGISTERS
#ifndef EI_NOTPORTA
if (portNumber==PA) {
     98a:	31 30       	cpi	r19, 0x01	; 1
     98c:	09 f0       	breq	.+2      	; 0x990 <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0x48>
     98e:	47 c0       	rjmp	.+142    	; 0xa1e <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0xd6>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:51
#ifndef NEEDFORSPEED
  calculatedPointer=&portAFunctions.pinZero + portBitNumber;
     990:	b0 e0       	ldi	r27, 0x00	; 0
     992:	aa 0f       	add	r26, r26
     994:	bb 1f       	adc	r27, r27
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:52
  *calculatedPointer = userFunction;
     996:	ac 56       	subi	r26, 0x6C	; 108
     998:	bb 4f       	sbci	r27, 0xFB	; 251
     99a:	6d 93       	st	X+, r22
     99c:	7c 93       	st	X, r23
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:54
#endif
  portSnapshotA=*portInputRegister(portNumber);
     99e:	e1 ec       	ldi	r30, 0xC1	; 193
     9a0:	f7 e0       	ldi	r31, 0x07	; 7
     9a2:	a5 91       	lpm	r26, Z+
     9a4:	b4 91       	lpm	r27, Z
     9a6:	8c 91       	ld	r24, X
     9a8:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <portSnapshotA>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:55
  pcmsk=&PCMSK0;
     9ac:	8b e6       	ldi	r24, 0x6B	; 107
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	90 93 92 04 	sts	0x0492, r25	; 0x800492 <pcmsk+0x1>
     9b4:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <pcmsk>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:56
  PCICR |= _BV(0);
     9b8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     9bc:	81 60       	ori	r24, 0x01	; 1
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:89
  calculatedPointer=&portDFunctions.pinZero + portBitNumber;
  *calculatedPointer = userFunction;
#endif
  portSnapshotD=*portInputRegister(portNumber);
  pcmsk=&PCMSK3;
  PCICR |= _BV(3);
     9be:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1351
#elif defined EI_ATTINY25
#include "utility/ei_PinChangeTiny25.h"
#endif
#undef EI_SECTION_ASSIGNFUNCTIONSREGISTERS

    *pcmsk |= portMask;  // appropriate PCMSKn bit is set, e.g. this could be PCMSK1 |= portMask;
     9c2:	a0 91 91 04 	lds	r26, 0x0491	; 0x800491 <pcmsk>
     9c6:	b0 91 92 04 	lds	r27, 0x0492	; 0x800492 <pcmsk+0x1>
     9ca:	ec 91       	ld	r30, X
     9cc:	2e 2b       	or	r18, r30
     9ce:	2c 93       	st	X, r18
     9d0:	08 95       	ret
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:8
if (portNumber==PA) {
  risingPinsPORTA |= portMask;
}
#endif
#ifndef EI_NOTPORTB
if (portNumber==PB) {
     9d2:	32 30       	cpi	r19, 0x02	; 2
     9d4:	59 f4       	brne	.+22     	; 0x9ec <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0xa4>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:9
  risingPinsPORTB |= portMask;
     9d6:	40 91 aa 04 	lds	r20, 0x04AA	; 0x8004aa <risingPinsPORTB>
     9da:	42 2b       	or	r20, r18
     9dc:	40 93 aa 04 	sts	0x04AA, r20	; 0x8004aa <risingPinsPORTB>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:32
  fallingPinsPORTA |= portMask;
}
#endif
#ifndef EI_NOTPORTB
if (portNumber==PB) {
  fallingPinsPORTB |= portMask;
     9e0:	40 91 a6 04 	lds	r20, 0x04A6	; 0x8004a6 <fallingPinsPORTB>
     9e4:	42 2b       	or	r20, r18
     9e6:	40 93 a6 04 	sts	0x04A6, r20	; 0x8004a6 <fallingPinsPORTB>
     9ea:	cb cf       	rjmp	.-106    	; 0x982 <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0x3a>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:13
if (portNumber==PB) {
  risingPinsPORTB |= portMask;
}
#endif
#ifndef EI_NOTPORTC
if (portNumber==PC) {
     9ec:	33 30       	cpi	r19, 0x03	; 3
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0xaa>
     9f0:	65 c0       	rjmp	.+202    	; 0xabc <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0x174>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:14
  risingPinsPORTC |= portMask;
     9f2:	40 91 a9 04 	lds	r20, 0x04A9	; 0x8004a9 <risingPinsPORTC>
     9f6:	42 2b       	or	r20, r18
     9f8:	40 93 a9 04 	sts	0x04A9, r20	; 0x8004a9 <risingPinsPORTC>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:37
  fallingPinsPORTB |= portMask;
}
#endif
#ifndef EI_NOTPORTC
if (portNumber==PC) {
  fallingPinsPORTC |= portMask;
     9fc:	40 91 a5 04 	lds	r20, 0x04A5	; 0x8004a5 <fallingPinsPORTC>
     a00:	42 2b       	or	r20, r18
     a02:	40 93 a5 04 	sts	0x04A5, r20	; 0x8004a5 <fallingPinsPORTC>
     a06:	bd cf       	rjmp	.-134    	; 0x982 <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0x3a>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:19
  risingPinsPORTC |= portMask;
}
#endif
#ifndef EI_NOTPORTD
if (portNumber==PD) {
  risingPinsPORTD |= portMask;
     a08:	40 91 a8 04 	lds	r20, 0x04A8	; 0x8004a8 <risingPinsPORTD>
     a0c:	42 2b       	or	r20, r18
     a0e:	40 93 a8 04 	sts	0x04A8, r20	; 0x8004a8 <risingPinsPORTD>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:42
  fallingPinsPORTC |= portMask;
}
#endif
#ifndef EI_NOTPORTD
if (portNumber==PD) {
  fallingPinsPORTD |= portMask;
     a12:	40 91 a4 04 	lds	r20, 0x04A4	; 0x8004a4 <fallingPinsPORTD>
     a16:	42 2b       	or	r20, r18
     a18:	40 93 a4 04 	sts	0x04A4, r20	; 0x8004a4 <fallingPinsPORTD>
     a1c:	b2 cf       	rjmp	.-156    	; 0x982 <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0x3a>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:60
  pcmsk=&PCMSK0;
  PCICR |= _BV(0);
}
#endif
#ifndef EI_NOTPORTB
if (portNumber==PB) {
     a1e:	32 30       	cpi	r19, 0x02	; 2
     a20:	c1 f4       	brne	.+48     	; 0xa52 <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0x10a>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:62
#ifndef NEEDFORSPEED
  calculatedPointer=&portBFunctions.pinZero + portBitNumber;
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	aa 0f       	add	r26, r26
     a26:	bb 1f       	adc	r27, r27
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:63
  *calculatedPointer = userFunction;
     a28:	af 57       	subi	r26, 0x7F	; 127
     a2a:	bb 4f       	sbci	r27, 0xFB	; 251
     a2c:	6d 93       	st	X+, r22
     a2e:	7c 93       	st	X, r23
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:65
#endif
  portSnapshotB=*portInputRegister(portNumber);
     a30:	e3 ec       	ldi	r30, 0xC3	; 195
     a32:	f7 e0       	ldi	r31, 0x07	; 7
     a34:	a5 91       	lpm	r26, Z+
     a36:	b4 91       	lpm	r27, Z
     a38:	8c 91       	ld	r24, X
     a3a:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <portSnapshotB>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:66
  pcmsk=&PCMSK1;
     a3e:	8c e6       	ldi	r24, 0x6C	; 108
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	90 93 92 04 	sts	0x0492, r25	; 0x800492 <pcmsk+0x1>
     a46:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <pcmsk>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:67
  PCICR |= _BV(1);
     a4a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     a4e:	82 60       	ori	r24, 0x02	; 2
     a50:	b6 cf       	rjmp	.-148    	; 0x9be <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0x76>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:71
}
#endif
#ifndef EI_NOTPORTC
if (portNumber==PC) {
     a52:	33 30       	cpi	r19, 0x03	; 3
     a54:	c1 f4       	brne	.+48     	; 0xa86 <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0x13e>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:73
#ifndef NEEDFORSPEED
  calculatedPointer=&portCFunctions.pinZero + portBitNumber;
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	aa 0f       	add	r26, r26
     a5a:	bb 1f       	adc	r27, r27
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:74
  *calculatedPointer = userFunction;
     a5c:	a0 59       	subi	r26, 0x90	; 144
     a5e:	bb 4f       	sbci	r27, 0xFB	; 251
     a60:	6d 93       	st	X+, r22
     a62:	7c 93       	st	X, r23
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:76
#endif
  portSnapshotC=*portInputRegister(portNumber);
     a64:	e5 ec       	ldi	r30, 0xC5	; 197
     a66:	f7 e0       	ldi	r31, 0x07	; 7
     a68:	a5 91       	lpm	r26, Z+
     a6a:	b4 91       	lpm	r27, Z
     a6c:	8c 91       	ld	r24, X
     a6e:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <portSnapshotC>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:77
  pcmsk=&PCMSK2;
     a72:	8d e6       	ldi	r24, 0x6D	; 109
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	90 93 92 04 	sts	0x0492, r25	; 0x800492 <pcmsk+0x1>
     a7a:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <pcmsk>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:78
  PCICR |= _BV(2);
     a7e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     a82:	84 60       	ori	r24, 0x04	; 4
     a84:	9c cf       	rjmp	.-200    	; 0x9be <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0x76>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:82
}
#endif
#ifndef EI_NOTPORTD
if (portNumber==PD) {
     a86:	34 30       	cpi	r19, 0x04	; 4
     a88:	09 f0       	breq	.+2      	; 0xa8c <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0x144>
     a8a:	9b cf       	rjmp	.-202    	; 0x9c2 <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0x7a>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:84
#ifndef NEEDFORSPEED
  calculatedPointer=&portDFunctions.pinZero + portBitNumber;
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	aa 0f       	add	r26, r26
     a90:	bb 1f       	adc	r27, r27
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:85
  *calculatedPointer = userFunction;
     a92:	a1 5a       	subi	r26, 0xA1	; 161
     a94:	bb 4f       	sbci	r27, 0xFB	; 251
     a96:	6d 93       	st	X+, r22
     a98:	7c 93       	st	X, r23
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:87
#endif
  portSnapshotD=*portInputRegister(portNumber);
     a9a:	e7 ec       	ldi	r30, 0xC7	; 199
     a9c:	f7 e0       	ldi	r31, 0x07	; 7
     a9e:	a5 91       	lpm	r26, Z+
     aa0:	b4 91       	lpm	r27, Z
     aa2:	8c 91       	ld	r24, X
     aa4:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <portSnapshotD>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:88
  pcmsk=&PCMSK3;
     aa8:	83 e7       	ldi	r24, 0x73	; 115
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	90 93 92 04 	sts	0x0492, r25	; 0x800492 <pcmsk+0x1>
     ab0:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <pcmsk>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:89
  PCICR |= _BV(3);
     ab4:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     ab8:	88 60       	ori	r24, 0x08	; 8
     aba:	81 cf       	rjmp	.-254    	; 0x9be <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0x76>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:18
if (portNumber==PC) {
  risingPinsPORTC |= portMask;
}
#endif
#ifndef EI_NOTPORTD
if (portNumber==PD) {
     abc:	34 30       	cpi	r19, 0x04	; 4
     abe:	09 f4       	brne	.+2      	; 0xac2 <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0x17a>
     ac0:	a3 cf       	rjmp	.-186    	; 0xa08 <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0xc0>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:31
if (portNumber==PA) {
  fallingPinsPORTA |= portMask;
}
#endif
#ifndef EI_NOTPORTB
if (portNumber==PB) {
     ac2:	32 30       	cpi	r19, 0x02	; 2
     ac4:	09 f4       	brne	.+2      	; 0xac8 <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0x180>
     ac6:	8c cf       	rjmp	.-232    	; 0x9e0 <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0x98>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:36
  fallingPinsPORTB |= portMask;
}
#endif
#ifndef EI_NOTPORTC
if (portNumber==PC) {
     ac8:	33 30       	cpi	r19, 0x03	; 3
     aca:	09 f4       	brne	.+2      	; 0xace <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0x186>
     acc:	97 cf       	rjmp	.-210    	; 0x9fc <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0xb4>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/utility/ei_PinChange1284.h:41
  fallingPinsPORTC |= portMask;
}
#endif
#ifndef EI_NOTPORTD
if (portNumber==PD) {
     ace:	34 30       	cpi	r19, 0x04	; 4
     ad0:	09 f4       	brne	.+2      	; 0xad4 <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0x18c>
     ad2:	9f cf       	rjmp	.-194    	; 0xa12 <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0xca>
     ad4:	56 cf       	rjmp	.-340    	; 0x982 <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]+0x3a>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1386
#undef EI_SECTION_ENABLEEXTERNAL

    SREG=origSREG;
#endif
  }
}
     ad6:	08 95       	ret

00000ad8 <SPIClass::beginTransaction(SPISettings) [clone .constprop.139]>:
_ZN8SPIClass16beginTransactionE11SPISettings.constprop.139():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\SPI\src/SPI.h:206
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
     ad8:	8c bd       	out	0x2c, r24	; 44
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\SPI\src/SPI.h:207
    SPSR = settings.spsr;
     ada:	9d bd       	out	0x2d, r25	; 45
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\SPI\src/SPI.h:208
  }
     adc:	08 95       	ret

00000ade <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:366
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
     ade:	08 95       	ret

00000ae0 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:351
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
     ae0:	08 95       	ret

00000ae2 <twi_readFrom.part.0.constprop.88>:
twi_readFrom.part.0.constprop.88():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:160
 *          data: pointer to byte array
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
     ae2:	98 2f       	mov	r25, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:177
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    }
  #else
    while(TWI_READY != twi_state){
     ae4:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <twi_state>
     ae8:	81 11       	cpse	r24, r1
     aea:	fc cf       	rjmp	.-8      	; 0xae4 <twi_readFrom.part.0.constprop.88+0x2>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:181
      continue;
    }
  #endif
  twi_state = TWI_MRX;
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <twi_state>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:182
  twi_sendStop = sendStop;
     af2:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <twi_sendStop>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:184
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
     af6:	2f ef       	ldi	r18, 0xFF	; 255
     af8:	20 93 b2 04 	sts	0x04B2, r18	; 0x8004b2 <twi_error>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:187

  // initialize buffer iteration vars
  twi_masterBuffer = data;
     afc:	28 e3       	ldi	r18, 0x38	; 56
     afe:	34 e0       	ldi	r19, 0x04	; 4
     b00:	30 93 b1 04 	sts	0x04B1, r19	; 0x8004b1 <twi_masterBuffer+0x1>
     b04:	20 93 b0 04 	sts	0x04B0, r18	; 0x8004b0 <twi_masterBuffer>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:188
  twi_masterBufferIndex = 0;
     b08:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <twi_masterBufferIndex>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:189
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
     b0c:	2f ef       	ldi	r18, 0xFF	; 255
     b0e:	26 0f       	add	r18, r22
     b10:	20 93 ae 04 	sts	0x04AE, r18	; 0x8004ae <twi_masterBufferLength>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:197
  // Therefore we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
     b14:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <twi_slarw>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:198
  twi_slarw |= address << 1;
     b18:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <twi_slarw>
     b1c:	99 0f       	add	r25, r25
     b1e:	98 2b       	or	r25, r24
     b20:	90 93 ad 04 	sts	0x04AD, r25	; 0x8004ad <twi_slarw>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:200

  if (true == twi_inRepStart) {
     b24:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <twi_inRepStart>
     b28:	81 30       	cpi	r24, 0x01	; 1
     b2a:	c9 f4       	brne	.+50     	; 0xb5e <twi_readFrom.part.0.constprop.88+0x7c>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:207
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
     b2c:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <twi_inRepStart>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:219
          return 0;
        }
      } while(TWCR & _BV(TWWC));
    #else
      do {
        TWDR = twi_slarw;
     b30:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <twi_slarw>
     b34:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:220
      } while(TWCR & _BV(TWWC));
     b38:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     b3c:	83 fd       	sbrc	r24, 3
     b3e:	f8 cf       	rjmp	.-16     	; 0xb30 <twi_readFrom.part.0.constprop.88+0x4e>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:222
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
     b40:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:226
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     b42:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:238
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    }
  #else
    while(TWI_MRX == twi_state){
     b46:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <twi_state>
     b4a:	81 30       	cpi	r24, 0x01	; 1
     b4c:	e1 f3       	breq	.-8      	; 0xb46 <twi_readFrom.part.0.constprop.88+0x64>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:243
      continue;
    }
  #endif

  if (twi_masterBufferIndex < length)
     b4e:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <twi_masterBufferIndex>
     b52:	86 17       	cp	r24, r22
     b54:	10 f4       	brcc	.+4      	; 0xb5a <twi_readFrom.part.0.constprop.88+0x78>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:244
    length = twi_masterBufferIndex;
     b56:	60 91 af 04 	lds	r22, 0x04AF	; 0x8004af <twi_masterBufferIndex>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:247

  return length;
}
     b5a:	86 2f       	mov	r24, r22
     b5c:	08 95       	ret
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:226
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     b5e:	85 ee       	ldi	r24, 0xE5	; 229
     b60:	f0 cf       	rjmp	.-32     	; 0xb42 <twi_readFrom.part.0.constprop.88+0x60>

00000b62 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::getUserStorage() [clone .constprop.76]>:
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E14getUserStorageEv.constprop.76():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:70
  void dumpSize () {
    DPRINT(F("Address Space: "));DDEC(this->keystore().address());DPRINT(F(" - "));DDECLN(getUserStorage().getAddress());
  }

  // get object to access free EEPROM after device data
  UserStorage getUserStorage () {
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7channelEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:182
    this->led().set(LedStates::pairing);
    this->activity().stayAwake( seconds2ticks(20) ); // 20 seconds
  }

  ChannelType& channel(uint8_t ch) {
    return *devchannels[ch-1];
     b6a:	e0 91 49 06 	lds	r30, 0x0649	; 0x800649 <sdev+0x2d>
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	ee 0f       	add	r30, r30
     b72:	ff 1f       	adc	r31, r31
     b74:	e6 5b       	subi	r30, 0xB6	; 182
     b76:	f9 4f       	sbci	r31, 0xF9	; 249
     b78:	c0 81       	ld	r28, Z
     b7a:	d1 81       	ldd	r29, Z+1	; 0x01
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E14getUserStorageEv.constprop.76():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:72
  }

  // get object to access free EEPROM after device data
  UserStorage getUserStorage () {
    ChannelType& ch = channel(this->channels());
    return UserStorage(ch.address() + ch.size());
     b7c:	e8 81       	ld	r30, Y
     b7e:	f9 81       	ldd	r31, Y+1	; 0x01
     b80:	02 84       	ldd	r0, Z+10	; 0x0a
     b82:	f3 85       	ldd	r31, Z+11	; 0x0b
     b84:	e0 2d       	mov	r30, r0
     b86:	ce 01       	movw	r24, r28
     b88:	09 95       	icall
     b8a:	8c 01       	movw	r16, r24
     b8c:	e8 81       	ld	r30, Y
     b8e:	f9 81       	ldd	r31, Y+1	; 0x01
     b90:	06 80       	ldd	r0, Z+6	; 0x06
     b92:	f7 81       	ldd	r31, Z+7	; 0x07
     b94:	e0 2d       	mov	r30, r0
     b96:	ce 01       	movw	r24, r28
     b98:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:73
  }
     b9a:	80 0f       	add	r24, r16
     b9c:	91 1f       	adc	r25, r17
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	1f 91       	pop	r17
     ba4:	0f 91       	pop	r16
     ba6:	08 95       	ret

00000ba8 <nothing>:
nothing():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WInterrupts.c:36

#include "wiring_private.h"

static void nothing(void)
{
}
     ba8:	08 95       	ret

00000baa <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::configChanged()>:
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E13configChangedEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:373

  uint8_t nextcount () {
    return ++msgcount;
  }

  virtual void configChanged () {}
     baa:	08 95       	ret

00000bac <Print::print(__FlashStringHelper const*)>:
_ZN5Print5printEPK19__FlashStringHelper():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:45
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
     bac:	ef 92       	push	r14
     bae:	ff 92       	push	r15
     bb0:	0f 93       	push	r16
     bb2:	1f 93       	push	r17
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	8c 01       	movw	r16, r24
     bba:	7b 01       	movw	r14, r22
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:47
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
     bbc:	d0 e0       	ldi	r29, 0x00	; 0
     bbe:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:49
  while (1) {
    unsigned char c = pgm_read_byte(p++);
     bc0:	f7 01       	movw	r30, r14
     bc2:	ec 0f       	add	r30, r28
     bc4:	fd 1f       	adc	r31, r29
     bc6:	64 91       	lpm	r22, Z
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:50
    if (c == 0) break;
     bc8:	66 23       	and	r22, r22
     bca:	61 f0       	breq	.+24     	; 0xbe4 <Print::print(__FlashStringHelper const*)+0x38>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:51
    if (write(c)) n++;
     bcc:	d8 01       	movw	r26, r16
     bce:	ed 91       	ld	r30, X+
     bd0:	fc 91       	ld	r31, X
     bd2:	01 90       	ld	r0, Z+
     bd4:	f0 81       	ld	r31, Z
     bd6:	e0 2d       	mov	r30, r0
     bd8:	c8 01       	movw	r24, r16
     bda:	09 95       	icall
     bdc:	89 2b       	or	r24, r25
     bde:	11 f0       	breq	.+4      	; 0xbe4 <Print::print(__FlashStringHelper const*)+0x38>
     be0:	21 96       	adiw	r28, 0x01	; 1
     be2:	ee cf       	rjmp	.-36     	; 0xbc0 <Print::print(__FlashStringHelper const*)+0x14>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:55
    else break;
  }
  return n;
}
     be4:	ce 01       	movw	r24, r28
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	1f 91       	pop	r17
     bec:	0f 91       	pop	r16
     bee:	ff 90       	pop	r15
     bf0:	ef 90       	pop	r14
     bf2:	08 95       	ret

00000bf4 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     bf4:	af 92       	push	r10
     bf6:	bf 92       	push	r11
     bf8:	cf 92       	push	r12
     bfa:	df 92       	push	r13
     bfc:	ef 92       	push	r14
     bfe:	ff 92       	push	r15
     c00:	0f 93       	push	r16
     c02:	1f 93       	push	r17
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	6c 01       	movw	r12, r24
     c0a:	7b 01       	movw	r14, r22
     c0c:	8b 01       	movw	r16, r22
     c0e:	04 0f       	add	r16, r20
     c10:	15 1f       	adc	r17, r21
     c12:	eb 01       	movw	r28, r22
     c14:	5e 01       	movw	r10, r28
     c16:	ae 18       	sub	r10, r14
     c18:	bf 08       	sbc	r11, r15
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     c1a:	c0 17       	cp	r28, r16
     c1c:	d1 07       	cpc	r29, r17
     c1e:	59 f0       	breq	.+22     	; 0xc36 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     c20:	69 91       	ld	r22, Y+
     c22:	d6 01       	movw	r26, r12
     c24:	ed 91       	ld	r30, X+
     c26:	fc 91       	ld	r31, X
     c28:	01 90       	ld	r0, Z+
     c2a:	f0 81       	ld	r31, Z
     c2c:	e0 2d       	mov	r30, r0
     c2e:	c6 01       	movw	r24, r12
     c30:	09 95       	icall
     c32:	89 2b       	or	r24, r25
     c34:	79 f7       	brne	.-34     	; 0xc14 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     c36:	c5 01       	movw	r24, r10
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	1f 91       	pop	r17
     c3e:	0f 91       	pop	r16
     c40:	ff 90       	pop	r15
     c42:	ef 90       	pop	r14
     c44:	df 90       	pop	r13
     c46:	cf 90       	pop	r12
     c48:	bf 90       	pop	r11
     c4a:	af 90       	pop	r10
     c4c:	08 95       	ret

00000c4e <Print::print(String const&) [clone .constprop.107]>:
_ZN5Print5printERK6String.constprop.107():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.h:58
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
     c4e:	fc 01       	movw	r30, r24
     c50:	44 81       	ldd	r20, Z+4	; 0x04
     c52:	55 81       	ldd	r21, Z+5	; 0x05
     c54:	60 81       	ld	r22, Z
     c56:	71 81       	ldd	r23, Z+1	; 0x01
     c58:	82 ea       	ldi	r24, 0xA2	; 162
     c5a:	97 e0       	ldi	r25, 0x07	; 7
     c5c:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <Print::write(unsigned char const*, unsigned int)>

00000c60 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     c60:	fc 01       	movw	r30, r24
     c62:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     c64:	44 8d       	ldd	r20, Z+28	; 0x1c
     c66:	25 2f       	mov	r18, r21
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	84 2f       	mov	r24, r20
     c6c:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     c6e:	82 1b       	sub	r24, r18
     c70:	93 0b       	sbc	r25, r19
     c72:	54 17       	cp	r21, r20
     c74:	10 f0       	brcs	.+4      	; 0xc7a <HardwareSerial::availableForWrite()+0x1a>
     c76:	cf 96       	adiw	r24, 0x3f	; 63
     c78:	08 95       	ret
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     c7a:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
     c7c:	08 95       	ret

00000c7e <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     c7e:	fc 01       	movw	r30, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     c80:	91 8d       	ldd	r25, Z+25	; 0x19
     c82:	82 8d       	ldd	r24, Z+26	; 0x1a
     c84:	98 17       	cp	r25, r24
     c86:	61 f0       	breq	.+24     	; 0xca0 <HardwareSerial::read()+0x22>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     c88:	a2 8d       	ldd	r26, Z+26	; 0x1a
     c8a:	ae 0f       	add	r26, r30
     c8c:	bf 2f       	mov	r27, r31
     c8e:	b1 1d       	adc	r27, r1
     c90:	5d 96       	adiw	r26, 0x1d	; 29
     c92:	8c 91       	ld	r24, X
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     c94:	92 8d       	ldd	r25, Z+26	; 0x1a
     c96:	9f 5f       	subi	r25, 0xFF	; 255
     c98:	9f 73       	andi	r25, 0x3F	; 63
     c9a:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	08 95       	ret
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     ca0:	8f ef       	ldi	r24, 0xFF	; 255
     ca2:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     ca4:	08 95       	ret

00000ca6 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     ca6:	fc 01       	movw	r30, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     ca8:	91 8d       	ldd	r25, Z+25	; 0x19
     caa:	82 8d       	ldd	r24, Z+26	; 0x1a
     cac:	98 17       	cp	r25, r24
     cae:	31 f0       	breq	.+12     	; 0xcbc <HardwareSerial::peek()+0x16>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     cb0:	82 8d       	ldd	r24, Z+26	; 0x1a
     cb2:	e8 0f       	add	r30, r24
     cb4:	f1 1d       	adc	r31, r1
     cb6:	85 8d       	ldd	r24, Z+29	; 0x1d
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	08 95       	ret
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     cbc:	8f ef       	ldi	r24, 0xFF	; 255
     cbe:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     cc0:	08 95       	ret

00000cc2 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     cc2:	fc 01       	movw	r30, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     cc4:	91 8d       	ldd	r25, Z+25	; 0x19
     cc6:	22 8d       	ldd	r18, Z+26	; 0x1a
     cc8:	89 2f       	mov	r24, r25
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	80 5c       	subi	r24, 0xC0	; 192
     cce:	9f 4f       	sbci	r25, 0xFF	; 255
     cd0:	82 1b       	sub	r24, r18
     cd2:	91 09       	sbc	r25, r1
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
     cd4:	8f 73       	andi	r24, 0x3F	; 63
     cd6:	99 27       	eor	r25, r25
     cd8:	08 95       	ret

00000cda <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     cda:	89 ed       	ldi	r24, 0xD9	; 217
     cdc:	94 e0       	ldi	r25, 0x04	; 4
     cde:	0e 94 61 06 	call	0xcc2	; 0xcc2 <HardwareSerial::available()>
     ce2:	21 e0       	ldi	r18, 0x01	; 1
     ce4:	89 2b       	or	r24, r25
     ce6:	09 f4       	brne	.+2      	; 0xcea <Serial0_available()+0x10>
     ce8:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
     cea:	82 2f       	mov	r24, r18
     cec:	08 95       	ret

00000cee <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     cee:	fc 01       	movw	r30, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     cf0:	a4 8d       	ldd	r26, Z+28	; 0x1c
     cf2:	a8 0f       	add	r26, r24
     cf4:	b9 2f       	mov	r27, r25
     cf6:	b1 1d       	adc	r27, r1
     cf8:	a3 5a       	subi	r26, 0xA3	; 163
     cfa:	bf 4f       	sbci	r27, 0xFF	; 255
     cfc:	2c 91       	ld	r18, X
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     cfe:	84 8d       	ldd	r24, Z+28	; 0x1c
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	01 96       	adiw	r24, 0x01	; 1
     d04:	8f 73       	andi	r24, 0x3F	; 63
     d06:	99 27       	eor	r25, r25
     d08:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     d0a:	a6 89       	ldd	r26, Z+22	; 0x16
     d0c:	b7 89       	ldd	r27, Z+23	; 0x17
     d0e:	2c 93       	st	X, r18
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     d10:	a0 89       	ldd	r26, Z+16	; 0x10
     d12:	b1 89       	ldd	r27, Z+17	; 0x11
     d14:	8c 91       	ld	r24, X
     d16:	83 70       	andi	r24, 0x03	; 3
     d18:	80 64       	ori	r24, 0x40	; 64
     d1a:	8c 93       	st	X, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     d1c:	93 8d       	ldd	r25, Z+27	; 0x1b
     d1e:	84 8d       	ldd	r24, Z+28	; 0x1c
     d20:	98 13       	cpse	r25, r24
     d22:	06 c0       	rjmp	.+12     	; 0xd30 <HardwareSerial::_tx_udr_empty_irq()+0x42>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     d24:	02 88       	ldd	r0, Z+18	; 0x12
     d26:	f3 89       	ldd	r31, Z+19	; 0x13
     d28:	e0 2d       	mov	r30, r0
     d2a:	80 81       	ld	r24, Z
     d2c:	8f 7d       	andi	r24, 0xDF	; 223
     d2e:	80 83       	st	Z, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     d30:	08 95       	ret

00000d32 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     d32:	ef 92       	push	r14
     d34:	ff 92       	push	r15
     d36:	0f 93       	push	r16
     d38:	1f 93       	push	r17
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	ec 01       	movw	r28, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     d44:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d46:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d48:	98 13       	cpse	r25, r24
     d4a:	1a c0       	rjmp	.+52     	; 0xd80 <HardwareSerial::write(unsigned char)+0x4e>
     d4c:	e8 89       	ldd	r30, Y+16	; 0x10
     d4e:	f9 89       	ldd	r31, Y+17	; 0x11
     d50:	80 81       	ld	r24, Z
     d52:	85 ff       	sbrs	r24, 5
     d54:	15 c0       	rjmp	.+42     	; 0xd80 <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     d56:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d58:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     d5a:	ee 89       	ldd	r30, Y+22	; 0x16
     d5c:	ff 89       	ldd	r31, Y+23	; 0x17
     d5e:	60 83       	st	Z, r22
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     d60:	e8 89       	ldd	r30, Y+16	; 0x10
     d62:	f9 89       	ldd	r31, Y+17	; 0x11
     d64:	80 81       	ld	r24, Z
     d66:	83 70       	andi	r24, 0x03	; 3
     d68:	80 64       	ori	r24, 0x40	; 64
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     d6a:	80 83       	st	Z, r24
__iRestore():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d6c:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	ff 90       	pop	r15
     d7c:	ef 90       	pop	r14
     d7e:	08 95       	ret
     d80:	f6 2e       	mov	r15, r22
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     d82:	0b 8d       	ldd	r16, Y+27	; 0x1b
     d84:	10 e0       	ldi	r17, 0x00	; 0
     d86:	0f 5f       	subi	r16, 0xFF	; 255
     d88:	1f 4f       	sbci	r17, 0xFF	; 255
     d8a:	0f 73       	andi	r16, 0x3F	; 63
     d8c:	11 27       	eor	r17, r17
     d8e:	e0 2e       	mov	r14, r16
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     d90:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d92:	8e 11       	cpse	r24, r14
     d94:	0c c0       	rjmp	.+24     	; 0xdae <HardwareSerial::write(unsigned char)+0x7c>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	07 fc       	sbrc	r0, 7
     d9a:	fa cf       	rjmp	.-12     	; 0xd90 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     d9c:	e8 89       	ldd	r30, Y+16	; 0x10
     d9e:	f9 89       	ldd	r31, Y+17	; 0x11
     da0:	80 81       	ld	r24, Z
     da2:	85 ff       	sbrs	r24, 5
     da4:	f5 cf       	rjmp	.-22     	; 0xd90 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     da6:	ce 01       	movw	r24, r28
     da8:	0e 94 77 06 	call	0xcee	; 0xcee <HardwareSerial::_tx_udr_empty_irq()>
     dac:	f1 cf       	rjmp	.-30     	; 0xd90 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     dae:	eb 8d       	ldd	r30, Y+27	; 0x1b
     db0:	ec 0f       	add	r30, r28
     db2:	fd 2f       	mov	r31, r29
     db4:	f1 1d       	adc	r31, r1
     db6:	e3 5a       	subi	r30, 0xA3	; 163
     db8:	ff 4f       	sbci	r31, 0xFF	; 255
     dba:	f0 82       	st	Z, r15
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     dbc:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     dbe:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     dc0:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     dc2:	ea 89       	ldd	r30, Y+18	; 0x12
     dc4:	fb 89       	ldd	r31, Y+19	; 0x13
     dc6:	80 81       	ld	r24, Z
     dc8:	80 62       	ori	r24, 0x20	; 32
     dca:	cf cf       	rjmp	.-98     	; 0xd6a <HardwareSerial::write(unsigned char)+0x38>

00000dcc <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	ec 01       	movw	r28, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     dd2:	88 8d       	ldd	r24, Y+24	; 0x18
     dd4:	88 23       	and	r24, r24
     dd6:	b9 f0       	breq	.+46     	; 0xe06 <HardwareSerial::flush()+0x3a>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     dd8:	aa 89       	ldd	r26, Y+18	; 0x12
     dda:	bb 89       	ldd	r27, Y+19	; 0x13
     ddc:	e8 89       	ldd	r30, Y+16	; 0x10
     dde:	f9 89       	ldd	r31, Y+17	; 0x11
     de0:	8c 91       	ld	r24, X
     de2:	85 fd       	sbrc	r24, 5
     de4:	03 c0       	rjmp	.+6      	; 0xdec <HardwareSerial::flush()+0x20>
     de6:	80 81       	ld	r24, Z
     de8:	86 fd       	sbrc	r24, 6
     dea:	0d c0       	rjmp	.+26     	; 0xe06 <HardwareSerial::flush()+0x3a>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	07 fc       	sbrc	r0, 7
     df0:	f7 cf       	rjmp	.-18     	; 0xde0 <HardwareSerial::flush()+0x14>
     df2:	8c 91       	ld	r24, X
     df4:	85 ff       	sbrs	r24, 5
     df6:	f2 cf       	rjmp	.-28     	; 0xddc <HardwareSerial::flush()+0x10>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     df8:	80 81       	ld	r24, Z
     dfa:	85 ff       	sbrs	r24, 5
     dfc:	ed cf       	rjmp	.-38     	; 0xdd8 <HardwareSerial::flush()+0xc>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     dfe:	ce 01       	movw	r24, r28
     e00:	0e 94 77 06 	call	0xcee	; 0xcee <HardwareSerial::_tx_udr_empty_irq()>
     e04:	e9 cf       	rjmp	.-46     	; 0xdd8 <HardwareSerial::flush()+0xc>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	08 95       	ret

00000e0c <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	89 2b       	or	r24, r25
     e12:	29 f0       	breq	.+10     	; 0xe1e <serialEventRun()+0x12>
     e14:	0e 94 6d 06 	call	0xcda	; 0xcda <Serial0_available()>
     e18:	81 11       	cpse	r24, r1
     e1a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:70
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	89 2b       	or	r24, r25
     e24:	49 f0       	breq	.+18     	; 0xe38 <serialEventRun()+0x2c>
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	89 2b       	or	r24, r25
     e2c:	29 f0       	breq	.+10     	; 0xe38 <serialEventRun()+0x2c>
     e2e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     e32:	81 11       	cpse	r24, r1
     e34:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     e38:	08 95       	ret

00000e3a <turnOffPWM>:
turnOffPWM():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     e3a:	82 50       	subi	r24, 0x02	; 2
     e3c:	8a 30       	cpi	r24, 0x0A	; 10
     e3e:	88 f5       	brcc	.+98     	; 0xea2 <turnOffPWM+0x68>
     e40:	e8 2f       	mov	r30, r24
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	ea 5d       	subi	r30, 0xDA	; 218
     e46:	f8 4f       	sbci	r31, 0xF8	; 248
     e48:	0c 94 19 51 	jmp	0xa232	; 0xa232 <__tablejump2__>
     e4c:	4e 07       	cpc	r20, r30
     e4e:	52 07       	cpc	r21, r18
     e50:	30 07       	cpc	r19, r16
     e52:	36 07       	cpc	r19, r22
     e54:	51 07       	cpc	r21, r17
     e56:	51 07       	cpc	r21, r17
     e58:	3a 07       	cpc	r19, r26
     e5a:	40 07       	cpc	r20, r16
     e5c:	44 07       	cpc	r20, r20
     e5e:	4a 07       	cpc	r20, r26
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     e60:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     e64:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     e66:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     e6a:	08 95       	ret
     e6c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     e70:	8f 7d       	andi	r24, 0xDF	; 223
     e72:	f9 cf       	rjmp	.-14     	; 0xe66 <turnOffPWM+0x2c>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     e74:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     e78:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     e7a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     e7e:	08 95       	ret
     e80:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     e84:	8f 7d       	andi	r24, 0xDF	; 223
     e86:	f9 cf       	rjmp	.-14     	; 0xe7a <turnOffPWM+0x40>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
     e88:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     e8c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
     e8e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     e92:	08 95       	ret
     e94:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     e98:	8f 7d       	andi	r24, 0xDF	; 223
     e9a:	f9 cf       	rjmp	.-14     	; 0xe8e <turnOffPWM+0x54>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     e9c:	84 b5       	in	r24, 0x24	; 36
     e9e:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     ea0:	84 bd       	out	0x24, r24	; 36
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
     ea2:	08 95       	ret
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     ea4:	84 b5       	in	r24, 0x24	; 36
     ea6:	8f 7d       	andi	r24, 0xDF	; 223
     ea8:	fb cf       	rjmp	.-10     	; 0xea0 <turnOffPWM+0x66>

00000eaa <digitalRead>:
digitalRead():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	f9 01       	movw	r30, r18
     eb4:	ed 5b       	subi	r30, 0xBD	; 189
     eb6:	f9 4f       	sbci	r31, 0xF9	; 249
     eb8:	84 91       	lpm	r24, Z
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     eba:	f9 01       	movw	r30, r18
     ebc:	e7 5f       	subi	r30, 0xF7	; 247
     ebe:	f7 4f       	sbci	r31, 0xF7	; 247
     ec0:	d4 91       	lpm	r29, Z
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     ec2:	f9 01       	movw	r30, r18
     ec4:	e7 51       	subi	r30, 0x17	; 23
     ec6:	f8 4f       	sbci	r31, 0xF8	; 248
     ec8:	c4 91       	lpm	r28, Z
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     eca:	cc 23       	and	r28, r28
     ecc:	a1 f0       	breq	.+40     	; 0xef6 <digitalRead+0x4c>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     ece:	81 11       	cpse	r24, r1
     ed0:	0e 94 1d 07 	call	0xe3a	; 0xe3a <turnOffPWM>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     ed4:	ec 2f       	mov	r30, r28
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	ee 0f       	add	r30, r30
     eda:	ff 1f       	adc	r31, r31
     edc:	e1 54       	subi	r30, 0x41	; 65
     ede:	f8 4f       	sbci	r31, 0xF8	; 248
     ee0:	a5 91       	lpm	r26, Z+
     ee2:	b4 91       	lpm	r27, Z
     ee4:	ec 91       	ld	r30, X
     ee6:	ed 23       	and	r30, r29
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	09 f4       	brne	.+2      	; 0xef0 <digitalRead+0x46>
     eee:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	08 95       	ret
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	fa cf       	rjmp	.-12     	; 0xef0 <digitalRead+0x46>

00000efc <digitalWrite>:
digitalWrite():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     efc:	1f 93       	push	r17
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	f9 01       	movw	r30, r18
     f08:	ed 5b       	subi	r30, 0xBD	; 189
     f0a:	f9 4f       	sbci	r31, 0xF9	; 249
     f0c:	84 91       	lpm	r24, Z
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     f0e:	f9 01       	movw	r30, r18
     f10:	e7 5f       	subi	r30, 0xF7	; 247
     f12:	f7 4f       	sbci	r31, 0xF7	; 247
     f14:	d4 91       	lpm	r29, Z
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     f16:	f9 01       	movw	r30, r18
     f18:	e7 51       	subi	r30, 0x17	; 23
     f1a:	f8 4f       	sbci	r31, 0xF8	; 248
     f1c:	c4 91       	lpm	r28, Z
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     f1e:	cc 23       	and	r28, r28
     f20:	a9 f0       	breq	.+42     	; 0xf4c <digitalWrite+0x50>
     f22:	16 2f       	mov	r17, r22
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     f24:	81 11       	cpse	r24, r1
     f26:	0e 94 1d 07 	call	0xe3a	; 0xe3a <turnOffPWM>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     f2a:	ec 2f       	mov	r30, r28
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	ee 0f       	add	r30, r30
     f30:	ff 1f       	adc	r31, r31
     f32:	e7 5c       	subi	r30, 0xC7	; 199
     f34:	f9 4f       	sbci	r31, 0xF9	; 249
     f36:	a5 91       	lpm	r26, Z+
     f38:	b4 91       	lpm	r27, Z
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     f3a:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     f3c:	f8 94       	cli
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     f3e:	ec 91       	ld	r30, X
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     f40:	11 11       	cpse	r17, r1
     f42:	08 c0       	rjmp	.+16     	; 0xf54 <digitalWrite+0x58>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     f44:	d0 95       	com	r29
     f46:	de 23       	and	r29, r30
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     f48:	dc 93       	st	X, r29
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     f4a:	8f bf       	out	0x3f, r24	; 63
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:212
}
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	1f 91       	pop	r17
     f52:	08 95       	ret
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     f54:	de 2b       	or	r29, r30
     f56:	f8 cf       	rjmp	.-16     	; 0xf48 <digitalWrite+0x4c>

00000f58 <TwoWire::begin() [clone .constprop.118]>:
_ZN7TwoWire5beginEv.constprop.118():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:61

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
     f58:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <TwoWire::rxBufferIndex>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:62
  rxBufferLength = 0;
     f5c:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <TwoWire::rxBufferLength>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:64

  txBufferIndex = 0;
     f60:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <TwoWire::txBufferIndex>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:65
  txBufferLength = 0;
     f64:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <TwoWire::txBufferLength>
twi_init():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:84
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
     f68:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <twi_state>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:85
  twi_sendStop = true; // default value
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <twi_sendStop>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:86
  twi_inRepStart = false;
     f72:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <twi_inRepStart>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:89

  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
     f76:	61 e0       	ldi	r22, 0x01	; 1
     f78:	81 e1       	ldi	r24, 0x11	; 17
     f7a:	0e 94 7e 07 	call	0xefc	; 0xefc <digitalWrite>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:90
  digitalWrite(SCL, 1);
     f7e:	61 e0       	ldi	r22, 0x01	; 1
     f80:	80 e1       	ldi	r24, 0x10	; 16
     f82:	0e 94 7e 07 	call	0xefc	; 0xefc <digitalWrite>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:93

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     f86:	e9 eb       	ldi	r30, 0xB9	; 185
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	8e 7f       	andi	r24, 0xFE	; 254
     f8e:	80 83       	st	Z, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:94
  cbi(TWSR, TWPS1);
     f90:	80 81       	ld	r24, Z
     f92:	8d 7f       	andi	r24, 0xFD	; 253
     f94:	80 83       	st	Z, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:95
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
     f96:	80 e2       	ldi	r24, 0x20	; 32
     f98:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:103
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
     f9c:	85 e4       	ldi	r24, 0x45	; 69
     f9e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
twi_attachSlaveTxEvent():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:408
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
     fa2:	8f e6       	ldi	r24, 0x6F	; 111
     fa4:	95 e0       	ldi	r25, 0x05	; 5
     fa6:	90 93 5b 04 	sts	0x045B, r25	; 0x80045b <twi_onSlaveTransmit+0x1>
     faa:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <twi_onSlaveTransmit>
twi_attachSlaveRxEvent():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:397
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
     fae:	80 e7       	ldi	r24, 0x70	; 112
     fb0:	95 e0       	ldi	r25, 0x05	; 5
     fb2:	90 93 59 04 	sts	0x0459, r25	; 0x800459 <twi_onSlaveReceive+0x1>
     fb6:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <twi_onSlaveReceive>
_ZN7TwoWire5beginEv.constprop.118():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:70

  twi_init();
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
}
     fba:	08 95       	ret

00000fbc <pinMode>:
pinMode():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	fc 01       	movw	r30, r24
     fc4:	e7 5f       	subi	r30, 0xF7	; 247
     fc6:	f7 4f       	sbci	r31, 0xF7	; 247
     fc8:	24 91       	lpm	r18, Z
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     fca:	87 51       	subi	r24, 0x17	; 23
     fcc:	98 4f       	sbci	r25, 0xF8	; 248
     fce:	fc 01       	movw	r30, r24
     fd0:	84 91       	lpm	r24, Z
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     fd2:	88 23       	and	r24, r24
     fd4:	c9 f0       	breq	.+50     	; 0x1008 <pinMode+0x4c>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	fc 01       	movw	r30, r24
     fde:	eb 58       	subi	r30, 0x8B	; 139
     fe0:	f9 4f       	sbci	r31, 0xF9	; 249
     fe2:	a5 91       	lpm	r26, Z+
     fe4:	b4 91       	lpm	r27, Z
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     fe6:	fc 01       	movw	r30, r24
     fe8:	e7 5c       	subi	r30, 0xC7	; 199
     fea:	f9 4f       	sbci	r31, 0xF9	; 249
     fec:	c5 91       	lpm	r28, Z+
     fee:	d4 91       	lpm	r29, Z
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     ff0:	61 11       	cpse	r22, r1
     ff2:	0d c0       	rjmp	.+26     	; 0x100e <pinMode+0x52>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     ff4:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     ff6:	f8 94       	cli
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     ff8:	8c 91       	ld	r24, X
     ffa:	20 95       	com	r18
     ffc:	82 23       	and	r24, r18
     ffe:	8c 93       	st	X, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    1000:	88 81       	ld	r24, Y
    1002:	28 23       	and	r18, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    1004:	28 83       	st	Y, r18
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    1006:	9f bf       	out	0x3f, r25	; 63
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	08 95       	ret
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    100e:	62 30       	cpi	r22, 0x02	; 2
    1010:	51 f4       	brne	.+20     	; 0x1026 <pinMode+0x6a>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    1012:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    1014:	f8 94       	cli
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    1016:	3c 91       	ld	r19, X
    1018:	82 2f       	mov	r24, r18
    101a:	80 95       	com	r24
    101c:	83 23       	and	r24, r19
    101e:	8c 93       	st	X, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    1020:	e8 81       	ld	r30, Y
    1022:	2e 2b       	or	r18, r30
    1024:	ef cf       	rjmp	.-34     	; 0x1004 <pinMode+0x48>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    1026:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    1028:	f8 94       	cli
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    102a:	ec 91       	ld	r30, X
    102c:	2e 2b       	or	r18, r30
    102e:	2c 93       	st	X, r18
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    1030:	8f bf       	out	0x3f, r24	; 63
    1032:	ea cf       	rjmp	.-44     	; 0x1008 <pinMode+0x4c>

00001034 <analogRead>:
analogRead():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:49
int analogRead(uint8_t pin)
{

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    1034:	88 51       	subi	r24, 0x18	; 24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:68
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    1036:	80 64       	ori	r24, 0x40	; 64
    1038:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:76
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADC)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    103c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1040:	80 64       	ori	r24, 0x40	; 64
    1042:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:79

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC)) {};
    1046:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    104a:	86 fd       	sbrc	r24, 6
    104c:	fc cf       	rjmp	.-8      	; 0x1046 <analogRead+0x12>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:83

  // ADC macro takes care of reading ADC register.
 	// avr-gcc implements the proper reading order: ADCL is read first.
 	return ADC;
    104e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1052:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring_analog.c:87
#else
  return 0;
#endif
}
    1056:	08 95       	ret

00001058 <delayMicroseconds>:
delayMicroseconds():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:761
              // 2 cycles to jump back to delay cycle.
  }

#elif F_CPU >= 8000000L
  // for the 8 MHz clock
  __asm__ __volatile__ (
    1058:	00 00       	nop
    105a:	00 00       	nop
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:767
    "nop" "\n\t"
    "nop"); //just waiting 2 cycles

  // for a 1 and 2 microsecond delay, simply return.  the overhead
  // of the function call takes 16 (18) cycles, which is 2us
  if (us <= 2) return; // = 3 cycles, (4 when true)
    105c:	83 30       	cpi	r24, 0x03	; 3
    105e:	91 05       	cpc	r25, r1
    1060:	28 f0       	brcs	.+10     	; 0x106c <delayMicroseconds+0x14>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:772

  // the following loop takes 1/2 of a microsecond (4 cycles)
  // per iteration, so execute it twice for each microsecond of
  // delay requested.
  us <<= 1; //x2 us, = 2 cycles
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:777

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // us is at least 6 so we can substract 5
  us -= 5; // = 2 cycles
    1066:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	f1 f7       	brne	.-4      	; 0x1068 <delayMicroseconds+0x10>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    106c:	08 95       	ret

0000106e <micros>:
micros():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    106e:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    1070:	f8 94       	cli
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    1072:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <timer0_overflow_count>
    1076:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <timer0_overflow_count+0x1>
    107a:	a0 91 33 04 	lds	r26, 0x0433	; 0x800433 <timer0_overflow_count+0x2>
    107e:	b0 91 34 04 	lds	r27, 0x0434	; 0x800434 <timer0_overflow_count+0x3>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    1082:	26 b5       	in	r18, 0x26	; 38
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1084:	a8 9b       	sbis	0x15, 0	; 21
    1086:	05 c0       	rjmp	.+10     	; 0x1092 <micros+0x24>
    1088:	2f 3f       	cpi	r18, 0xFF	; 255
    108a:	19 f0       	breq	.+6      	; 0x1092 <micros+0x24>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    108c:	01 96       	adiw	r24, 0x01	; 1
    108e:	a1 1d       	adc	r26, r1
    1090:	b1 1d       	adc	r27, r1
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    1092:	3f bf       	out	0x3f, r19	; 63
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    1094:	ba 2f       	mov	r27, r26
    1096:	a9 2f       	mov	r26, r25
    1098:	98 2f       	mov	r25, r24
    109a:	88 27       	eor	r24, r24
    109c:	bc 01       	movw	r22, r24
    109e:	cd 01       	movw	r24, r26
    10a0:	62 0f       	add	r22, r18
    10a2:	71 1d       	adc	r23, r1
    10a4:	81 1d       	adc	r24, r1
    10a6:	91 1d       	adc	r25, r1
    10a8:	43 e0       	ldi	r20, 0x03	; 3
    10aa:	66 0f       	add	r22, r22
    10ac:	77 1f       	adc	r23, r23
    10ae:	88 1f       	adc	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	4a 95       	dec	r20
    10b4:	d1 f7       	brne	.-12     	; 0x10aa <micros+0x3c>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    10b6:	08 95       	ret

000010b8 <delay>:
delay():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    10b8:	8f 92       	push	r8
    10ba:	9f 92       	push	r9
    10bc:	af 92       	push	r10
    10be:	bf 92       	push	r11
    10c0:	cf 92       	push	r12
    10c2:	df 92       	push	r13
    10c4:	ef 92       	push	r14
    10c6:	ff 92       	push	r15
    10c8:	4b 01       	movw	r8, r22
    10ca:	5c 01       	movw	r10, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    10cc:	0e 94 37 08 	call	0x106e	; 0x106e <micros>
    10d0:	6b 01       	movw	r12, r22
    10d2:	7c 01       	movw	r14, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    10d4:	0e 94 37 08 	call	0x106e	; 0x106e <micros>
    10d8:	6c 19       	sub	r22, r12
    10da:	7d 09       	sbc	r23, r13
    10dc:	8e 09       	sbc	r24, r14
    10de:	9f 09       	sbc	r25, r15
    10e0:	68 3e       	cpi	r22, 0xE8	; 232
    10e2:	73 40       	sbci	r23, 0x03	; 3
    10e4:	81 05       	cpc	r24, r1
    10e6:	91 05       	cpc	r25, r1
    10e8:	a8 f3       	brcs	.-22     	; 0x10d4 <delay+0x1c>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:402
      ms--;
    10ea:	21 e0       	ldi	r18, 0x01	; 1
    10ec:	82 1a       	sub	r8, r18
    10ee:	91 08       	sbc	r9, r1
    10f0:	a1 08       	sbc	r10, r1
    10f2:	b1 08       	sbc	r11, r1
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    10f4:	88 ee       	ldi	r24, 0xE8	; 232
    10f6:	c8 0e       	add	r12, r24
    10f8:	83 e0       	ldi	r24, 0x03	; 3
    10fa:	d8 1e       	adc	r13, r24
    10fc:	e1 1c       	adc	r14, r1
    10fe:	f1 1c       	adc	r15, r1
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    1100:	81 14       	cp	r8, r1
    1102:	91 04       	cpc	r9, r1
    1104:	a1 04       	cpc	r10, r1
    1106:	b1 04       	cpc	r11, r1
    1108:	29 f7       	brne	.-54     	; 0x10d4 <delay+0x1c>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    110a:	ff 90       	pop	r15
    110c:	ef 90       	pop	r14
    110e:	df 90       	pop	r13
    1110:	cf 90       	pop	r12
    1112:	bf 90       	pop	r11
    1114:	af 90       	pop	r10
    1116:	9f 90       	pop	r9
    1118:	8f 90       	pop	r8
    111a:	08 95       	ret

0000111c <twi_stop>:
twi_stop():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:436
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    111c:	85 ed       	ldi	r24, 0xD5	; 213
    111e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:456
          return;
        }
      }
    }
  #else
    while(TWCR & _BV(TWSTO)){
    1122:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1126:	84 fd       	sbrc	r24, 4
    1128:	fc cf       	rjmp	.-8      	; 0x1122 <twi_stop+0x6>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:462
      continue;
    }
  #endif

  // update twi state
  twi_state = TWI_READY;
    112a:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <twi_state>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:463
}
    112e:	08 95       	ret

00001130 <twi_transmit>:
twi_transmit():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:371
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    1130:	20 91 09 04 	lds	r18, 0x0409	; 0x800409 <twi_txBufferLength>
    1134:	26 0f       	add	r18, r22
    1136:	33 27       	eor	r19, r19
    1138:	33 1f       	adc	r19, r19
    113a:	21 32       	cpi	r18, 0x21	; 33
    113c:	31 05       	cpc	r19, r1
    113e:	ec f4       	brge	.+58     	; 0x117a <twi_transmit+0x4a>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:376
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    1140:	20 91 b4 04 	lds	r18, 0x04B4	; 0x8004b4 <twi_state>
    1144:	fc 01       	movw	r30, r24
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	24 30       	cpi	r18, 0x04	; 4
    114c:	69 f0       	breq	.+26     	; 0x1168 <twi_transmit+0x38>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:377
    return 2;
    114e:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:387
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
    1150:	08 95       	ret
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:382
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    1152:	a0 91 09 04 	lds	r26, 0x0409	; 0x800409 <twi_txBufferLength>
    1156:	21 91       	ld	r18, Z+
    1158:	ac 01       	movw	r20, r24
    115a:	47 51       	subi	r20, 0x17	; 23
    115c:	5c 4f       	sbci	r21, 0xFC	; 252
    115e:	a4 0f       	add	r26, r20
    1160:	b5 2f       	mov	r27, r21
    1162:	b1 1d       	adc	r27, r1
    1164:	2c 93       	st	X, r18
    1166:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:381
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    1168:	86 17       	cp	r24, r22
    116a:	98 f3       	brcs	.-26     	; 0x1152 <twi_transmit+0x22>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:384
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    116c:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <twi_txBufferLength>
    1170:	68 0f       	add	r22, r24
    1172:	60 93 09 04 	sts	0x0409, r22	; 0x800409 <twi_txBufferLength>
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	08 95       	ret
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:372
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	08 95       	ret

0000117e <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:326
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    117e:	08 95       	ret

00001180 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:316
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
    1180:	e0 91 5d 04 	lds	r30, 0x045D	; 0x80045d <TwoWire::rxBufferIndex>
    1184:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <TwoWire::rxBufferLength>
    1188:	e8 17       	cp	r30, r24
    118a:	30 f4       	brcc	.+12     	; 0x1198 <TwoWire::peek()+0x18>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:317
    value = rxBuffer[rxBufferIndex];
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	e8 5c       	subi	r30, 0xC8	; 200
    1190:	fb 4f       	sbci	r31, 0xFB	; 251
    1192:	80 81       	ld	r24, Z
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	08 95       	ret
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:314
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    1198:	8f ef       	ldi	r24, 0xFF	; 255
    119a:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:321
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    119c:	08 95       	ret

0000119e <TwoWire::read()>:
_ZN7TwoWire4readEv():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:301
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    119e:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <TwoWire::rxBufferIndex>
    11a2:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <TwoWire::rxBufferLength>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:298
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    11a6:	2f ef       	ldi	r18, 0xFF	; 255
    11a8:	3f ef       	ldi	r19, 0xFF	; 255
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:301

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    11aa:	98 17       	cp	r25, r24
    11ac:	48 f4       	brcc	.+18     	; 0x11c0 <TwoWire::read()+0x22>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:302
    value = rxBuffer[rxBufferIndex];
    11ae:	e9 2f       	mov	r30, r25
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	e8 5c       	subi	r30, 0xC8	; 200
    11b4:	fb 4f       	sbci	r31, 0xFB	; 251
    11b6:	20 81       	ld	r18, Z
    11b8:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:303
    ++rxBufferIndex;
    11ba:	9f 5f       	subi	r25, 0xFF	; 255
    11bc:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <TwoWire::rxBufferIndex>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:307
  }

  return value;
}
    11c0:	c9 01       	movw	r24, r18
    11c2:	08 95       	ret

000011c4 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:290
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    11c4:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <TwoWire::rxBufferLength>
    11c8:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <TwoWire::rxBufferIndex>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:291
}
    11cc:	89 1b       	sub	r24, r25
    11ce:	99 0b       	sbc	r25, r25
    11d0:	08 95       	ret

000011d2 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:271

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    11d2:	cf 92       	push	r12
    11d4:	df 92       	push	r13
    11d6:	ef 92       	push	r14
    11d8:	ff 92       	push	r15
    11da:	0f 93       	push	r16
    11dc:	1f 93       	push	r17
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	7c 01       	movw	r14, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	8a 01       	movw	r16, r20
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:272
  if(transmitting){
    11e8:	20 91 b5 04 	lds	r18, 0x04B5	; 0x8004b5 <TwoWire::transmitting>
    11ec:	22 23       	and	r18, r18
    11ee:	89 f0       	breq	.+34     	; 0x1212 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    11f0:	eb 01       	movw	r28, r22
    11f2:	6b 01       	movw	r12, r22
    11f4:	c4 0e       	add	r12, r20
    11f6:	d5 1e       	adc	r13, r21
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:274
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    11f8:	cc 15       	cp	r28, r12
    11fa:	dd 05       	cpc	r29, r13
    11fc:	69 f0       	breq	.+26     	; 0x1218 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:275
      write(data[i]);
    11fe:	69 91       	ld	r22, Y+
    1200:	d7 01       	movw	r26, r14
    1202:	ed 91       	ld	r30, X+
    1204:	fc 91       	ld	r31, X
    1206:	01 90       	ld	r0, Z+
    1208:	f0 81       	ld	r31, Z
    120a:	e0 2d       	mov	r30, r0
    120c:	c7 01       	movw	r24, r14
    120e:	09 95       	icall
    1210:	f3 cf       	rjmp	.-26     	; 0x11f8 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:280
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    1212:	64 2f       	mov	r22, r20
    1214:	0e 94 98 08 	call	0x1130	; 0x1130 <twi_transmit>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:283
  }
  return quantity;
}
    1218:	c8 01       	movw	r24, r16
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	1f 91       	pop	r17
    1220:	0f 91       	pop	r16
    1222:	ff 90       	pop	r15
    1224:	ef 90       	pop	r14
    1226:	df 90       	pop	r13
    1228:	cf 90       	pop	r12
    122a:	08 95       	ret

0000122c <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:246

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	1f 92       	push	r1
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	69 83       	std	Y+1, r22	; 0x01
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:247
  if(transmitting){
    1238:	20 91 b5 04 	lds	r18, 0x04B5	; 0x8004b5 <TwoWire::transmitting>
    123c:	22 23       	and	r18, r18
    123e:	f9 f0       	breq	.+62     	; 0x127e <TwoWire::write(unsigned char)+0x52>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:250
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
    1240:	20 91 d8 04 	lds	r18, 0x04D8	; 0x8004d8 <TwoWire::txBufferLength>
    1244:	20 32       	cpi	r18, 0x20	; 32
    1246:	58 f0       	brcs	.+22     	; 0x125e <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    1248:	21 e0       	ldi	r18, 0x01	; 1
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	fc 01       	movw	r30, r24
    124e:	33 83       	std	Z+3, r19	; 0x03
    1250:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:252
      setWriteError();
      return 0;
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:265
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
    1256:	0f 90       	pop	r0
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	08 95       	ret
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:255
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    125e:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <TwoWire::txBufferIndex>
    1262:	e8 2f       	mov	r30, r24
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	e9 54       	subi	r30, 0x49	; 73
    1268:	fb 4f       	sbci	r31, 0xFB	; 251
    126a:	99 81       	ldd	r25, Y+1	; 0x01
    126c:	90 83       	st	Z, r25
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:256
    ++txBufferIndex;
    126e:	8f 5f       	subi	r24, 0xFF	; 255
    1270:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <TwoWire::txBufferIndex>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:258
    // update amount in buffer
    txBufferLength = txBufferIndex;
    1274:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <TwoWire::txBufferLength>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:264
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	ec cf       	rjmp	.-40     	; 0x1256 <TwoWire::write(unsigned char)+0x2a>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:262
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    127e:	61 e0       	ldi	r22, 0x01	; 1
    1280:	ce 01       	movw	r24, r28
    1282:	01 96       	adiw	r24, 0x01	; 1
    1284:	0e 94 98 08 	call	0x1130	; 0x1130 <twi_transmit>
    1288:	f7 cf       	rjmp	.-18     	; 0x1278 <TwoWire::write(unsigned char)+0x4c>

0000128a <TwoWire::write(int) [clone .constprop.151]>:
_ZN7TwoWire5writeEi.constprop.151():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.h:86
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    128a:	68 2f       	mov	r22, r24
    128c:	8b e8       	ldi	r24, 0x8B	; 139
    128e:	95 e0       	ldi	r25, 0x05	; 5
    1290:	0c 94 16 09 	jmp	0x122c	; 0x122c <TwoWire::write(unsigned char)>

00001294 <LiquidCrystal_I2C::expanderWrite(unsigned char)>:
_ZN17LiquidCrystal_I2C13expanderWriteEh():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:253
	expanderWrite(value);
	pulseEnable(value);
}

void LiquidCrystal_I2C::expanderWrite(uint8_t _data){                                        
	Wire.beginTransmission(_Addr);
    1294:	fc 01       	movw	r30, r24
    1296:	24 81       	ldd	r18, Z+4	; 0x04
beginTransmission():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    1298:	31 e0       	ldi	r19, 0x01	; 1
    129a:	30 93 b5 04 	sts	0x04B5, r19	; 0x8004b5 <TwoWire::transmitting>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
    129e:	20 93 d7 04 	sts	0x04D7, r18	; 0x8004d7 <TwoWire::txAddress>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    12a2:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <TwoWire::txBufferIndex>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:201
  txBufferLength = 0;
    12a6:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <TwoWire::txBufferLength>
_ZN17LiquidCrystal_I2C13expanderWriteEh():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:254
	printIIC((int)(_data) | _backlightval);
    12aa:	83 85       	ldd	r24, Z+11	; 0x0b
    12ac:	86 2b       	or	r24, r22
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 45 09 	call	0x128a	; 0x128a <TwoWire::write(int) [clone .constprop.151]>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:255
	Wire.endTransmission();   
    12b4:	0c 94 4c 04 	jmp	0x898	; 0x898 <TwoWire::endTransmission() [clone .constprop.152]>

000012b8 <LiquidCrystal_I2C::write4bits(unsigned char)>:
_ZN17LiquidCrystal_I2C10write4bitsEh():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:247
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
    12b8:	0f 93       	push	r16
    12ba:	1f 93       	push	r17
    12bc:	cf 93       	push	r28
    12be:	8c 01       	movw	r16, r24
    12c0:	c6 2f       	mov	r28, r22
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:248
	expanderWrite(value);
    12c2:	0e 94 4a 09 	call	0x1294	; 0x1294 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
pulseEnable():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:259
	printIIC((int)(_data) | _backlightval);
	Wire.endTransmission();   
}

void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
	expanderWrite(_data | En);	// En high
    12c6:	6c 2f       	mov	r22, r28
    12c8:	64 60       	ori	r22, 0x04	; 4
    12ca:	c8 01       	movw	r24, r16
    12cc:	0e 94 4a 09 	call	0x1294	; 0x1294 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:260
	delayMicroseconds(1);		// enable pulse must be >450ns
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	0e 94 2c 08 	call	0x1058	; 0x1058 <delayMicroseconds>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:262
	
	expanderWrite(_data & ~En);	// En low
    12d8:	6c 2f       	mov	r22, r28
    12da:	6b 7f       	andi	r22, 0xFB	; 251
    12dc:	c8 01       	movw	r24, r16
    12de:	0e 94 4a 09 	call	0x1294	; 0x1294 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:263
	delayMicroseconds(50);		// commands need > 37us to settle
    12e2:	82 e3       	ldi	r24, 0x32	; 50
    12e4:	90 e0       	ldi	r25, 0x00	; 0
_ZN17LiquidCrystal_I2C10write4bitsEh():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:250
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
	expanderWrite(value);
	pulseEnable(value);
}
    12e6:	cf 91       	pop	r28
    12e8:	1f 91       	pop	r17
    12ea:	0f 91       	pop	r16
pulseEnable():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:263
void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
	expanderWrite(_data | En);	// En high
	delayMicroseconds(1);		// enable pulse must be >450ns
	
	expanderWrite(_data & ~En);	// En low
	delayMicroseconds(50);		// commands need > 37us to settle
    12ec:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <delayMicroseconds>

000012f0 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>:
_ZN17LiquidCrystal_I2C4sendEhh():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:240


/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
    12f0:	0f 93       	push	r16
    12f2:	1f 93       	push	r17
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	8c 01       	movw	r16, r24
    12fa:	d6 2f       	mov	r29, r22
    12fc:	c4 2f       	mov	r28, r20
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:241
	uint8_t highnib=value&0xf0;
    12fe:	60 7f       	andi	r22, 0xF0	; 240
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:243
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
    1300:	64 2b       	or	r22, r20
    1302:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:242
/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
	uint8_t highnib=value&0xf0;
	uint8_t lownib=(value<<4)&0xf0;
    1306:	80 e1       	ldi	r24, 0x10	; 16
    1308:	d8 9f       	mul	r29, r24
    130a:	b0 01       	movw	r22, r0
    130c:	11 24       	eor	r1, r1
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:244
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
    130e:	6c 2b       	or	r22, r28
    1310:	c8 01       	movw	r24, r16
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:245
}
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	1f 91       	pop	r17
    1318:	0f 91       	pop	r16
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:244
// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
	uint8_t highnib=value&0xf0;
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
    131a:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <LiquidCrystal_I2C::write4bits(unsigned char)>

0000131e <LiquidCrystal_I2C::clear() [clone .constprop.123]>:
_ZN17LiquidCrystal_I2C5clearEv.constprop.123():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	61 e0       	ldi	r22, 0x01	; 1
    1322:	82 ea       	ldi	r24, 0xA2	; 162
    1324:	97 e0       	ldi	r25, 0x07	; 7
    1326:	0e 94 78 09 	call	0x12f0	; 0x12f0 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:129
}

/********** high level commands, for the user! */
void LiquidCrystal_I2C::clear(){
	command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
    132a:	80 ed       	ldi	r24, 0xD0	; 208
    132c:	97 e0       	ldi	r25, 0x07	; 7
    132e:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <delayMicroseconds>

00001332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>:
_ZN17LiquidCrystal_I2C9setCursorEhh():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:137
void LiquidCrystal_I2C::home(){
	command(LCD_RETURNHOME);  // set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	28 97       	sbiw	r28, 0x08	; 8
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	de bf       	out	0x3e, r29	; 62
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	cd bf       	out	0x3d, r28	; 61
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:138
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
    1346:	28 e0       	ldi	r18, 0x08	; 8
    1348:	ec e0       	ldi	r30, 0x0C	; 12
    134a:	f1 e0       	ldi	r31, 0x01	; 1
    134c:	de 01       	movw	r26, r28
    134e:	11 96       	adiw	r26, 0x01	; 1
    1350:	01 90       	ld	r0, Z+
    1352:	0d 92       	st	X+, r0
    1354:	2a 95       	dec	r18
    1356:	e1 f7       	brne	.-8      	; 0x1350 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)+0x1e>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:139
	if ( row > _numlines ) {
    1358:	fc 01       	movw	r30, r24
    135a:	20 85       	ldd	r18, Z+8	; 0x08
    135c:	24 17       	cp	r18, r20
    135e:	10 f4       	brcc	.+4      	; 0x1364 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)+0x32>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:140
		row = _numlines-1;    // we count rows starting w/0
    1360:	4f ef       	ldi	r20, 0xFF	; 255
    1362:	42 0f       	add	r20, r18
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:142
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
    1364:	50 e0       	ldi	r21, 0x00	; 0
    1366:	44 0f       	add	r20, r20
    1368:	55 1f       	adc	r21, r21
    136a:	21 e0       	ldi	r18, 0x01	; 1
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	2c 0f       	add	r18, r28
    1370:	3d 1f       	adc	r19, r29
    1372:	42 0f       	add	r20, r18
    1374:	53 1f       	adc	r21, r19
    1376:	fa 01       	movw	r30, r20
    1378:	20 81       	ld	r18, Z
    137a:	62 0f       	add	r22, r18
    137c:	60 68       	ori	r22, 0x80	; 128
command():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    137e:	40 e0       	ldi	r20, 0x00	; 0
_ZN17LiquidCrystal_I2C9setCursorEhh():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:143
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if ( row > _numlines ) {
		row = _numlines-1;    // we count rows starting w/0
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
}
    1380:	28 96       	adiw	r28, 0x08	; 8
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
command():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    1390:	0c 94 78 09 	jmp	0x12f0	; 0x12f0 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>

00001394 <LiquidCrystal_I2C::write(unsigned char)>:
_ZN17LiquidCrystal_I2C5writeEh():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:11

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    1394:	41 e0       	ldi	r20, 0x01	; 1
    1396:	0e 94 78 09 	call	0x12f0	; 0x12f0 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:13
	return 1;
}
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	08 95       	ret

000013a0 <PCF8583::setRegister(unsigned char, unsigned char) [clone .constprop.89]>:
_ZN7PCF858311setRegisterEhh.constprop.89():
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:281
    uint8_t control = getRegister(LOCATION_CONTROL);
    control &= 0x7F;
    setRegister(LOCATION_CONTROL, control);
}

void PCF8583::setRegister(uint8_t offset, uint8_t value) {
    13a0:	cf 93       	push	r28
    13a2:	c6 2f       	mov	r28, r22
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:282
    Wire.beginTransmission(_address);
    13a4:	fc 01       	movw	r30, r24
    13a6:	80 81       	ld	r24, Z
beginTransmission():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    13a8:	91 e0       	ldi	r25, 0x01	; 1
    13aa:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <TwoWire::transmitting>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
    13ae:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <TwoWire::txAddress>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    13b2:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <TwoWire::txBufferIndex>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:201
  txBufferLength = 0;
    13b6:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <TwoWire::txBufferLength>
_ZN7PCF858311setRegisterEhh.constprop.89():
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:283
    Wire.write(offset);
    13ba:	60 e0       	ldi	r22, 0x00	; 0
    13bc:	8b e8       	ldi	r24, 0x8B	; 139
    13be:	95 e0       	ldi	r25, 0x05	; 5
    13c0:	0e 94 16 09 	call	0x122c	; 0x122c <TwoWire::write(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:284
    Wire.write(value);
    13c4:	6c 2f       	mov	r22, r28
    13c6:	8b e8       	ldi	r24, 0x8B	; 139
    13c8:	95 e0       	ldi	r25, 0x05	; 5
    13ca:	0e 94 16 09 	call	0x122c	; 0x122c <TwoWire::write(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:286
    Wire.endTransmission();
}
    13ce:	cf 91       	pop	r28
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:285

void PCF8583::setRegister(uint8_t offset, uint8_t value) {
    Wire.beginTransmission(_address);
    Wire.write(offset);
    Wire.write(value);
    Wire.endTransmission();
    13d0:	0c 94 4c 04 	jmp	0x898	; 0x898 <TwoWire::endTransmission() [clone .constprop.152]>

000013d4 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	08 95       	ret

000013da <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::peerAddress(unsigned char) const [clone .isra.205]>:
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_5List4ELi6E6UList0SF_E11peerAddressEh.isra.205():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:261

  void configChanged () {}

  protected:
  uint16_t peerAddress (uint8_t pidx) const {
    if( pidx < PeerCount ) {
    13da:	66 30       	cpi	r22, 0x06	; 6
    13dc:	50 f4       	brcc	.+20     	; 0x13f2 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::peerAddress(unsigned char) const [clone .isra.205]+0x18>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:266
      uint16_t offset = sizeof(Peer);
      offset += List3::size() + List4::size();
      offset *= pidx;
      offset += List1::size() + List2::size();
      return addr + offset;
    13de:	fc 01       	movw	r30, r24
    13e0:	80 81       	ld	r24, Z
    13e2:	91 81       	ldd	r25, Z+1	; 0x01
    13e4:	0a 96       	adiw	r24, 0x0a	; 10
    13e6:	f5 e0       	ldi	r31, 0x05	; 5
    13e8:	6f 9f       	mul	r22, r31
    13ea:	80 0d       	add	r24, r0
    13ec:	91 1d       	adc	r25, r1
    13ee:	11 24       	eor	r1, r1
    13f0:	08 95       	ret
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:268
    }
    return 0x00;
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:269
  }
    13f6:	08 95       	ret

000013f8 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::peerAddress(unsigned char) const [clone .isra.157]>:
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE7SCList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi10E6UList0SF_E11peerAddressEh.isra.157():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:261

  void configChanged () {}

  protected:
  uint16_t peerAddress (uint8_t pidx) const {
    if( pidx < PeerCount ) {
    13f8:	6a 30       	cpi	r22, 0x0A	; 10
    13fa:	50 f4       	brcc	.+20     	; 0x1410 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::peerAddress(unsigned char) const [clone .isra.157]+0x18>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:266
      uint16_t offset = sizeof(Peer);
      offset += List3::size() + List4::size();
      offset *= pidx;
      offset += List1::size() + List2::size();
      return addr + offset;
    13fc:	fc 01       	movw	r30, r24
    13fe:	80 81       	ld	r24, Z
    1400:	91 81       	ldd	r25, Z+1	; 0x01
    1402:	05 96       	adiw	r24, 0x05	; 5
    1404:	f5 e0       	ldi	r31, 0x05	; 5
    1406:	6f 9f       	mul	r22, r31
    1408:	80 0d       	add	r24, r0
    140a:	91 1d       	adc	r25, r1
    140c:	11 24       	eor	r1, r1
    140e:	08 95       	ret
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:268
    }
    return 0x00;
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:269
  }
    1414:	08 95       	ret

00001416 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::waitMiso() [clone .isra.148]>:
_ZN2as6LibSPIILh4ELm2000000ELh1ELh0EE8waitMisoEv.isra.148():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:323
  
  void waitMiso () {
#ifdef ARDUINO_ARCH_STM32F1
    while(digitalRead(SPI.misoPin()));
#elif defined (PIN_SPI_MISO)
    while(digitalRead(PIN_SPI_MISO));
    1416:	86 e0       	ldi	r24, 0x06	; 6
    1418:	0e 94 55 07 	call	0xeaa	; 0xeaa <digitalRead>
    141c:	89 2b       	or	r24, r25
    141e:	d9 f7       	brne	.-10     	; 0x1416 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::waitMiso() [clone .isra.148]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:327
#else
    _delay_us(10);
#endif
  }
    1420:	08 95       	ret

00001422 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::deselect() [clone .isra.134]>:
_ZN2as6LibSPIILh4ELm2000000ELh1ELh0EE8deselectEv.isra.134():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:308
  void select () {
    digitalWrite(CS,LOW);
  }

  void deselect () {
    digitalWrite(CS,HIGH);
    1422:	61 e0       	ldi	r22, 0x01	; 1
    1424:	84 e0       	ldi	r24, 0x04	; 4
    1426:	0c 94 7e 07 	jmp	0xefc	; 0xefc <digitalWrite>

0000142a <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::select() [clone .isra.133]>:
_ZN2as6LibSPIILh4ELm2000000ELh1ELh0EE6selectEv.isra.133():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:304
    pinMode(SCK, INPUT);
#endif
  }

  void select () {
    digitalWrite(CS,LOW);
    142a:	60 e0       	ldi	r22, 0x00	; 0
    142c:	84 e0       	ldi	r24, 0x04	; 4
    142e:	0c 94 7e 07 	jmp	0xefc	; 0xefc <digitalWrite>

00001432 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peerAddress(unsigned char) const [clone .isra.126]>:
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_11SwitchList1ENS_15SwitchList3TmplINS_8RegList3INS_10SwitchReg3EEEEENS_9EmptyListELi10E6UList0SK_E11peerAddressEh.isra.126():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:261

  void configChanged () {}

  protected:
  uint16_t peerAddress (uint8_t pidx) const {
    if( pidx < PeerCount ) {
    1432:	6a 30       	cpi	r22, 0x0A	; 10
    1434:	50 f4       	brcc	.+20     	; 0x144a <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peerAddress(unsigned char) const [clone .isra.126]+0x18>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:266
      uint16_t offset = sizeof(Peer);
      offset += List3::size() + List4::size();
      offset *= pidx;
      offset += List1::size() + List2::size();
      return addr + offset;
    1436:	fc 01       	movw	r30, r24
    1438:	80 81       	ld	r24, Z
    143a:	91 81       	ldd	r25, Z+1	; 0x01
    143c:	04 96       	adiw	r24, 0x04	; 4
    143e:	fa e1       	ldi	r31, 0x1A	; 26
    1440:	6f 9f       	mul	r22, r31
    1442:	80 0d       	add	r24, r0
    1444:	91 1d       	adc	r25, r1
    1446:	11 24       	eor	r1, r1
    1448:	08 95       	ret
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:268
    }
    return 0x00;
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:269
  }
    144e:	08 95       	ret

00001450 <as::ShortLongList<as::RegList3<as::SwitchReg3> >::getRegister(unsigned char)>:
_ZN2as13ShortLongListINS_8RegList3INS_10SwitchReg3EEEE11getRegisterEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:878
      return PeerList::size() + getOffset(reg & ~0x80);
    }
    return PeerList::getOffset(reg);
  }
  static uint8_t getRegister(uint8_t offset) {
    if( offset >= PeerList::size() ) {
    1450:	8b 30       	cpi	r24, 0x0B	; 11
    1452:	28 f0       	brcs	.+10     	; 0x145e <as::ShortLongList<as::RegList3<as::SwitchReg3> >::getRegister(unsigned char)+0xe>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:879
      return getRegister( offset - PeerList::size() ) | 0x80;
    1454:	8b 50       	subi	r24, 0x0B	; 11
    1456:	0e 94 28 0a 	call	0x1450	; 0x1450 <as::ShortLongList<as::RegList3<as::SwitchReg3> >::getRegister(unsigned char)>
    145a:	80 68       	ori	r24, 0x80	; 128
    145c:	08 95       	ret
_ZN2as14AskSinRegister11getRegisterEhPKhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:185
  }
  return 0xff;
  }
  static uint8_t getRegister(uint8_t offset,const uint8_t* reglist,uint8_t size) {
    if (offset < size) {
      return pgm_read_byte(reglist + offset);
    145e:	e8 2f       	mov	r30, r24
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	e7 51       	subi	r30, 0x17	; 23
    1464:	fa 4f       	sbci	r31, 0xFA	; 250
    1466:	84 91       	lpm	r24, Z
_ZN2as13ShortLongListINS_8RegList3INS_10SwitchReg3EEEE11getRegisterEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:882
  static uint8_t getRegister(uint8_t offset) {
    if( offset >= PeerList::size() ) {
      return getRegister( offset - PeerList::size() ) | 0x80;
    }
    return PeerList::getRegister(offset);
  }
    1468:	08 95       	ret

0000146a <as::RegisterList<as::SwitchReg1>::getRegister(unsigned char)>:
_ZN2as14AskSinRegister11getRegisterEhPKhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:184
    }
  }
  return 0xff;
  }
  static uint8_t getRegister(uint8_t offset,const uint8_t* reglist,uint8_t size) {
    if (offset < size) {
    146a:	84 30       	cpi	r24, 0x04	; 4
    146c:	30 f4       	brcc	.+12     	; 0x147a <as::RegisterList<as::SwitchReg1>::getRegister(unsigned char)+0x10>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:185
      return pgm_read_byte(reglist + offset);
    146e:	e8 2f       	mov	r30, r24
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	eb 51       	subi	r30, 0x1B	; 27
    1474:	fa 4f       	sbci	r31, 0xFA	; 250
    1476:	84 91       	lpm	r24, Z
    1478:	08 95       	ret
_ZN2as12RegisterListINS_10SwitchReg1EE11getRegisterEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:187
    }
    return 0xff;
    147a:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:196
// This is a generic list using a Register class
template<class RegisterType>
class RegisterList : public BaseList {
public:
  static uint8_t getOffset (uint8_t reg) { return RegisterType::getOffset(reg); }
  static uint8_t getRegister (uint8_t offset) { return RegisterType::getRegister(offset); }
    147c:	08 95       	ret

0000147e <as::RegisterList<Reg1>::getRegister(unsigned char)>:
_ZN2as14AskSinRegister11getRegisterEhPKhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:184
    }
  }
  return 0xff;
  }
  static uint8_t getRegister(uint8_t offset,const uint8_t* reglist,uint8_t size) {
    if (offset < size) {
    147e:	85 30       	cpi	r24, 0x05	; 5
    1480:	30 f4       	brcc	.+12     	; 0x148e <as::RegisterList<Reg1>::getRegister(unsigned char)+0x10>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:185
      return pgm_read_byte(reglist + offset);
    1482:	e8 2f       	mov	r30, r24
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	e0 52       	subi	r30, 0x20	; 32
    1488:	fa 4f       	sbci	r31, 0xFA	; 250
    148a:	84 91       	lpm	r24, Z
    148c:	08 95       	ret
_ZN2as12RegisterListI4Reg1E11getRegisterEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:187
    }
    return 0xff;
    148e:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:196
// This is a generic list using a Register class
template<class RegisterType>
class RegisterList : public BaseList {
public:
  static uint8_t getOffset (uint8_t reg) { return RegisterType::getOffset(reg); }
  static uint8_t getRegister (uint8_t offset) { return RegisterType::getRegister(offset); }
    1490:	08 95       	ret

00001492 <as::ChannelList<as::List4Data>::getOffset(unsigned char)>:
_ZN2as11ChannelListINS_9List4DataEE9getOffsetEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:287
public:
  uint8_t  burst     :1;     // 0x01, s:0, e:1
  uint8_t  notused   :7;

  static uint8_t getOffset(uint8_t reg) {
    switch (reg) {
    1492:	81 30       	cpi	r24, 0x01	; 1
    1494:	11 f0       	breq	.+4      	; 0x149a <as::ChannelList<as::List4Data>::getOffset(unsigned char)+0x8>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:291
      case 0x01: return 0;
      default: break;
    }
    return 0xff;
    1496:	8f ef       	ldi	r24, 0xFF	; 255
    1498:	08 95       	ret
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:288
  uint8_t  burst     :1;     // 0x01, s:0, e:1
  uint8_t  notused   :7;

  static uint8_t getOffset(uint8_t reg) {
    switch (reg) {
      case 0x01: return 0;
    149a:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:128
public:
  ChannelList (uint16_t a) : BaseList(a) {}

  static uint8_t getOffset (uint8_t reg) {
    return DataType::getOffset(reg);
  }
    149c:	08 95       	ret

0000149e <as::ChannelList<as::List4Data>::getRegister(unsigned char)>:
_ZN2as11ChannelListINS_9List4DataEE11getRegisterEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:295
    }
    return 0xff;
  }

  static uint8_t getRegister(uint8_t offset) {
    switch (offset) {
    149e:	88 23       	and	r24, r24
    14a0:	11 f0       	breq	.+4      	; 0x14a6 <as::ChannelList<as::List4Data>::getRegister(unsigned char)+0x8>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:299
      case 0:  return 0x01;
      default: break;
    }
    return 0xff;
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	08 95       	ret
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:296
    return 0xff;
  }

  static uint8_t getRegister(uint8_t offset) {
    switch (offset) {
      case 0:  return 0x01;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:132
    return DataType::getOffset(reg);
  }

  static uint8_t getRegister (uint8_t offset) {
    return DataType::getRegister(offset);
  }
    14a8:	08 95       	ret

000014aa <as::RegisterList<as::DefaultRegisterList4>::getRegister(unsigned char)>:
_ZN2as14AskSinRegister11getRegisterEhPKhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:184
    }
  }
  return 0xff;
  }
  static uint8_t getRegister(uint8_t offset,const uint8_t* reglist,uint8_t size) {
    if (offset < size) {
    14aa:	81 11       	cpse	r24, r1
    14ac:	04 c0       	rjmp	.+8      	; 0x14b6 <as::RegisterList<as::DefaultRegisterList4>::getRegister(unsigned char)+0xc>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:185
      return pgm_read_byte(reglist + offset);
    14ae:	ef ed       	ldi	r30, 0xDF	; 223
    14b0:	f5 e0       	ldi	r31, 0x05	; 5
    14b2:	84 91       	lpm	r24, Z
    14b4:	08 95       	ret
_ZN2as12RegisterListINS_20DefaultRegisterList4EE11getRegisterEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:187
    }
    return 0xff;
    14b6:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:196
// This is a generic list using a Register class
template<class RegisterType>
class RegisterList : public BaseList {
public:
  static uint8_t getOffset (uint8_t reg) { return RegisterType::getOffset(reg); }
  static uint8_t getRegister (uint8_t offset) { return RegisterType::getRegister(offset); }
    14b8:	08 95       	ret

000014ba <as::ChannelList<as::EmptyListData>::getRegister(unsigned char)>:
_ZN2as11ChannelListINS_13EmptyListDataEE11getRegisterEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:132
    14ba:	8f ef       	ldi	r24, 0xFF	; 255
    14bc:	08 95       	ret

000014be <as::ChannelList<as::EmptyListData>::getOffset(unsigned char)>:
_ZN2as11ChannelListINS_13EmptyListDataEE9getOffsetEh():
    14be:	8f ef       	ldi	r24, 0xFF	; 255
    14c0:	08 95       	ret

000014c2 <as::RegisterList<UReg1>::getRegister(unsigned char)>:
_ZN2as14AskSinRegister11getRegisterEhPKhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:184
    }
  }
  return 0xff;
  }
  static uint8_t getRegister(uint8_t offset,const uint8_t* reglist,uint8_t size) {
    if (offset < size) {
    14c2:	8a 30       	cpi	r24, 0x0A	; 10
    14c4:	30 f4       	brcc	.+12     	; 0x14d2 <as::RegisterList<UReg1>::getRegister(unsigned char)+0x10>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:185
      return pgm_read_byte(reglist + offset);
    14c6:	e8 2f       	mov	r30, r24
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	eb 54       	subi	r30, 0x4B	; 75
    14cc:	f8 4f       	sbci	r31, 0xF8	; 248
    14ce:	84 91       	lpm	r24, Z
    14d0:	08 95       	ret
_ZN2as12RegisterListI5UReg1E11getRegisterEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:187
    }
    return 0xff;
    14d2:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:196
// This is a generic list using a Register class
template<class RegisterType>
class RegisterList : public BaseList {
public:
  static uint8_t getOffset (uint8_t reg) { return RegisterType::getOffset(reg); }
  static uint8_t getRegister (uint8_t offset) { return RegisterType::getRegister(offset); }
    14d4:	08 95       	ret

000014d6 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::findList(unsigned char, as::Peer const&, unsigned char)>:
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E8findListEhRKNS_4PeerEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:499
     // we always stay awake after valid communication
     this->activity().stayAwake(millis2ticks(500));
     return true;
   }

   GenericList findList(uint8_t ch,const Peer& peer,uint8_t numlist) {
    14d6:	cf 92       	push	r12
    14d8:	df 92       	push	r13
    14da:	ff 92       	push	r15
    14dc:	0f 93       	push	r16
    14de:	1f 93       	push	r17
    14e0:	cf 93       	push	r28
    14e2:	df 93       	push	r29
    14e4:	00 d0       	rcall	.+0      	; 0x14e6 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::findList(unsigned char, as::Peer const&, unsigned char)+0x10>
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::findList(unsigned char, as::Peer const&, unsigned char)+0x12>
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::findList(unsigned char, as::Peer const&, unsigned char)+0x14>
    14ea:	1f 92       	push	r1
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:500
    if (numlist == 0) {
    14f0:	21 11       	cpse	r18, r1
    14f2:	26 c0       	rjmp	.+76     	; 0x1540 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::findList(unsigned char, as::Peer const&, unsigned char)+0x6a>
    14f4:	dc 01       	movw	r26, r24
    14f6:	9e 96       	adiw	r26, 0x2e	; 46
    14f8:	8d 91       	ld	r24, X+
    14fa:	9c 91       	ld	r25, X
    14fc:	9a 83       	std	Y+2, r25	; 0x02
    14fe:	89 83       	std	Y+1, r24	; 0x01
    1500:	88 e0       	ldi	r24, 0x08	; 8
    1502:	8b 83       	std	Y+3, r24	; 0x03
    1504:	89 e5       	ldi	r24, 0x59	; 89
    1506:	9d e0       	ldi	r25, 0x0D	; 13
    1508:	9d 83       	std	Y+5, r25	; 0x05
    150a:	8c 83       	std	Y+4, r24	; 0x04
    150c:	83 ef       	ldi	r24, 0xF3	; 243
    150e:	9d e0       	ldi	r25, 0x0D	; 13
    1510:	9f 83       	std	Y+7, r25	; 0x07
    1512:	8e 83       	std	Y+6, r24	; 0x06
    1514:	29 81       	ldd	r18, Y+1	; 0x01
    1516:	3a 81       	ldd	r19, Y+2	; 0x02
    1518:	4b 81       	ldd	r20, Y+3	; 0x03
    151a:	5c 81       	ldd	r21, Y+4	; 0x04
    151c:	6d 81       	ldd	r22, Y+5	; 0x05
    151e:	7e 81       	ldd	r23, Y+6	; 0x06
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:515
      } else if (c.hasList4() && numlist == 4) {
        return c.getList4(peer);
      }
    }
    return GenericList();
   }
    1520:	8f 81       	ldd	r24, Y+7	; 0x07
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	27 96       	adiw	r28, 0x07	; 7
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	1f 91       	pop	r17
    1536:	0f 91       	pop	r16
    1538:	ff 90       	pop	r15
    153a:	df 90       	pop	r13
    153c:	cf 90       	pop	r12
    153e:	08 95       	ret
hasChannel():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:226
  uint8_t channels () const {
    return numChannels;
  }

  bool hasChannel (uint8_t number) const {
    return number != 0 && number <= channels();
    1540:	66 23       	and	r22, r22
    1542:	09 f4       	brne	.+2      	; 0x1546 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::findList(unsigned char, as::Peer const&, unsigned char)+0x70>
    1544:	50 c0       	rjmp	.+160    	; 0x15e6 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::findList(unsigned char, as::Peer const&, unsigned char)+0x110>
    1546:	fc 01       	movw	r30, r24
    1548:	35 a5       	ldd	r19, Z+45	; 0x2d
    154a:	36 17       	cp	r19, r22
    154c:	08 f4       	brcc	.+2      	; 0x1550 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::findList(unsigned char, as::Peer const&, unsigned char)+0x7a>
    154e:	4b c0       	rjmp	.+150    	; 0x15e6 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::findList(unsigned char, as::Peer const&, unsigned char)+0x110>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7channelEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:182
    this->led().set(LedStates::pairing);
    this->activity().stayAwake( seconds2ticks(20) ); // 20 seconds
  }

  ChannelType& channel(uint8_t ch) {
    return *devchannels[ch-1];
    1550:	e6 2f       	mov	r30, r22
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	77 96       	adiw	r30, 0x17	; 23
    1556:	ee 0f       	add	r30, r30
    1558:	ff 1f       	adc	r31, r31
    155a:	e8 0f       	add	r30, r24
    155c:	f9 1f       	adc	r31, r25
    155e:	00 81       	ld	r16, Z
    1560:	11 81       	ldd	r17, Z+1	; 0x01
    1562:	d8 01       	movw	r26, r16
    1564:	ed 91       	ld	r30, X+
    1566:	fc 91       	ld	r31, X
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E8findListEhRKNS_4PeerEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:504
   GenericList findList(uint8_t ch,const Peer& peer,uint8_t numlist) {
    if (numlist == 0) {
      return list0;
    } else if (this->hasChannel(ch) == true) {
      ChannelType& c = channel(ch);
      if (numlist == 1) {
    1568:	21 30       	cpi	r18, 0x01	; 1
    156a:	91 f4       	brne	.+36     	; 0x1590 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::findList(unsigned char, as::Peer const&, unsigned char)+0xba>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:505
        return c.getList1();
    156c:	06 a8       	ldd	r0, Z+54	; 0x36
    156e:	f7 a9       	ldd	r31, Z+55	; 0x37
    1570:	e0 2d       	mov	r30, r0
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:507
      } else if (c.hasList2() && numlist == 2) {
        return c.getList2();
    1572:	c8 01       	movw	r24, r16
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:515
      } else if (c.hasList4() && numlist == 4) {
        return c.getList4(peer);
      }
    }
    return GenericList();
   }
    1574:	27 96       	adiw	r28, 0x07	; 7
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	1f 91       	pop	r17
    1586:	0f 91       	pop	r16
    1588:	ff 90       	pop	r15
    158a:	df 90       	pop	r13
    158c:	cf 90       	pop	r12
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:507
    } else if (this->hasChannel(ch) == true) {
      ChannelType& c = channel(ch);
      if (numlist == 1) {
        return c.getList1();
      } else if (c.hasList2() && numlist == 2) {
        return c.getList2();
    158e:	09 94       	ijmp
    1590:	f2 2e       	mov	r15, r18
    1592:	6a 01       	movw	r12, r20
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:506
      return list0;
    } else if (this->hasChannel(ch) == true) {
      ChannelType& c = channel(ch);
      if (numlist == 1) {
        return c.getList1();
      } else if (c.hasList2() && numlist == 2) {
    1594:	06 ac       	ldd	r0, Z+62	; 0x3e
    1596:	f7 ad       	ldd	r31, Z+63	; 0x3f
    1598:	e0 2d       	mov	r30, r0
    159a:	c8 01       	movw	r24, r16
    159c:	09 95       	icall
    159e:	d8 01       	movw	r26, r16
    15a0:	ed 91       	ld	r30, X+
    15a2:	fc 91       	ld	r31, X
    15a4:	88 23       	and	r24, r24
    15a6:	39 f0       	breq	.+14     	; 0x15b6 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::findList(unsigned char, as::Peer const&, unsigned char)+0xe0>
    15a8:	b2 e0       	ldi	r27, 0x02	; 2
    15aa:	fb 12       	cpse	r15, r27
    15ac:	04 c0       	rjmp	.+8      	; 0x15b6 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::findList(unsigned char, as::Peer const&, unsigned char)+0xe0>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:507
        return c.getList2();
    15ae:	00 ac       	ldd	r0, Z+56	; 0x38
    15b0:	f1 ad       	ldd	r31, Z+57	; 0x39
    15b2:	e0 2d       	mov	r30, r0
    15b4:	de cf       	rjmp	.-68     	; 0x1572 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::findList(unsigned char, as::Peer const&, unsigned char)+0x9c>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:508
      } else if (c.hasList3() && numlist == 3) {
    15b6:	e0 5c       	subi	r30, 0xC0	; 192
    15b8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ba:	01 90       	ld	r0, Z+
    15bc:	f0 81       	ld	r31, Z
    15be:	e0 2d       	mov	r30, r0
    15c0:	c8 01       	movw	r24, r16
    15c2:	09 95       	icall
    15c4:	d8 01       	movw	r26, r16
    15c6:	ed 91       	ld	r30, X+
    15c8:	fc 91       	ld	r31, X
    15ca:	88 23       	and	r24, r24
    15cc:	19 f0       	breq	.+6      	; 0x15d4 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::findList(unsigned char, as::Peer const&, unsigned char)+0xfe>
    15ce:	b3 e0       	ldi	r27, 0x03	; 3
    15d0:	fb 16       	cp	r15, r27
    15d2:	89 f0       	breq	.+34     	; 0x15f6 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::findList(unsigned char, as::Peer const&, unsigned char)+0x120>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:510
        return c.getList3(peer);
      } else if (c.hasList4() && numlist == 4) {
    15d4:	ee 5b       	subi	r30, 0xBE	; 190
    15d6:	ff 4f       	sbci	r31, 0xFF	; 255
    15d8:	01 90       	ld	r0, Z+
    15da:	f0 81       	ld	r31, Z
    15dc:	e0 2d       	mov	r30, r0
    15de:	c8 01       	movw	r24, r16
    15e0:	09 95       	icall
    15e2:	81 11       	cpse	r24, r1
    15e4:	1b c0       	rjmp	.+54     	; 0x161c <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::findList(unsigned char, as::Peer const&, unsigned char)+0x146>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:514
        return c.getList4(peer);
      }
    }
    return GenericList();
    15e6:	1a 82       	std	Y+2, r1	; 0x02
    15e8:	19 82       	std	Y+1, r1	; 0x01
    15ea:	1b 82       	std	Y+3, r1	; 0x03
    15ec:	1d 82       	std	Y+5, r1	; 0x05
    15ee:	1c 82       	std	Y+4, r1	; 0x04
    15f0:	1f 82       	std	Y+7, r1	; 0x07
    15f2:	1e 82       	std	Y+6, r1	; 0x06
    15f4:	8f cf       	rjmp	.-226    	; 0x1514 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::findList(unsigned char, as::Peer const&, unsigned char)+0x3e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:509
      if (numlist == 1) {
        return c.getList1();
      } else if (c.hasList2() && numlist == 2) {
        return c.getList2();
      } else if (c.hasList3() && numlist == 3) {
        return c.getList3(peer);
    15f6:	02 ac       	ldd	r0, Z+58	; 0x3a
    15f8:	f3 ad       	ldd	r31, Z+59	; 0x3b
    15fa:	e0 2d       	mov	r30, r0
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:511
      } else if (c.hasList4() && numlist == 4) {
        return c.getList4(peer);
    15fc:	b6 01       	movw	r22, r12
    15fe:	c8 01       	movw	r24, r16
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:515
      }
    }
    return GenericList();
   }
    1600:	27 96       	adiw	r28, 0x07	; 7
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	de bf       	out	0x3e, r29	; 62
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	cd bf       	out	0x3d, r28	; 61
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	1f 91       	pop	r17
    1612:	0f 91       	pop	r16
    1614:	ff 90       	pop	r15
    1616:	df 90       	pop	r13
    1618:	cf 90       	pop	r12
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:511
      } else if (c.hasList2() && numlist == 2) {
        return c.getList2();
      } else if (c.hasList3() && numlist == 3) {
        return c.getList3(peer);
      } else if (c.hasList4() && numlist == 4) {
        return c.getList4(peer);
    161a:	09 94       	ijmp
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:510
        return c.getList1();
      } else if (c.hasList2() && numlist == 2) {
        return c.getList2();
      } else if (c.hasList3() && numlist == 3) {
        return c.getList3(peer);
      } else if (c.hasList4() && numlist == 4) {
    161c:	e4 e0       	ldi	r30, 0x04	; 4
    161e:	fe 12       	cpse	r15, r30
    1620:	e2 cf       	rjmp	.-60     	; 0x15e6 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::findList(unsigned char, as::Peer const&, unsigned char)+0x110>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:511
        return c.getList4(peer);
    1622:	d8 01       	movw	r26, r16
    1624:	ed 91       	ld	r30, X+
    1626:	fc 91       	ld	r31, X
    1628:	04 ac       	ldd	r0, Z+60	; 0x3c
    162a:	f5 ad       	ldd	r31, Z+61	; 0x3d
    162c:	e0 2d       	mov	r30, r0
    162e:	e6 cf       	rjmp	.-52     	; 0x15fc <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::findList(unsigned char, as::Peer const&, unsigned char)+0x126>

00001630 <as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >::MinSendTimeout::trigger(as::AlarmClock&)>:
_ZN2as8Activity7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Activity.h:292
  }

  virtual ~Activity () {}

  virtual void trigger (__attribute__((unused)) AlarmClock& clock) {
    awake = false;
    1630:	fc 01       	movw	r30, r24
    1632:	10 86       	std	Z+8, r1	; 0x08
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Activity.h:293
  }
    1634:	08 95       	ret

00001636 <as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>::switchState(unsigned char, unsigned char, unsigned long)>:
_ZN2as13SwitchChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEELi10E6UList0S3_E11switchStateEhhm():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:362
    }
    return flags;
  }


  virtual void switchState(__attribute__((unused)) uint8_t oldstate,uint8_t newstate,__attribute__((unused)) uint32_t delay) {
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	ec 01       	movw	r28, r24
    163c:	9c 81       	ldd	r25, Y+4	; 0x04
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:363
    if( newstate == AS_CM_JT_ON ) {
    163e:	43 30       	cpi	r20, 0x03	; 3
    1640:	29 f4       	brne	.+10     	; 0x164c <as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>::switchState(unsigned char, unsigned char, unsigned long)+0x16>
    1642:	8a 89       	ldd	r24, Y+18	; 0x12
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:364
      if( this->hasflag(LOWACTIVE) == true ) IODriver::setLow(pin);
    1644:	93 ff       	sbrs	r25, 3
    1646:	07 c0       	rjmp	.+14     	; 0x1656 <as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>::switchState(unsigned char, unsigned char, unsigned long)+0x20>
setLow():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Pins.h:23
class ArduinoPins {
public:
  inline static void setOutput   (uint8_t pin) { pinMode(pin,OUTPUT); }
  inline static void setInput    (uint8_t pin) { pinMode(pin,INPUT);  }
  inline static void setHigh     (uint8_t pin) { digitalWrite(pin,HIGH); }
  inline static void setLow      (uint8_t pin) { digitalWrite(pin,LOW); }
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	06 c0       	rjmp	.+12     	; 0x1658 <as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>::switchState(unsigned char, unsigned char, unsigned long)+0x22>
_ZN2as13SwitchChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEELi10E6UList0S3_E11switchStateEhhm():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:367
      else IODriver::setHigh(pin);
    }
    else if ( newstate == AS_CM_JT_OFF ) {
    164c:	46 30       	cpi	r20, 0x06	; 6
    164e:	31 f4       	brne	.+12     	; 0x165c <as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>::switchState(unsigned char, unsigned char, unsigned long)+0x26>
    1650:	8a 89       	ldd	r24, Y+18	; 0x12
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:368
      if( this->hasflag(LOWACTIVE) == true ) IODriver::setHigh(pin);
    1652:	93 ff       	sbrs	r25, 3
    1654:	f9 cf       	rjmp	.-14     	; 0x1648 <as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>::switchState(unsigned char, unsigned char, unsigned long)+0x12>
setHigh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Pins.h:22

class ArduinoPins {
public:
  inline static void setOutput   (uint8_t pin) { pinMode(pin,OUTPUT); }
  inline static void setInput    (uint8_t pin) { pinMode(pin,INPUT);  }
  inline static void setHigh     (uint8_t pin) { digitalWrite(pin,HIGH); }
    1656:	61 e0       	ldi	r22, 0x01	; 1
setLow():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Pins.h:23
  inline static void setLow      (uint8_t pin) { digitalWrite(pin,LOW); }
    1658:	0e 94 7e 07 	call	0xefc	; 0xefc <digitalWrite>
_ZN2as5Alarm7setflagEbh.isra.10():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:25
  ~Alarm() {}

  uint8_t flags;

public:
  void setflag(bool c,uint8_t mask) { c ? flags |= mask : flags &= ~mask; }
    165c:	8c 81       	ldd	r24, Y+4	; 0x04
    165e:	84 60       	ori	r24, 0x04	; 4
    1660:	8c 83       	std	Y+4, r24	; 0x04
_ZN2as13SwitchChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEELi10E6UList0S3_E11switchStateEhhm():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:372
      else IODriver::setLow(pin);
    }
    this->changed(true);
  }
    1662:	df 91       	pop	r29
    1664:	cf 91       	pop	r28
    1666:	08 95       	ret

00001668 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::hasList2() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E8hasList2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:449

  virtual GenericList getList1 () const { return ch.getList1(); }
  virtual GenericList getList2 () const { return ch.getList2(); }
  virtual GenericList getList3 (const Peer& p) const { return ch.getList3(p); }
  virtual GenericList getList4 (const Peer& p) const { return ch.getList4(p); }
  virtual bool hasList2 () const { return ChannelType::hasList2(); }
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	08 95       	ret

0000166c <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::hasList4() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E8hasList4Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:451
  virtual bool hasList3 () const { return ChannelType::hasList3(); }
  virtual bool hasList4 () const { return ChannelType::hasList4(); }
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	08 95       	ret

00001670 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::getList3(as::Peer const&) const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E8getList3ERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:447
  virtual void patchStatus (Message& msg) { ch.patchStatus(msg); }
  virtual void configChanged () { ch.configChanged(); }

  virtual GenericList getList1 () const { return ch.getList1(); }
  virtual GenericList getList2 () const { return ch.getList2(); }
  virtual GenericList getList3 (const Peer& p) const { return ch.getList3(p); }
    1670:	cf 93       	push	r28
    1672:	df 93       	push	r29
    1674:	00 d0       	rcall	.+0      	; 0x1676 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::getList3(as::Peer const&) const+0x6>
    1676:	00 d0       	rcall	.+0      	; 0x1678 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::getList3(as::Peer const&) const+0x8>
    1678:	00 d0       	rcall	.+0      	; 0x167a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::getList3(as::Peer const&) const+0xa>
    167a:	1f 92       	push	r1
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	1a 82       	std	Y+2, r1	; 0x02
    1682:	19 82       	std	Y+1, r1	; 0x01
    1684:	2d e5       	ldi	r18, 0x5D	; 93
    1686:	3a e0       	ldi	r19, 0x0A	; 10
    1688:	3d 83       	std	Y+5, r19	; 0x05
    168a:	2c 83       	std	Y+4, r18	; 0x04
    168c:	8f e5       	ldi	r24, 0x5F	; 95
    168e:	9a e0       	ldi	r25, 0x0A	; 10
    1690:	9f 83       	std	Y+7, r25	; 0x07
    1692:	8e 83       	std	Y+6, r24	; 0x06
    1694:	3a 81       	ldd	r19, Y+2	; 0x02
    1696:	52 2f       	mov	r21, r18
    1698:	6d 81       	ldd	r22, Y+5	; 0x05
    169a:	78 2f       	mov	r23, r24
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	41 e0       	ldi	r20, 0x01	; 1
    16a0:	8f 81       	ldd	r24, Y+7	; 0x07
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	27 96       	adiw	r28, 0x07	; 7
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	f8 94       	cli
    16aa:	de bf       	out	0x3e, r29	; 62
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	cd bf       	out	0x3d, r28	; 61
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	08 95       	ret

000016b6 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::getList2() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E8getList2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:446

  virtual void patchStatus (Message& msg) { ch.patchStatus(msg); }
  virtual void configChanged () { ch.configChanged(); }

  virtual GenericList getList1 () const { return ch.getList1(); }
  virtual GenericList getList2 () const { return ch.getList2(); }
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::getList2() const+0x6>
    16bc:	00 d0       	rcall	.+0      	; 0x16be <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::getList2() const+0x8>
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::getList2() const+0xa>
    16c0:	1f 92       	push	r1
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_11SwitchList1ENS_15SwitchList3TmplINS_8RegList3INS_10SwitchReg3EEEEENS_9EmptyListELi10E6UList0SK_E8getList2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:180
    // we start always with list1
    return List1Type(address());
  }

  List2Type getList2 () const {
    return List2Type(address()+List1::size());
    16c6:	fc 01       	movw	r30, r24
    16c8:	21 89       	ldd	r18, Z+17	; 0x11
    16ca:	32 89       	ldd	r19, Z+18	; 0x12
    16cc:	2c 5f       	subi	r18, 0xFC	; 252
    16ce:	3f 4f       	sbci	r19, 0xFF	; 255
    16d0:	3a 83       	std	Y+2, r19	; 0x02
    16d2:	29 83       	std	Y+1, r18	; 0x01
    16d4:	4d e5       	ldi	r20, 0x5D	; 93
    16d6:	5a e0       	ldi	r21, 0x0A	; 10
    16d8:	5d 83       	std	Y+5, r21	; 0x05
    16da:	4c 83       	std	Y+4, r20	; 0x04
    16dc:	8f e5       	ldi	r24, 0x5F	; 95
    16de:	9a e0       	ldi	r25, 0x0A	; 10
    16e0:	9f 83       	std	Y+7, r25	; 0x07
    16e2:	8e 83       	std	Y+6, r24	; 0x06
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E8getList2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:446

  virtual void patchStatus (Message& msg) { ch.patchStatus(msg); }
  virtual void configChanged () { ch.configChanged(); }

  virtual GenericList getList1 () const { return ch.getList1(); }
  virtual GenericList getList2 () const { return ch.getList2(); }
    16e4:	3a 81       	ldd	r19, Y+2	; 0x02
    16e6:	54 2f       	mov	r21, r20
    16e8:	6d 81       	ldd	r22, Y+5	; 0x05
    16ea:	78 2f       	mov	r23, r24
    16ec:	41 e0       	ldi	r20, 0x01	; 1
    16ee:	8f 81       	ldd	r24, Y+7	; 0x07
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	27 96       	adiw	r28, 0x07	; 7
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	de bf       	out	0x3e, r29	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	cd bf       	out	0x3d, r28	; 61
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	08 95       	ret

00001704 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::getList1() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E8getList1Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:445
  virtual uint8_t flags () { return ch.flags(); }

  virtual void patchStatus (Message& msg) { ch.patchStatus(msg); }
  virtual void configChanged () { ch.configChanged(); }

  virtual GenericList getList1 () const { return ch.getList1(); }
    1704:	cf 93       	push	r28
    1706:	df 93       	push	r29
    1708:	00 d0       	rcall	.+0      	; 0x170a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::getList1() const+0x6>
    170a:	00 d0       	rcall	.+0      	; 0x170c <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::getList1() const+0x8>
    170c:	00 d0       	rcall	.+0      	; 0x170e <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::getList1() const+0xa>
    170e:	1f 92       	push	r1
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	fc 01       	movw	r30, r24
    1716:	21 89       	ldd	r18, Z+17	; 0x11
    1718:	82 89       	ldd	r24, Z+18	; 0x12
    171a:	8a 83       	std	Y+2, r24	; 0x02
    171c:	45 e3       	ldi	r20, 0x35	; 53
    171e:	5a e0       	ldi	r21, 0x0A	; 10
    1720:	5d 83       	std	Y+5, r21	; 0x05
    1722:	4c 83       	std	Y+4, r20	; 0x04
    1724:	8d e0       	ldi	r24, 0x0D	; 13
    1726:	9e e0       	ldi	r25, 0x0E	; 14
    1728:	9f 83       	std	Y+7, r25	; 0x07
    172a:	8e 83       	std	Y+6, r24	; 0x06
    172c:	3a 81       	ldd	r19, Y+2	; 0x02
    172e:	54 2f       	mov	r21, r20
    1730:	6d 81       	ldd	r22, Y+5	; 0x05
    1732:	78 2f       	mov	r23, r24
    1734:	44 e0       	ldi	r20, 0x04	; 4
    1736:	8f 81       	ldd	r24, Y+7	; 0x07
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	27 96       	adiw	r28, 0x07	; 7
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	f8 94       	cli
    1740:	de bf       	out	0x3e, r29	; 62
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	cd bf       	out	0x3d, r28	; 61
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	08 95       	ret

0000174c <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::patchStatus(as::Message&)>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E11patchStatusERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:442
  virtual bool process (const SensorEventMsg& msg) { return ch.process(msg); }
#endif
  virtual uint8_t status () { return ch.status(); }
  virtual uint8_t flags () { return ch.flags(); }

  virtual void patchStatus (Message& msg) { ch.patchStatus(msg); }
    174c:	08 95       	ret

0000174e <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::status()>:
_ZNK2as18SwitchStateMachine6statusEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:323
  void status (uint8_t stat, uint16_t delay) {
    setState( stat == 0 ? AS_CM_JT_OFF : AS_CM_JT_ON, AskSinBase::intTimeCvt(delay) );
  }

  uint8_t status () const {
    return state == AS_CM_JT_OFF ? 0 : 200;
    174e:	fc 01       	movw	r30, r24
    1750:	82 85       	ldd	r24, Z+10	; 0x0a
    1752:	86 30       	cpi	r24, 0x06	; 6
    1754:	11 f0       	breq	.+4      	; 0x175a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::status()+0xc>
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E6statusEv():
    1756:	88 ec       	ldi	r24, 0xC8	; 200
    1758:	08 95       	ret
    175a:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:439
  virtual bool process (const ActionSetMsg& msg) { return ch.process(msg); }
  virtual bool process (const ActionCommandMsg& msg) { return ch.process(msg); }
  virtual bool process (const RemoteEventMsg& msg) { return ch.process(msg); }
  virtual bool process (const SensorEventMsg& msg) { return ch.process(msg); }
#endif
  virtual uint8_t status () { return ch.status(); }
    175c:	08 95       	ret

0000175e <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::ActionCommandMsg const&)>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E7processERKNS_16ActionCommandMsgE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:435
  virtual void firstinit () { ch.firstinit(); }

#ifndef SENSOR_ONLY
  virtual void stop () { ch.stop(); };
  virtual bool process (const ActionSetMsg& msg) { return ch.process(msg); }
  virtual bool process (const ActionCommandMsg& msg) { return ch.process(msg); }
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	08 95       	ret

00001762 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::inhibit() const>:
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_11SwitchList1ENS_15SwitchList3TmplINS_8RegList3INS_10SwitchReg3EEEEENS_9EmptyListELi10E6UList0SK_E7inhibitEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:54

  void changed (bool c) { change = c; }

  void inhibit (bool value) { inhi = value; }

  bool inhibit () const { return inhi; }
    1762:	fc 01       	movw	r30, r24
    1764:	87 85       	ldd	r24, Z+15	; 0x0f
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E7inhibitEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:423
  virtual uint16_t address () const { return ch.address(); }
  virtual uint8_t peers () const { return ch.peers(); }
  virtual bool changed () const { return ch.changed(); }
  virtual void changed (bool c) { ch.changed(c); }
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
    1766:	86 95       	lsr	r24
    1768:	81 70       	andi	r24, 0x01	; 1
    176a:	08 95       	ret

0000176c <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::inhibit(bool)>:
_ZN2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_11SwitchList1ENS_15SwitchList3TmplINS_8RegList3INS_10SwitchReg3EEEEENS_9EmptyListELi10E6UList0SK_E7inhibitEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:52

  bool changed () const { return change; }

  void changed (bool c) { change = c; }

  void inhibit (bool value) { inhi = value; }
    176c:	fc 01       	movw	r30, r24
    176e:	27 85       	ldd	r18, Z+15	; 0x0f
    1770:	60 fb       	bst	r22, 0
    1772:	21 f9       	bld	r18, 1
    1774:	27 87       	std	Z+15, r18	; 0x0f
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E7inhibitEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:422
  virtual uint8_t number () const { return ch.number(); }
  virtual uint16_t address () const { return ch.address(); }
  virtual uint8_t peers () const { return ch.peers(); }
  virtual bool changed () const { return ch.changed(); }
  virtual void changed (bool c) { ch.changed(c); }
  virtual void inhibit (bool value) { ch.inhibit(value); }
    1776:	08 95       	ret

00001778 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::changed(bool)>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E7changedEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:421
  virtual uint16_t size () const { return ch.size(); }
  virtual uint8_t number () const { return ch.number(); }
  virtual uint16_t address () const { return ch.address(); }
  virtual uint8_t peers () const { return ch.peers(); }
  virtual bool changed () const { return ch.changed(); }
  virtual void changed (bool c) { ch.changed(c); }
    1778:	fc 01       	movw	r30, r24
    177a:	96 81       	ldd	r25, Z+6	; 0x06
_ZN2as5Alarm7setflagEbh.isra.10():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:25
    177c:	66 23       	and	r22, r22
    177e:	19 f0       	breq	.+6      	; 0x1786 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::changed(bool)+0xe>
    1780:	94 60       	ori	r25, 0x04	; 4
    1782:	96 83       	std	Z+6, r25	; 0x06
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E7changedEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:421
    1784:	08 95       	ret
_ZN2as5Alarm7setflagEbh.isra.10():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:25
    1786:	9b 7f       	andi	r25, 0xFB	; 251
    1788:	fc cf       	rjmp	.-8      	; 0x1782 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::changed(bool)+0xa>

0000178a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::changed() const>:
_ZNK2as5Alarm7hasflagEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:28
  void setflag(uint8_t mask) { flags |= mask; }
  void remflag(uint8_t mask) { flags &= ~mask; }
  bool hasflag(uint8_t mask) const { return (flags & mask) == mask; }
    178a:	fc 01       	movw	r30, r24
    178c:	86 81       	ldd	r24, Z+6	; 0x06
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E7changedEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:420
  virtual void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) { ch.setup(dev,number,addr); }
  virtual uint16_t size () const { return ch.size(); }
  virtual uint8_t number () const { return ch.number(); }
  virtual uint16_t address () const { return ch.address(); }
  virtual uint8_t peers () const { return ch.peers(); }
  virtual bool changed () const { return ch.changed(); }
    178e:	82 fb       	bst	r24, 2
    1790:	88 27       	eor	r24, r24
    1792:	80 f9       	bld	r24, 0
    1794:	08 95       	ret

00001796 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::peers() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E5peersEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:419

  virtual void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) { ch.setup(dev,number,addr); }
  virtual uint16_t size () const { return ch.size(); }
  virtual uint8_t number () const { return ch.number(); }
  virtual uint16_t address () const { return ch.address(); }
  virtual uint8_t peers () const { return ch.peers(); }
    1796:	8a e0       	ldi	r24, 0x0A	; 10
    1798:	08 95       	ret

0000179a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::address() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E7addressEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:418
  operator ChannelType& () { return ch; }

  virtual void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) { ch.setup(dev,number,addr); }
  virtual uint16_t size () const { return ch.size(); }
  virtual uint8_t number () const { return ch.number(); }
  virtual uint16_t address () const { return ch.address(); }
    179a:	fc 01       	movw	r30, r24
    179c:	81 89       	ldd	r24, Z+17	; 0x11
    179e:	92 89       	ldd	r25, Z+18	; 0x12
    17a0:	08 95       	ret

000017a2 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::number() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E6numberEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:417

  operator ChannelType& () { return ch; }

  virtual void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) { ch.setup(dev,number,addr); }
  virtual uint16_t size () const { return ch.size(); }
  virtual uint8_t number () const { return ch.number(); }
    17a2:	fc 01       	movw	r30, r24
    17a4:	80 89       	ldd	r24, Z+16	; 0x10
    17a6:	08 95       	ret

000017a8 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::size() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E4sizeEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:416
  virtual ~VirtChannel () {}

  operator ChannelType& () { return ch; }

  virtual void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) { ch.setup(dev,number,addr); }
  virtual uint16_t size () const { return ch.size(); }
    17a8:	88 e0       	ldi	r24, 0x08	; 8
    17aa:	91 e0       	ldi	r25, 0x01	; 1
    17ac:	08 95       	ret

000017ae <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::setup(as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>*, unsigned char, unsigned int)>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E5setupEPNS_6DeviceISD_SF_EEhj():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:415
  VirtChannel () {}
  virtual ~VirtChannel () {}

  operator ChannelType& () { return ch; }

  virtual void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) { ch.setup(dev,number,addr); }
    17ae:	fc 01       	movw	r30, r24
_ZN2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_11SwitchList1ENS_15SwitchList3TmplINS_8RegList3INS_10SwitchReg3EEEEENS_9EmptyListELi10E6UList0SK_E5setupEPNS_6DeviceISD_SL_EEhj():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:59
  bool inhibit () const { return inhi; }

  bool aesActive () const { return getList1().aesActive(); }

  void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) {
    this->dev = dev;
    17b0:	76 87       	std	Z+14, r23	; 0x0e
    17b2:	65 87       	std	Z+13, r22	; 0x0d
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:60
    this->num = number;
    17b4:	40 8b       	std	Z+16, r20	; 0x10
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:61
    this->addr = addr;
    17b6:	32 8b       	std	Z+18, r19	; 0x12
    17b8:	21 8b       	std	Z+17, r18	; 0x11
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E5setupEPNS_6DeviceISD_SF_EEhj():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:415
  VirtChannel () {}
  virtual ~VirtChannel () {}

  operator ChannelType& () { return ch; }

  virtual void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) { ch.setup(dev,number,addr); }
    17ba:	08 95       	ret

000017bc <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::getList2() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E8getList2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:446

  virtual void patchStatus (Message& msg) { ch.patchStatus(msg); }
  virtual void configChanged () { ch.configChanged(); }

  virtual GenericList getList1 () const { return ch.getList1(); }
  virtual GenericList getList2 () const { return ch.getList2(); }
    17bc:	cf 93       	push	r28
    17be:	df 93       	push	r29
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::getList2() const+0x6>
    17c2:	00 d0       	rcall	.+0      	; 0x17c4 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::getList2() const+0x8>
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::getList2() const+0xa>
    17c6:	1f 92       	push	r1
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE7SCList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi10E6UList0SF_E8getList2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:180
    // we start always with list1
    return List1Type(address());
  }

  List2Type getList2 () const {
    return List2Type(address()+List1::size());
    17cc:	fc 01       	movw	r30, r24
    17ce:	26 85       	ldd	r18, Z+14	; 0x0e
    17d0:	37 85       	ldd	r19, Z+15	; 0x0f
    17d2:	2b 5f       	subi	r18, 0xFB	; 251
    17d4:	3f 4f       	sbci	r19, 0xFF	; 255
    17d6:	3a 83       	std	Y+2, r19	; 0x02
    17d8:	29 83       	std	Y+1, r18	; 0x01
    17da:	4d e5       	ldi	r20, 0x5D	; 93
    17dc:	5a e0       	ldi	r21, 0x0A	; 10
    17de:	5d 83       	std	Y+5, r21	; 0x05
    17e0:	4c 83       	std	Y+4, r20	; 0x04
    17e2:	8f e5       	ldi	r24, 0x5F	; 95
    17e4:	9a e0       	ldi	r25, 0x0A	; 10
    17e6:	9f 83       	std	Y+7, r25	; 0x07
    17e8:	8e 83       	std	Y+6, r24	; 0x06
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E8getList2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:446

  virtual void patchStatus (Message& msg) { ch.patchStatus(msg); }
  virtual void configChanged () { ch.configChanged(); }

  virtual GenericList getList1 () const { return ch.getList1(); }
  virtual GenericList getList2 () const { return ch.getList2(); }
    17ea:	3a 81       	ldd	r19, Y+2	; 0x02
    17ec:	54 2f       	mov	r21, r20
    17ee:	6d 81       	ldd	r22, Y+5	; 0x05
    17f0:	78 2f       	mov	r23, r24
    17f2:	41 e0       	ldi	r20, 0x01	; 1
    17f4:	8f 81       	ldd	r24, Y+7	; 0x07
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	27 96       	adiw	r28, 0x07	; 7
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	f8 94       	cli
    17fe:	de bf       	out	0x3e, r29	; 62
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	cd bf       	out	0x3d, r28	; 61
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	08 95       	ret

0000180a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::getList1() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E8getList1Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:445
  virtual uint8_t flags () { return ch.flags(); }

  virtual void patchStatus (Message& msg) { ch.patchStatus(msg); }
  virtual void configChanged () { ch.configChanged(); }

  virtual GenericList getList1 () const { return ch.getList1(); }
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
    180e:	00 d0       	rcall	.+0      	; 0x1810 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::getList1() const+0x6>
    1810:	00 d0       	rcall	.+0      	; 0x1812 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::getList1() const+0x8>
    1812:	00 d0       	rcall	.+0      	; 0x1814 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::getList1() const+0xa>
    1814:	1f 92       	push	r1
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	fc 01       	movw	r30, r24
    181c:	26 85       	ldd	r18, Z+14	; 0x0e
    181e:	87 85       	ldd	r24, Z+15	; 0x0f
    1820:	8a 83       	std	Y+2, r24	; 0x02
    1822:	4f e3       	ldi	r20, 0x3F	; 63
    1824:	5a e0       	ldi	r21, 0x0A	; 10
    1826:	5d 83       	std	Y+5, r21	; 0x05
    1828:	4c 83       	std	Y+4, r20	; 0x04
    182a:	8c ee       	ldi	r24, 0xEC	; 236
    182c:	9d e0       	ldi	r25, 0x0D	; 13
    182e:	9f 83       	std	Y+7, r25	; 0x07
    1830:	8e 83       	std	Y+6, r24	; 0x06
    1832:	3a 81       	ldd	r19, Y+2	; 0x02
    1834:	54 2f       	mov	r21, r20
    1836:	6d 81       	ldd	r22, Y+5	; 0x05
    1838:	78 2f       	mov	r23, r24
    183a:	45 e0       	ldi	r20, 0x05	; 5
    183c:	8f 81       	ldd	r24, Y+7	; 0x07
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	27 96       	adiw	r28, 0x07	; 7
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	f8 94       	cli
    1846:	de bf       	out	0x3e, r29	; 62
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	cd bf       	out	0x3d, r28	; 61
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	08 95       	ret

00001852 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::flags()>:
_ZNK2as19StateGenericChannelINS_14OnePinPositionILj0EEENS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101ISA_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10EE5flagsEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:72
  uint8_t status () const {
    return sender.state;
  }

  uint8_t flags () const {
    uint8_t flags = sabotage ? 0x07 << 1 : 0x00;
    1852:	fc 01       	movw	r30, r24
    1854:	85 8d       	ldd	r24, Z+29	; 0x1d
    1856:	81 11       	cpse	r24, r1
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E5flagsEv():
    1858:	8e e0       	ldi	r24, 0x0E	; 14
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:440
  virtual bool process (const ActionCommandMsg& msg) { return ch.process(msg); }
  virtual bool process (const RemoteEventMsg& msg) { return ch.process(msg); }
  virtual bool process (const SensorEventMsg& msg) { return ch.process(msg); }
#endif
  virtual uint8_t status () { return ch.status(); }
  virtual uint8_t flags () { return ch.flags(); }
    185a:	08 95       	ret

0000185c <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::status()>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E6statusEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:439
  virtual bool process (const ActionSetMsg& msg) { return ch.process(msg); }
  virtual bool process (const ActionCommandMsg& msg) { return ch.process(msg); }
  virtual bool process (const RemoteEventMsg& msg) { return ch.process(msg); }
  virtual bool process (const SensorEventMsg& msg) { return ch.process(msg); }
#endif
  virtual uint8_t status () { return ch.status(); }
    185c:	fc 01       	movw	r30, r24
    185e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1860:	08 95       	ret

00001862 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::process(as::ActionSetMsg const&)>:
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:375
    return ++msgcount;
  }

  virtual void configChanged () {}

  virtual bool process(__attribute__((unused)) Message& msg) { return false; }
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	08 95       	ret

00001866 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::inhibit() const>:
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE7SCList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi10E6UList0SF_E7inhibitEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:54

  void changed (bool c) { change = c; }

  void inhibit (bool value) { inhi = value; }

  bool inhibit () const { return inhi; }
    1866:	fc 01       	movw	r30, r24
    1868:	84 85       	ldd	r24, Z+12	; 0x0c
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E7inhibitEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:423
  virtual uint16_t address () const { return ch.address(); }
  virtual uint8_t peers () const { return ch.peers(); }
  virtual bool changed () const { return ch.changed(); }
  virtual void changed (bool c) { ch.changed(c); }
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
    186a:	86 95       	lsr	r24
    186c:	81 70       	andi	r24, 0x01	; 1
    186e:	08 95       	ret

00001870 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::inhibit(bool)>:
_ZN2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE7SCList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi10E6UList0SF_E7inhibitEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:52

  bool changed () const { return change; }

  void changed (bool c) { change = c; }

  void inhibit (bool value) { inhi = value; }
    1870:	fc 01       	movw	r30, r24
    1872:	24 85       	ldd	r18, Z+12	; 0x0c
    1874:	60 fb       	bst	r22, 0
    1876:	21 f9       	bld	r18, 1
    1878:	24 87       	std	Z+12, r18	; 0x0c
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E7inhibitEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:422
  virtual uint8_t number () const { return ch.number(); }
  virtual uint16_t address () const { return ch.address(); }
  virtual uint8_t peers () const { return ch.peers(); }
  virtual bool changed () const { return ch.changed(); }
  virtual void changed (bool c) { ch.changed(c); }
  virtual void inhibit (bool value) { ch.inhibit(value); }
    187a:	08 95       	ret

0000187c <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::changed(bool)>:
_ZN2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE7SCList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi10E6UList0SF_E7changedEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:50

  uint8_t peers () const { return PeerCount; }

  bool changed () const { return change; }

  void changed (bool c) { change = c; }
    187c:	fc 01       	movw	r30, r24
    187e:	24 85       	ldd	r18, Z+12	; 0x0c
    1880:	60 fb       	bst	r22, 0
    1882:	20 f9       	bld	r18, 0
    1884:	24 87       	std	Z+12, r18	; 0x0c
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E7changedEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:421
  virtual uint16_t size () const { return ch.size(); }
  virtual uint8_t number () const { return ch.number(); }
  virtual uint16_t address () const { return ch.address(); }
  virtual uint8_t peers () const { return ch.peers(); }
  virtual bool changed () const { return ch.changed(); }
  virtual void changed (bool c) { ch.changed(c); }
    1886:	08 95       	ret

00001888 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::changed() const>:
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE7SCList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi10E6UList0SF_E7changedEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:48

  uint16_t address () const { return addr; }

  uint8_t peers () const { return PeerCount; }

  bool changed () const { return change; }
    1888:	fc 01       	movw	r30, r24
    188a:	84 85       	ldd	r24, Z+12	; 0x0c
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E7changedEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:420
  virtual void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) { ch.setup(dev,number,addr); }
  virtual uint16_t size () const { return ch.size(); }
  virtual uint8_t number () const { return ch.number(); }
  virtual uint16_t address () const { return ch.address(); }
  virtual uint8_t peers () const { return ch.peers(); }
  virtual bool changed () const { return ch.changed(); }
    188c:	81 70       	andi	r24, 0x01	; 1
    188e:	08 95       	ret

00001890 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::address() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E7addressEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:418
  operator ChannelType& () { return ch; }

  virtual void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) { ch.setup(dev,number,addr); }
  virtual uint16_t size () const { return ch.size(); }
  virtual uint8_t number () const { return ch.number(); }
  virtual uint16_t address () const { return ch.address(); }
    1890:	fc 01       	movw	r30, r24
    1892:	86 85       	ldd	r24, Z+14	; 0x0e
    1894:	97 85       	ldd	r25, Z+15	; 0x0f
    1896:	08 95       	ret

00001898 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::number() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E6numberEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:417

  operator ChannelType& () { return ch; }

  virtual void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) { ch.setup(dev,number,addr); }
  virtual uint16_t size () const { return ch.size(); }
  virtual uint8_t number () const { return ch.number(); }
    1898:	fc 01       	movw	r30, r24
    189a:	85 85       	ldd	r24, Z+13	; 0x0d
    189c:	08 95       	ret

0000189e <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::size() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E4sizeEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:416
  virtual ~VirtChannel () {}

  operator ChannelType& () { return ch; }

  virtual void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) { ch.setup(dev,number,addr); }
  virtual uint16_t size () const { return ch.size(); }
    189e:	87 e3       	ldi	r24, 0x37	; 55
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	08 95       	ret

000018a4 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::setup(as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>*, unsigned char, unsigned int)>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E5setupEPNS_6DeviceISD_SF_EEhj():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:415
  VirtChannel () {}
  virtual ~VirtChannel () {}

  operator ChannelType& () { return ch; }

  virtual void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) { ch.setup(dev,number,addr); }
    18a4:	fc 01       	movw	r30, r24
_ZN2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE7SCList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi10E6UList0SF_E5setupEPNS_6DeviceISD_SJ_EEhj():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:59
  bool inhibit () const { return inhi; }

  bool aesActive () const { return getList1().aesActive(); }

  void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) {
    this->dev = dev;
    18a6:	73 87       	std	Z+11, r23	; 0x0b
    18a8:	62 87       	std	Z+10, r22	; 0x0a
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:60
    this->num = number;
    18aa:	45 87       	std	Z+13, r20	; 0x0d
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:61
    this->addr = addr;
    18ac:	37 87       	std	Z+15, r19	; 0x0f
    18ae:	26 87       	std	Z+14, r18	; 0x0e
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E5setupEPNS_6DeviceISD_SF_EEhj():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:415
  VirtChannel () {}
  virtual ~VirtChannel () {}

  operator ChannelType& () { return ch; }

  virtual void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) { ch.setup(dev,number,addr); }
    18b0:	08 95       	ret

000018b2 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::getList2() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E8getList2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:446

  virtual void patchStatus (Message& msg) { ch.patchStatus(msg); }
  virtual void configChanged () { ch.configChanged(); }

  virtual GenericList getList1 () const { return ch.getList1(); }
  virtual GenericList getList2 () const { return ch.getList2(); }
    18b2:	cf 93       	push	r28
    18b4:	df 93       	push	r29
    18b6:	00 d0       	rcall	.+0      	; 0x18b8 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::getList2() const+0x6>
    18b8:	00 d0       	rcall	.+0      	; 0x18ba <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::getList2() const+0x8>
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::getList2() const+0xa>
    18bc:	1f 92       	push	r1
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_5List4ELi6E6UList0SF_E8getList2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:180
    // we start always with list1
    return List1Type(address());
  }

  List2Type getList2 () const {
    return List2Type(address()+List1::size());
    18c2:	fc 01       	movw	r30, r24
    18c4:	26 85       	ldd	r18, Z+14	; 0x0e
    18c6:	37 85       	ldd	r19, Z+15	; 0x0f
    18c8:	26 5f       	subi	r18, 0xF6	; 246
    18ca:	3f 4f       	sbci	r19, 0xFF	; 255
    18cc:	3a 83       	std	Y+2, r19	; 0x02
    18ce:	29 83       	std	Y+1, r18	; 0x01
    18d0:	4d e5       	ldi	r20, 0x5D	; 93
    18d2:	5a e0       	ldi	r21, 0x0A	; 10
    18d4:	5d 83       	std	Y+5, r21	; 0x05
    18d6:	4c 83       	std	Y+4, r20	; 0x04
    18d8:	8f e5       	ldi	r24, 0x5F	; 95
    18da:	9a e0       	ldi	r25, 0x0A	; 10
    18dc:	9f 83       	std	Y+7, r25	; 0x07
    18de:	8e 83       	std	Y+6, r24	; 0x06
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E8getList2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:446

  virtual void patchStatus (Message& msg) { ch.patchStatus(msg); }
  virtual void configChanged () { ch.configChanged(); }

  virtual GenericList getList1 () const { return ch.getList1(); }
  virtual GenericList getList2 () const { return ch.getList2(); }
    18e0:	3a 81       	ldd	r19, Y+2	; 0x02
    18e2:	54 2f       	mov	r21, r20
    18e4:	6d 81       	ldd	r22, Y+5	; 0x05
    18e6:	78 2f       	mov	r23, r24
    18e8:	41 e0       	ldi	r20, 0x01	; 1
    18ea:	8f 81       	ldd	r24, Y+7	; 0x07
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	27 96       	adiw	r28, 0x07	; 7
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	de bf       	out	0x3e, r29	; 62
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	cd bf       	out	0x3d, r28	; 61
    18fa:	df 91       	pop	r29
    18fc:	cf 91       	pop	r28
    18fe:	08 95       	ret

00001900 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::getList1() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E8getList1Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:445
  virtual uint8_t flags () { return ch.flags(); }

  virtual void patchStatus (Message& msg) { ch.patchStatus(msg); }
  virtual void configChanged () { ch.configChanged(); }

  virtual GenericList getList1 () const { return ch.getList1(); }
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	00 d0       	rcall	.+0      	; 0x1906 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::getList1() const+0x6>
    1906:	00 d0       	rcall	.+0      	; 0x1908 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::getList1() const+0x8>
    1908:	00 d0       	rcall	.+0      	; 0x190a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::getList1() const+0xa>
    190a:	1f 92       	push	r1
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	fc 01       	movw	r30, r24
    1912:	26 85       	ldd	r18, Z+14	; 0x0e
    1914:	87 85       	ldd	r24, Z+15	; 0x0f
    1916:	8a 83       	std	Y+2, r24	; 0x02
    1918:	41 e6       	ldi	r20, 0x61	; 97
    191a:	5a e0       	ldi	r21, 0x0A	; 10
    191c:	5d 83       	std	Y+5, r21	; 0x05
    191e:	4c 83       	std	Y+4, r20	; 0x04
    1920:	82 ee       	ldi	r24, 0xE2	; 226
    1922:	9d e0       	ldi	r25, 0x0D	; 13
    1924:	9f 83       	std	Y+7, r25	; 0x07
    1926:	8e 83       	std	Y+6, r24	; 0x06
    1928:	3a 81       	ldd	r19, Y+2	; 0x02
    192a:	54 2f       	mov	r21, r20
    192c:	6d 81       	ldd	r22, Y+5	; 0x05
    192e:	78 2f       	mov	r23, r24
    1930:	4a e0       	ldi	r20, 0x0A	; 10
    1932:	8f 81       	ldd	r24, Y+7	; 0x07
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	27 96       	adiw	r28, 0x07	; 7
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	de bf       	out	0x3e, r29	; 62
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	cd bf       	out	0x3d, r28	; 61
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	08 95       	ret

00001948 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::flags()>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E5flagsEv():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:709
    }

    uint8_t status () const { return 0; }
    uint8_t flags () const {
      uint8_t flg = 0x00;
      if (phcalibrationMode == true)  flg = 0x01<<1;
    1948:	fc 01       	movw	r30, r24
    194a:	ea 5a       	subi	r30, 0xAA	; 170
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	20 81       	ld	r18, Z
    1950:	21 11       	cpse	r18, r1
    1952:	08 c0       	rjmp	.+16     	; 0x1964 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::flags()+0x1c>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:710
      else if (calib_valid == false)  flg = 0x01<<2;
    1954:	88 5a       	subi	r24, 0xA8	; 168
    1956:	9f 4f       	sbci	r25, 0xFF	; 255
    1958:	fc 01       	movw	r30, r24
    195a:	80 81       	ld	r24, Z
    195c:	81 11       	cpse	r24, r1
    195e:	04 c0       	rjmp	.+8      	; 0x1968 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::flags()+0x20>
    1960:	84 e0       	ldi	r24, 0x04	; 4
    1962:	08 95       	ret
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:709
    }

    uint8_t status () const { return 0; }
    uint8_t flags () const {
      uint8_t flg = 0x00;
      if (phcalibrationMode == true)  flg = 0x01<<1;
    1964:	82 e0       	ldi	r24, 0x02	; 2
    1966:	08 95       	ret
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:708
      toggleWaitTime = this->getList1().ToggleWaitTime();
    }

    uint8_t status () const { return 0; }
    uint8_t flags () const {
      uint8_t flg = 0x00;
    1968:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:440
  virtual bool process (const ActionCommandMsg& msg) { return ch.process(msg); }
  virtual bool process (const RemoteEventMsg& msg) { return ch.process(msg); }
  virtual bool process (const SensorEventMsg& msg) { return ch.process(msg); }
#endif
  virtual uint8_t status () { return ch.status(); }
  virtual uint8_t flags () { return ch.flags(); }
    196a:	08 95       	ret

0000196c <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::flags()>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E6statusEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:439
  virtual bool process (const ActionSetMsg& msg) { return ch.process(msg); }
  virtual bool process (const ActionCommandMsg& msg) { return ch.process(msg); }
  virtual bool process (const RemoteEventMsg& msg) { return ch.process(msg); }
  virtual bool process (const SensorEventMsg& msg) { return ch.process(msg); }
#endif
  virtual uint8_t status () { return ch.status(); }
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	08 95       	ret

00001970 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::inhibit() const>:
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_5List4ELi6E6UList0SF_E7inhibitEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:54

  void changed (bool c) { change = c; }

  void inhibit (bool value) { inhi = value; }

  bool inhibit () const { return inhi; }
    1970:	fc 01       	movw	r30, r24
    1972:	84 85       	ldd	r24, Z+12	; 0x0c
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E7inhibitEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:423
  virtual uint16_t address () const { return ch.address(); }
  virtual uint8_t peers () const { return ch.peers(); }
  virtual bool changed () const { return ch.changed(); }
  virtual void changed (bool c) { ch.changed(c); }
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
    1974:	86 95       	lsr	r24
    1976:	81 70       	andi	r24, 0x01	; 1
    1978:	08 95       	ret

0000197a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::inhibit(bool)>:
_ZN2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_5List4ELi6E6UList0SF_E7inhibitEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:52

  bool changed () const { return change; }

  void changed (bool c) { change = c; }

  void inhibit (bool value) { inhi = value; }
    197a:	fc 01       	movw	r30, r24
    197c:	24 85       	ldd	r18, Z+12	; 0x0c
    197e:	60 fb       	bst	r22, 0
    1980:	21 f9       	bld	r18, 1
    1982:	24 87       	std	Z+12, r18	; 0x0c
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E7inhibitEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:422
  virtual uint8_t number () const { return ch.number(); }
  virtual uint16_t address () const { return ch.address(); }
  virtual uint8_t peers () const { return ch.peers(); }
  virtual bool changed () const { return ch.changed(); }
  virtual void changed (bool c) { ch.changed(c); }
  virtual void inhibit (bool value) { ch.inhibit(value); }
    1984:	08 95       	ret

00001986 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::changed(bool)>:
_ZN2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_5List4ELi6E6UList0SF_E7changedEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:50

  uint8_t peers () const { return PeerCount; }

  bool changed () const { return change; }

  void changed (bool c) { change = c; }
    1986:	fc 01       	movw	r30, r24
    1988:	24 85       	ldd	r18, Z+12	; 0x0c
    198a:	60 fb       	bst	r22, 0
    198c:	20 f9       	bld	r18, 0
    198e:	24 87       	std	Z+12, r18	; 0x0c
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E7changedEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:421
  virtual uint16_t size () const { return ch.size(); }
  virtual uint8_t number () const { return ch.number(); }
  virtual uint16_t address () const { return ch.address(); }
  virtual uint8_t peers () const { return ch.peers(); }
  virtual bool changed () const { return ch.changed(); }
  virtual void changed (bool c) { ch.changed(c); }
    1990:	08 95       	ret

00001992 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::changed() const>:
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_5List4ELi6E6UList0SF_E7changedEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:48

  uint16_t address () const { return addr; }

  uint8_t peers () const { return PeerCount; }

  bool changed () const { return change; }
    1992:	fc 01       	movw	r30, r24
    1994:	84 85       	ldd	r24, Z+12	; 0x0c
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E7changedEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:420
  virtual void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) { ch.setup(dev,number,addr); }
  virtual uint16_t size () const { return ch.size(); }
  virtual uint8_t number () const { return ch.number(); }
  virtual uint16_t address () const { return ch.address(); }
  virtual uint8_t peers () const { return ch.peers(); }
  virtual bool changed () const { return ch.changed(); }
    1996:	81 70       	andi	r24, 0x01	; 1
    1998:	08 95       	ret

0000199a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::peers() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E5peersEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:419

  virtual void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) { ch.setup(dev,number,addr); }
  virtual uint16_t size () const { return ch.size(); }
  virtual uint8_t number () const { return ch.number(); }
  virtual uint16_t address () const { return ch.address(); }
  virtual uint8_t peers () const { return ch.peers(); }
    199a:	86 e0       	ldi	r24, 0x06	; 6
    199c:	08 95       	ret

0000199e <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::address() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E7addressEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:418
  operator ChannelType& () { return ch; }

  virtual void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) { ch.setup(dev,number,addr); }
  virtual uint16_t size () const { return ch.size(); }
  virtual uint8_t number () const { return ch.number(); }
  virtual uint16_t address () const { return ch.address(); }
    199e:	fc 01       	movw	r30, r24
    19a0:	86 85       	ldd	r24, Z+14	; 0x0e
    19a2:	97 85       	ldd	r25, Z+15	; 0x0f
    19a4:	08 95       	ret

000019a6 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::number() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E6numberEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:417

  operator ChannelType& () { return ch; }

  virtual void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) { ch.setup(dev,number,addr); }
  virtual uint16_t size () const { return ch.size(); }
  virtual uint8_t number () const { return ch.number(); }
    19a6:	fc 01       	movw	r30, r24
    19a8:	85 85       	ldd	r24, Z+13	; 0x0d
    19aa:	08 95       	ret

000019ac <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::size() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E4sizeEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:416
  virtual ~VirtChannel () {}

  operator ChannelType& () { return ch; }

  virtual void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) { ch.setup(dev,number,addr); }
  virtual uint16_t size () const { return ch.size(); }
    19ac:	88 e2       	ldi	r24, 0x28	; 40
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	08 95       	ret

000019b2 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::getList2() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E8getList2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:446

  virtual void patchStatus (Message& msg) { ch.patchStatus(msg); }
  virtual void configChanged () { ch.configChanged(); }

  virtual GenericList getList1 () const { return ch.getList1(); }
  virtual GenericList getList2 () const { return ch.getList2(); }
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::getList2() const+0x6>
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::getList2() const+0x8>
    19ba:	00 d0       	rcall	.+0      	; 0x19bc <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::getList2() const+0xa>
    19bc:	1f 92       	push	r1
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi1E6UList0SF_E8getList2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:180
    // we start always with list1
    return List1Type(address());
  }

  List2Type getList2 () const {
    return List2Type(address()+List1::size());
    19c2:	fc 01       	movw	r30, r24
    19c4:	26 81       	ldd	r18, Z+6	; 0x06
    19c6:	37 81       	ldd	r19, Z+7	; 0x07
    19c8:	26 5f       	subi	r18, 0xF6	; 246
    19ca:	3f 4f       	sbci	r19, 0xFF	; 255
    19cc:	3a 83       	std	Y+2, r19	; 0x02
    19ce:	29 83       	std	Y+1, r18	; 0x01
    19d0:	4d e5       	ldi	r20, 0x5D	; 93
    19d2:	5a e0       	ldi	r21, 0x0A	; 10
    19d4:	5d 83       	std	Y+5, r21	; 0x05
    19d6:	4c 83       	std	Y+4, r20	; 0x04
    19d8:	8f e5       	ldi	r24, 0x5F	; 95
    19da:	9a e0       	ldi	r25, 0x0A	; 10
    19dc:	9f 83       	std	Y+7, r25	; 0x07
    19de:	8e 83       	std	Y+6, r24	; 0x06
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E8getList2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:446

  virtual void patchStatus (Message& msg) { ch.patchStatus(msg); }
  virtual void configChanged () { ch.configChanged(); }

  virtual GenericList getList1 () const { return ch.getList1(); }
  virtual GenericList getList2 () const { return ch.getList2(); }
    19e0:	3a 81       	ldd	r19, Y+2	; 0x02
    19e2:	54 2f       	mov	r21, r20
    19e4:	6d 81       	ldd	r22, Y+5	; 0x05
    19e6:	78 2f       	mov	r23, r24
    19e8:	41 e0       	ldi	r20, 0x01	; 1
    19ea:	8f 81       	ldd	r24, Y+7	; 0x07
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	27 96       	adiw	r28, 0x07	; 7
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	de bf       	out	0x3e, r29	; 62
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	cd bf       	out	0x3d, r28	; 61
    19fa:	df 91       	pop	r29
    19fc:	cf 91       	pop	r28
    19fe:	08 95       	ret

00001a00 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::getList1() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E8getList1Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:445
  virtual uint8_t flags () { return ch.flags(); }

  virtual void patchStatus (Message& msg) { ch.patchStatus(msg); }
  virtual void configChanged () { ch.configChanged(); }

  virtual GenericList getList1 () const { return ch.getList1(); }
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    1a04:	00 d0       	rcall	.+0      	; 0x1a06 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::getList1() const+0x6>
    1a06:	00 d0       	rcall	.+0      	; 0x1a08 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::getList1() const+0x8>
    1a08:	00 d0       	rcall	.+0      	; 0x1a0a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::getList1() const+0xa>
    1a0a:	1f 92       	push	r1
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	fc 01       	movw	r30, r24
    1a12:	26 81       	ldd	r18, Z+6	; 0x06
    1a14:	87 81       	ldd	r24, Z+7	; 0x07
    1a16:	8a 83       	std	Y+2, r24	; 0x02
    1a18:	41 e6       	ldi	r20, 0x61	; 97
    1a1a:	5a e0       	ldi	r21, 0x0A	; 10
    1a1c:	5d 83       	std	Y+5, r21	; 0x05
    1a1e:	4c 83       	std	Y+4, r20	; 0x04
    1a20:	82 ee       	ldi	r24, 0xE2	; 226
    1a22:	9d e0       	ldi	r25, 0x0D	; 13
    1a24:	9f 83       	std	Y+7, r25	; 0x07
    1a26:	8e 83       	std	Y+6, r24	; 0x06
    1a28:	3a 81       	ldd	r19, Y+2	; 0x02
    1a2a:	54 2f       	mov	r21, r20
    1a2c:	6d 81       	ldd	r22, Y+5	; 0x05
    1a2e:	78 2f       	mov	r23, r24
    1a30:	4a e0       	ldi	r20, 0x0A	; 10
    1a32:	8f 81       	ldd	r24, Y+7	; 0x07
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	27 96       	adiw	r28, 0x07	; 7
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	08 95       	ret

00001a48 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::inhibit() const>:
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi1E6UList0SF_E7inhibitEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:54

  void changed (bool c) { change = c; }

  void inhibit (bool value) { inhi = value; }

  bool inhibit () const { return inhi; }
    1a48:	fc 01       	movw	r30, r24
    1a4a:	84 81       	ldd	r24, Z+4	; 0x04
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E7inhibitEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:423
  virtual uint16_t address () const { return ch.address(); }
  virtual uint8_t peers () const { return ch.peers(); }
  virtual bool changed () const { return ch.changed(); }
  virtual void changed (bool c) { ch.changed(c); }
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
    1a4c:	86 95       	lsr	r24
    1a4e:	81 70       	andi	r24, 0x01	; 1
    1a50:	08 95       	ret

00001a52 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::inhibit(bool)>:
_ZN2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi1E6UList0SF_E7inhibitEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:52

  bool changed () const { return change; }

  void changed (bool c) { change = c; }

  void inhibit (bool value) { inhi = value; }
    1a52:	fc 01       	movw	r30, r24
    1a54:	24 81       	ldd	r18, Z+4	; 0x04
    1a56:	60 fb       	bst	r22, 0
    1a58:	21 f9       	bld	r18, 1
    1a5a:	24 83       	std	Z+4, r18	; 0x04
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E7inhibitEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:422
  virtual uint8_t number () const { return ch.number(); }
  virtual uint16_t address () const { return ch.address(); }
  virtual uint8_t peers () const { return ch.peers(); }
  virtual bool changed () const { return ch.changed(); }
  virtual void changed (bool c) { ch.changed(c); }
  virtual void inhibit (bool value) { ch.inhibit(value); }
    1a5c:	08 95       	ret

00001a5e <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::changed(bool)>:
_ZN2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi1E6UList0SF_E7changedEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:50

  uint8_t peers () const { return PeerCount; }

  bool changed () const { return change; }

  void changed (bool c) { change = c; }
    1a5e:	fc 01       	movw	r30, r24
    1a60:	24 81       	ldd	r18, Z+4	; 0x04
    1a62:	60 fb       	bst	r22, 0
    1a64:	20 f9       	bld	r18, 0
    1a66:	24 83       	std	Z+4, r18	; 0x04
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E7changedEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:421
  virtual uint16_t size () const { return ch.size(); }
  virtual uint8_t number () const { return ch.number(); }
  virtual uint16_t address () const { return ch.address(); }
  virtual uint8_t peers () const { return ch.peers(); }
  virtual bool changed () const { return ch.changed(); }
  virtual void changed (bool c) { ch.changed(c); }
    1a68:	08 95       	ret

00001a6a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::changed() const>:
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi1E6UList0SF_E7changedEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:48

  uint16_t address () const { return addr; }

  uint8_t peers () const { return PeerCount; }

  bool changed () const { return change; }
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	84 81       	ldd	r24, Z+4	; 0x04
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E7changedEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:420
  virtual void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) { ch.setup(dev,number,addr); }
  virtual uint16_t size () const { return ch.size(); }
  virtual uint8_t number () const { return ch.number(); }
  virtual uint16_t address () const { return ch.address(); }
  virtual uint8_t peers () const { return ch.peers(); }
  virtual bool changed () const { return ch.changed(); }
    1a6e:	81 70       	andi	r24, 0x01	; 1
    1a70:	08 95       	ret

00001a72 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::peers() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E5peersEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:419

  virtual void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) { ch.setup(dev,number,addr); }
  virtual uint16_t size () const { return ch.size(); }
  virtual uint8_t number () const { return ch.number(); }
  virtual uint16_t address () const { return ch.address(); }
  virtual uint8_t peers () const { return ch.peers(); }
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	08 95       	ret

00001a76 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::address() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E7addressEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:418
  operator ChannelType& () { return ch; }

  virtual void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) { ch.setup(dev,number,addr); }
  virtual uint16_t size () const { return ch.size(); }
  virtual uint8_t number () const { return ch.number(); }
  virtual uint16_t address () const { return ch.address(); }
    1a76:	fc 01       	movw	r30, r24
    1a78:	86 81       	ldd	r24, Z+6	; 0x06
    1a7a:	97 81       	ldd	r25, Z+7	; 0x07
    1a7c:	08 95       	ret

00001a7e <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::number() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E6numberEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:417

  operator ChannelType& () { return ch; }

  virtual void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) { ch.setup(dev,number,addr); }
  virtual uint16_t size () const { return ch.size(); }
  virtual uint8_t number () const { return ch.number(); }
    1a7e:	fc 01       	movw	r30, r24
    1a80:	85 81       	ldd	r24, Z+5	; 0x05
    1a82:	08 95       	ret

00001a84 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::size() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E4sizeEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:416
  virtual ~VirtChannel () {}

  operator ChannelType& () { return ch; }

  virtual void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) { ch.setup(dev,number,addr); }
  virtual uint16_t size () const { return ch.size(); }
    1a84:	8f e0       	ldi	r24, 0x0F	; 15
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	08 95       	ret

00001a8a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::setup(as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>*, unsigned char, unsigned int)>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E5setupEPNS_6DeviceISD_SF_EEhj():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:415
  VirtChannel () {}
  virtual ~VirtChannel () {}

  operator ChannelType& () { return ch; }

  virtual void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) { ch.setup(dev,number,addr); }
    1a8a:	fc 01       	movw	r30, r24
_ZN2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi1E6UList0SF_E5setupEPNS_6DeviceISD_SJ_EEhj():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:59
  bool inhibit () const { return inhi; }

  bool aesActive () const { return getList1().aesActive(); }

  void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) {
    this->dev = dev;
    1a8c:	73 83       	std	Z+3, r23	; 0x03
    1a8e:	62 83       	std	Z+2, r22	; 0x02
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:60
    this->num = number;
    1a90:	45 83       	std	Z+5, r20	; 0x05
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:61
    this->addr = addr;
    1a92:	37 83       	std	Z+7, r19	; 0x07
    1a94:	26 83       	std	Z+6, r18	; 0x06
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E5setupEPNS_6DeviceISD_SF_EEhj():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:415
  VirtChannel () {}
  virtual ~VirtChannel () {}

  operator ChannelType& () { return ch; }

  virtual void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) { ch.setup(dev,number,addr); }
    1a96:	08 95       	ret

00001a98 <as::InternalButton<UType, (unsigned char)1, (unsigned char)0, (unsigned char)2>::~InternalButton()>:
_ZN2as14InternalButtonI5UTypeLh1ELh0ELh2EED2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:307
  typedef StateButton<OFFSTATE,ONSTATE,MODE> ButtonType;

  InternalButton (DEVTYPE& dev,uint8_t n,uint8_t longpresstime=4) : device(dev), num(n), counter(0) {
    this->setLongPressTime(decis2ticks(longpresstime));
  }
  virtual ~InternalButton () {}
    1a98:	08 95       	ret

00001a9a <as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >::isr()>:
_ZN2as5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS2_Lh255EEEE8instanceEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:869
    timeout.setTimeout(millis);
    timeout.waitTimeout();
  }

  static Radio<SPIType,GDO0,PWRPIN,SENDDELAY,HWRADIO>& instance () {
    return *((Radio<SPIType,GDO0,PWRPIN,SENDDELAY,HWRADIO>*)__gb_radio);
    1a9a:	e0 91 36 04 	lds	r30, 0x0436	; 0x800436 <as::__gb_radio>
    1a9e:	f0 91 37 04 	lds	r31, 0x0437	; 0x800437 <as::__gb_radio+0x1>
_ZN2as5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS2_Lh255EEEE7isStateENS5_6StatesE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:877
private:
  enum States { IDLE=0x1, SENDING=0x2, READ=0x4, ALIVE=0x8, READ_ALIVE=0xc };
  volatile uint8_t state;
  Message buffer;

  bool isState(States s) { return (state & s)==s; }
    1aa2:	83 85       	ldd	r24, Z+11	; 0x0b
handleInt():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:919
  bool isIdle () {
    return isState(IDLE);
  }

  void handleInt () {
    if( isState(SENDING) == false ) {
    1aa4:	81 fd       	sbrc	r24, 1
    1aa6:	03 c0       	rjmp	.+6      	; 0x1aae <as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >::isr()+0x14>
_ZN2as5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS2_Lh255EEEE8setStateENS5_6StatesE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:878
  enum States { IDLE=0x1, SENDING=0x2, READ=0x4, ALIVE=0x8, READ_ALIVE=0xc };
  volatile uint8_t state;
  Message buffer;

  bool isState(States s) { return (state & s)==s; }
  void setState(States s) { state |= s; }
    1aa8:	83 85       	ldd	r24, Z+11	; 0x0b
    1aaa:	8c 60       	ori	r24, 0x0C	; 12
    1aac:	83 87       	std	Z+11, r24	; 0x0b
_ZN2as5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS2_Lh255EEEE3isrEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:815
template <class SPIType ,uint8_t GDO0, uint8_t PWRPIN=0xff, int SENDDELAY=100,class HWRADIO=CC1101<SPIType,PWRPIN> >
class Radio : public HWRADIO {

  static void isr () {
    instance().handleInt();
  }
    1aae:	08 95       	ret

00001ab0 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::EventSender::~EventSender()>:
_ZN2as19StateGenericChannelINS_14OnePinPositionILj0EEENS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101ISA_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10EE11EventSenderD2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:28
  public:
    StateGenericChannel& channel;
    uint8_t count, state;

    EventSender (StateGenericChannel& c) : Alarm(0), channel(c), count(0), state(255) {}
    virtual ~EventSender () {}
    1ab0:	08 95       	ret

00001ab2 <as::RegisterList<UReg0>::getRegister(unsigned char)>:
_ZN2as14AskSinRegister11getRegisterEhPKhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:184
    }
  }
  return 0xff;
  }
  static uint8_t getRegister(uint8_t offset,const uint8_t* reglist,uint8_t size) {
    if (offset < size) {
    1ab2:	88 30       	cpi	r24, 0x08	; 8
    1ab4:	30 f4       	brcc	.+12     	; 0x1ac2 <as::RegisterList<UReg0>::getRegister(unsigned char)+0x10>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:185
      return pgm_read_byte(reglist + offset);
    1ab6:	e8 2f       	mov	r30, r24
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	eb 51       	subi	r30, 0x1B	; 27
    1abc:	f9 4f       	sbci	r31, 0xF9	; 249
    1abe:	84 91       	lpm	r24, Z
    1ac0:	08 95       	ret
_ZN2as12RegisterListI5UReg0E11getRegisterEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:187
    }
    return 0xff;
    1ac2:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:196
// This is a generic list using a Register class
template<class RegisterType>
class RegisterList : public BaseList {
public:
  static uint8_t getOffset (uint8_t reg) { return RegisterType::getOffset(reg); }
  static uint8_t getRegister (uint8_t offset) { return RegisterType::getRegister(offset); }
    1ac4:	08 95       	ret

00001ac6 <as::Led<as::ArduinoPins>::ledOn()>:
_ZN2as3LedINS_11ArduinoPinsEE5ledOnEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:90
    else {
      PINTYPE::setLow(pin);
    }
  }

  void ledOn () {
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	82 89       	ldd	r24, Z+18	; 0x12
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:91
    if( invert() == true ) {
    1aca:	93 89       	ldd	r25, Z+19	; 0x13
setLow():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Pins.h:23
    1acc:	60 e0       	ldi	r22, 0x00	; 0
_ZN2as3LedINS_11ArduinoPinsEE5ledOnEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:91
    1ace:	91 11       	cpse	r25, r1
    1ad0:	01 c0       	rjmp	.+2      	; 0x1ad4 <as::Led<as::ArduinoPins>::ledOn()+0xe>
setHigh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Pins.h:22

class ArduinoPins {
public:
  inline static void setOutput   (uint8_t pin) { pinMode(pin,OUTPUT); }
  inline static void setInput    (uint8_t pin) { pinMode(pin,INPUT);  }
  inline static void setHigh     (uint8_t pin) { digitalWrite(pin,HIGH); }
    1ad2:	61 e0       	ldi	r22, 0x01	; 1
    1ad4:	0c 94 7e 07 	jmp	0xefc	; 0xefc <digitalWrite>

00001ad8 <as::Led<as::ArduinoPins>::ledOff()>:
_ZN2as3LedINS_11ArduinoPinsEE6ledOffEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:81
      next(sysclock);
      ledOn();
    }
  }

  void ledOff () {
    1ad8:	fc 01       	movw	r30, r24
    1ada:	82 89       	ldd	r24, Z+18	; 0x12
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:82
    if( invert() == true ) {
    1adc:	93 89       	ldd	r25, Z+19	; 0x13
setHigh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Pins.h:22
    1ade:	61 e0       	ldi	r22, 0x01	; 1
_ZN2as3LedINS_11ArduinoPinsEE6ledOffEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:82
    1ae0:	91 11       	cpse	r25, r1
    1ae2:	01 c0       	rjmp	.+2      	; 0x1ae6 <as::Led<as::ArduinoPins>::ledOff()+0xe>
setLow():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Pins.h:23
  inline static void setLow      (uint8_t pin) { digitalWrite(pin,LOW); }
    1ae4:	60 e0       	ldi	r22, 0x00	; 0
    1ae6:	0c 94 7e 07 	jmp	0xefc	; 0xefc <digitalWrite>

00001aea <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::~StateGenericChannel()>:
_ZN2as19StateGenericChannelINS_14OnePinPositionILj0EEENS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101ISA_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10EED2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:51

public:
  typedef Channel<HALTYPE,List1Type,EmptyList,List4Type,PEERCOUNT,List0Type> BaseChannel;

  StateGenericChannel () : BaseChannel(), Alarm(0), sender(*this), sabpin(0), sabotage(false) {}
  virtual ~StateGenericChannel () {}
    1aea:	08 95       	ret

00001aec <as::ActorChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, 10, UList0, as::SwitchStateMachine, as::EmptyList>::~ActorChannel()>:
_ZN2as12ActorChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_11SwitchList1ENS_15SwitchList3TmplINS_8RegList3INS_10SwitchReg3EEEEELi10E6UList0NS_18SwitchStateMachineENS_9EmptyListEED2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:280
  typedef Channel<HalType,List1Type, List3Type,EmptyList,PeerCount,List0Type, List2Type> BaseChannel;
  uint8_t lastmsgcnt;

public:
  ActorChannel () : BaseChannel(), lastmsgcnt(0xff) {}
  ~ActorChannel() {}
    1aec:	08 95       	ret

00001aee <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::getList3(unsigned char) const>:
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_11SwitchList1ENS_15SwitchList3TmplINS_8RegList3INS_10SwitchReg3EEEEENS_9EmptyListELi10E6UList0SK_E8getList3Eh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:211
    return List4Type(liststart);
  }

  List3Type getList3 (uint8_t pidx) const {
    uint16_t liststart = 0x00;
    if( hasList3() == true && pidx < peers() ) {
    1aee:	6a 30       	cpi	r22, 0x0A	; 10
    1af0:	28 f4       	brcc	.+10     	; 0x1afc <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::getList3(unsigned char) const+0xe>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:212
      liststart = peerAddress(pidx) + sizeof(Peer);
    1af2:	04 96       	adiw	r24, 0x04	; 4
    1af4:	0e 94 19 0a 	call	0x1432	; 0x1432 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peerAddress(unsigned char) const [clone .isra.126]>
    1af8:	04 96       	adiw	r24, 0x04	; 4
    1afa:	08 95       	ret
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:210
    }
    return List4Type(liststart);
  }

  List3Type getList3 (uint8_t pidx) const {
    uint16_t liststart = 0x00;
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:215
    if( hasList3() == true && pidx < peers() ) {
      liststart = peerAddress(pidx) + sizeof(Peer);
    }
    return List3Type(liststart);
  }
    1b00:	08 95       	ret

00001b02 <as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>::~TwoStateChannel()>:
_ZN2as15TwoStateChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EED2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:183
class TwoStateChannel : public StateGenericChannel<OnePinPosition<WAITMILLIS_AFTER_ENABLE>,HALTYPE,List0Type,List1Type,List4Type,PEERCOUNT> {
public:
  typedef StateGenericChannel<OnePinPosition<WAITMILLIS_AFTER_ENABLE>,HALTYPE,List0Type,List1Type,List4Type,PEERCOUNT> BaseChannel;

  TwoStateChannel () : BaseChannel() {};
  ~TwoStateChannel () {}
    1b02:	08 95       	ret

00001b04 <as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>::~SwitchChannel()>:
_ZN2as13SwitchChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEELi10E6UList0S3_ED2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:342
  typedef ActorChannel<HalType,SwitchList1,SwitchList3,PeerCount,List0Type,SwitchStateMachine> BaseChannel;
  uint8_t pin;

public:
  SwitchChannel () : BaseChannel(), pin(0) {}
  virtual ~SwitchChannel() {}
    1b04:	08 95       	ret

00001b06 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::~Device()>:
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0ED2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:195
  Device (const DeviceInfo& i,uint16_t addr,List0Type& l,uint8_t ch) : hal(0), list0(l), msgcount(0), lastmsg(0), kstore(addr), info(i), cfgChanged(false), numChannels(ch) {
#ifdef USE_HW_SERIAL
    device_id[0]=0x00;
#endif
  }
  virtual ~Device () {}
    1b06:	08 95       	ret

00001b08 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::~StateButton()>:
_ZN2as11StateButtonILh1ELh0ELh2ENS_18NoDoublePressAlarmEED2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:98
public:
  StateButton() :
      Alarm(0), stat(none), pinstate(OFFSTATE), pin(0), longpresstime(millis2ticks(400)), ca(*this)  {
  }
  virtual ~StateButton() {
  }
    1b08:	08 95       	ret

00001b0a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::~VirtChannel()>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0ED2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:411
template <class HalType,class ChannelType,class List0Type=List0>
class VirtChannel : public VirtBaseChannel<HalType,List0Type> {
  ChannelType ch;
public:
  VirtChannel () {}
  virtual ~VirtChannel () {}
    1b0a:	08 95       	ret

00001b0c <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::~VirtChannel()>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0ED2Ev():
    1b0c:	08 95       	ret

00001b0e <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::~VirtChannel()>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_ED2Ev():
    1b0e:	08 95       	ret

00001b10 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::~VirtChannel()>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_ED2Ev():
    1b10:	08 95       	ret

00001b12 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::~ChannelDevice()>:
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_ED2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:41

  typedef Device<HalType,List0Type> DeviceType;

  ChannelDevice (const DeviceInfo& i,uint16_t addr) : DeviceType(i,addr,list0,ChannelCount), list0(addr + this->keystore().size()), cfgChannel(0xff) {}

  virtual ~ChannelDevice () {}
    1b12:	08 95       	ret

00001b14 <as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >::MinSendTimeout::~MinSendTimeout()>:
_ZN2as8ActivityD2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Activity.h:289

  Activity () : Alarm(0), awake(false) {
    async(true);
  }

  virtual ~Activity () {}
    1b14:	08 95       	ret

00001b16 <as::Led<as::ArduinoPins>::~Led()>:
_ZN2as3LedINS_11ArduinoPinsEED2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:53

public:
  Led () : Alarm(0), step(0), repeat(0), pin(0), inv(false) {
    async(true);
  }
  virtual ~Led() {}
    1b16:	08 95       	ret

00001b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>:
_Z6DPRINTIPK19__FlashStringHelperEvT_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:40
#ifndef DSERIAL
  #define DSERIAL Serial
#endif

  template <class T>
  inline void DPRINT(T str) { DSERIAL.print(str); }
    1b18:	bc 01       	movw	r22, r24
    1b1a:	89 ed       	ldi	r24, 0xD9	; 217
    1b1c:	94 e0       	ldi	r25, 0x04	; 4
    1b1e:	0c 94 d6 05 	jmp	0xbac	; 0xbac <Print::print(__FlashStringHelper const*)>

00001b22 <void DPRINTLN<__FlashStringHelper const*>(__FlashStringHelper const*)>:
_Z8DPRINTLNIPK19__FlashStringHelperEvT_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:42
  template <class T>
  inline void DPRINTLN(T str) { DPRINT(str); DPRINT(F("\r\n")); }
    1b22:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    1b26:	81 ef       	ldi	r24, 0xF1	; 241
    1b28:	94 e0       	ldi	r25, 0x04	; 4
    1b2a:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>

00001b2e <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::state(unsigned char)>:
_ZN2as11StateButtonILh1ELh0ELh2ENS_18NoDoublePressAlarmEE5stateEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:156
    if( nextstate != invalid ) {
      state(nextstate);
    }
  }

  virtual void state(uint8_t s) {
    1b2e:	0f 93       	push	r16
    1b30:	1f 93       	push	r17
    1b32:	cf 93       	push	r28
    1b34:	8c 01       	movw	r16, r24
    1b36:	c6 2f       	mov	r28, r22
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:160
     switch(s) {
     case released: DPRINTLN(F(" released")); break;
     case pressed: DPRINTLN(F(" pressed")); break;
     case debounce: DPRINTLN(F(" debounce")); break;
    1b38:	80 e1       	ldi	r24, 0x10	; 16
    1b3a:	95 e0       	ldi	r25, 0x05	; 5
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:157
      state(nextstate);
    }
  }

  virtual void state(uint8_t s) {
     switch(s) {
    1b3c:	64 30       	cpi	r22, 0x04	; 4
    1b3e:	a1 f0       	breq	.+40     	; 0x1b68 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::state(unsigned char)+0x3a>
    1b40:	58 f4       	brcc	.+22     	; 0x1b58 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::state(unsigned char)+0x2a>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:158
     case released: DPRINTLN(F(" released")); break;
    1b42:	83 e2       	ldi	r24, 0x23	; 35
    1b44:	95 e0       	ldi	r25, 0x05	; 5
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:157
      state(nextstate);
    }
  }

  virtual void state(uint8_t s) {
     switch(s) {
    1b46:	62 30       	cpi	r22, 0x02	; 2
    1b48:	79 f0       	breq	.+30     	; 0x1b68 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::state(unsigned char)+0x3a>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:159
     case released: DPRINTLN(F(" released")); break;
     case pressed: DPRINTLN(F(" pressed")); break;
    1b4a:	8a e1       	ldi	r24, 0x1A	; 26
    1b4c:	95 e0       	ldi	r25, 0x05	; 5
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:157
      state(nextstate);
    }
  }

  virtual void state(uint8_t s) {
     switch(s) {
    1b4e:	63 30       	cpi	r22, 0x03	; 3
    1b50:	59 f0       	breq	.+22     	; 0x1b68 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::state(unsigned char)+0x3a>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:163
     case released: DPRINTLN(F(" released")); break;
     case pressed: DPRINTLN(F(" pressed")); break;
     case debounce: DPRINTLN(F(" debounce")); break;
     case longpressed: DPRINTLN(F(" longpressed")); break;
     case longreleased: DPRINTLN(F(" longreleased")); break;
     default: DPRINTLN(F("")); break;
    1b52:	84 ef       	ldi	r24, 0xF4	; 244
    1b54:	94 e0       	ldi	r25, 0x04	; 4
    1b56:	08 c0       	rjmp	.+16     	; 0x1b68 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::state(unsigned char)+0x3a>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:161
  virtual void state(uint8_t s) {
     switch(s) {
     case released: DPRINTLN(F(" released")); break;
     case pressed: DPRINTLN(F(" pressed")); break;
     case debounce: DPRINTLN(F(" debounce")); break;
     case longpressed: DPRINTLN(F(" longpressed")); break;
    1b58:	83 e0       	ldi	r24, 0x03	; 3
    1b5a:	95 e0       	ldi	r25, 0x05	; 5
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:157
      state(nextstate);
    }
  }

  virtual void state(uint8_t s) {
     switch(s) {
    1b5c:	65 30       	cpi	r22, 0x05	; 5
    1b5e:	21 f0       	breq	.+8      	; 0x1b68 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::state(unsigned char)+0x3a>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:162
     case released: DPRINTLN(F(" released")); break;
     case pressed: DPRINTLN(F(" pressed")); break;
     case debounce: DPRINTLN(F(" debounce")); break;
     case longpressed: DPRINTLN(F(" longpressed")); break;
     case longreleased: DPRINTLN(F(" longreleased")); break;
    1b60:	85 ef       	ldi	r24, 0xF5	; 245
    1b62:	94 e0       	ldi	r25, 0x04	; 4
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:157
      state(nextstate);
    }
  }

  virtual void state(uint8_t s) {
     switch(s) {
    1b64:	66 30       	cpi	r22, 0x06	; 6
    1b66:	a9 f7       	brne	.-22     	; 0x1b52 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::state(unsigned char)+0x24>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:163
     case released: DPRINTLN(F(" released")); break;
     case pressed: DPRINTLN(F(" pressed")); break;
     case debounce: DPRINTLN(F(" debounce")); break;
     case longpressed: DPRINTLN(F(" longpressed")); break;
     case longreleased: DPRINTLN(F(" longreleased")); break;
     default: DPRINTLN(F("")); break;
    1b68:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <void DPRINTLN<__FlashStringHelper const*>(__FlashStringHelper const*)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:165
     }
    stat = s;
    1b6c:	c7 70       	andi	r28, 0x07	; 7
    1b6e:	f8 01       	movw	r30, r16
    1b70:	80 85       	ldd	r24, Z+8	; 0x08
    1b72:	88 7f       	andi	r24, 0xF8	; 248
    1b74:	c8 2b       	or	r28, r24
    1b76:	c0 87       	std	Z+8, r28	; 0x08
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:166
  }
    1b78:	cf 91       	pop	r28
    1b7a:	1f 91       	pop	r17
    1b7c:	0f 91       	pop	r16
    1b7e:	08 95       	ret

00001b80 <CalibButton::~CalibButton()>:
_ZN11CalibButtonD2Ev():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:790
class CalibButton : public StateButton<HIGH,LOW,INPUT_PULLUP> {
  UType& device;
public:
  typedef StateButton<HIGH,LOW,INPUT_PULLUP> ButtonType;
  CalibButton (UType& dev,uint8_t longpresstime=3) : device(dev) { this->setLongPressTime(seconds2ticks(longpresstime)); }
  virtual ~CalibButton () {}
    1b80:	08 95       	ret

00001b82 <UType::~UType()>:
_ZN5UTypeD2Ev():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:741
      DeviceType::registerChannel(channel5, 5);
      DeviceType::registerChannel(channel6, 6);
      DeviceType::registerChannel(channel7, 7);
      DeviceType::registerChannel(channel8, 8);
    }
    virtual ~UType () {}
    1b82:	08 95       	ret

00001b84 <MeasureChannel::~MeasureChannel()>:
_ZN14MeasureChannelD2Ev():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:400
    uint8_t           flowrate;
    uint16_t          flowrate_cumulated;
    uint16_t          toggleWaitTime;
  public:
    MeasureChannel () : Channel(), Alarm(seconds2ticks(3)), showCalibAnalogValueAlarm(lcd, *this), us(0), pcf8583(PCF8583_ADDRESS), phcalibrationMode(false), first(true), calib_valid(false), currentTemperature1(0), currentTemperature2(0), calib_Temperature(0), phcalibrationStep(0), ph(0), pressure(0), orp(0), calib_neutralVoltage(0), calib_acidVoltage(0), measureCount(0), ph_cumulated(0), pressure_cumulated(0), orp_cumulated(0), temperature1_cumulated(0), temperature2_cumulated(0), flowrate(0), flowrate_cumulated(0), toggleWaitTime(200) {}
    virtual ~MeasureChannel () {}
    1b84:	08 95       	ret

00001b86 <MeasureChannel::ShowCalibAnalogValueAlarm::~ShowCalibAnalogValueAlarm()>:
_ZN14MeasureChannel25ShowCalibAnalogValueAlarmD2Ev():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:361
  class ShowCalibAnalogValueAlarm : public Alarm {
    LcdType& lcdDev;
    MeasureChannel& mc;
  public:
    ShowCalibAnalogValueAlarm (LcdType& l, MeasureChannel& m) :  Alarm(0), lcdDev(l), mc(m) {}
    virtual ~ShowCalibAnalogValueAlarm () {}
    1b86:	08 95       	ret

00001b88 <LcdType::~LcdType()>:
_ZN7LcdTypeD2Ev():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:243
  }

public:
  LiquidCrystal_I2C lcd;
  LcdType () :  backlightalarm(*this), backlightOnTime(10), lcd(LCD_ADDRESS, LCD_COLUMNS, LCD_ROWS){}
  virtual ~LcdType () {}
    1b88:	08 95       	ret

00001b8a <LcdType::BacklightAlarm::trigger(as::AlarmClock&)>:
_ZN7LcdType14BacklightAlarm7triggerERN2as10AlarmClockE():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:204
      lcdDev.lcd.backlight();
      sysclock.add(*this);
    }

    virtual void trigger (__attribute__((unused)) AlarmClock& clock) {
      lcdDev.lcd.noBacklight();
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	80 85       	ldd	r24, Z+8	; 0x08
    1b8e:	91 85       	ldd	r25, Z+9	; 0x09
noBacklight():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:219
	}
}

// Turn the (optional) backlight off/on
void LiquidCrystal_I2C::noBacklight(void) {
	_backlightval=LCD_NOBACKLIGHT;
    1b90:	fc 01       	movw	r30, r24
    1b92:	10 a2       	std	Z+32, r1	; 0x20
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:220
	expanderWrite(0);
    1b94:	60 e0       	ldi	r22, 0x00	; 0
    1b96:	45 96       	adiw	r24, 0x15	; 21
    1b98:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <LiquidCrystal_I2C::expanderWrite(unsigned char)>

00001b9c <LcdType::BacklightAlarm::~BacklightAlarm()>:
_ZN7LcdType14BacklightAlarmD2Ev():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:195
public:
  class BacklightAlarm : public Alarm {
    LcdType& lcdDev;
  public:
    BacklightAlarm (LcdType& l) :  Alarm(0), lcdDev(l) {}
    virtual ~BacklightAlarm () {}
    1b9c:	08 95       	ret

00001b9e <as::SwitchStateMachine::switchState(unsigned char, unsigned char, unsigned long)>:
_ZN2as18SwitchStateMachine11switchStateEhhm():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:177
  bool changed () const { return hasflag(CHANGED); }
  void changed (bool c) { setflag(c,CHANGED); }

  void setup(__attribute__ ((unused)) BaseList l1) {}

  virtual void switchState(__attribute__((unused)) uint8_t oldstate,__attribute__((unused)) uint8_t newstate,__attribute__((unused)) uint32_t delay) {}
    1b9e:	08 95       	ret

00001ba0 <as::SwitchStateMachine::~SwitchStateMachine()>:
_ZN2as18SwitchStateMachineD2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:170
  uint8_t          state;
  SwitchPeerList   actlst;

public:
  SwitchStateMachine() : Alarm(0), state(AS_CM_JT_NONE), actlst(0) {}
  virtual ~SwitchStateMachine () {}
    1ba0:	08 95       	ret

00001ba2 <as::AskSinRegister::getOffset(unsigned char, unsigned char const*, unsigned char)>:
_ZN2as14AskSinRegister9getOffsetEhPKhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:175
#define CREG_COND_TX_THRESHOLD_LO CREG_COND_TX_THRESHOLD_LO_1,CREG_COND_TX_THRESHOLD_LO_2,CREG_COND_TX_THRESHOLD_LO_3,CREG_COND_TX_THRESHOLD_LO_4

// This is only a helper class
class AskSinRegister {
public:
  static uint8_t getOffset(uint8_t reg,const uint8_t* reglist,uint8_t size) {
    1ba2:	98 2f       	mov	r25, r24
    1ba4:	fb 01       	movw	r30, r22
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:176
    for(uint8_t idx=0; idx<size; ++idx) {
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:177
    if(pgm_read_byte(reglist + idx) == reg) {
    1ba8:	24 91       	lpm	r18, Z
    1baa:	29 17       	cp	r18, r25
    1bac:	29 f0       	breq	.+10     	; 0x1bb8 <as::AskSinRegister::getOffset(unsigned char, unsigned char const*, unsigned char)+0x16>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:176

// This is only a helper class
class AskSinRegister {
public:
  static uint8_t getOffset(uint8_t reg,const uint8_t* reglist,uint8_t size) {
    for(uint8_t idx=0; idx<size; ++idx) {
    1bae:	8f 5f       	subi	r24, 0xFF	; 255
    1bb0:	31 96       	adiw	r30, 0x01	; 1
    1bb2:	48 13       	cpse	r20, r24
    1bb4:	f9 cf       	rjmp	.-14     	; 0x1ba8 <as::AskSinRegister::getOffset(unsigned char, unsigned char const*, unsigned char)+0x6>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:181
    if(pgm_read_byte(reglist + idx) == reg) {
      return idx;
    }
  }
  return 0xff;
    1bb6:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:182
  }
    1bb8:	08 95       	ret

00001bba <as::RegisterList<as::DefaultRegisterList4>::getOffset(unsigned char)>:
_ZN2as12RegisterListINS_20DefaultRegisterList4EE9getOffsetEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:901
typedef RegList0<DefaultRegisterList0> DefList0;

DEFREGISTER(DefaultRegisterList1,CREG_AES_ACTIVE)
typedef RegList1<DefaultRegisterList1> DefList1;

DEFREGISTER(DefaultRegisterList4,PREG_BURST_AES)
    1bba:	41 e0       	ldi	r20, 0x01	; 1
    1bbc:	6f ed       	ldi	r22, 0xDF	; 223
    1bbe:	75 e0       	ldi	r23, 0x05	; 5
    1bc0:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <as::AskSinRegister::getOffset(unsigned char, unsigned char const*, unsigned char)>

00001bc4 <as::RegisterList<UReg1>::getOffset(unsigned char)>:
_ZN2as12RegisterListI5UReg1E9getOffsetEh():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:127
      Messintervall(10);
      intKeyVisible(true);
    }
};

DEFREGISTER(UReg1, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a)
    1bc4:	4a e0       	ldi	r20, 0x0A	; 10
    1bc6:	65 eb       	ldi	r22, 0xB5	; 181
    1bc8:	77 e0       	ldi	r23, 0x07	; 7
    1bca:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <as::AskSinRegister::getOffset(unsigned char, unsigned char const*, unsigned char)>

00001bce <Reg1::getOffset(unsigned char)>:
_ZN4Reg19getOffsetEh():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:172
      FlowRateQFactor(10);
      ToggleWaitTime(200);
    }
};

DEFREGISTER(Reg1, CREG_AES_ACTIVE, CREG_MSGFORPOS, CREG_EVENTDELAYTIME, CREG_LEDONTIME, CREG_TRANSMITTRYMAX)
    1bce:	45 e0       	ldi	r20, 0x05	; 5
    1bd0:	60 ee       	ldi	r22, 0xE0	; 224
    1bd2:	75 e0       	ldi	r23, 0x05	; 5
    1bd4:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <as::AskSinRegister::getOffset(unsigned char, unsigned char const*, unsigned char)>

00001bd8 <as::RegisterList<Reg1>::getOffset(unsigned char)>:
_ZN2as12RegisterListI4Reg1E9getOffsetEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:195

// This is a generic list using a Register class
template<class RegisterType>
class RegisterList : public BaseList {
public:
  static uint8_t getOffset (uint8_t reg) { return RegisterType::getOffset(reg); }
    1bd8:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <Reg1::getOffset(unsigned char)>

00001bdc <UReg0::getOffset(unsigned char)>:
_ZN5UReg09getOffsetEh():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:98
};

typedef AskSin<StatusLed<LED_PIN>, NoBattery, Radio<LibSPI<CC1101_CS_PIN>, CC1101_GDO0>> Hal;
Hal hal;

DEFREGISTER(UReg0, MASTERID_REGS, 0x1f, 0x20, 0x21, DREG_BACKONTIME, DREG_INTKEY)
    1bdc:	48 e0       	ldi	r20, 0x08	; 8
    1bde:	65 ee       	ldi	r22, 0xE5	; 229
    1be0:	76 e0       	ldi	r23, 0x06	; 6
    1be2:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <as::AskSinRegister::getOffset(unsigned char, unsigned char const*, unsigned char)>

00001be6 <as::RegisterList<UReg0>::getOffset(unsigned char)>:
_ZN2as12RegisterListI5UReg0E9getOffsetEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:195
    1be6:	0c 94 ee 0d 	jmp	0x1bdc	; 0x1bdc <UReg0::getOffset(unsigned char)>

00001bea <as::SwitchReg3::getOffset(unsigned char)>:
_ZN2as10SwitchReg39getOffsetEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:33
};

#define SWITCH_LIST3_STANDARD_REGISTER PREG_CTDELAYONOFF,PREG_CTONOFF,PREG_CONDVALUELOW,PREG_CONDVALUEHIGH,\
  PREG_ONDELAYTIME,PREG_ONTIME,PREG_OFFDELAYTIME,PREG_OFFTIME,PREG_ACTIONTYPE,PREG_JTONOFF,PREG_JTDELAYONOFF

DEFREGISTER(SwitchReg3,SWITCH_LIST3_STANDARD_REGISTER)
    1bea:	4b e0       	ldi	r20, 0x0B	; 11
    1bec:	69 ee       	ldi	r22, 0xE9	; 233
    1bee:	75 e0       	ldi	r23, 0x05	; 5
    1bf0:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <as::AskSinRegister::getOffset(unsigned char, unsigned char const*, unsigned char)>

00001bf4 <as::ShortLongList<as::RegList3<as::SwitchReg3> >::getOffset(unsigned char)>:
_ZN2as13ShortLongListINS_8RegList3INS_10SwitchReg3EEEE9getOffsetEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:871
  ShortLongList(uint16_t a) : BaseList(a) {}

  const PeerList sh () const { return PeerList(this->address()); }
  const PeerList lg () const { return PeerList(this->address() + PeerList::size() ); }

  static uint8_t getOffset(uint8_t reg) {
    1bf4:	cf 93       	push	r28
    1bf6:	c0 e0       	ldi	r28, 0x00	; 0
    1bf8:	9b e0       	ldi	r25, 0x0B	; 11
    1bfa:	9c 0f       	add	r25, r28
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:872
    if( reg & 0x80 ) {
    1bfc:	87 ff       	sbrs	r24, 7
    1bfe:	03 c0       	rjmp	.+6      	; 0x1c06 <as::ShortLongList<as::RegList3<as::SwitchReg3> >::getOffset(unsigned char)+0x12>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:873
      return PeerList::size() + getOffset(reg & ~0x80);
    1c00:	8f 77       	andi	r24, 0x7F	; 127
    1c02:	c9 2f       	mov	r28, r25
    1c04:	f9 cf       	rjmp	.-14     	; 0x1bf8 <as::ShortLongList<as::RegList3<as::SwitchReg3> >::getOffset(unsigned char)+0x4>
_ZN2as12RegisterListINS_10SwitchReg3EE9getOffsetEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:195

// This is a generic list using a Register class
template<class RegisterType>
class RegisterList : public BaseList {
public:
  static uint8_t getOffset (uint8_t reg) { return RegisterType::getOffset(reg); }
    1c06:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <as::SwitchReg3::getOffset(unsigned char)>
_ZN2as13ShortLongListINS_8RegList3INS_10SwitchReg3EEEE9getOffsetEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:876
  static uint8_t getOffset(uint8_t reg) {
    if( reg & 0x80 ) {
      return PeerList::size() + getOffset(reg & ~0x80);
    }
    return PeerList::getOffset(reg);
  }
    1c0a:	8c 0f       	add	r24, r28
    1c0c:	cf 91       	pop	r28
    1c0e:	08 95       	ret

00001c10 <as::SwitchReg1::getOffset(unsigned char)>:
_ZN2as10SwitchReg19getOffsetEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:15
#include "Register.h"


namespace as {

DEFREGISTER(SwitchReg1,CREG_AES_ACTIVE,CREG_TRANSMITTRYMAX,CREG_POWERUPACTION,CREG_STATUSINFO)
    1c10:	44 e0       	ldi	r20, 0x04	; 4
    1c12:	65 ee       	ldi	r22, 0xE5	; 229
    1c14:	75 e0       	ldi	r23, 0x05	; 5
    1c16:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <as::AskSinRegister::getOffset(unsigned char, unsigned char const*, unsigned char)>

00001c1a <as::RegisterList<as::SwitchReg1>::getOffset(unsigned char)>:
_ZN2as12RegisterListINS_10SwitchReg1EE9getOffsetEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:195

// This is a generic list using a Register class
template<class RegisterType>
class RegisterList : public BaseList {
public:
  static uint8_t getOffset (uint8_t reg) { return RegisterType::getOffset(reg); }
    1c1a:	0c 94 08 0e 	jmp	0x1c10	; 0x1c10 <as::SwitchReg1::getOffset(unsigned char)>

00001c1e <as::AskSinBase::crc16(unsigned int, unsigned char)>:
_ZN2as10AskSinBase5crc16Ejh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:113
   * \param crc current checksum value
   * \param data to add
   * \return new crc checksum value
   */
  static uint16_t crc16 (uint16_t crc,uint8_t d) {
    crc ^= d;
    1c1e:	86 27       	eor	r24, r22
    1c20:	28 e0       	ldi	r18, 0x08	; 8
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:115
    for( uint8_t i = 8; i != 0; --i ) {
      crc = (crc >> 1) ^ ((crc & 1) ? 0xA001 : 0 );
    1c22:	bc 01       	movw	r22, r24
    1c24:	76 95       	lsr	r23
    1c26:	67 95       	ror	r22
    1c28:	ac 01       	movw	r20, r24
    1c2a:	41 70       	andi	r20, 0x01	; 1
    1c2c:	55 27       	eor	r21, r21
    1c2e:	80 ff       	sbrs	r24, 0
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <as::AskSinBase::crc16(unsigned int, unsigned char)+0x18>
    1c32:	41 e0       	ldi	r20, 0x01	; 1
    1c34:	50 ea       	ldi	r21, 0xA0	; 160
    1c36:	cb 01       	movw	r24, r22
    1c38:	84 27       	eor	r24, r20
    1c3a:	95 27       	eor	r25, r21
    1c3c:	21 50       	subi	r18, 0x01	; 1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:114
   * \param data to add
   * \return new crc checksum value
   */
  static uint16_t crc16 (uint16_t crc,uint8_t d) {
    crc ^= d;
    for( uint8_t i = 8; i != 0; --i ) {
    1c3e:	89 f7       	brne	.-30     	; 0x1c22 <as::AskSinBase::crc16(unsigned int, unsigned char)+0x4>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:118
      crc = (crc >> 1) ^ ((crc & 1) ? 0xA001 : 0 );
    }
    return crc;
  }
    1c40:	08 95       	ret

00001c42 <as::Message::Message()>:
_ZN2as7MessageC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:79
	uint8_t         comm;					  // type of message
	uint8_t         subcom;				  // type of message
	uint8_t         pload[MaxDataLen]; // payload

public:
	Message () : len(0), cnt(0), flag(0), typ(0), comm(0), subcom(0) {}
    1c42:	fc 01       	movw	r30, r24
    1c44:	10 82       	st	Z, r1
    1c46:	11 82       	std	Z+1, r1	; 0x01
    1c48:	12 82       	std	Z+2, r1	; 0x02
    1c4a:	13 82       	std	Z+3, r1	; 0x03
_ZN2as4HMIDC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:18

class HMID {
  uint8_t id[3];
public:
  HMID () {
    id[0]=id[1]=id[2]=0;
    1c4c:	16 82       	std	Z+6, r1	; 0x06
    1c4e:	15 82       	std	Z+5, r1	; 0x05
    1c50:	14 82       	std	Z+4, r1	; 0x04
    1c52:	11 86       	std	Z+9, r1	; 0x09
    1c54:	10 86       	std	Z+8, r1	; 0x08
    1c56:	17 82       	std	Z+7, r1	; 0x07
_ZN2as7MessageC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:79
    1c58:	12 86       	std	Z+10, r1	; 0x0a
    1c5a:	13 86       	std	Z+11, r1	; 0x0b
    1c5c:	08 95       	ret

00001c5e <as::HMID::valid() const>:
_ZNK2as4HMID5validEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:47
    return id[0]==other.id[0] && id[1]==other.id[1] && id[2]==other.id[2];
  }
  bool operator != (const HMID& other) const {
    return (operator == (other)) == false;
  }
  bool valid() const {
    1c5e:	fc 01       	movw	r30, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:48
    return id[0]!=0 || id[1]!=0 || id[2]!=0;
    1c60:	80 81       	ld	r24, Z
    1c62:	81 11       	cpse	r24, r1
    1c64:	09 c0       	rjmp	.+18     	; 0x1c78 <as::HMID::valid() const+0x1a>
    1c66:	81 81       	ldd	r24, Z+1	; 0x01
    1c68:	81 11       	cpse	r24, r1
    1c6a:	06 c0       	rjmp	.+12     	; 0x1c78 <as::HMID::valid() const+0x1a>
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	92 81       	ldd	r25, Z+2	; 0x02
    1c70:	91 11       	cpse	r25, r1
    1c72:	03 c0       	rjmp	.+6      	; 0x1c7a <as::HMID::valid() const+0x1c>
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	08 95       	ret
    1c78:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:49
  }
    1c7a:	08 95       	ret

00001c7c <as::HMID::operator==(as::HMID const&) const>:
_ZNK2as4HMIDeqERKS0_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:41
    id[0]=other.id[0];
    id[1]=other.id[1];
    id[2]=other.id[2];
    return *this;
  }
  bool operator == (const HMID& other) const {
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	fb 01       	movw	r30, r22
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:42
    return id[0]==other.id[0] && id[1]==other.id[1] && id[2]==other.id[2];
    1c80:	9c 91       	ld	r25, X
    1c82:	80 81       	ld	r24, Z
    1c84:	98 13       	cpse	r25, r24
    1c86:	0b c0       	rjmp	.+22     	; 0x1c9e <as::HMID::operator==(as::HMID const&) const+0x22>
    1c88:	11 96       	adiw	r26, 0x01	; 1
    1c8a:	9c 91       	ld	r25, X
    1c8c:	11 97       	sbiw	r26, 0x01	; 1
    1c8e:	81 81       	ldd	r24, Z+1	; 0x01
    1c90:	98 13       	cpse	r25, r24
    1c92:	05 c0       	rjmp	.+10     	; 0x1c9e <as::HMID::operator==(as::HMID const&) const+0x22>
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	12 96       	adiw	r26, 0x02	; 2
    1c98:	2c 91       	ld	r18, X
    1c9a:	92 81       	ldd	r25, Z+2	; 0x02
    1c9c:	29 13       	cpse	r18, r25
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:43
  }
    1ca0:	08 95       	ret

00001ca2 <as::Message::to(as::HMID const&)>:
_ZN2as7Message2toERKNS_4HMIDE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:189

  HMID& from () {
    return fromID;
  }

  void to(const HMID& hmid) {
    1ca2:	cf 93       	push	r28
    1ca4:	df 93       	push	r29
    1ca6:	ec 01       	movw	r28, r24
    1ca8:	fb 01       	movw	r30, r22
_ZN2as4HMIDaSERKS0_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:36
    id[0]=other.id[0];
    id[1]=other.id[1];
    id[2]=other.id[2];
  }
  HMID& operator = (const HMID& other) {
    id[0]=other.id[0];
    1caa:	80 81       	ld	r24, Z
    1cac:	8f 83       	std	Y+7, r24	; 0x07
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:37
    id[1]=other.id[1];
    1cae:	81 81       	ldd	r24, Z+1	; 0x01
    1cb0:	88 87       	std	Y+8, r24	; 0x08
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:38
    id[2]=other.id[2];
    1cb2:	82 81       	ldd	r24, Z+2	; 0x02
    1cb4:	89 87       	std	Y+9, r24	; 0x09
_ZN2as7Message2toERKNS_4HMIDE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:191
    toID = hmid;
    if( hmid == HMID::broadcast ) {
    1cb6:	6f e7       	ldi	r22, 0x7F	; 127
    1cb8:	75 e0       	ldi	r23, 0x05	; 5
    1cba:	cf 01       	movw	r24, r30
    1cbc:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <as::HMID::operator==(as::HMID const&) const>
    1cc0:	88 23       	and	r24, r24
    1cc2:	21 f0       	breq	.+8      	; 0x1ccc <as::Message::to(as::HMID const&)+0x2a>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:193
      flag |= BCAST;
      flag &= ~BIDI;
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	8f 7d       	andi	r24, 0xDF	; 223
    1cc8:	84 60       	ori	r24, 0x04	; 4
    1cca:	8a 83       	std	Y+2, r24	; 0x02
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:195
    }
  }
    1ccc:	df 91       	pop	r29
    1cce:	cf 91       	pop	r28
    1cd0:	08 95       	ret

00001cd2 <as::Peer::operator==(as::Peer const&) const>:
_ZNK2as4PeereqERKS0_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Peer.h:32
    *(HMID*)this = (const HMID&)other;
    chan = other.chan;
    return *this;
  }
  bool operator == (const Peer& other) const {
    return chan==other.chan && *(HMID*)this == (HMID&)other;
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	33 81       	ldd	r19, Z+3	; 0x03
    1cd6:	fb 01       	movw	r30, r22
    1cd8:	23 81       	ldd	r18, Z+3	; 0x03
    1cda:	32 13       	cpse	r19, r18
    1cdc:	02 c0       	rjmp	.+4      	; 0x1ce2 <as::Peer::operator==(as::Peer const&) const+0x10>
    1cde:	0c 94 3e 0e 	jmp	0x1c7c	; 0x1c7c <as::HMID::operator==(as::HMID const&) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Peer.h:33
  }
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	08 95       	ret

00001ce6 <as::ConfigPeerAddMsg::peers() const>:
_ZNK2as16ConfigPeerAddMsg5peersEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:428
public:
  const Peer& peer1 () const { return *((const Peer*)data()); }
  Peer peer2 () const { return Peer(peer1(),*(data()+sizeof(Peer))); }
  // if channel of peer2 == 0 or
  // both channels are the same then we peer single mode
  uint8_t peers () const {
    1ce6:	cf 93       	push	r28
    1ce8:	df 93       	push	r29
    1cea:	00 d0       	rcall	.+0      	; 0x1cec <as::ConfigPeerAddMsg::peers() const+0x6>
    1cec:	00 d0       	rcall	.+0      	; 0x1cee <as::ConfigPeerAddMsg::peers() const+0x8>
    1cee:	cd b7       	in	r28, 0x3d	; 61
    1cf0:	de b7       	in	r29, 0x3e	; 62
    1cf2:	fc 01       	movw	r30, r24
_ZNK2as16ConfigPeerAddMsg5peer2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:425
class ConfigPeerAddMsg : public ConfigMsg {
protected:
  ConfigPeerAddMsg () {}
public:
  const Peer& peer1 () const { return *((const Peer*)data()); }
  Peer peer2 () const { return Peer(peer1(),*(data()+sizeof(Peer))); }
    1cf4:	80 89       	ldd	r24, Z+16	; 0x10
_ZN2as4HMIDC2ERKS0_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:31
    id[0]=*ptr;
    id[1]=*(ptr+1);
    id[2]=*(ptr+2);
  }
  HMID (const HMID& other) {
    id[0]=other.id[0];
    1cf6:	94 85       	ldd	r25, Z+12	; 0x0c
    1cf8:	99 83       	std	Y+1, r25	; 0x01
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:32
    id[1]=other.id[1];
    1cfa:	95 85       	ldd	r25, Z+13	; 0x0d
    1cfc:	9a 83       	std	Y+2, r25	; 0x02
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:33
    id[2]=other.id[2];
    1cfe:	96 85       	ldd	r25, Z+14	; 0x0e
    1d00:	9b 83       	std	Y+3, r25	; 0x03
_ZN2as4PeerC2ERKNS_4HMIDEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Peer.h:18

class Peer : public HMID {
  uint8_t chan;
public:
  Peer() : chan(0) {}
  Peer (const HMID& id,uint8_t ch) : HMID(id), chan(ch) {}
    1d02:	8c 83       	std	Y+4, r24	; 0x04
_ZNK2as16ConfigPeerAddMsg5peersEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:430
  // if channel of peer2 == 0 or
  // both channels are the same then we peer single mode
  uint8_t peers () const {
    Peer p2 = peer2();
    return (p2.channel() == 0) || (p2 == peer1()) ? 1 : 2;
    1d04:	88 23       	and	r24, r24
    1d06:	89 f0       	breq	.+34     	; 0x1d2a <as::ConfigPeerAddMsg::peers() const+0x44>
    1d08:	bf 01       	movw	r22, r30
_ZNK2as7Message4dataEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:102
	uint8_t* data () {
	  return pload;
	}

  const uint8_t* data () const {
    return pload;
    1d0a:	64 5f       	subi	r22, 0xF4	; 244
    1d0c:	7f 4f       	sbci	r23, 0xFF	; 255
_ZNK2as16ConfigPeerAddMsg5peersEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:430
  Peer peer2 () const { return Peer(peer1(),*(data()+sizeof(Peer))); }
  // if channel of peer2 == 0 or
  // both channels are the same then we peer single mode
  uint8_t peers () const {
    Peer p2 = peer2();
    return (p2.channel() == 0) || (p2 == peer1()) ? 1 : 2;
    1d0e:	ce 01       	movw	r24, r28
    1d10:	01 96       	adiw	r24, 0x01	; 1
    1d12:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <as::Peer::operator==(as::Peer const&) const>
    1d16:	81 11       	cpse	r24, r1
    1d18:	08 c0       	rjmp	.+16     	; 0x1d2a <as::ConfigPeerAddMsg::peers() const+0x44>
    1d1a:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:431
  }
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	df 91       	pop	r29
    1d26:	cf 91       	pop	r28
    1d28:	08 95       	ret
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:430
  Peer peer2 () const { return Peer(peer1(),*(data()+sizeof(Peer))); }
  // if channel of peer2 == 0 or
  // both channels are the same then we peer single mode
  uint8_t peers () const {
    Peer p2 = peer2();
    return (p2.channel() == 0) || (p2 == peer1()) ? 1 : 2;
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	f7 cf       	rjmp	.-18     	; 0x1d1c <as::ConfigPeerAddMsg::peers() const+0x36>

00001d2e <as::Link::select() const>:
_ZNK2as4Link6selectEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:23
  Link (Link* item) : link(item) {}

  // return successor
  Link* select () const {
    Link* result = 0;
    ATOMIC_BLOCK( ATOMIC_RESTORESTATE ) {
    1d2e:	2f b7       	in	r18, 0x3f	; 63
__iCliRetVal():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    1d30:	f8 94       	cli
_ZNK2as4Link6selectEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:24
	    result = link;
    1d32:	fc 01       	movw	r30, r24
    1d34:	80 81       	ld	r24, Z
    1d36:	91 81       	ldd	r25, Z+1	; 0x01
__iRestore():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1d38:	2f bf       	out	0x3f, r18	; 63
_ZNK2as4Link6selectEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:27
	  }
    return result;
  }
    1d3a:	08 95       	ret

00001d3c <as::AlarmClock::get(as::Alarm const&) const [clone .constprop.127]>:
_ZNK2as10AlarmClock3getERKNS_5AlarmE.constprop.127():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:111
  } else {
    ready.append(item);
  }
}

uint32_t AlarmClock::get(const Alarm& item) const {
    1d3c:	cf 92       	push	r12
    1d3e:	df 92       	push	r13
    1d40:	ef 92       	push	r14
    1d42:	ff 92       	push	r15
    1d44:	cf 93       	push	r28
    1d46:	df 93       	push	r29
    1d48:	ec 01       	movw	r28, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:113
  uint32_t aux = 0;
  Alarm* tmp = (Alarm*) select();
    1d4a:	87 e8       	ldi	r24, 0x87	; 135
    1d4c:	95 e0       	ldi	r25, 0x05	; 5
    1d4e:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <as::Link::select() const>
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	d9 f0       	breq	.+54     	; 0x1d8c <as::AlarmClock::get(as::Alarm const&) const [clone .constprop.127]+0x50>
    1d56:	02 97       	sbiw	r24, 0x02	; 2
    1d58:	c1 2c       	mov	r12, r1
    1d5a:	d1 2c       	mov	r13, r1
    1d5c:	76 01       	movw	r14, r12
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:114
  while (tmp != 0) {
    1d5e:	00 97       	sbiw	r24, 0x00	; 0
    1d60:	a9 f0       	breq	.+42     	; 0x1d8c <as::AlarmClock::get(as::Alarm const&) const [clone .constprop.127]+0x50>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:115
    aux += tmp->tick;
    1d62:	fc 01       	movw	r30, r24
    1d64:	25 81       	ldd	r18, Z+5	; 0x05
    1d66:	36 81       	ldd	r19, Z+6	; 0x06
    1d68:	47 81       	ldd	r20, Z+7	; 0x07
    1d6a:	64 2f       	mov	r22, r20
    1d6c:	a9 01       	movw	r20, r18
    1d6e:	70 e0       	ldi	r23, 0x00	; 0
    1d70:	c4 0e       	add	r12, r20
    1d72:	d5 1e       	adc	r13, r21
    1d74:	e6 1e       	adc	r14, r22
    1d76:	f7 1e       	adc	r15, r23
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:116
    if (tmp == &item) {
    1d78:	8c 17       	cp	r24, r28
    1d7a:	9d 07       	cpc	r25, r29
    1d7c:	51 f0       	breq	.+20     	; 0x1d92 <as::AlarmClock::get(as::Alarm const&) const [clone .constprop.127]+0x56>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:119
      return aux;
    }
    tmp = (Alarm*) tmp->select();
    1d7e:	02 96       	adiw	r24, 0x02	; 2
    1d80:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <as::Link::select() const>
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	11 f0       	breq	.+4      	; 0x1d8c <as::AlarmClock::get(as::Alarm const&) const [clone .constprop.127]+0x50>
    1d88:	02 97       	sbiw	r24, 0x02	; 2
    1d8a:	e9 cf       	rjmp	.-46     	; 0x1d5e <as::AlarmClock::get(as::Alarm const&) const [clone .constprop.127]+0x22>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:121
  }
  return 0;
    1d8c:	c1 2c       	mov	r12, r1
    1d8e:	d1 2c       	mov	r13, r1
    1d90:	76 01       	movw	r14, r12
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:122
}
    1d92:	c7 01       	movw	r24, r14
    1d94:	b6 01       	movw	r22, r12
    1d96:	df 91       	pop	r29
    1d98:	cf 91       	pop	r28
    1d9a:	ff 90       	pop	r15
    1d9c:	ef 90       	pop	r14
    1d9e:	df 90       	pop	r13
    1da0:	cf 90       	pop	r12
    1da2:	08 95       	ret

00001da4 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::flags()>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E5flagsEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:264
      default: break;
    }
    return DELAY_NO;
  }

  bool delayActive () const { return sysclock.get(*this) > 0; }
    1da4:	02 96       	adiw	r24, 0x02	; 2
    1da6:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <as::AlarmClock::get(as::Alarm const&) const [clone .constprop.127]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:327
  uint8_t status () const {
    return state == AS_CM_JT_OFF ? 0 : 200;
  }

  uint8_t flags () const {
    return delayActive() ? 0x40 : 0x00;
    1daa:	67 2b       	or	r22, r23
    1dac:	68 2b       	or	r22, r24
    1dae:	69 2b       	or	r22, r25
    1db0:	11 f4       	brne	.+4      	; 0x1db6 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::flags()+0x12>
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	08 95       	ret
    1db6:	80 e4       	ldi	r24, 0x40	; 64
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:440
  virtual bool process (const ActionCommandMsg& msg) { return ch.process(msg); }
  virtual bool process (const RemoteEventMsg& msg) { return ch.process(msg); }
  virtual bool process (const SensorEventMsg& msg) { return ch.process(msg); }
#endif
  virtual uint8_t status () { return ch.status(); }
  virtual uint8_t flags () { return ch.flags(); }
    1db8:	08 95       	ret

00001dba <as::Link::append(as::Link&)>:
_ZN2as4Link6appendERS0_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:37
      link=item; 
    }
  }

  // add successor
  void append (Link& item) {
    1dba:	ff 92       	push	r15
    1dbc:	0f 93       	push	r16
    1dbe:	1f 93       	push	r17
    1dc0:	cf 93       	push	r28
    1dc2:	df 93       	push	r29
    1dc4:	ec 01       	movw	r28, r24
    1dc6:	8b 01       	movw	r16, r22
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:38
    ATOMIC_BLOCK( ATOMIC_RESTORESTATE ) {
    1dc8:	ff b6       	in	r15, 0x3f	; 63
__iCliRetVal():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1dca:	f8 94       	cli
_ZN2as4Link6appendERS0_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:39
      item.select(select());
    1dcc:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <as::Link::select() const>
    1dd0:	9c 01       	movw	r18, r24
select():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:31
    return result;
  }

  // define successor
  void select (Link* item) { 
    ATOMIC_BLOCK( ATOMIC_RESTORESTATE ) {
    1dd2:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    1dd4:	f8 94       	cli
select():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:32
      link=item; 
    1dd6:	f8 01       	movw	r30, r16
    1dd8:	31 83       	std	Z+1, r19	; 0x01
    1dda:	20 83       	st	Z, r18
__iRestore():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1ddc:	9f bf       	out	0x3f, r25	; 63
select():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:31
    return result;
  }

  // define successor
  void select (Link* item) { 
    ATOMIC_BLOCK( ATOMIC_RESTORESTATE ) {
    1dde:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1de0:	f8 94       	cli
select():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:32
      link=item; 
    1de2:	19 83       	std	Y+1, r17	; 0x01
    1de4:	08 83       	st	Y, r16
__iRestore():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1de6:	8f bf       	out	0x3f, r24	; 63
    1de8:	ff be       	out	0x3f, r15	; 63
_ZN2as4Link6appendERS0_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:42
  void append (Link& item) {
    ATOMIC_BLOCK( ATOMIC_RESTORESTATE ) {
      item.select(select());
      select(&item);
    }
  }
    1dea:	df 91       	pop	r29
    1dec:	cf 91       	pop	r28
    1dee:	1f 91       	pop	r17
    1df0:	0f 91       	pop	r16
    1df2:	ff 90       	pop	r15
    1df4:	08 95       	ret

00001df6 <as::AlarmClock::add(as::Alarm&)>:
_ZN2as10AlarmClock3addERNS_5AlarmE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:88
    }
  }
  return *this;
}

void AlarmClock::add(Alarm& item) {
    1df6:	6f 92       	push	r6
    1df8:	7f 92       	push	r7
    1dfa:	8f 92       	push	r8
    1dfc:	df 92       	push	r13
    1dfe:	ef 92       	push	r14
    1e00:	ff 92       	push	r15
    1e02:	0f 93       	push	r16
    1e04:	1f 93       	push	r17
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
    1e0a:	7b 01       	movw	r14, r22
    1e0c:	22 e0       	ldi	r18, 0x02	; 2
    1e0e:	e2 0e       	add	r14, r18
    1e10:	f1 1c       	adc	r15, r1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:89
  if (item.tick > 0) {
    1e12:	db 01       	movw	r26, r22
    1e14:	15 96       	adiw	r26, 0x05	; 5
    1e16:	2d 91       	ld	r18, X+
    1e18:	3d 91       	ld	r19, X+
    1e1a:	4c 91       	ld	r20, X
    1e1c:	23 2b       	or	r18, r19
    1e1e:	24 2b       	or	r18, r20
    1e20:	09 f4       	brne	.+2      	; 0x1e24 <as::AlarmClock::add(as::Alarm&)+0x2e>
    1e22:	4d c0       	rjmp	.+154    	; 0x1ebe <as::AlarmClock::add(as::Alarm&)+0xc8>
    1e24:	eb 01       	movw	r28, r22
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:90
    ATOMIC_BLOCK( ATOMIC_RESTORESTATE )
    1e26:	df b6       	in	r13, 0x3f	; 63
__iCliRetVal():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e28:	f8 94       	cli
_ZN2as5Alarm7setflagEbh.isra.10():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:25
  ~Alarm() {}

  uint8_t flags;

public:
  void setflag(bool c,uint8_t mask) { c ? flags |= mask : flags &= ~mask; }
    1e2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e2c:	22 60       	ori	r18, 0x02	; 2
    1e2e:	2c 83       	std	Y+4, r18	; 0x04
_ZN2as10AlarmClock3addERNS_5AlarmE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:93
    {
      item.active(true);
      Link* prev = this;
    1e30:	8c 01       	movw	r16, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:94
      Alarm* temp = (Alarm*) select();
    1e32:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <as::Link::select() const>
    1e36:	00 97       	sbiw	r24, 0x00	; 0
    1e38:	09 f4       	brne	.+2      	; 0x1e3c <as::AlarmClock::add(as::Alarm&)+0x46>
    1e3a:	3e c0       	rjmp	.+124    	; 0x1eb8 <as::AlarmClock::add(as::Alarm&)+0xc2>
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	32 97       	sbiw	r30, 0x02	; 2
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:95
      while ((temp != 0) && (temp->tick < item.tick)) {
    1e40:	a1 f0       	breq	.+40     	; 0x1e6a <as::AlarmClock::add(as::Alarm&)+0x74>
    1e42:	65 80       	ldd	r6, Z+5	; 0x05
    1e44:	76 80       	ldd	r7, Z+6	; 0x06
    1e46:	87 80       	ldd	r8, Z+7	; 0x07
    1e48:	2d 81       	ldd	r18, Y+5	; 0x05
    1e4a:	3e 81       	ldd	r19, Y+6	; 0x06
    1e4c:	4f 81       	ldd	r20, Y+7	; 0x07
    1e4e:	cf 01       	movw	r24, r30
    1e50:	02 96       	adiw	r24, 0x02	; 2
    1e52:	62 16       	cp	r6, r18
    1e54:	73 06       	cpc	r7, r19
    1e56:	84 06       	cpc	r8, r20
    1e58:	50 f4       	brcc	.+20     	; 0x1e6e <as::AlarmClock::add(as::Alarm&)+0x78>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:96
        item.tick -= temp->tick;
    1e5a:	26 19       	sub	r18, r6
    1e5c:	37 09       	sbc	r19, r7
    1e5e:	48 09       	sbc	r20, r8
    1e60:	2d 83       	std	Y+5, r18	; 0x05
    1e62:	3e 83       	std	Y+6, r19	; 0x06
    1e64:	4f 83       	std	Y+7, r20	; 0x07
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:97
        prev = temp;
    1e66:	8c 01       	movw	r16, r24
    1e68:	e4 cf       	rjmp	.-56     	; 0x1e32 <as::AlarmClock::add(as::Alarm&)+0x3c>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:100
        temp = (Alarm*) temp->select();
      }
      item.select(temp);
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
select():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:31
    return result;
  }

  // define successor
  void select (Link* item) { 
    ATOMIC_BLOCK( ATOMIC_RESTORESTATE ) {
    1e6e:	2f b7       	in	r18, 0x3f	; 63
__iCliRetVal():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    1e70:	f8 94       	cli
select():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:32
      link=item; 
    1e72:	9b 83       	std	Y+3, r25	; 0x03
    1e74:	8a 83       	std	Y+2, r24	; 0x02
__iRestore():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1e76:	2f bf       	out	0x3f, r18	; 63
select():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:31
    return result;
  }

  // define successor
  void select (Link* item) { 
    ATOMIC_BLOCK( ATOMIC_RESTORESTATE ) {
    1e78:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e7a:	f8 94       	cli
select():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:32
      link=item; 
    1e7c:	d8 01       	movw	r26, r16
    1e7e:	ed 92       	st	X+, r14
    1e80:	fc 92       	st	X, r15
__iRestore():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1e82:	8f bf       	out	0x3f, r24	; 63
_ZN2as10AlarmClock3addERNS_5AlarmE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:102
      prev->select(&item);
      if (temp != 0) {
    1e84:	30 97       	sbiw	r30, 0x00	; 0
    1e86:	61 f0       	breq	.+24     	; 0x1ea0 <as::AlarmClock::add(as::Alarm&)+0xaa>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:103
        temp->tick -= item.tick;
    1e88:	85 81       	ldd	r24, Z+5	; 0x05
    1e8a:	96 81       	ldd	r25, Z+6	; 0x06
    1e8c:	a7 81       	ldd	r26, Z+7	; 0x07
    1e8e:	2d 81       	ldd	r18, Y+5	; 0x05
    1e90:	3e 81       	ldd	r19, Y+6	; 0x06
    1e92:	4f 81       	ldd	r20, Y+7	; 0x07
    1e94:	82 1b       	sub	r24, r18
    1e96:	93 0b       	sbc	r25, r19
    1e98:	a4 0b       	sbc	r26, r20
    1e9a:	85 83       	std	Z+5, r24	; 0x05
    1e9c:	96 83       	std	Z+6, r25	; 0x06
    1e9e:	a7 83       	std	Z+7, r26	; 0x07
__iRestore():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    1ea0:	df be       	out	0x3f, r13	; 63
_ZN2as10AlarmClock3addERNS_5AlarmE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:109
      }
    }
  } else {
    ready.append(item);
  }
}
    1ea2:	df 91       	pop	r29
    1ea4:	cf 91       	pop	r28
    1ea6:	1f 91       	pop	r17
    1ea8:	0f 91       	pop	r16
    1eaa:	ff 90       	pop	r15
    1eac:	ef 90       	pop	r14
    1eae:	df 90       	pop	r13
    1eb0:	8f 90       	pop	r8
    1eb2:	7f 90       	pop	r7
    1eb4:	6f 90       	pop	r6
    1eb6:	08 95       	ret
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:98
      Link* prev = this;
      Alarm* temp = (Alarm*) select();
      while ((temp != 0) && (temp->tick < item.tick)) {
        item.tick -= temp->tick;
        prev = temp;
        temp = (Alarm*) temp->select();
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	e0 e0       	ldi	r30, 0x00	; 0
    1ebc:	d8 cf       	rjmp	.-80     	; 0x1e6e <as::AlarmClock::add(as::Alarm&)+0x78>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:107
      if (temp != 0) {
        temp->tick -= item.tick;
      }
    }
  } else {
    ready.append(item);
    1ebe:	b7 01       	movw	r22, r14
    1ec0:	02 96       	adiw	r24, 0x02	; 2
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:109
  }
}
    1ec2:	df 91       	pop	r29
    1ec4:	cf 91       	pop	r28
    1ec6:	1f 91       	pop	r17
    1ec8:	0f 91       	pop	r16
    1eca:	ff 90       	pop	r15
    1ecc:	ef 90       	pop	r14
    1ece:	df 90       	pop	r13
    1ed0:	8f 90       	pop	r8
    1ed2:	7f 90       	pop	r7
    1ed4:	6f 90       	pop	r6
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:107
      if (temp != 0) {
        temp->tick -= item.tick;
      }
    }
  } else {
    ready.append(item);
    1ed6:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <as::Link::append(as::Link&)>

00001eda <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::setup(as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>*, unsigned char, unsigned int)>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E5setupEPNS_6DeviceISD_SF_EEhj():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:415
  VirtChannel () {}
  virtual ~VirtChannel () {}

  operator ChannelType& () { return ch; }

  virtual void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) { ch.setup(dev,number,addr); }
    1eda:	cf 93       	push	r28
    1edc:	df 93       	push	r29
    1ede:	ec 01       	movw	r28, r24
_ZN2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_5List4ELi6E6UList0SF_E5setupEPNS_6DeviceISD_SH_EEhj():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:59
  bool inhibit () const { return inhi; }

  bool aesActive () const { return getList1().aesActive(); }

  void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) {
    this->dev = dev;
    1ee0:	7b 87       	std	Y+11, r23	; 0x0b
    1ee2:	6a 87       	std	Y+10, r22	; 0x0a
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:60
    this->num = number;
    1ee4:	4d 87       	std	Y+13, r20	; 0x0d
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:61
    this->addr = addr;
    1ee6:	3f 87       	std	Y+15, r19	; 0x0f
    1ee8:	2e 87       	std	Y+14, r18	; 0x0e
setup():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:684
      }
    }

    void setup(Device<Hal, UList0>* dev, uint8_t number, uint16_t addr) {
      Channel::setup(dev, number, addr);
      pinMode(PRESSURE_PIN, INPUT);
    1eea:	60 e0       	ldi	r22, 0x00	; 0
    1eec:	8d e1       	ldi	r24, 0x1D	; 29
    1eee:	0e 94 de 07 	call	0xfbc	; 0xfbc <pinMode>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:685
      pinMode(SENSOR_SWITCH_PIN, OUTPUT);
    1ef2:	61 e0       	ldi	r22, 0x01	; 1
    1ef4:	8f e0       	ldi	r24, 0x0F	; 15
    1ef6:	0e 94 de 07 	call	0xfbc	; 0xfbc <pinMode>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:686
      digitalWrite(SENSOR_SWITCH_PIN, OFF);
    1efa:	60 e0       	ldi	r22, 0x00	; 0
    1efc:	8f e0       	ldi	r24, 0x0F	; 15
    1efe:	0e 94 7e 07 	call	0xefc	; 0xefc <digitalWrite>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:687
      pinMode(ORPH_SIGNAL_PIN, INPUT);
    1f02:	60 e0       	ldi	r22, 0x00	; 0
    1f04:	8f e1       	ldi	r24, 0x1F	; 31
    1f06:	0e 94 de 07 	call	0xfbc	; 0xfbc <pinMode>
_ZN2as3NtcILh24ELm10000ELj3950ELh0ELa25ELh4EE4initEv.isra.93():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/sensors/Ntc.h:33

public:
  Ntc () {}

  void init () {
    pinMode(SENSEPIN, INPUT);
    1f0a:	60 e0       	ldi	r22, 0x00	; 0
    1f0c:	88 e1       	ldi	r24, 0x18	; 24
    1f0e:	0e 94 de 07 	call	0xfbc	; 0xfbc <pinMode>
_ZN2as3NtcILh25ELm10000ELj3950ELh0ELa25ELh4EE4initEv.isra.94():
    1f12:	60 e0       	ldi	r22, 0x00	; 0
    1f14:	89 e1       	ldi	r24, 0x19	; 25
    1f16:	0e 94 de 07 	call	0xfbc	; 0xfbc <pinMode>
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E5setupEPNS_6DeviceISD_SF_EEhj():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:415
  VirtChannel () {}
  virtual ~VirtChannel () {}

  operator ChannelType& () { return ch; }

  virtual void setup(Device<HalType,List0Type>* dev,uint8_t number,uint16_t addr) { ch.setup(dev,number,addr); }
    1f1a:	be 01       	movw	r22, r28
    1f1c:	6e 5f       	subi	r22, 0xFE	; 254
    1f1e:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN2as8SysClock3addERNS_5AlarmE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:221
    }
  #endif
  }

  void add(Alarm& item) {
    AlarmClock::add(item);
    1f20:	87 e8       	ldi	r24, 0x87	; 135
    1f22:	95 e0       	ldi	r25, 0x05	; 5
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E5setupEPNS_6DeviceISD_SF_EEhj():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:415
    1f24:	df 91       	pop	r29
    1f26:	cf 91       	pop	r28
_ZN2as8SysClock3addERNS_5AlarmE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:221
    1f28:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <as::AlarmClock::add(as::Alarm&)>

00001f2c <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::trigger(as::AlarmClock&)>:
_ZN2as11StateButtonILh1ELh0ELh2ENS_18NoDoublePressAlarmEE7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:116

  uint8_t getPin () {
    return pin;
  }

  virtual void trigger(AlarmClock& clock) {
    1f2c:	1f 93       	push	r17
    1f2e:	cf 93       	push	r28
    1f30:	df 93       	push	r29
    1f32:	ec 01       	movw	r28, r24
    1f34:	fb 01       	movw	r30, r22
_ZNK2as11StateButtonILh1ELh0ELh2ENS_18NoDoublePressAlarmEE5stateEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:169
     }
    stat = s;
  }

  uint8_t state() const {
    return stat;
    1f36:	28 85       	ldd	r18, Y+8	; 0x08
    1f38:	92 2f       	mov	r25, r18
    1f3a:	97 70       	andi	r25, 0x07	; 7
_ZN2as11StateButtonILh1ELh0ELh2ENS_18NoDoublePressAlarmEE7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:119
  }

  virtual void trigger(AlarmClock& clock) {
    uint8_t  nextstate = invalid;
    uint16_t nexttick = 0;
    switch ( state() ) {
    1f3c:	94 30       	cpi	r25, 0x04	; 4
    1f3e:	79 f0       	breq	.+30     	; 0x1f5e <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::trigger(as::AlarmClock&)+0x32>
    1f40:	40 f4       	brcc	.+16     	; 0x1f52 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::trigger(as::AlarmClock&)+0x26>
    1f42:	92 30       	cpi	r25, 0x02	; 2
    1f44:	51 f0       	breq	.+20     	; 0x1f5a <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::trigger(as::AlarmClock&)+0x2e>
    1f46:	93 30       	cpi	r25, 0x03	; 3
    1f48:	39 f1       	breq	.+78     	; 0x1f98 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::trigger(as::AlarmClock&)+0x6c>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:154
    }
    // trigger the state change
    if( nextstate != invalid ) {
      state(nextstate);
    }
  }
    1f4a:	df 91       	pop	r29
    1f4c:	cf 91       	pop	r28
    1f4e:	1f 91       	pop	r17
    1f50:	08 95       	ret
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:119
  }

  virtual void trigger(AlarmClock& clock) {
    uint8_t  nextstate = invalid;
    uint16_t nexttick = 0;
    switch ( state() ) {
    1f52:	95 30       	cpi	r25, 0x05	; 5
    1f54:	09 f1       	breq	.+66     	; 0x1f98 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::trigger(as::AlarmClock&)+0x6c>
    1f56:	96 30       	cpi	r25, 0x06	; 6
    1f58:	c1 f7       	brne	.-16     	; 0x1f4a <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::trigger(as::AlarmClock&)+0x1e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:122
    case released:
    case longreleased:
      nextstate = none;
    1f5a:	11 e0       	ldi	r17, 0x01	; 1
    1f5c:	12 c0       	rjmp	.+36     	; 0x1f82 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::trigger(as::AlarmClock&)+0x56>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:128
      dbl.newPressAllowed(false);
      break;

    case debounce:
      nextstate = pressed;
      if (pinstate == ONSTATE) {
    1f5e:	23 fd       	sbrc	r18, 3
    1f60:	21 c0       	rjmp	.+66     	; 0x1fa4 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::trigger(as::AlarmClock&)+0x78>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:130
        // set timer for detect longpressed
        nexttick = longpresstime - DEBOUNCETIME;
    1f62:	2a 85       	ldd	r18, Y+10	; 0x0a
    1f64:	3b 85       	ldd	r19, Y+11	; 0x0b
    1f66:	25 50       	subi	r18, 0x05	; 5
    1f68:	31 09       	sbc	r19, r1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:127
      nextstate = none;
      dbl.newPressAllowed(false);
      break;

    case debounce:
      nextstate = pressed;
    1f6a:	13 e0       	ldi	r17, 0x03	; 3
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:146
        nexttick = longpresstime;
      }
      break;
    }
    // reactivate alarm if needed
    if( nexttick != 0 ) {
    1f6c:	21 15       	cp	r18, r1
    1f6e:	31 05       	cpc	r19, r1
    1f70:	41 f0       	breq	.+16     	; 0x1f82 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::trigger(as::AlarmClock&)+0x56>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:147
      tick = nexttick;
    1f72:	40 e0       	ldi	r20, 0x00	; 0
    1f74:	2d 83       	std	Y+5, r18	; 0x05
    1f76:	3e 83       	std	Y+6, r19	; 0x06
    1f78:	4f 83       	std	Y+7, r20	; 0x07
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:148
      clock.add(*this);
    1f7a:	be 01       	movw	r22, r28
    1f7c:	cf 01       	movw	r24, r30
    1f7e:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <as::AlarmClock::add(as::Alarm&)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:152
    }
    // trigger the state change
    if( nextstate != invalid ) {
      state(nextstate);
    1f82:	e8 81       	ld	r30, Y
    1f84:	f9 81       	ldd	r31, Y+1	; 0x01
    1f86:	06 80       	ldd	r0, Z+6	; 0x06
    1f88:	f7 81       	ldd	r31, Z+7	; 0x07
    1f8a:	e0 2d       	mov	r30, r0
    1f8c:	61 2f       	mov	r22, r17
    1f8e:	ce 01       	movw	r24, r28
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:154
    }
  }
    1f90:	df 91       	pop	r29
    1f92:	cf 91       	pop	r28
    1f94:	1f 91       	pop	r17
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:152
      tick = nexttick;
      clock.add(*this);
    }
    // trigger the state change
    if( nextstate != invalid ) {
      state(nextstate);
    1f96:	09 94       	ijmp
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:139
      }
      break;

    case pressed:
    case longpressed:
      if( pinstate == ONSTATE) {
    1f98:	23 fd       	sbrc	r18, 3
    1f9a:	d7 cf       	rjmp	.-82     	; 0x1f4a <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::trigger(as::AlarmClock&)+0x1e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:141
        nextstate = longpressed;
        nexttick = longpresstime;
    1f9c:	2a 85       	ldd	r18, Y+10	; 0x0a
    1f9e:	3b 85       	ldd	r19, Y+11	; 0x0b
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:140
      break;

    case pressed:
    case longpressed:
      if( pinstate == ONSTATE) {
        nextstate = longpressed;
    1fa0:	15 e0       	ldi	r17, 0x05	; 5
    1fa2:	e4 cf       	rjmp	.-56     	; 0x1f6c <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::trigger(as::AlarmClock&)+0x40>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:133
      if (pinstate == ONSTATE) {
        // set timer for detect longpressed
        nexttick = longpresstime - DEBOUNCETIME;
      } else {
        nextstate = released;
        nexttick = DEBOUNCETIME;
    1fa4:	25 e0       	ldi	r18, 0x05	; 5
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:132
      nextstate = pressed;
      if (pinstate == ONSTATE) {
        // set timer for detect longpressed
        nexttick = longpresstime - DEBOUNCETIME;
      } else {
        nextstate = released;
    1fa8:	12 e0       	ldi	r17, 0x02	; 2
    1faa:	e3 cf       	rjmp	.-58     	; 0x1f72 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::trigger(as::AlarmClock&)+0x46>

00001fac <as::Led<as::ArduinoPins>::next(as::AlarmClock&)>:
_ZN2as3LedINS_11ArduinoPinsEE4nextERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:43

  void copyPattern (Mode stat,const BlinkPattern* patt) {
    memcpy_P(&current,patt+stat,sizeof(BlinkPattern));
  }

  bool next (AlarmClock& clock) {
    1fac:	0f 93       	push	r16
    1fae:	1f 93       	push	r17
    1fb0:	cf 93       	push	r28
    1fb2:	df 93       	push	r29
    1fb4:	ec 01       	movw	r28, r24
    1fb6:	8b 01       	movw	r16, r22
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:44
    tick = decis2ticks(current.pattern[step++]);
    1fb8:	e8 89       	ldd	r30, Y+16	; 0x10
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	8e 0f       	add	r24, r30
    1fbe:	88 8b       	std	Y+16, r24	; 0x10
    1fc0:	ec 0f       	add	r30, r28
    1fc2:	fd 2f       	mov	r31, r29
    1fc4:	f1 1d       	adc	r31, r1
    1fc6:	22 85       	ldd	r18, Z+10	; 0x0a
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	a4 e6       	ldi	r26, 0x64	; 100
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	0e 94 01 4f 	call	0x9e02	; 0x9e02 <__umulhisi3>
    1fd2:	2a e0       	ldi	r18, 0x0A	; 10
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e0       	ldi	r20, 0x00	; 0
    1fd8:	50 e0       	ldi	r21, 0x00	; 0
    1fda:	0e 94 d8 50 	call	0xa1b0	; 0xa1b0 <__udivmodsi4>
    1fde:	2d 83       	std	Y+5, r18	; 0x05
    1fe0:	3e 83       	std	Y+6, r19	; 0x06
    1fe2:	4f 83       	std	Y+7, r20	; 0x07
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:45
    clock.add(*this);
    1fe4:	be 01       	movw	r22, r28
    1fe6:	c8 01       	movw	r24, r16
    1fe8:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <as::AlarmClock::add(as::Alarm&)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:46
    return ((step & 0x01) == 0x01);
    1fec:	88 89       	ldd	r24, Y+16	; 0x10
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:47
  }
    1fee:	81 70       	andi	r24, 0x01	; 1
    1ff0:	df 91       	pop	r29
    1ff2:	cf 91       	pop	r28
    1ff4:	1f 91       	pop	r17
    1ff6:	0f 91       	pop	r16
    1ff8:	08 95       	ret

00001ffa <as::Link::unlink()>:
_ZN2as4Link6unlinkEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:57
    }
    return item;
  }

  // remove and return successor
  Link* unlink () {
    1ffa:	ef 92       	push	r14
    1ffc:	ff 92       	push	r15
    1ffe:	0f 93       	push	r16
    2000:	1f 93       	push	r17
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	ec 01       	movw	r28, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:59
    Link* item=0;
    ATOMIC_BLOCK( ATOMIC_RESTORESTATE ) {
    2008:	ff b6       	in	r15, 0x3f	; 63
__iCliRetVal():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    200a:	f8 94       	cli
_ZN2as4Link6unlinkEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:60
      item=select();
    200c:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <as::Link::select() const>
    2010:	8c 01       	movw	r16, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:61
      if( item!=0 ) {
    2012:	89 2b       	or	r24, r25
    2014:	71 f0       	breq	.+28     	; 0x2032 <as::Link::unlink()+0x38>
detach():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:80
    return item;
  }

  // remove successor
  void detach () {
    ATOMIC_BLOCK( ATOMIC_RESTORESTATE ) {
    2016:	ef b6       	in	r14, 0x3f	; 63
__iCliRetVal():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    2018:	f8 94       	cli
detach():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:81
      select(select()->select());
    201a:	ce 01       	movw	r24, r28
    201c:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <as::Link::select() const>
    2020:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <as::Link::select() const>
    2024:	9c 01       	movw	r18, r24
select():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:31
    return result;
  }

  // define successor
  void select (Link* item) { 
    ATOMIC_BLOCK( ATOMIC_RESTORESTATE ) {
    2026:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    2028:	f8 94       	cli
select():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:32
      link=item; 
    202a:	39 83       	std	Y+1, r19	; 0x01
    202c:	28 83       	st	Y, r18
__iRestore():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    202e:	9f bf       	out	0x3f, r25	; 63
    2030:	ef be       	out	0x3f, r14	; 63
    2032:	ff be       	out	0x3f, r15	; 63
_ZN2as4Link6unlinkEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:66
      if( item!=0 ) {
        detach();
      }
    }
    return item;
  }
    2034:	c8 01       	movw	r24, r16
    2036:	df 91       	pop	r29
    2038:	cf 91       	pop	r28
    203a:	1f 91       	pop	r17
    203c:	0f 91       	pop	r16
    203e:	ff 90       	pop	r15
    2040:	ef 90       	pop	r14
    2042:	08 95       	ret

00002044 <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]>:
_ZN2as10AlarmClock6cancelERNS_5AlarmE.constprop.143():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:39
}
#endif
#endif


void AlarmClock::cancel(Alarm& item) {
    2044:	bf 92       	push	r11
    2046:	cf 92       	push	r12
    2048:	df 92       	push	r13
    204a:	ef 92       	push	r14
    204c:	ff 92       	push	r15
    204e:	0f 93       	push	r16
    2050:	1f 93       	push	r17
    2052:	cf 93       	push	r28
    2054:	df 93       	push	r29
    2056:	ec 01       	movw	r28, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:40
  ATOMIC_BLOCK( ATOMIC_RESTORESTATE )
    2058:	ff b6       	in	r15, 0x3f	; 63
__iCliRetVal():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    205a:	f8 94       	cli
_ZN2as5Alarm7setflagEbh.isra.10():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:25
    205c:	8c 81       	ldd	r24, Y+4	; 0x04
    205e:	8d 7f       	andi	r24, 0xFD	; 253
    2060:	8c 83       	std	Y+4, r24	; 0x04
_ZN2as10AlarmClock6cancelERNS_5AlarmE.constprop.143():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:43
  {
    item.active(false);
    Alarm *tmp = (Alarm*) select();
    2062:	87 e8       	ldi	r24, 0x87	; 135
    2064:	95 e0       	ldi	r25, 0x05	; 5
    2066:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <as::Link::select() const>
    206a:	00 97       	sbiw	r24, 0x00	; 0
    206c:	c9 f1       	breq	.+114    	; 0x20e0 <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]+0x9c>
    206e:	9c 01       	movw	r18, r24
    2070:	22 50       	subi	r18, 0x02	; 2
    2072:	31 09       	sbc	r19, r1
    2074:	87 e8       	ldi	r24, 0x87	; 135
    2076:	95 e0       	ldi	r25, 0x05	; 5
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:46
    Link *vor = this;
    // search for the alarm to cancel
    while (tmp != 0) {
    2078:	21 15       	cp	r18, r1
    207a:	31 05       	cpc	r19, r1
    207c:	89 f1       	breq	.+98     	; 0x20e0 <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]+0x9c>
    207e:	89 01       	movw	r16, r18
    2080:	0e 5f       	subi	r16, 0xFE	; 254
    2082:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:47
      if (tmp == &item) {
    2084:	c2 17       	cp	r28, r18
    2086:	d3 07       	cpc	r29, r19
    2088:	09 f5       	brne	.+66     	; 0x20cc <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]+0x88>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:48
        vor->unlink();
    208a:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <as::Link::unlink()>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:50
        // raise next alarm about item ticks
        tmp = (Alarm*) item.select();
    208e:	c8 01       	movw	r24, r16
    2090:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <as::Link::select() const>
    2094:	00 97       	sbiw	r24, 0x00	; 0
    2096:	79 f0       	breq	.+30     	; 0x20b6 <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]+0x72>
    2098:	fc 01       	movw	r30, r24
    209a:	32 97       	sbiw	r30, 0x02	; 2
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:51
        if (tmp != 0) {
    209c:	61 f0       	breq	.+24     	; 0x20b6 <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]+0x72>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:52
          tmp->tick += item.tick;
    209e:	85 81       	ldd	r24, Z+5	; 0x05
    20a0:	96 81       	ldd	r25, Z+6	; 0x06
    20a2:	a7 81       	ldd	r26, Z+7	; 0x07
    20a4:	2d 81       	ldd	r18, Y+5	; 0x05
    20a6:	3e 81       	ldd	r19, Y+6	; 0x06
    20a8:	4f 81       	ldd	r20, Y+7	; 0x07
    20aa:	82 0f       	add	r24, r18
    20ac:	93 1f       	adc	r25, r19
    20ae:	a4 1f       	adc	r26, r20
    20b0:	85 83       	std	Z+5, r24	; 0x05
    20b2:	96 83       	std	Z+6, r25	; 0x06
    20b4:	a7 83       	std	Z+7, r26	; 0x07
__iRestore():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    20b6:	ff be       	out	0x3f, r15	; 63
_ZN2as10AlarmClock6cancelERNS_5AlarmE.constprop.143():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:62
      tmp = (Alarm*) tmp->select();
    }
    // cancel also in ready queue
    ready.remove(item);
  }
}
    20b8:	df 91       	pop	r29
    20ba:	cf 91       	pop	r28
    20bc:	1f 91       	pop	r17
    20be:	0f 91       	pop	r16
    20c0:	ff 90       	pop	r15
    20c2:	ef 90       	pop	r14
    20c4:	df 90       	pop	r13
    20c6:	cf 90       	pop	r12
    20c8:	bf 90       	pop	r11
    20ca:	08 95       	ret
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:57
          tmp->tick += item.tick;
        }
        return;
      }
      vor = tmp;
      tmp = (Alarm*) tmp->select();
    20cc:	c8 01       	movw	r24, r16
    20ce:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <as::Link::select() const>
    20d2:	00 97       	sbiw	r24, 0x00	; 0
    20d4:	29 f0       	breq	.+10     	; 0x20e0 <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]+0x9c>
    20d6:	9c 01       	movw	r18, r24
    20d8:	22 50       	subi	r18, 0x02	; 2
    20da:	31 09       	sbc	r19, r1
    20dc:	c8 01       	movw	r24, r16
    20de:	cc cf       	rjmp	.-104    	; 0x2078 <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]+0x34>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:60
    }
    // cancel also in ready queue
    ready.remove(item);
    20e0:	6e 01       	movw	r12, r28
    20e2:	82 e0       	ldi	r24, 0x02	; 2
    20e4:	c8 0e       	add	r12, r24
    20e6:	d1 1c       	adc	r13, r1
remove():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:104
    return result;
  }

  // remove item
  void remove (const Link& item) {
    ATOMIC_BLOCK( ATOMIC_RESTORESTATE ) {
    20e8:	ef b6       	in	r14, 0x3f	; 63
__iCliRetVal():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    20ea:	f8 94       	cli
search():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:88
  }

  // return container instance
  Link* search (const Link* item) const {
    Link* result = 0;
    ATOMIC_BLOCK( ATOMIC_RESTORESTATE ) {
    20ec:	bf b6       	in	r11, 0x3f	; 63
__iCliRetVal():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    20ee:	f8 94       	cli
search():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:89
      Link* tmp = select();
    20f0:	89 e8       	ldi	r24, 0x89	; 137
    20f2:	95 e0       	ldi	r25, 0x05	; 5
    20f4:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <as::Link::select() const>
    20f8:	ec 01       	movw	r28, r24
_ZN2as10AlarmClock6cancelERNS_5AlarmE.constprop.143():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:90
      Link* vor = (Link*)this;
    20fa:	29 e8       	ldi	r18, 0x89	; 137
    20fc:	35 e0       	ldi	r19, 0x05	; 5
search():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:91
      while (result == 0 && tmp != 0) {
    20fe:	20 97       	sbiw	r28, 0x00	; 0
    2100:	79 f0       	breq	.+30     	; 0x2120 <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]+0xdc>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:92
        if (tmp == item) {
    2102:	10 e0       	ldi	r17, 0x00	; 0
    2104:	00 e0       	ldi	r16, 0x00	; 0
    2106:	cc 16       	cp	r12, r28
    2108:	dd 06       	cpc	r13, r29
    210a:	09 f4       	brne	.+2      	; 0x210e <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]+0xca>
    210c:	89 01       	movw	r16, r18
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:96
          result = vor;
        }
        vor = tmp;
        tmp = tmp->select();
    210e:	ce 01       	movw	r24, r28
    2110:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <as::Link::select() const>
    2114:	9e 01       	movw	r18, r28
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:91
  Link* search (const Link* item) const {
    Link* result = 0;
    ATOMIC_BLOCK( ATOMIC_RESTORESTATE ) {
      Link* tmp = select();
      Link* vor = (Link*)this;
      while (result == 0 && tmp != 0) {
    2116:	01 15       	cp	r16, r1
    2118:	11 05       	cpc	r17, r1
    211a:	21 f4       	brne	.+8      	; 0x2124 <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]+0xe0>
_ZN2as10AlarmClock6cancelERNS_5AlarmE.constprop.143():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:96
        if (tmp == item) {
          result = vor;
        }
        vor = tmp;
        tmp = tmp->select();
    211c:	ec 01       	movw	r28, r24
    211e:	ef cf       	rjmp	.-34     	; 0x20fe <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]+0xba>
search():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:91
  Link* search (const Link* item) const {
    Link* result = 0;
    ATOMIC_BLOCK( ATOMIC_RESTORESTATE ) {
      Link* tmp = select();
      Link* vor = (Link*)this;
      while (result == 0 && tmp != 0) {
    2120:	10 e0       	ldi	r17, 0x00	; 0
    2122:	00 e0       	ldi	r16, 0x00	; 0
__iRestore():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2124:	bf be       	out	0x3f, r11	; 63
remove():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:106

  // remove item
  void remove (const Link& item) {
    ATOMIC_BLOCK( ATOMIC_RESTORESTATE ) {
      Link* vor = search(&item);
      if( vor != 0 ) {
    2126:	01 15       	cp	r16, r1
    2128:	11 05       	cpc	r17, r1
    212a:	11 f4       	brne	.+4      	; 0x2130 <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]+0xec>
__iRestore():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    212c:	ef be       	out	0x3f, r14	; 63
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:71
    __asm__ volatile ("" ::: "memory");
    212e:	c3 cf       	rjmp	.-122    	; 0x20b6 <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]+0x72>
remove():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:107
        vor->unlink();
    2130:	c8 01       	movw	r24, r16
    2132:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <as::Link::unlink()>
    2136:	fa cf       	rjmp	.-12     	; 0x212c <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]+0xe8>

00002138 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::CheckAlarm::trigger(as::AlarmClock&)>:
_ZN2as11StateButtonILh1ELh0ELh2ENS_18NoDoublePressAlarmEE10CheckAlarm7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:80
  class CheckAlarm : public Alarm {
  public:
    StateButton& sb;
    CheckAlarm (StateButton& _sb) : Alarm(0), sb(_sb) {}
    ~CheckAlarm () {}
    virtual void trigger(__attribute__((unused)) AlarmClock& clock) {
    2138:	ef 92       	push	r14
    213a:	ff 92       	push	r15
    213c:	0f 93       	push	r16
    213e:	1f 93       	push	r17
    2140:	cf 93       	push	r28
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:81
      sb.check();
    2142:	dc 01       	movw	r26, r24
    2144:	18 96       	adiw	r26, 0x08	; 8
    2146:	0d 91       	ld	r16, X+
    2148:	1c 91       	ld	r17, X
check():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:181
      sysclock.add(ca);
    }
  }

  void check() {
    uint8_t ps = digitalRead(pin);
    214a:	f8 01       	movw	r30, r16
    214c:	81 85       	ldd	r24, Z+9	; 0x09
    214e:	0e 94 55 07 	call	0xeaa	; 0xeaa <digitalRead>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:182
    if( pinstate != ps ) {
    2152:	d8 01       	movw	r26, r16
    2154:	18 96       	adiw	r26, 0x08	; 8
    2156:	cc 91       	ld	r28, X
    2158:	18 97       	sbiw	r26, 0x08	; 8
    215a:	c3 fb       	bst	r28, 3
    215c:	ee 24       	eor	r14, r14
    215e:	e0 f8       	bld	r14, 0
    2160:	f1 2c       	mov	r15, r1
    2162:	8e 15       	cp	r24, r14
    2164:	1f 04       	cpc	r1, r15
    2166:	c9 f1       	breq	.+114    	; 0x21da <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::CheckAlarm::trigger(as::AlarmClock&)+0xa2>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:183
      pinstate = ps;
    2168:	80 fb       	bst	r24, 0
    216a:	c3 f9       	bld	r28, 3
    216c:	18 96       	adiw	r26, 0x08	; 8
    216e:	cc 93       	st	X, r28
_ZNK2as11StateButtonILh1ELh0ELh2ENS_18NoDoublePressAlarmEE5stateEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:169
     }
    stat = s;
  }

  uint8_t state() const {
    return stat;
    2170:	c7 70       	andi	r28, 0x07	; 7
check():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:186
    uint8_t ps = digitalRead(pin);
    if( pinstate != ps ) {
      pinstate = ps;
      uint16_t nexttick = 0;
      uint8_t  nextstate = state();
      switch ( state() ) {
    2172:	c3 30       	cpi	r28, 0x03	; 3
    2174:	31 f0       	breq	.+12     	; 0x2182 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::CheckAlarm::trigger(as::AlarmClock&)+0x4a>
    2176:	c5 30       	cpi	r28, 0x05	; 5
    2178:	21 f0       	breq	.+8      	; 0x2182 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::CheckAlarm::trigger(as::AlarmClock&)+0x4a>
    217a:	c1 30       	cpi	r28, 0x01	; 1
    217c:	c1 f4       	brne	.+48     	; 0x21ae <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::CheckAlarm::trigger(as::AlarmClock&)+0x76>
_ZN2as11StateButtonILh1ELh0ELh2ENS_18NoDoublePressAlarmEE10CheckAlarm7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:188
      case none:
        nextstate = debounce;
    217e:	c4 e0       	ldi	r28, 0x04	; 4
    2180:	07 c0       	rjmp	.+14     	; 0x2190 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::CheckAlarm::trigger(as::AlarmClock&)+0x58>
check():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:194
        nexttick = DEBOUNCETIME;
        break;

      case pressed:
      case longpressed:
        if (pinstate == OFFSTATE) {
    2182:	f8 01       	movw	r30, r16
    2184:	80 85       	ldd	r24, Z+8	; 0x08
    2186:	83 ff       	sbrs	r24, 3
    2188:	12 c0       	rjmp	.+36     	; 0x21ae <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::CheckAlarm::trigger(as::AlarmClock&)+0x76>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:195
          nextstate = state() == pressed ? released : longreleased;
    218a:	c3 30       	cpi	r28, 0x03	; 3
    218c:	21 f1       	breq	.+72     	; 0x21d6 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::CheckAlarm::trigger(as::AlarmClock&)+0x9e>
_ZN2as11StateButtonILh1ELh0ELh2ENS_18NoDoublePressAlarmEE10CheckAlarm7triggerERNS_10AlarmClockE():
    218e:	c6 e0       	ldi	r28, 0x06	; 6
check():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:203
        break;
      default:
        break;
      }
      if( nexttick != 0 ) {
        sysclock.cancel(*this);
    2190:	c8 01       	movw	r24, r16
    2192:	0e 94 22 10 	call	0x2044	; 0x2044 <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:204
        tick = nexttick;
    2196:	85 e0       	ldi	r24, 0x05	; 5
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	a0 e0       	ldi	r26, 0x00	; 0
    219c:	f8 01       	movw	r30, r16
    219e:	85 83       	std	Z+5, r24	; 0x05
    21a0:	96 83       	std	Z+6, r25	; 0x06
    21a2:	a7 83       	std	Z+7, r26	; 0x07
_ZN2as8SysClock3addERNS_5AlarmE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:221
    21a4:	b8 01       	movw	r22, r16
    21a6:	87 e8       	ldi	r24, 0x87	; 135
    21a8:	95 e0       	ldi	r25, 0x05	; 5
    21aa:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <as::AlarmClock::add(as::Alarm&)>
_ZNK2as11StateButtonILh1ELh0ELh2ENS_18NoDoublePressAlarmEE5stateEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:169
     }
    stat = s;
  }

  uint8_t state() const {
    return stat;
    21ae:	d8 01       	movw	r26, r16
    21b0:	18 96       	adiw	r26, 0x08	; 8
    21b2:	8c 91       	ld	r24, X
    21b4:	18 97       	sbiw	r26, 0x08	; 8
    21b6:	87 70       	andi	r24, 0x07	; 7
check():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:207
      if( nexttick != 0 ) {
        sysclock.cancel(*this);
        tick = nexttick;
        sysclock.add(*this);
      }
      if( nextstate != state () ) {
    21b8:	8c 17       	cp	r24, r28
    21ba:	79 f0       	breq	.+30     	; 0x21da <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::CheckAlarm::trigger(as::AlarmClock&)+0xa2>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:208
        state(nextstate);
    21bc:	ed 91       	ld	r30, X+
    21be:	fc 91       	ld	r31, X
    21c0:	06 80       	ldd	r0, Z+6	; 0x06
    21c2:	f7 81       	ldd	r31, Z+7	; 0x07
    21c4:	e0 2d       	mov	r30, r0
    21c6:	6c 2f       	mov	r22, r28
    21c8:	c8 01       	movw	r24, r16
_ZN2as11StateButtonILh1ELh0ELh2ENS_18NoDoublePressAlarmEE10CheckAlarm7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:82
    StateButton& sb;
    CheckAlarm (StateButton& _sb) : Alarm(0), sb(_sb) {}
    ~CheckAlarm () {}
    virtual void trigger(__attribute__((unused)) AlarmClock& clock) {
      sb.check();
    }
    21ca:	cf 91       	pop	r28
    21cc:	1f 91       	pop	r17
    21ce:	0f 91       	pop	r16
    21d0:	ff 90       	pop	r15
    21d2:	ef 90       	pop	r14
check():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:208
        sysclock.cancel(*this);
        tick = nexttick;
        sysclock.add(*this);
      }
      if( nextstate != state () ) {
        state(nextstate);
    21d4:	09 94       	ijmp
_ZN2as11StateButtonILh1ELh0ELh2ENS_18NoDoublePressAlarmEE10CheckAlarm7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:195
        break;

      case pressed:
      case longpressed:
        if (pinstate == OFFSTATE) {
          nextstate = state() == pressed ? released : longreleased;
    21d6:	c2 e0       	ldi	r28, 0x02	; 2
    21d8:	db cf       	rjmp	.-74     	; 0x2190 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::CheckAlarm::trigger(as::AlarmClock&)+0x58>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:82
    StateButton& sb;
    CheckAlarm (StateButton& _sb) : Alarm(0), sb(_sb) {}
    ~CheckAlarm () {}
    virtual void trigger(__attribute__((unused)) AlarmClock& clock) {
      sb.check();
    }
    21da:	cf 91       	pop	r28
    21dc:	1f 91       	pop	r17
    21de:	0f 91       	pop	r16
    21e0:	ff 90       	pop	r15
    21e2:	ef 90       	pop	r14
    21e4:	08 95       	ret

000021e6 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::irq()>:
_ZN2as11StateButtonILh1ELh0ELh2ENS_18NoDoublePressAlarmEE3irqEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:172

  uint8_t state() const {
    return stat;
  }

  void irq () {
    21e6:	cf 93       	push	r28
    21e8:	df 93       	push	r29
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:174
    if (dbl.newPressAllowed() == true) {
      sysclock.cancel(ca);
    21ea:	ec 01       	movw	r28, r24
    21ec:	2c 96       	adiw	r28, 0x0c	; 12
    21ee:	ce 01       	movw	r24, r28
    21f0:	0e 94 22 10 	call	0x2044	; 0x2044 <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]>
_ZN2as8SysClock3addERNS_5AlarmE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:221
    21f4:	be 01       	movw	r22, r28
    21f6:	87 e8       	ldi	r24, 0x87	; 135
    21f8:	95 e0       	ldi	r25, 0x05	; 5
_ZN2as11StateButtonILh1ELh0ELh2ENS_18NoDoublePressAlarmEE3irqEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:178
      // use alarm to run code outside of interrupt
      sysclock.add(ca);
    }
  }
    21fa:	df 91       	pop	r29
    21fc:	cf 91       	pop	r28
_ZN2as8SysClock3addERNS_5AlarmE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:221
    21fe:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <as::AlarmClock::add(as::Alarm&)>

00002202 <setup::calibBtnISRHandler::isr()>:
_ZZ5setupEN18calibBtnISRHandler3isrEv():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:843
  bool first = sdev.init(hal);

  uint8_t serial[11];sdev.getDeviceSerial(serial);serial[10]=0;
  lcd.initLCD(serial);

  buttonISR(calibBtn, CONFIG_BUTTON_PIN);
    2202:	83 e0       	ldi	r24, 0x03	; 3
    2204:	96 e0       	ldi	r25, 0x06	; 6
    2206:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::irq()>

0000220a <setup::swbtn1ISRHandler::isr()>:
_ZZ5setupEN16swbtn1ISRHandler3isrEv():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:844
  buttonISR(swbtn1,SW_BUTTON_PIN_1);
    220a:	88 ee       	ldi	r24, 0xE8	; 232
    220c:	95 e0       	ldi	r25, 0x05	; 5
    220e:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::irq()>

00002212 <setup::swbtn2ISRHandler::isr()>:
_ZZ5setupEN16swbtn2ISRHandler3isrEv():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:845
  buttonISR(swbtn2,SW_BUTTON_PIN_2);
    2212:	8d ec       	ldi	r24, 0xCD	; 205
    2214:	95 e0       	ldi	r25, 0x05	; 5
    2216:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::irq()>

0000221a <setup::swbtn3ISRHandler::isr()>:
_ZZ5setupEN16swbtn3ISRHandler3isrEv():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:846
  buttonISR(swbtn3,SW_BUTTON_PIN_3);
    221a:	82 eb       	ldi	r24, 0xB2	; 178
    221c:	95 e0       	ldi	r25, 0x05	; 5
    221e:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::irq()>

00002222 <setup::swbtn4ISRHandler::isr()>:
_ZZ5setupEN16swbtn4ISRHandler3isrEv():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:847
  buttonISR(swbtn4,SW_BUTTON_PIN_4);
    2222:	87 e9       	ldi	r24, 0x97	; 151
    2224:	95 e0       	ldi	r25, 0x05	; 5
    2226:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::irq()>

0000222a <MeasureChannel::disablePHCalibrationMode()>:
_ZN14MeasureChannel24disablePHCalibrationModeEv():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:457
      DPRINT(F("-CAL temperature   : "));DDECLN(calib_Temperature);
      validatePHCalibrationValues();
      this->changed(true);
    }

    void disablePHCalibrationMode() {
    222a:	cf 93       	push	r28
    222c:	df 93       	push	r29
    222e:	ec 01       	movw	r28, r24
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:458
      DPRINTLN(F("Exiting Calibration Mode"));
    2230:	83 e3       	ldi	r24, 0x33	; 51
    2232:	92 e0       	ldi	r25, 0x02	; 2
    2234:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <void DPRINTLN<__FlashStringHelper const*>(__FlashStringHelper const*)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:459
      sysclock.cancel(showCalibAnalogValueAlarm);
    2238:	ce 01       	movw	r24, r28
    223a:	0e 96       	adiw	r24, 0x0e	; 14
    223c:	0e 94 22 10 	call	0x2044	; 0x2044 <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:460
      digitalWrite(SENSOR_SWITCH_PIN, OFF);
    2240:	60 e0       	ldi	r22, 0x00	; 0
    2242:	8f e0       	ldi	r24, 0x0F	; 15
    2244:	0e 94 7e 07 	call	0xefc	; 0xefc <digitalWrite>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:461
      phcalibrationMode = false;
    2248:	fe 01       	movw	r30, r28
    224a:	ec 5a       	subi	r30, 0xAC	; 172
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	10 82       	st	Z, r1
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:462
      sysclock.cancel(*this);
    2250:	ce 01       	movw	r24, r28
    2252:	0e 94 22 10 	call	0x2044	; 0x2044 <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]>
_ZN2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_5List4ELi6E6UList0SF_E7changedEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:50

  uint8_t peers () const { return PeerCount; }

  bool changed () const { return change; }

  void changed (bool c) { change = c; }
    2256:	8a 85       	ldd	r24, Y+10	; 0x0a
    2258:	81 60       	ori	r24, 0x01	; 1
    225a:	8a 87       	std	Y+10, r24	; 0x0a
_ZN2as5Alarm3setEm():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:41
  Alarm(uint32_t t) : flags(0), tick(t) {}
  Alarm(uint32_t t,bool asynch) : flags(0), tick(t) {
    async(asynch);
  }
  void set(uint32_t t) {
    tick = t;
    225c:	84 e6       	ldi	r24, 0x64	; 100
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	a0 e0       	ldi	r26, 0x00	; 0
    2262:	8d 83       	std	Y+5, r24	; 0x05
    2264:	9e 83       	std	Y+6, r25	; 0x06
    2266:	af 83       	std	Y+7, r26	; 0x07
_ZN2as8SysClock3addERNS_5AlarmE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:221
    2268:	be 01       	movw	r22, r28
    226a:	87 e8       	ldi	r24, 0x87	; 135
    226c:	95 e0       	ldi	r25, 0x05	; 5
_ZN14MeasureChannel24disablePHCalibrationModeEv():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:466
      this->changed(true);
      set(millis2ticks(1000));
      sysclock.add(*this);
    }
    226e:	df 91       	pop	r29
    2270:	cf 91       	pop	r28
_ZN2as8SysClock3addERNS_5AlarmE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:221
    2272:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <as::AlarmClock::add(as::Alarm&)>

00002276 <LcdType::BacklightAlarm::restartTimer(unsigned char)>:
_ZN7LcdType14BacklightAlarm12restartTimerEh():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:196
  class BacklightAlarm : public Alarm {
    LcdType& lcdDev;
  public:
    BacklightAlarm (LcdType& l) :  Alarm(0), lcdDev(l) {}
    virtual ~BacklightAlarm () {}
    void restartTimer(uint8_t sec) {
    2276:	1f 93       	push	r17
    2278:	cf 93       	push	r28
    227a:	df 93       	push	r29
    227c:	ec 01       	movw	r28, r24
    227e:	16 2f       	mov	r17, r22
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:197
      sysclock.cancel(*this);
    2280:	0e 94 22 10 	call	0x2044	; 0x2044 <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:198
      set(seconds2ticks(sec));
    2284:	21 2f       	mov	r18, r17
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	a4 e6       	ldi	r26, 0x64	; 100
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	0e 94 01 4f 	call	0x9e02	; 0x9e02 <__umulhisi3>
_ZN2as5Alarm3setEm():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:41
    2290:	6d 83       	std	Y+5, r22	; 0x05
    2292:	7e 83       	std	Y+6, r23	; 0x06
    2294:	8f 83       	std	Y+7, r24	; 0x07
_ZN7LcdType14BacklightAlarm12restartTimerEh():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:199
      lcdDev.lcd.backlight();
    2296:	88 85       	ldd	r24, Y+8	; 0x08
    2298:	99 85       	ldd	r25, Y+9	; 0x09
backlight():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    229a:	28 e0       	ldi	r18, 0x08	; 8
    229c:	fc 01       	movw	r30, r24
    229e:	20 a3       	std	Z+32, r18	; 0x20
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:225
	expanderWrite(0);
    22a0:	60 e0       	ldi	r22, 0x00	; 0
    22a2:	45 96       	adiw	r24, 0x15	; 21
    22a4:	0e 94 4a 09 	call	0x1294	; 0x1294 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
_ZN2as8SysClock3addERNS_5AlarmE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:221
    22a8:	be 01       	movw	r22, r28
    22aa:	87 e8       	ldi	r24, 0x87	; 135
    22ac:	95 e0       	ldi	r25, 0x05	; 5
_ZN7LcdType14BacklightAlarm12restartTimerEh():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:201
      sysclock.add(*this);
    }
    22ae:	df 91       	pop	r29
    22b0:	cf 91       	pop	r28
    22b2:	1f 91       	pop	r17
_ZN2as8SysClock3addERNS_5AlarmE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:221
    22b4:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <as::AlarmClock::add(as::Alarm&)>

000022b8 <as::Activity::stayAwake(unsigned long)>:
_ZN2as8Activity9stayAwakeEm():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Activity.h:296
  virtual void trigger (__attribute__((unused)) AlarmClock& clock) {
    awake = false;
  }

  // do not sleep for time in ticks
  void stayAwake (uint32_t time) {
    22b8:	cf 92       	push	r12
    22ba:	df 92       	push	r13
    22bc:	ef 92       	push	r14
    22be:	ff 92       	push	r15
    22c0:	cf 93       	push	r28
    22c2:	df 93       	push	r29
    22c4:	ec 01       	movw	r28, r24
    22c6:	6a 01       	movw	r12, r20
    22c8:	7b 01       	movw	r14, r22
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Activity.h:297
    uint32_t old = sysclock.get(*this);
    22ca:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <as::AlarmClock::get(as::Alarm const&) const [clone .constprop.127]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Activity.h:298
    if( old < time ) {
    22ce:	6c 15       	cp	r22, r12
    22d0:	7d 05       	cpc	r23, r13
    22d2:	8e 05       	cpc	r24, r14
    22d4:	9f 05       	cpc	r25, r15
    22d6:	98 f4       	brcc	.+38     	; 0x22fe <as::Activity::stayAwake(unsigned long)+0x46>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Activity.h:299
      awake = true;
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	88 87       	std	Y+8, r24	; 0x08
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Activity.h:300
      sysclock.cancel(*this);
    22dc:	ce 01       	movw	r24, r28
    22de:	0e 94 22 10 	call	0x2044	; 0x2044 <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Activity.h:301
      tick = time;
    22e2:	cd 82       	std	Y+5, r12	; 0x05
    22e4:	de 82       	std	Y+6, r13	; 0x06
    22e6:	ef 82       	std	Y+7, r14	; 0x07
_ZN2as8SysClock3addERNS_5AlarmE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:221
    22e8:	be 01       	movw	r22, r28
    22ea:	87 e8       	ldi	r24, 0x87	; 135
    22ec:	95 e0       	ldi	r25, 0x05	; 5
_ZN2as8Activity9stayAwakeEm():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Activity.h:304
      sysclock.add(*this);
    }
  }
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	ff 90       	pop	r15
    22f4:	ef 90       	pop	r14
    22f6:	df 90       	pop	r13
    22f8:	cf 90       	pop	r12
_ZN2as8SysClock3addERNS_5AlarmE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:221
    22fa:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <as::AlarmClock::add(as::Alarm&)>
_ZN2as8Activity9stayAwakeEm():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Activity.h:304
    22fe:	df 91       	pop	r29
    2300:	cf 91       	pop	r28
    2302:	ff 90       	pop	r15
    2304:	ef 90       	pop	r14
    2306:	df 90       	pop	r13
    2308:	cf 90       	pop	r12
    230a:	08 95       	ret

0000230c <as::AlarmClock::operator--()>:
_ZN2as10AlarmClockmmEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:64
  }
}

AlarmClock& AlarmClock::operator --() {
    230c:	cf 92       	push	r12
    230e:	df 92       	push	r13
    2310:	ff 92       	push	r15
    2312:	0f 93       	push	r16
    2314:	1f 93       	push	r17
    2316:	cf 93       	push	r28
    2318:	df 93       	push	r29
    231a:	8c 01       	movw	r16, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:65
  ATOMIC_BLOCK( ATOMIC_RESTORESTATE )
    231c:	ff b6       	in	r15, 0x3f	; 63
__iCliRetVal():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    231e:	f8 94       	cli
_ZN2as10AlarmClockmmEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:67
  {
    Alarm* alarm = (Alarm*) select();
    2320:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <as::Link::select() const>
    2324:	00 97       	sbiw	r24, 0x00	; 0
    2326:	69 f1       	breq	.+90     	; 0x2382 <as::AlarmClock::operator--()+0x76>
    2328:	ec 01       	movw	r28, r24
    232a:	22 97       	sbiw	r28, 0x02	; 2
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:68
    if (alarm != 0) {
    232c:	51 f1       	breq	.+84     	; 0x2382 <as::AlarmClock::operator--()+0x76>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:69
      --alarm->tick;
    232e:	8d 81       	ldd	r24, Y+5	; 0x05
    2330:	9e 81       	ldd	r25, Y+6	; 0x06
    2332:	af 81       	ldd	r26, Y+7	; 0x07
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	a1 09       	sbc	r26, r1
    2338:	8d 83       	std	Y+5, r24	; 0x05
    233a:	9e 83       	std	Y+6, r25	; 0x06
    233c:	af 83       	std	Y+7, r26	; 0x07
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:79
          alarm->active(false);
          alarm->trigger(*this);
        }
        // run in application
        else {
          ready.append(*alarm);
    233e:	68 01       	movw	r12, r16
    2340:	82 e0       	ldi	r24, 0x02	; 2
    2342:	c8 0e       	add	r12, r24
    2344:	d1 1c       	adc	r13, r1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:70
  ATOMIC_BLOCK( ATOMIC_RESTORESTATE )
  {
    Alarm* alarm = (Alarm*) select();
    if (alarm != 0) {
      --alarm->tick;
      while ((alarm != 0) && (alarm->tick == 0)) {
    2346:	8d 81       	ldd	r24, Y+5	; 0x05
    2348:	9e 81       	ldd	r25, Y+6	; 0x06
    234a:	af 81       	ldd	r26, Y+7	; 0x07
    234c:	89 2b       	or	r24, r25
    234e:	8a 2b       	or	r24, r26
    2350:	c1 f4       	brne	.+48     	; 0x2382 <as::AlarmClock::operator--()+0x76>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:71
        unlink(); // remove expired alarm
    2352:	c8 01       	movw	r24, r16
    2354:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <as::Link::unlink()>
    2358:	8c 81       	ldd	r24, Y+4	; 0x04
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:73
        // run in interrupt
        if (alarm->async() == true) {
    235a:	80 ff       	sbrs	r24, 0
    235c:	1c c0       	rjmp	.+56     	; 0x2396 <as::AlarmClock::operator--()+0x8a>
_ZN2as5Alarm7setflagEbh.isra.10():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:25
  ~Alarm() {}

  uint8_t flags;

public:
  void setflag(bool c,uint8_t mask) { c ? flags |= mask : flags &= ~mask; }
    235e:	8d 7f       	andi	r24, 0xFD	; 253
    2360:	8c 83       	std	Y+4, r24	; 0x04
_ZN2as10AlarmClockmmEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:75
          alarm->active(false);
          alarm->trigger(*this);
    2362:	e8 81       	ld	r30, Y
    2364:	f9 81       	ldd	r31, Y+1	; 0x01
    2366:	01 90       	ld	r0, Z+
    2368:	f0 81       	ld	r31, Z
    236a:	e0 2d       	mov	r30, r0
    236c:	b8 01       	movw	r22, r16
    236e:	ce 01       	movw	r24, r28
    2370:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:81
        }
        // run in application
        else {
          ready.append(*alarm);
        }
        alarm = (Alarm*) select();
    2372:	c8 01       	movw	r24, r16
    2374:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <as::Link::select() const>
    2378:	00 97       	sbiw	r24, 0x00	; 0
    237a:	19 f0       	breq	.+6      	; 0x2382 <as::AlarmClock::operator--()+0x76>
    237c:	ec 01       	movw	r28, r24
    237e:	22 97       	sbiw	r28, 0x02	; 2
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:70
  ATOMIC_BLOCK( ATOMIC_RESTORESTATE )
  {
    Alarm* alarm = (Alarm*) select();
    if (alarm != 0) {
      --alarm->tick;
      while ((alarm != 0) && (alarm->tick == 0)) {
    2380:	11 f7       	brne	.-60     	; 0x2346 <as::AlarmClock::operator--()+0x3a>
__iRestore():
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2382:	ff be       	out	0x3f, r15	; 63
_ZN2as10AlarmClockmmEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:86
        alarm = (Alarm*) select();
      }
    }
  }
  return *this;
}
    2384:	c8 01       	movw	r24, r16
    2386:	df 91       	pop	r29
    2388:	cf 91       	pop	r28
    238a:	1f 91       	pop	r17
    238c:	0f 91       	pop	r16
    238e:	ff 90       	pop	r15
    2390:	df 90       	pop	r13
    2392:	cf 90       	pop	r12
    2394:	08 95       	ret
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:79
          alarm->active(false);
          alarm->trigger(*this);
        }
        // run in application
        else {
          ready.append(*alarm);
    2396:	be 01       	movw	r22, r28
    2398:	6e 5f       	subi	r22, 0xFE	; 254
    239a:	7f 4f       	sbci	r23, 0xFF	; 255
    239c:	c6 01       	movw	r24, r12
    239e:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <as::Link::append(as::Link&)>
    23a2:	e7 cf       	rjmp	.-50     	; 0x2372 <as::AlarmClock::operator--()+0x66>

000023a4 <SPIClass::endTransaction()>:
_ZN8SPIClass14endTransactionEv():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\SPI\src/SPI.h:287
      #endif
      {
        SREG = interruptSave;
      }
    }
  }
    23a4:	08 95       	ret

000023a6 <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\SPI\src/SPI.h:212
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    23a6:	8e bd       	out	0x2e, r24	; 46
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\SPI\src/SPI.h:219
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    23a8:	00 00       	nop
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\SPI\src/SPI.h:220
    while (!(SPSR & _BV(SPIF))) ; // wait
    23aa:	0d b4       	in	r0, 0x2d	; 45
    23ac:	07 fe       	sbrs	r0, 7
    23ae:	fd cf       	rjmp	.-6      	; 0x23aa <SPIClass::transfer(unsigned char)+0x4>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\SPI\src/SPI.h:221
    return SPDR;
    23b0:	8e b5       	in	r24, 0x2e	; 46
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\SPI\src/SPI.h:222
  }
    23b2:	08 95       	ret

000023b4 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::ping() [clone .isra.141]>:
_ZN2as6LibSPIILh4ELm2000000ELh1ELh0EE4pingEv.isra.141():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:312
  void deselect () {
    digitalWrite(CS,HIGH);
  }

  void ping () {
    SPI.beginTransaction(SPISettings(CLOCK,BITORDER,MODE));
    23b4:	80 e5       	ldi	r24, 0x50	; 80
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	0e 94 6c 05 	call	0xad8	; 0xad8 <SPIClass::beginTransaction(SPISettings) [clone .constprop.139]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:313
    select();                                     // wake up the communication module
    23bc:	0e 94 15 0a 	call	0x142a	; 0x142a <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::select() [clone .isra.133]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:314
    SPI.transfer(0); // ????
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <SPIClass::transfer(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:315
    deselect();
    23c6:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::deselect() [clone .isra.134]>

000023ca <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::writeReg(unsigned char, unsigned char) [clone .isra.138]>:
_ZN2as6LibSPIILh4ELm2000000ELh1ELh0EE8writeRegEhh.isra.138():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:377
    deselect();                                   // deselect CC1101
    SPI.endTransaction();
    return val;
  }

  void writeReg(uint8_t regAddr, uint8_t val) {
    23ca:	cf 93       	push	r28
    23cc:	df 93       	push	r29
    23ce:	d8 2f       	mov	r29, r24
    23d0:	c6 2f       	mov	r28, r22
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:378
    SPI.beginTransaction(SPISettings(CLOCK,BITORDER,MODE));
    23d2:	80 e5       	ldi	r24, 0x50	; 80
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	0e 94 6c 05 	call	0xad8	; 0xad8 <SPIClass::beginTransaction(SPISettings) [clone .constprop.139]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:379
    select();                                     // select CC1101
    23da:	0e 94 15 0a 	call	0x142a	; 0x142a <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::select() [clone .isra.133]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:380
    SPI.transfer(regAddr);                        // send register address
    23de:	8d 2f       	mov	r24, r29
    23e0:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <SPIClass::transfer(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:381
    SPI.transfer(val);                            // send value
    23e4:	8c 2f       	mov	r24, r28
    23e6:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <SPIClass::transfer(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:384
    deselect();                                   // deselect CC1101
    SPI.endTransaction();
  }
    23ea:	df 91       	pop	r29
    23ec:	cf 91       	pop	r28
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:382
  void writeReg(uint8_t regAddr, uint8_t val) {
    SPI.beginTransaction(SPISettings(CLOCK,BITORDER,MODE));
    select();                                     // select CC1101
    SPI.transfer(regAddr);                        // send register address
    SPI.transfer(val);                            // send value
    deselect();                                   // deselect CC1101
    23ee:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::deselect() [clone .isra.134]>

000023f2 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::strobe(unsigned char) [clone .isra.136]>:
_ZN2as6LibSPIILh4ELm2000000ELh1ELh0EE6strobeEh.isra.136():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:336
    uint8_t ret = SPI.transfer(data);
    SPI.endTransaction();
    return ret;
  }

  uint8_t strobe(uint8_t cmd) {
    23f2:	cf 93       	push	r28
    23f4:	c8 2f       	mov	r28, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:337
    SPI.beginTransaction(SPISettings(CLOCK,BITORDER,MODE));
    23f6:	80 e5       	ldi	r24, 0x50	; 80
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	0e 94 6c 05 	call	0xad8	; 0xad8 <SPIClass::beginTransaction(SPISettings) [clone .constprop.139]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:338
    select();                                     // select CC1101
    23fe:	0e 94 15 0a 	call	0x142a	; 0x142a <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::select() [clone .isra.133]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:339
    uint8_t ret = SPI.transfer(cmd);
    2402:	8c 2f       	mov	r24, r28
    2404:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <SPIClass::transfer(unsigned char)>
    2408:	c8 2f       	mov	r28, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:340
    deselect();                                   // deselect CC1101
    240a:	0e 94 11 0a 	call	0x1422	; 0x1422 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::deselect() [clone .isra.134]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:343
    SPI.endTransaction();
    return ret;
  }
    240e:	8c 2f       	mov	r24, r28
    2410:	cf 91       	pop	r28
    2412:	08 95       	ret

00002414 <as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255>::flushrx() [clone .isra.137]>:
_ZN2as6CC1101INS_6LibSPIILh4ELm2000000ELh1ELh0EEELh255EE7flushrxEv.isra.137():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:708
  uint8_t rssi () const {
    return rss;
  }
  
  void flushrx () {
    spi.strobe(CC1101_SIDLE);
    2414:	86 e3       	ldi	r24, 0x36	; 54
    2416:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::strobe(unsigned char) [clone .isra.136]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:709
    spi.strobe(CC1101_SNOP);
    241a:	8d e3       	ldi	r24, 0x3D	; 61
    241c:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::strobe(unsigned char) [clone .isra.136]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:710
    spi.strobe(CC1101_SFRX);
    2420:	8a e3       	ldi	r24, 0x3A	; 58
    2422:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::strobe(unsigned char) [clone .isra.136]>

00002426 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::readReg(unsigned char, unsigned char) [clone .isra.135]>:
_ZN2as6LibSPIILh4ELm2000000ELh1ELh0EE7readRegEhh.isra.135():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:367
      SPI.transfer(buf[i]);                       // send value
    deselect();                                   // deselect CC1101
    SPI.endTransaction();
  }

  uint8_t readReg(uint8_t regAddr, uint8_t regType) {
    2426:	cf 93       	push	r28
    2428:	df 93       	push	r29
    242a:	d8 2f       	mov	r29, r24
    242c:	c6 2f       	mov	r28, r22
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:368
    SPI.beginTransaction(SPISettings(CLOCK,BITORDER,MODE));
    242e:	80 e5       	ldi	r24, 0x50	; 80
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	0e 94 6c 05 	call	0xad8	; 0xad8 <SPIClass::beginTransaction(SPISettings) [clone .constprop.139]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:369
    select();                                     // select CC1101
    2436:	0e 94 15 0a 	call	0x142a	; 0x142a <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::select() [clone .isra.133]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:370
    SPI.transfer(regAddr | regType);              // send register address
    243a:	8d 2f       	mov	r24, r29
    243c:	8c 2b       	or	r24, r28
    243e:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <SPIClass::transfer(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:371
    uint8_t val = SPI.transfer(0x00);             // read result
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <SPIClass::transfer(unsigned char)>
    2448:	c8 2f       	mov	r28, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:372
    deselect();                                   // deselect CC1101
    244a:	0e 94 11 0a 	call	0x1422	; 0x1422 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::deselect() [clone .isra.134]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:375
    SPI.endTransaction();
    return val;
  }
    244e:	8c 2f       	mov	r24, r28
    2450:	df 91       	pop	r29
    2452:	cf 91       	pop	r28
    2454:	08 95       	ret

00002456 <as::AskSinBase::readPin(unsigned char, unsigned char, unsigned char) [clone .constprop.126]>:
_ZN2as10AskSinBase7readPinEhhh.constprop.126():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:199
   * \param pinnr the number of the pin to read
   * \param enablenr pin to set to high for enabling the read
   * \param ms milli seconds to wait between enablement and pin read
   * \return status of read pin
   */
  static uint8_t readPin(uint8_t pinnr,uint8_t enablenr=0,uint8_t ms=0) {
    2456:	0f 93       	push	r16
    2458:	1f 93       	push	r17
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	d8 2f       	mov	r29, r24
    2460:	c6 2f       	mov	r28, r22
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:201
    uint8_t value=0;
    pinMode(pinnr,INPUT_PULLUP);
    2462:	62 e0       	ldi	r22, 0x02	; 2
    2464:	0e 94 de 07 	call	0xfbc	; 0xfbc <pinMode>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:202
    if( enablenr != 0 && enablenr != 0xff) {
    2468:	1f ef       	ldi	r17, 0xFF	; 255
    246a:	1c 0f       	add	r17, r28
    246c:	1e 3f       	cpi	r17, 0xFE	; 254
    246e:	20 f4       	brcc	.+8      	; 0x2478 <as::AskSinBase::readPin(unsigned char, unsigned char, unsigned char) [clone .constprop.126]+0x22>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:203
      digitalWrite(enablenr,HIGH);
    2470:	61 e0       	ldi	r22, 0x01	; 1
    2472:	8c 2f       	mov	r24, r28
    2474:	0e 94 7e 07 	call	0xefc	; 0xefc <digitalWrite>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:208
      if( ms != 0 ) {
        _delay_ms(ms);
      }
    }
    value = digitalRead(pinnr);
    2478:	8d 2f       	mov	r24, r29
    247a:	0e 94 55 07 	call	0xeaa	; 0xeaa <digitalRead>
    247e:	08 2f       	mov	r16, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:213
    // pinMode(pinnr,OUTPUT);
    // digitalWrite(pinnr,LOW);
    // 01/2022 TM: Ruhezustand des Eingangs ist nicht mehr Output/Low sondern High-Z
    // https://homematic-forum.de/forum/viewtopic.php?f=76&t=71854
    pinMode(pinnr,INPUT);
    2480:	60 e0       	ldi	r22, 0x00	; 0
    2482:	8d 2f       	mov	r24, r29
    2484:	0e 94 de 07 	call	0xfbc	; 0xfbc <pinMode>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:214
    if( enablenr != 0 && enablenr != 0xff) {
    2488:	1e 3f       	cpi	r17, 0xFE	; 254
    248a:	20 f4       	brcc	.+8      	; 0x2494 <as::AskSinBase::readPin(unsigned char, unsigned char, unsigned char) [clone .constprop.126]+0x3e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:215
      digitalWrite(enablenr,LOW);
    248c:	60 e0       	ldi	r22, 0x00	; 0
    248e:	8c 2f       	mov	r24, r28
    2490:	0e 94 7e 07 	call	0xefc	; 0xefc <digitalWrite>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:218
    }
    return value;
  }
    2494:	80 2f       	mov	r24, r16
    2496:	df 91       	pop	r29
    2498:	cf 91       	pop	r28
    249a:	1f 91       	pop	r17
    249c:	0f 91       	pop	r16
    249e:	08 95       	ret

000024a0 <PCF8583::getRegister(unsigned char) [clone .constprop.83]>:
_ZN7PCF858311getRegisterEh.constprop.83():
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:288
}

uint8_t PCF8583::getRegister(uint8_t offset) {
    24a0:	cf 93       	push	r28
    24a2:	df 93       	push	r29
    24a4:	ec 01       	movw	r28, r24
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:289
    Wire.beginTransmission(_address);
    24a6:	88 81       	ld	r24, Y
beginTransmission():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    24a8:	91 e0       	ldi	r25, 0x01	; 1
    24aa:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <TwoWire::transmitting>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
    24ae:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <TwoWire::txAddress>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    24b2:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <TwoWire::txBufferIndex>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:201
  txBufferLength = 0;
    24b6:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <TwoWire::txBufferLength>
_ZN7PCF858311getRegisterEh.constprop.83():
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:290
    Wire.write(offset);
    24ba:	60 e0       	ldi	r22, 0x00	; 0
    24bc:	8b e8       	ldi	r24, 0x8B	; 139
    24be:	95 e0       	ldi	r25, 0x05	; 5
    24c0:	0e 94 16 09 	call	0x122c	; 0x122c <TwoWire::write(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:291
    Wire.endTransmission();
    24c4:	0e 94 4c 04 	call	0x898	; 0x898 <TwoWire::endTransmission() [clone .constprop.152]>
twi_readFrom():
    24c8:	61 e0       	ldi	r22, 0x01	; 1
    24ca:	88 81       	ld	r24, Y
    24cc:	0e 94 71 05 	call	0xae2	; 0xae2 <twi_readFrom.part.0.constprop.88>
requestFrom():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:120
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    24d0:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <TwoWire::rxBufferIndex>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:121
  rxBufferLength = read;
    24d4:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <TwoWire::rxBufferLength>
_ZN7PCF858311getRegisterEh.constprop.83():
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:293
    Wire.requestFrom(_address, (uint8_t) 1);
    return Wire.read();
    24d8:	8b e8       	ldi	r24, 0x8B	; 139
    24da:	95 e0       	ldi	r25, 0x05	; 5
    24dc:	0e 94 cf 08 	call	0x119e	; 0x119e <TwoWire::read()>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:294
}
    24e0:	df 91       	pop	r29
    24e2:	cf 91       	pop	r28
    24e4:	08 95       	ret

000024e6 <PCF8583::setCount(unsigned long) [clone .constprop.82]>:
_ZN7PCF85838setCountEm.constprop.82():
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:240
    uint8_t control = getRegister(LOCATION_ALARM_CONTROL);
    control &= 0x6F;
    setRegister(LOCATION_ALARM_CONTROL, control);
}

void PCF8583::setCount(unsigned long count) {
    24e6:	cf 93       	push	r28
    24e8:	df 93       	push	r29
    24ea:	ec 01       	movw	r28, r24
stop():
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:270
}

// Private methods

void PCF8583::stop() {
    uint8_t control = getRegister(LOCATION_CONTROL);
    24ec:	0e 94 50 12 	call	0x24a0	; 0x24a0 <PCF8583::getRegister(unsigned char) [clone .constprop.83]>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:271
    control |= 0x80;
    24f0:	68 2f       	mov	r22, r24
    24f2:	60 68       	ori	r22, 0x80	; 128
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:272
    setRegister(LOCATION_CONTROL, control);
    24f4:	ce 01       	movw	r24, r28
    24f6:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <PCF8583::setRegister(unsigned char, unsigned char) [clone .constprop.89]>
_ZN7PCF85838setCountEm.constprop.82():
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:242
    setRegister(LOCATION_ALARM_CONTROL, control);
}

void PCF8583::setCount(unsigned long count) {
    stop();
    Wire.beginTransmission(_address);
    24fa:	88 81       	ld	r24, Y
beginTransmission():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    24fc:	91 e0       	ldi	r25, 0x01	; 1
    24fe:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <TwoWire::transmitting>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
    2502:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <TwoWire::txAddress>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2506:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <TwoWire::txBufferIndex>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:201
  txBufferLength = 0;
    250a:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <TwoWire::txBufferLength>
_ZN7PCF85838setCountEm.constprop.82():
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:243
    Wire.write(LOCATION_COUNTER);
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	0e 94 45 09 	call	0x128a	; 0x128a <TwoWire::write(int) [clone .constprop.151]>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:244
    Wire.write(byte2bcd(count % 100));
    2516:	60 e0       	ldi	r22, 0x00	; 0
    2518:	8b e8       	ldi	r24, 0x8B	; 139
    251a:	95 e0       	ldi	r25, 0x05	; 5
    251c:	0e 94 16 09 	call	0x122c	; 0x122c <TwoWire::write(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:245
    Wire.write(byte2bcd((count / 100) % 100));
    2520:	60 e0       	ldi	r22, 0x00	; 0
    2522:	8b e8       	ldi	r24, 0x8B	; 139
    2524:	95 e0       	ldi	r25, 0x05	; 5
    2526:	0e 94 16 09 	call	0x122c	; 0x122c <TwoWire::write(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:246
    Wire.write(byte2bcd((count / 10000) % 100));
    252a:	60 e0       	ldi	r22, 0x00	; 0
    252c:	8b e8       	ldi	r24, 0x8B	; 139
    252e:	95 e0       	ldi	r25, 0x05	; 5
    2530:	0e 94 16 09 	call	0x122c	; 0x122c <TwoWire::write(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:247
    Wire.endTransmission();
    2534:	0e 94 4c 04 	call	0x898	; 0x898 <TwoWire::endTransmission() [clone .constprop.152]>
start():
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:276
    control |= 0x80;
    setRegister(LOCATION_CONTROL, control);
}

void PCF8583::start() {
    uint8_t control = getRegister(LOCATION_CONTROL);
    2538:	ce 01       	movw	r24, r28
    253a:	0e 94 50 12 	call	0x24a0	; 0x24a0 <PCF8583::getRegister(unsigned char) [clone .constprop.83]>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:277
    control &= 0x7F;
    253e:	68 2f       	mov	r22, r24
    2540:	6f 77       	andi	r22, 0x7F	; 127
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:278
    setRegister(LOCATION_CONTROL, control);
    2542:	ce 01       	movw	r24, r28
_ZN7PCF85838setCountEm.constprop.82():
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:249
    Wire.write(byte2bcd(count % 100));
    Wire.write(byte2bcd((count / 100) % 100));
    Wire.write(byte2bcd((count / 10000) % 100));
    Wire.endTransmission();
    start();
}
    2544:	df 91       	pop	r29
    2546:	cf 91       	pop	r28
start():
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:278
}

void PCF8583::start() {
    uint8_t control = getRegister(LOCATION_CONTROL);
    control &= 0x7F;
    setRegister(LOCATION_CONTROL, control);
    2548:	0c 94 d0 09 	jmp	0x13a0	; 0x13a0 <PCF8583::setRegister(unsigned char, unsigned char) [clone .constprop.89]>

0000254c <as::Led<as::ArduinoPins>::set(as::LedStates::Mode, as::LedStates::BlinkPattern const*) [clone .constprop.39]>:
_ZN2as3LedINS_11ArduinoPinsEE3setENS_9LedStates4ModeEPKNS3_12BlinkPatternE.constprop.39():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:69

  bool invert () const {
    return inv;
  }

  void set(Mode stat,const BlinkPattern* patt) {
    254c:	0f 93       	push	r16
    254e:	1f 93       	push	r17
    2550:	cf 93       	push	r28
    2552:	df 93       	push	r29
    2554:	ec 01       	movw	r28, r24
    2556:	8b 01       	movw	r16, r22
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:70
    sysclock.cancel(*this);
    2558:	0e 94 22 10 	call	0x2044	; 0x2044 <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:71
    ledOff();
    255c:	ce 01       	movw	r24, r28
    255e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <as::Led<as::ArduinoPins>::ledOff()>
copyPattern():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:40
  uint8_t repeat; // current repeat of the pattern
  uint8_t pin;
  uint8_t inv;

  void copyPattern (Mode stat,const BlinkPattern* patt) {
    memcpy_P(&current,patt+stat,sizeof(BlinkPattern));
    2562:	b8 01       	movw	r22, r16
    2564:	83 e0       	ldi	r24, 0x03	; 3
    2566:	66 0f       	add	r22, r22
    2568:	77 1f       	adc	r23, r23
    256a:	8a 95       	dec	r24
    256c:	e1 f7       	brne	.-8      	; 0x2566 <as::Led<as::ArduinoPins>::set(as::LedStates::Mode, as::LedStates::BlinkPattern const*) [clone .constprop.39]+0x1a>
    256e:	63 59       	subi	r22, 0x93	; 147
    2570:	78 4f       	sbci	r23, 0xF8	; 248
    2572:	48 e0       	ldi	r20, 0x08	; 8
    2574:	50 e0       	ldi	r21, 0x00	; 0
    2576:	ce 01       	movw	r24, r28
    2578:	08 96       	adiw	r24, 0x08	; 8
    257a:	0e 94 18 4b 	call	0x9630	; 0x9630 <memcpy_P>
_ZN2as3LedINS_11ArduinoPinsEE3setENS_9LedStates4ModeEPKNS3_12BlinkPatternE.constprop.39():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:73

  void set(Mode stat,const BlinkPattern* patt) {
    sysclock.cancel(*this);
    ledOff();
    copyPattern(stat,patt);
    if( current.length > 0 ) {
    257e:	88 85       	ldd	r24, Y+8	; 0x08
    2580:	88 23       	and	r24, r24
    2582:	71 f0       	breq	.+28     	; 0x25a0 <as::Led<as::ArduinoPins>::set(as::LedStates::Mode, as::LedStates::BlinkPattern const*) [clone .constprop.39]+0x54>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:74
      step = 0;
    2584:	18 8a       	std	Y+16, r1	; 0x10
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:75
      repeat = 0;
    2586:	19 8a       	std	Y+17, r1	; 0x11
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:76
      next(sysclock);
    2588:	67 e8       	ldi	r22, 0x87	; 135
    258a:	75 e0       	ldi	r23, 0x05	; 5
    258c:	ce 01       	movw	r24, r28
    258e:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <as::Led<as::ArduinoPins>::next(as::AlarmClock&)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:77
      ledOn();
    2592:	ce 01       	movw	r24, r28
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:79
    }
  }
    2594:	df 91       	pop	r29
    2596:	cf 91       	pop	r28
    2598:	1f 91       	pop	r17
    259a:	0f 91       	pop	r16
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:77
    copyPattern(stat,patt);
    if( current.length > 0 ) {
      step = 0;
      repeat = 0;
      next(sysclock);
      ledOn();
    259c:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <as::Led<as::ArduinoPins>::ledOn()>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:79
    }
  }
    25a0:	df 91       	pop	r29
    25a2:	cf 91       	pop	r28
    25a4:	1f 91       	pop	r17
    25a6:	0f 91       	pop	r16
    25a8:	08 95       	ret

000025aa <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::getDeviceID(as::HMID&) [clone .isra.97]>:
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E11getDeviceIDERNS_4HMIDE.isra.97():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:267
    }
#endif
    return data;
  }

  void getDeviceID (HMID& id) {
    25aa:	0f 93       	push	r16
    25ac:	1f 93       	push	r17
    25ae:	cf 93       	push	r28
    25b0:	df 93       	push	r29
    25b2:	00 d0       	rcall	.+0      	; 0x25b4 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::getDeviceID(as::HMID&) [clone .isra.97]+0xa>
    25b4:	1f 92       	push	r1
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    25ba:	8b 01       	movw	r16, r22
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:291
  #endif
    }
    id = HMID(device_id);
#else
    uint8_t ids[3];
    memcpy_P(ids,info.DeviceID,3);
    25bc:	43 e0       	ldi	r20, 0x03	; 3
    25be:	50 e0       	ldi	r21, 0x00	; 0
    25c0:	bc 01       	movw	r22, r24
    25c2:	ce 01       	movw	r24, r28
    25c4:	01 96       	adiw	r24, 0x01	; 1
    25c6:	0e 94 18 4b 	call	0x9630	; 0x9630 <memcpy_P>
_ZN2as4HMIDC2EPh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:27
    id[1]=i2;
    id[2]=i3;
  }
  HMID (uint8_t* ptr) {
    id[0]=*ptr;
    id[1]=*(ptr+1);
    25ca:	9a 81       	ldd	r25, Y+2	; 0x02
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:28
    id[2]=*(ptr+2);
    25cc:	8b 81       	ldd	r24, Y+3	; 0x03
_ZN2as4HMIDaSERKS0_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:36
    id[0]=other.id[0];
    id[1]=other.id[1];
    id[2]=other.id[2];
  }
  HMID& operator = (const HMID& other) {
    id[0]=other.id[0];
    25ce:	29 81       	ldd	r18, Y+1	; 0x01
    25d0:	f8 01       	movw	r30, r16
    25d2:	20 83       	st	Z, r18
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:37
    id[1]=other.id[1];
    25d4:	91 83       	std	Z+1, r25	; 0x01
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:38
    id[2]=other.id[2];
    25d6:	82 83       	std	Z+2, r24	; 0x02
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E11getDeviceIDERNS_4HMIDE.isra.97():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:294
    id = HMID(ids);
#endif
  }
    25d8:	0f 90       	pop	r0
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	df 91       	pop	r29
    25e0:	cf 91       	pop	r28
    25e2:	1f 91       	pop	r17
    25e4:	0f 91       	pop	r16
    25e6:	08 95       	ret

000025e8 <as::InternalButton<UType, (unsigned char)1, (unsigned char)0, (unsigned char)2>::fillMsg(bool)>:
_ZN2as14InternalButtonI5UTypeLh1ELh0ELh2EE7fillMsgEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:321
    }
    else if( s == ButtonType::longreleased ) {
      counter++;
    }
  }
  RemoteEventMsg& fillMsg (bool lg) {
    25e8:	ef 92       	push	r14
    25ea:	ff 92       	push	r15
    25ec:	0f 93       	push	r16
    25ee:	1f 93       	push	r17
    25f0:	cf 93       	push	r28
    25f2:	df 93       	push	r29
    25f4:	8c 01       	movw	r16, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:322
    RemoteEventMsg& msg = (RemoteEventMsg&)device.message();
    25f6:	dc 01       	movw	r26, r24
    25f8:	57 96       	adiw	r26, 0x17	; 23
    25fa:	cd 91       	ld	r28, X+
    25fc:	dc 91       	ld	r29, X
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E7messageEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:205
  RadioType& radio () { return hal->radio; }
  BuzzerType& buzzer () { return hal->buzzer; }
  KeyStore& keystore () { return this->kstore; }
  Activity& activity () { return hal->activity; }

  Message& message () { return msg; }
    25fe:	7e 01       	movw	r14, r28
    2600:	bb e0       	ldi	r27, 0x0B	; 11
    2602:	eb 0e       	add	r14, r27
    2604:	f1 1c       	adc	r15, r1
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E9nextcountEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:370
    }
    return false;
  }

  uint8_t nextcount () {
    return ++msgcount;
    2606:	9e 81       	ldd	r25, Y+6	; 0x06
    2608:	9f 5f       	subi	r25, 0xFF	; 255
    260a:	9e 83       	std	Y+6, r25	; 0x06
_ZN2as14InternalButtonI5UTypeLh1ELh0ELh2EE7fillMsgEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:324
    uint8_t cnt = device.nextcount();
    msg.init(cnt,num,counter,lg,false);
    260c:	f8 01       	movw	r30, r16
    260e:	32 8d       	ldd	r19, Z+26	; 0x1a
    2610:	81 8d       	ldd	r24, Z+25	; 0x19
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:472
class RemoteEventMsg : public Message {
protected:
  RemoteEventMsg() {}
public:
  void init(uint8_t msgcnt,uint8_t ch,uint8_t counter,bool lg,bool lowbat) {
    uint8_t flags = lg ? 0x40 : 0x00;
    2612:	20 e0       	ldi	r18, 0x00	; 0
_ZN2as14RemoteEventMsg4initEhhhbb():
    2614:	61 11       	cpse	r22, r1
_ZN2as14InternalButtonI5UTypeLh1ELh0ELh2EE7fillMsgEb():
    2616:	20 e4       	ldi	r18, 0x40	; 64
_ZN2as7Message13initWithCountEhhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:149
    *(ptr+3) = d4;
    len += 4;
  }

  void initWithCount(uint8_t length, uint8_t typ, uint8_t flags, uint8_t comm) {
    this->len = length;
    2618:	4b e0       	ldi	r20, 0x0B	; 11
    261a:	4b 87       	std	Y+11, r20	; 0x0b
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:150
    this->typ = typ;
    261c:	40 e4       	ldi	r20, 0x40	; 64
    261e:	4e 87       	std	Y+14, r20	; 0x0e
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:151
    this->flag = flags;
    2620:	42 e2       	ldi	r20, 0x22	; 34
    2622:	4d 87       	std	Y+13, r20	; 0x0d
_ZN2as14RemoteEventMsg4initEhhhbb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:476
  void init(uint8_t msgcnt,uint8_t ch,uint8_t counter,bool lg,bool lowbat) {
    uint8_t flags = lg ? 0x40 : 0x00;
    if( lowbat == true ) {
      flags |= 0x80; // low battery
    }
    Message::init(0xb,msgcnt,AS_MESSAGE_REMOTE_EVENT,BIDI|WKMEUP,(ch & 0x3f) | flags,counter);
    2624:	8f 73       	andi	r24, 0x3F	; 63
    2626:	82 2b       	or	r24, r18
_ZN2as7Message13initWithCountEhhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:152

  void initWithCount(uint8_t length, uint8_t typ, uint8_t flags, uint8_t comm) {
    this->len = length;
    this->typ = typ;
    this->flag = flags;
    this->comm = comm;
    2628:	8d 8b       	std	Y+21, r24	; 0x15
_ZN2as7Message4initEhhhhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:157
  }

  void init(uint8_t length, uint8_t cnt, uint8_t typ, uint8_t flags, uint8_t comm, uint8_t sub) {
    initWithCount(length,typ,flags,comm);
    this->cnt = cnt;
    262a:	9c 87       	std	Y+12, r25	; 0x0c
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:158
    this->subcom = sub;
    262c:	3e 8b       	std	Y+22, r19	; 0x16
_ZN2as7Message2toEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:202
  const HMID& to () const {
    return toID;
  }

  HMID& to () {
    return toID;
    262e:	be 01       	movw	r22, r28
    2630:	6e 5e       	subi	r22, 0xEE	; 238
    2632:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN2as14InternalButtonI5UTypeLh1ELh0ELh2EE7fillMsgEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:325
    device.getDeviceID(msg.to());
    2634:	d8 01       	movw	r26, r16
    2636:	57 96       	adiw	r26, 0x17	; 23
    2638:	ed 91       	ld	r30, X+
    263a:	fc 91       	ld	r31, X
    263c:	82 a5       	ldd	r24, Z+42	; 0x2a
    263e:	93 a5       	ldd	r25, Z+43	; 0x2b
    2640:	0e 94 d5 12 	call	0x25aa	; 0x25aa <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::getDeviceID(as::HMID&) [clone .isra.97]>
_ZN2as7Message4fromEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:186
  const HMID& from () const {
    return fromID;
  }

  HMID& from () {
    return fromID;
    2644:	be 01       	movw	r22, r28
    2646:	61 5f       	subi	r22, 0xF1	; 241
    2648:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN2as14InternalButtonI5UTypeLh1ELh0ELh2EE7fillMsgEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:326
    device.getDeviceID(msg.from());
    264a:	d8 01       	movw	r26, r16
    264c:	57 96       	adiw	r26, 0x17	; 23
    264e:	ed 91       	ld	r30, X+
    2650:	fc 91       	ld	r31, X
    2652:	82 a5       	ldd	r24, Z+42	; 0x2a
    2654:	93 a5       	ldd	r25, Z+43	; 0x2b
    2656:	0e 94 d5 12 	call	0x25aa	; 0x25aa <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::getDeviceID(as::HMID&) [clone .isra.97]>
_ZN2as7Message8clearAckEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:300
  void setAck () {
    flag |= BIDI;
  }

  void clearAck () {
    flag &= ~BIDI;
    265a:	8d 85       	ldd	r24, Y+13	; 0x0d
    265c:	8f 7d       	andi	r24, 0xDF	; 223
    265e:	8d 87       	std	Y+13, r24	; 0x0d
_ZN2as14InternalButtonI5UTypeLh1ELh0ELh2EE7fillMsgEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:329
    msg.clearAck();
    return msg;
  }
    2660:	c7 01       	movw	r24, r14
    2662:	df 91       	pop	r29
    2664:	cf 91       	pop	r28
    2666:	1f 91       	pop	r17
    2668:	0f 91       	pop	r16
    266a:	ff 90       	pop	r15
    266c:	ef 90       	pop	r14
    266e:	08 95       	ret

00002670 <as::InternalButton<UType, (unsigned char)1, (unsigned char)0, (unsigned char)2>::state(unsigned char)>:
_ZN2as14InternalButtonI5UTypeLh1ELh0ELh2EE5stateEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:308

  InternalButton (DEVTYPE& dev,uint8_t n,uint8_t longpresstime=4) : device(dev), num(n), counter(0) {
    this->setLongPressTime(decis2ticks(longpresstime));
  }
  virtual ~InternalButton () {}
  virtual void state (uint8_t s) {
    2670:	1f 93       	push	r17
    2672:	cf 93       	push	r28
    2674:	df 93       	push	r29
    2676:	ec 01       	movw	r28, r24
    2678:	16 2f       	mov	r17, r22
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:309
    ButtonType::state(s);
    267a:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::state(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:310
    if( s == ButtonType::released ) {
    267e:	12 30       	cpi	r17, 0x02	; 2
    2680:	99 f4       	brne	.+38     	; 0x26a8 <as::InternalButton<UType, (unsigned char)1, (unsigned char)0, (unsigned char)2>::state(unsigned char)+0x38>
shortPress():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:337
    device.getDeviceID(self);
    return Peer(self,num);
  }
  // trigger a short press event - press button by software
  void shortPress () {
    RemoteEventMsg& msg = fillMsg(false);
    2682:	60 e0       	ldi	r22, 0x00	; 0
    2684:	ce 01       	movw	r24, r28
    2686:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <as::InternalButton<UType, (unsigned char)1, (unsigned char)0, (unsigned char)2>::fillMsg(bool)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:338
    device.process(msg);
    268a:	af 89       	ldd	r26, Y+23	; 0x17
    268c:	b8 8d       	ldd	r27, Y+24	; 0x18
    268e:	ed 91       	ld	r30, X+
    2690:	fc 91       	ld	r31, X
    2692:	11 97       	sbiw	r26, 0x01	; 1
    2694:	06 80       	ldd	r0, Z+6	; 0x06
    2696:	f7 81       	ldd	r31, Z+7	; 0x07
    2698:	e0 2d       	mov	r30, r0
    269a:	bc 01       	movw	r22, r24
    269c:	cd 01       	movw	r24, r26
    269e:	09 95       	icall
_ZN2as14InternalButtonI5UTypeLh1ELh0ELh2EE5stateEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:318
    else if( s == ButtonType::longpressed ) {
      RemoteEventMsg& msg = fillMsg(true);
      device.process(msg);
    }
    else if( s == ButtonType::longreleased ) {
      counter++;
    26a0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26a2:	8f 5f       	subi	r24, 0xFF	; 255
    26a4:	8a 8f       	std	Y+26, r24	; 0x1a
    26a6:	16 c0       	rjmp	.+44     	; 0x26d4 <as::InternalButton<UType, (unsigned char)1, (unsigned char)0, (unsigned char)2>::state(unsigned char)+0x64>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:313
  virtual void state (uint8_t s) {
    ButtonType::state(s);
    if( s == ButtonType::released ) {
      shortPress();
    }
    else if( s == ButtonType::longpressed ) {
    26a8:	15 30       	cpi	r17, 0x05	; 5
    26aa:	91 f4       	brne	.+36     	; 0x26d0 <as::InternalButton<UType, (unsigned char)1, (unsigned char)0, (unsigned char)2>::state(unsigned char)+0x60>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:314
      RemoteEventMsg& msg = fillMsg(true);
    26ac:	61 e0       	ldi	r22, 0x01	; 1
    26ae:	ce 01       	movw	r24, r28
    26b0:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <as::InternalButton<UType, (unsigned char)1, (unsigned char)0, (unsigned char)2>::fillMsg(bool)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:315
      device.process(msg);
    26b4:	af 89       	ldd	r26, Y+23	; 0x17
    26b6:	b8 8d       	ldd	r27, Y+24	; 0x18
    26b8:	ed 91       	ld	r30, X+
    26ba:	fc 91       	ld	r31, X
    26bc:	11 97       	sbiw	r26, 0x01	; 1
    26be:	06 80       	ldd	r0, Z+6	; 0x06
    26c0:	f7 81       	ldd	r31, Z+7	; 0x07
    26c2:	e0 2d       	mov	r30, r0
    26c4:	bc 01       	movw	r22, r24
    26c6:	cd 01       	movw	r24, r26
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:320
    }
    else if( s == ButtonType::longreleased ) {
      counter++;
    }
  }
    26c8:	df 91       	pop	r29
    26ca:	cf 91       	pop	r28
    26cc:	1f 91       	pop	r17
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:315
    if( s == ButtonType::released ) {
      shortPress();
    }
    else if( s == ButtonType::longpressed ) {
      RemoteEventMsg& msg = fillMsg(true);
      device.process(msg);
    26ce:	09 94       	ijmp
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:317
    }
    else if( s == ButtonType::longreleased ) {
    26d0:	16 30       	cpi	r17, 0x06	; 6
    26d2:	31 f3       	breq	.-52     	; 0x26a0 <as::InternalButton<UType, (unsigned char)1, (unsigned char)0, (unsigned char)2>::state(unsigned char)+0x30>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:320
      counter++;
    }
  }
    26d4:	df 91       	pop	r29
    26d6:	cf 91       	pop	r28
    26d8:	1f 91       	pop	r17
    26da:	08 95       	ret

000026dc <as::Led<as::ArduinoPins>::trigger(as::AlarmClock&)>:
_ZN2as3LedINS_11ArduinoPinsEE7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:114
    }
  }

  bool active () const { return current.length != 0; }

  virtual void trigger (AlarmClock& clock) {
    26dc:	1f 93       	push	r17
    26de:	cf 93       	push	r28
    26e0:	df 93       	push	r29
    26e2:	ec 01       	movw	r28, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:116
    bool switchOn = false;
    ATOMIC_BLOCK( ATOMIC_RESTORESTATE ) {
    26e4:	1f b7       	in	r17, 0x3f	; 63
__iCliRetVal():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    26e6:	f8 94       	cli
_ZN2as3LedINS_11ArduinoPinsEE7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:117
      if( step < current.length ) {
    26e8:	98 89       	ldd	r25, Y+16	; 0x10
    26ea:	88 85       	ldd	r24, Y+8	; 0x08
    26ec:	98 17       	cp	r25, r24
    26ee:	60 f4       	brcc	.+24     	; 0x2708 <as::Led<as::ArduinoPins>::trigger(as::AlarmClock&)+0x2c>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:123
        switchOn = next(clock);
      }
      else {
        step = 0;
        if( current.duration == 0 || ++repeat < current.duration ) {
          switchOn = next(clock);
    26f0:	ce 01       	movw	r24, r28
    26f2:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <as::Led<as::ArduinoPins>::next(as::AlarmClock&)>
__iRestore():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    26f6:	1f bf       	out	0x3f, r17	; 63
_ZN2as3LedINS_11ArduinoPinsEE7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:131
          // off is default
          copyPattern(nothing,single);
        }
      }
    }
    if( switchOn == true ) ledOn();
    26f8:	88 23       	and	r24, r24
    26fa:	c1 f0       	breq	.+48     	; 0x272c <as::Led<as::ArduinoPins>::trigger(as::AlarmClock&)+0x50>
    26fc:	ce 01       	movw	r24, r28
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:133
    else ledOff();
  }
    26fe:	df 91       	pop	r29
    2700:	cf 91       	pop	r28
    2702:	1f 91       	pop	r17
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:131
          // off is default
          copyPattern(nothing,single);
        }
      }
    }
    if( switchOn == true ) ledOn();
    2704:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <as::Led<as::ArduinoPins>::ledOn()>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:121
    ATOMIC_BLOCK( ATOMIC_RESTORESTATE ) {
      if( step < current.length ) {
        switchOn = next(clock);
      }
      else {
        step = 0;
    2708:	18 8a       	std	Y+16, r1	; 0x10
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:122
        if( current.duration == 0 || ++repeat < current.duration ) {
    270a:	99 85       	ldd	r25, Y+9	; 0x09
    270c:	99 23       	and	r25, r25
    270e:	81 f3       	breq	.-32     	; 0x26f0 <as::Led<as::ArduinoPins>::trigger(as::AlarmClock&)+0x14>
    2710:	89 89       	ldd	r24, Y+17	; 0x11
    2712:	8f 5f       	subi	r24, 0xFF	; 255
    2714:	89 8b       	std	Y+17, r24	; 0x11
    2716:	89 17       	cp	r24, r25
    2718:	58 f3       	brcs	.-42     	; 0x26f0 <as::Led<as::ArduinoPins>::trigger(as::AlarmClock&)+0x14>
copyPattern():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:40
  uint8_t repeat; // current repeat of the pattern
  uint8_t pin;
  uint8_t inv;

  void copyPattern (Mode stat,const BlinkPattern* patt) {
    memcpy_P(&current,patt+stat,sizeof(BlinkPattern));
    271a:	48 e0       	ldi	r20, 0x08	; 8
    271c:	50 e0       	ldi	r21, 0x00	; 0
    271e:	6d e6       	ldi	r22, 0x6D	; 109
    2720:	77 e0       	ldi	r23, 0x07	; 7
    2722:	ce 01       	movw	r24, r28
    2724:	08 96       	adiw	r24, 0x08	; 8
    2726:	0e 94 18 4b 	call	0x9630	; 0x9630 <memcpy_P>
__iRestore():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    272a:	1f bf       	out	0x3f, r17	; 63
_ZN2as3LedINS_11ArduinoPinsEE7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:132
          copyPattern(nothing,single);
        }
      }
    }
    if( switchOn == true ) ledOn();
    else ledOff();
    272c:	ce 01       	movw	r24, r28
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:133
  }
    272e:	df 91       	pop	r29
    2730:	cf 91       	pop	r28
    2732:	1f 91       	pop	r17
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:132
          copyPattern(nothing,single);
        }
      }
    }
    if( switchOn == true ) ledOn();
    else ledOff();
    2734:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <as::Led<as::ArduinoPins>::ledOff()>

00002738 <bool as::StorageWrapper<as::InternalEprom>::setData<as::Peer>(unsigned int, as::Peer const&) [clone .isra.111]>:
_ZN2as14StorageWrapperINS_13InternalEpromEE7setDataINS_4PeerEEEbjRKT_.isra.111():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:505
  bool setData (uint16_t addr,uint8_t* buf,uint16_t size) {
    return DRIVER::setData(addr,buf,size);
  }

  template <class T>
  bool setData (uint16_t addr,const T& obj) {
    2738:	9c 01       	movw	r18, r24
    273a:	cb 01       	movw	r24, r22
_ZN2as13InternalEprom7setDataEjPhj():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:215
    eeprom_write_block(&b,(void*)(uintptr_t)addr,1);
    return true;
  }

  bool setData (uint16_t addr,uint8_t* buf,uint16_t size) {
    eeprom_write_block(buf,(void*)(uintptr_t)addr,size);
    273c:	44 e0       	ldi	r20, 0x04	; 4
    273e:	50 e0       	ldi	r21, 0x00	; 0
    2740:	b9 01       	movw	r22, r18
    2742:	0e 94 de 4e 	call	0x9dbc	; 0x9dbc <eeprom_write_block>
_ZN2as14StorageWrapperINS_13InternalEpromEE7setDataINS_4PeerEEEbjRKT_.isra.111():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:507
  }

  template <class T>
  bool setData (uint16_t addr,const T& obj) {
    return DRIVER::setData(addr,(uint8_t*)&obj,sizeof(T));
  }
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	08 95       	ret

0000274a <as::InternalEprom::setByte(unsigned int, unsigned char) [clone .isra.5]>:
_ZN2as13InternalEprom7setByteEjh.isra.5():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:208
    uint8_t b = 0;
    eeprom_read_block(&b,(void*)(uintptr_t)addr,1);
    return b;
  }

  bool setByte (uint16_t addr, uint8_t d) {
    274a:	cf 93       	push	r28
    274c:	df 93       	push	r29
    274e:	1f 92       	push	r1
    2750:	cd b7       	in	r28, 0x3d	; 61
    2752:	de b7       	in	r29, 0x3e	; 62
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:209
    uint8_t b = d;
    2754:	69 83       	std	Y+1, r22	; 0x01
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:210
    eeprom_write_block(&b,(void*)(uintptr_t)addr,1);
    2756:	41 e0       	ldi	r20, 0x01	; 1
    2758:	50 e0       	ldi	r21, 0x00	; 0
    275a:	bc 01       	movw	r22, r24
    275c:	ce 01       	movw	r24, r28
    275e:	01 96       	adiw	r24, 0x01	; 1
    2760:	0e 94 de 4e 	call	0x9dbc	; 0x9dbc <eeprom_write_block>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:212
    return true;
  }
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	0f 90       	pop	r0
    2768:	df 91       	pop	r29
    276a:	cf 91       	pop	r28
    276c:	08 95       	ret

0000276e <as::RegisterList<UReg0>::writeRegister(unsigned char, unsigned char) const [clone .constprop.101]>:
_ZNK2as12RegisterListI5UReg0E13writeRegisterEhh.constprop.101():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:205
    return GenericList(address(),size(),getRegister,getOffset);
  }

  RegisterList (uint16_t a) : BaseList(a) {}

  bool writeRegister (uint8_t reg, uint8_t value) const {
    276e:	cf 93       	push	r28
    2770:	c6 2f       	mov	r28, r22
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:206
    uint8_t offset = RegisterType::getOffset(reg);
    2772:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <UReg0::getOffset(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:207
    if( offset != 0xff ) {
    2776:	8f 3f       	cpi	r24, 0xFF	; 255
    2778:	59 f0       	breq	.+22     	; 0x2790 <as::RegisterList<UReg0>::writeRegister(unsigned char, unsigned char) const [clone .constprop.101]+0x22>
setByte():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:33
  uint8_t getByte (uint8_t offset, uint8_t mask, uint8_t shift) const {
    return (getByte(offset) & mask) >> shift;
  }

  bool setByte (uint8_t offset, uint8_t data) const {
    return storage().setByte(addr + offset, data);
    277a:	20 91 4a 06 	lds	r18, 0x064A	; 0x80064a <sdev+0x2e>
    277e:	30 91 4b 06 	lds	r19, 0x064B	; 0x80064b <sdev+0x2f>
    2782:	6c 2f       	mov	r22, r28
    2784:	82 0f       	add	r24, r18
    2786:	93 2f       	mov	r25, r19
    2788:	91 1d       	adc	r25, r1
_ZNK2as12RegisterListI5UReg0E13writeRegisterEhh.constprop.101():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:211
      return setByte(offset,value);
    }
    return false;
  }
    278a:	cf 91       	pop	r28
setByte():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:33
    278c:	0c 94 a5 13 	jmp	0x274a	; 0x274a <as::InternalEprom::setByte(unsigned int, unsigned char) [clone .isra.5]>
_ZNK2as12RegisterListI5UReg0E13writeRegisterEhh.constprop.101():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:211
    2790:	80 e0       	ldi	r24, 0x00	; 0
    2792:	cf 91       	pop	r28
    2794:	08 95       	ret

00002796 <as::StorageWrapper<as::InternalEprom>::clearData(unsigned int, unsigned int) [clone .isra.82]>:
_ZN2as14StorageWrapperINS_13InternalEpromEE9clearDataEjj.isra.82():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:518
  template <class T>
  bool getData (uint16_t addr,T* obj) {
    return DRIVER::getData(addr,(uint8_t*)obj,sizeof(T));
  }

  bool clearData (uint16_t addr, uint16_t size) {
    2796:	0f 93       	push	r16
    2798:	1f 93       	push	r17
    279a:	cf 93       	push	r28
    279c:	df 93       	push	r29
    279e:	ec 01       	movw	r28, r24
    27a0:	8c 01       	movw	r16, r24
    27a2:	06 0f       	add	r16, r22
    27a4:	17 1f       	adc	r17, r23
_ZN2as13InternalEprom9clearDataEjj.isra.8():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:226
    return true;
  }

  bool clearData (uint16_t addr, uint16_t size) {
    for( uint16_t i=0; i<size; ++i) {
      setByte(addr+i,0);
    27a6:	60 e0       	ldi	r22, 0x00	; 0
    27a8:	ce 01       	movw	r24, r28
    27aa:	0e 94 a5 13 	call	0x274a	; 0x274a <as::InternalEprom::setByte(unsigned int, unsigned char) [clone .isra.5]>
    27ae:	21 96       	adiw	r28, 0x01	; 1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:225
    eeprom_read_block(buf,(const void*)(uintptr_t)addr,size);
    return true;
  }

  bool clearData (uint16_t addr, uint16_t size) {
    for( uint16_t i=0; i<size; ++i) {
    27b0:	c0 17       	cp	r28, r16
    27b2:	d1 07       	cpc	r29, r17
    27b4:	c1 f7       	brne	.-16     	; 0x27a6 <as::StorageWrapper<as::InternalEprom>::clearData(unsigned int, unsigned int) [clone .isra.82]+0x10>
_ZN2as14StorageWrapperINS_13InternalEpromEE9clearDataEjj.isra.82():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:520
    return DRIVER::getData(addr,(uint8_t*)obj,sizeof(T));
  }

  bool clearData (uint16_t addr, uint16_t size) {
    return DRIVER::clearData(addr,size);
  }
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	df 91       	pop	r29
    27ba:	cf 91       	pop	r28
    27bc:	1f 91       	pop	r17
    27be:	0f 91       	pop	r16
    27c0:	08 95       	ret

000027c2 <as::RegisterList<as::SwitchReg3>::writeRegister(unsigned char, unsigned char) const>:
_ZNK2as12RegisterListINS_10SwitchReg3EE13writeRegisterEhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:205
    return GenericList(address(),size(),getRegister,getOffset);
  }

  RegisterList (uint16_t a) : BaseList(a) {}

  bool writeRegister (uint8_t reg, uint8_t value) const {
    27c2:	0f 93       	push	r16
    27c4:	1f 93       	push	r17
    27c6:	cf 93       	push	r28
    27c8:	8c 01       	movw	r16, r24
    27ca:	86 2f       	mov	r24, r22
    27cc:	c4 2f       	mov	r28, r20
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:206
    uint8_t offset = RegisterType::getOffset(reg);
    27ce:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <as::SwitchReg3::getOffset(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:207
    if( offset != 0xff ) {
    27d2:	8f 3f       	cpi	r24, 0xFF	; 255
    27d4:	61 f0       	breq	.+24     	; 0x27ee <as::RegisterList<as::SwitchReg3>::writeRegister(unsigned char, unsigned char) const+0x2c>
setByte():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:33
    27d6:	f8 01       	movw	r30, r16
    27d8:	20 81       	ld	r18, Z
    27da:	31 81       	ldd	r19, Z+1	; 0x01
    27dc:	6c 2f       	mov	r22, r28
    27de:	82 0f       	add	r24, r18
    27e0:	93 2f       	mov	r25, r19
    27e2:	91 1d       	adc	r25, r1
_ZNK2as12RegisterListINS_10SwitchReg3EE13writeRegisterEhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:211
      return setByte(offset,value);
    }
    return false;
  }
    27e4:	cf 91       	pop	r28
    27e6:	1f 91       	pop	r17
    27e8:	0f 91       	pop	r16
setByte():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:33
    27ea:	0c 94 a5 13 	jmp	0x274a	; 0x274a <as::InternalEprom::setByte(unsigned int, unsigned char) [clone .isra.5]>
_ZNK2as12RegisterListINS_10SwitchReg3EE13writeRegisterEhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:211
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	cf 91       	pop	r28
    27f2:	1f 91       	pop	r17
    27f4:	0f 91       	pop	r16
    27f6:	08 95       	ret

000027f8 <as::RegisterList<Reg1>::writeRegister(unsigned char, unsigned char) const>:
_ZNK2as12RegisterListI4Reg1E13writeRegisterEhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:205
    return GenericList(address(),size(),getRegister,getOffset);
  }

  RegisterList (uint16_t a) : BaseList(a) {}

  bool writeRegister (uint8_t reg, uint8_t value) const {
    27f8:	0f 93       	push	r16
    27fa:	1f 93       	push	r17
    27fc:	cf 93       	push	r28
    27fe:	8c 01       	movw	r16, r24
    2800:	86 2f       	mov	r24, r22
    2802:	c4 2f       	mov	r28, r20
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:206
    uint8_t offset = RegisterType::getOffset(reg);
    2804:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <Reg1::getOffset(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:207
    if( offset != 0xff ) {
    2808:	8f 3f       	cpi	r24, 0xFF	; 255
    280a:	61 f0       	breq	.+24     	; 0x2824 <as::RegisterList<Reg1>::writeRegister(unsigned char, unsigned char) const+0x2c>
setByte():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:33
    280c:	f8 01       	movw	r30, r16
    280e:	20 81       	ld	r18, Z
    2810:	31 81       	ldd	r19, Z+1	; 0x01
    2812:	6c 2f       	mov	r22, r28
    2814:	82 0f       	add	r24, r18
    2816:	93 2f       	mov	r25, r19
    2818:	91 1d       	adc	r25, r1
_ZNK2as12RegisterListI4Reg1E13writeRegisterEhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:211
      return setByte(offset,value);
    }
    return false;
  }
    281a:	cf 91       	pop	r28
    281c:	1f 91       	pop	r17
    281e:	0f 91       	pop	r16
setByte():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:33
    2820:	0c 94 a5 13 	jmp	0x274a	; 0x274a <as::InternalEprom::setByte(unsigned int, unsigned char) [clone .isra.5]>
_ZNK2as12RegisterListI4Reg1E13writeRegisterEhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:211
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	cf 91       	pop	r28
    2828:	1f 91       	pop	r17
    282a:	0f 91       	pop	r16
    282c:	08 95       	ret

0000282e <as::RegisterList<UReg1>::writeRegister(unsigned char, unsigned char) const>:
_ZNK2as12RegisterListI5UReg1E13writeRegisterEhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:205
    return GenericList(address(),size(),getRegister,getOffset);
  }

  RegisterList (uint16_t a) : BaseList(a) {}

  bool writeRegister (uint8_t reg, uint8_t value) const {
    282e:	0f 93       	push	r16
    2830:	1f 93       	push	r17
    2832:	cf 93       	push	r28
    2834:	8c 01       	movw	r16, r24
    2836:	86 2f       	mov	r24, r22
    2838:	c4 2f       	mov	r28, r20
getOffset():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:127
      Messintervall(10);
      intKeyVisible(true);
    }
};

DEFREGISTER(UReg1, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a)
    283a:	4a e0       	ldi	r20, 0x0A	; 10
    283c:	65 eb       	ldi	r22, 0xB5	; 181
    283e:	77 e0       	ldi	r23, 0x07	; 7
    2840:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <as::AskSinRegister::getOffset(unsigned char, unsigned char const*, unsigned char)>
_ZNK2as12RegisterListI5UReg1E13writeRegisterEhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:207
    uint8_t offset = RegisterType::getOffset(reg);
    if( offset != 0xff ) {
    2844:	8f 3f       	cpi	r24, 0xFF	; 255
    2846:	61 f0       	breq	.+24     	; 0x2860 <as::RegisterList<UReg1>::writeRegister(unsigned char, unsigned char) const+0x32>
setByte():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:33
    2848:	f8 01       	movw	r30, r16
    284a:	20 81       	ld	r18, Z
    284c:	31 81       	ldd	r19, Z+1	; 0x01
    284e:	6c 2f       	mov	r22, r28
    2850:	82 0f       	add	r24, r18
    2852:	93 2f       	mov	r25, r19
    2854:	91 1d       	adc	r25, r1
_ZNK2as12RegisterListI5UReg1E13writeRegisterEhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:211
      return setByte(offset,value);
    }
    return false;
  }
    2856:	cf 91       	pop	r28
    2858:	1f 91       	pop	r17
    285a:	0f 91       	pop	r16
setByte():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:33
    285c:	0c 94 a5 13 	jmp	0x274a	; 0x274a <as::InternalEprom::setByte(unsigned int, unsigned char) [clone .isra.5]>
_ZNK2as12RegisterListI5UReg1E13writeRegisterEhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:211
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	cf 91       	pop	r28
    2864:	1f 91       	pop	r17
    2866:	0f 91       	pop	r16
    2868:	08 95       	ret

0000286a <UList1::defaults()>:
_ZN6UList18defaultsEv():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:162
    uint16_t FlowRateQFactor () const { return (this->readRegister(0x07, 0) << 8) + this->readRegister(0x08, 0); }

    bool ToggleWaitTime (uint16_t value) const { return this->writeRegister(0x09, (value >> 8) & 0xff) && this->writeRegister(0x0a, value & 0xff); }
    uint16_t ToggleWaitTime () const { return (this->readRegister(0x09, 0) << 8) + this->readRegister(0x0a, 0); }

    void defaults () {
    286a:	cf 93       	push	r28
    286c:	df 93       	push	r29
    286e:	ec 01       	movw	r28, r24
clear():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:62
  bool getData (uint8_t offset,uint8_t* buf,uint16_t size) const {
    return storage().getData(addr + offset,buf,size);
  }

  void clear (uint8_t offset,uint16_t size) {
    storage().clearData(addr + offset,size);
    2870:	6a e0       	ldi	r22, 0x0A	; 10
    2872:	70 e0       	ldi	r23, 0x00	; 0
    2874:	88 81       	ld	r24, Y
    2876:	99 81       	ldd	r25, Y+1	; 0x01
    2878:	0e 94 cb 13 	call	0x2796	; 0x2796 <as::StorageWrapper<as::InternalEprom>::clearData(unsigned int, unsigned int) [clone .isra.82]>
TemperatureOffsetIndex1():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:132
DEFREGISTER(UReg1, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a)
class UList1 : public RegList1<UReg1> {
  public:
    UList1 (uint16_t addr) : RegList1<UReg1>(addr) {}

    bool TemperatureOffsetIndex1 (uint8_t value) const { return this->writeRegister(0x05, value & 0xff); }
    287c:	47 e0       	ldi	r20, 0x07	; 7
    287e:	65 e0       	ldi	r22, 0x05	; 5
    2880:	ce 01       	movw	r24, r28
    2882:	0e 94 17 14 	call	0x282e	; 0x282e <as::RegisterList<UReg1>::writeRegister(unsigned char, unsigned char) const>
TemperatureOffsetIndex2():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:135
    uint8_t TemperatureOffsetIndex1 () const { return this->readRegister(0x05, 0); }

    bool TemperatureOffsetIndex2 (uint8_t value) const { return this->writeRegister(0x06, value & 0xff); }
    2886:	47 e0       	ldi	r20, 0x07	; 7
    2888:	66 e0       	ldi	r22, 0x06	; 6
    288a:	ce 01       	movw	r24, r28
    288c:	0e 94 17 14 	call	0x282e	; 0x282e <as::RegisterList<UReg1>::writeRegister(unsigned char, unsigned char) const>
OrpOffset():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:140
    uint8_t TemperatureOffsetIndex2 () const { return this->readRegister(0x06, 0); }

    bool OrpOffset (int32_t value) const {
      return
          this->writeRegister(0x01, (value >> 24) & 0xff) &&
    2890:	40 e0       	ldi	r20, 0x00	; 0
    2892:	61 e0       	ldi	r22, 0x01	; 1
    2894:	ce 01       	movw	r24, r28
    2896:	0e 94 17 14 	call	0x282e	; 0x282e <as::RegisterList<UReg1>::writeRegister(unsigned char, unsigned char) const>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:142
          this->writeRegister(0x02, (value >> 16) & 0xff) &&
          this->writeRegister(0x03, (value >> 8) & 0xff) &&
    289a:	88 23       	and	r24, r24
    289c:	99 f0       	breq	.+38     	; 0x28c4 <UList1::defaults()+0x5a>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:141
    uint8_t TemperatureOffsetIndex2 () const { return this->readRegister(0x06, 0); }

    bool OrpOffset (int32_t value) const {
      return
          this->writeRegister(0x01, (value >> 24) & 0xff) &&
          this->writeRegister(0x02, (value >> 16) & 0xff) &&
    289e:	40 e0       	ldi	r20, 0x00	; 0
    28a0:	62 e0       	ldi	r22, 0x02	; 2
    28a2:	ce 01       	movw	r24, r28
    28a4:	0e 94 17 14 	call	0x282e	; 0x282e <as::RegisterList<UReg1>::writeRegister(unsigned char, unsigned char) const>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:140
    bool TemperatureOffsetIndex2 (uint8_t value) const { return this->writeRegister(0x06, value & 0xff); }
    uint8_t TemperatureOffsetIndex2 () const { return this->readRegister(0x06, 0); }

    bool OrpOffset (int32_t value) const {
      return
          this->writeRegister(0x01, (value >> 24) & 0xff) &&
    28a8:	88 23       	and	r24, r24
    28aa:	61 f0       	breq	.+24     	; 0x28c4 <UList1::defaults()+0x5a>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:142
          this->writeRegister(0x02, (value >> 16) & 0xff) &&
          this->writeRegister(0x03, (value >> 8) & 0xff) &&
    28ac:	40 e0       	ldi	r20, 0x00	; 0
    28ae:	63 e0       	ldi	r22, 0x03	; 3
    28b0:	ce 01       	movw	r24, r28
    28b2:	0e 94 17 14 	call	0x282e	; 0x282e <as::RegisterList<UReg1>::writeRegister(unsigned char, unsigned char) const>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:141
    uint8_t TemperatureOffsetIndex2 () const { return this->readRegister(0x06, 0); }

    bool OrpOffset (int32_t value) const {
      return
          this->writeRegister(0x01, (value >> 24) & 0xff) &&
          this->writeRegister(0x02, (value >> 16) & 0xff) &&
    28b6:	88 23       	and	r24, r24
    28b8:	29 f0       	breq	.+10     	; 0x28c4 <UList1::defaults()+0x5a>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:143
          this->writeRegister(0x03, (value >> 8) & 0xff) &&
          this->writeRegister(0x04, (value) & 0xff)
    28ba:	40 e0       	ldi	r20, 0x00	; 0
    28bc:	64 e0       	ldi	r22, 0x04	; 4
    28be:	ce 01       	movw	r24, r28
    28c0:	0e 94 17 14 	call	0x282e	; 0x282e <as::RegisterList<UReg1>::writeRegister(unsigned char, unsigned char) const>
FlowRateQFactor():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:156
          ((int32_t)(this->readRegister(0x03, 0)) << 8) +
          ((int32_t)(this->readRegister(0x04, 0)))
          ;
    }

    bool FlowRateQFactor (uint16_t value) const { return this->writeRegister(0x07, (value >> 8) & 0xff) && this->writeRegister(0x08, value & 0xff); }
    28c4:	40 e0       	ldi	r20, 0x00	; 0
    28c6:	67 e0       	ldi	r22, 0x07	; 7
    28c8:	ce 01       	movw	r24, r28
    28ca:	0e 94 17 14 	call	0x282e	; 0x282e <as::RegisterList<UReg1>::writeRegister(unsigned char, unsigned char) const>
    28ce:	88 23       	and	r24, r24
    28d0:	29 f0       	breq	.+10     	; 0x28dc <UList1::defaults()+0x72>
    28d2:	4a e0       	ldi	r20, 0x0A	; 10
    28d4:	68 e0       	ldi	r22, 0x08	; 8
    28d6:	ce 01       	movw	r24, r28
    28d8:	0e 94 17 14 	call	0x282e	; 0x282e <as::RegisterList<UReg1>::writeRegister(unsigned char, unsigned char) const>
ToggleWaitTime():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:159
    uint16_t FlowRateQFactor () const { return (this->readRegister(0x07, 0) << 8) + this->readRegister(0x08, 0); }

    bool ToggleWaitTime (uint16_t value) const { return this->writeRegister(0x09, (value >> 8) & 0xff) && this->writeRegister(0x0a, value & 0xff); }
    28dc:	40 e0       	ldi	r20, 0x00	; 0
    28de:	69 e0       	ldi	r22, 0x09	; 9
    28e0:	ce 01       	movw	r24, r28
    28e2:	0e 94 17 14 	call	0x282e	; 0x282e <as::RegisterList<UReg1>::writeRegister(unsigned char, unsigned char) const>
    28e6:	88 23       	and	r24, r24
    28e8:	39 f0       	breq	.+14     	; 0x28f8 <UList1::defaults()+0x8e>
    28ea:	48 ec       	ldi	r20, 0xC8	; 200
    28ec:	6a e0       	ldi	r22, 0x0A	; 10
    28ee:	ce 01       	movw	r24, r28
_ZN6UList18defaultsEv():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:169
      TemperatureOffsetIndex1(7);
      TemperatureOffsetIndex2(7);
      OrpOffset(0);
      FlowRateQFactor(10);
      ToggleWaitTime(200);
    }
    28f0:	df 91       	pop	r29
    28f2:	cf 91       	pop	r28
ToggleWaitTime():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:159
    }

    bool FlowRateQFactor (uint16_t value) const { return this->writeRegister(0x07, (value >> 8) & 0xff) && this->writeRegister(0x08, value & 0xff); }
    uint16_t FlowRateQFactor () const { return (this->readRegister(0x07, 0) << 8) + this->readRegister(0x08, 0); }

    bool ToggleWaitTime (uint16_t value) const { return this->writeRegister(0x09, (value >> 8) & 0xff) && this->writeRegister(0x0a, value & 0xff); }
    28f4:	0c 94 17 14 	jmp	0x282e	; 0x282e <as::RegisterList<UReg1>::writeRegister(unsigned char, unsigned char) const>
_ZN6UList18defaultsEv():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:169
      TemperatureOffsetIndex1(7);
      TemperatureOffsetIndex2(7);
      OrpOffset(0);
      FlowRateQFactor(10);
      ToggleWaitTime(200);
    }
    28f8:	df 91       	pop	r29
    28fa:	cf 91       	pop	r28
    28fc:	08 95       	ret

000028fe <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::firstinit()>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E9firstinitEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:430
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
  virtual bool peer (const Peer& p) { return ch.peer(p); }
  virtual bool peer (const Peer& p1,const Peer& p2) { return ch.peer(p1,p2); }
  virtual bool deletepeer (const Peer& p) { return ch.deletepeer(p); }
  virtual void firstinit () { ch.firstinit(); }
    28fe:	0f 93       	push	r16
    2900:	1f 93       	push	r17
    2902:	cf 93       	push	r28
    2904:	df 93       	push	r29
    2906:	00 d0       	rcall	.+0      	; 0x2908 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::firstinit()+0xa>
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
    290c:	8c 01       	movw	r16, r24
firstinit():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:165
    }
    return true;
  }

  void firstinit () {
    storage().clearData(address(),size());
    290e:	68 e2       	ldi	r22, 0x28	; 40
    2910:	70 e0       	ldi	r23, 0x00	; 0
    2912:	fc 01       	movw	r30, r24
    2914:	86 85       	ldd	r24, Z+14	; 0x0e
    2916:	97 85       	ldd	r25, Z+15	; 0x0f
    2918:	0e 94 cb 13 	call	0x2796	; 0x2796 <as::StorageWrapper<as::InternalEprom>::clearData(unsigned int, unsigned int) [clone .isra.82]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:166
    List1Type cl1 = getList1();
    291c:	f8 01       	movw	r30, r16
    291e:	86 85       	ldd	r24, Z+14	; 0x0e
    2920:	97 85       	ldd	r25, Z+15	; 0x0f
    2922:	9a 83       	std	Y+2, r25	; 0x02
    2924:	89 83       	std	Y+1, r24	; 0x01
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:167
    cl1.defaults();
    2926:	ce 01       	movw	r24, r28
    2928:	01 96       	adiw	r24, 0x01	; 1
    292a:	0e 94 35 14 	call	0x286a	; 0x286a <UList1::defaults()>
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E9firstinitEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:430
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
  virtual bool peer (const Peer& p) { return ch.peer(p); }
  virtual bool peer (const Peer& p1,const Peer& p2) { return ch.peer(p1,p2); }
  virtual bool deletepeer (const Peer& p) { return ch.deletepeer(p); }
  virtual void firstinit () { ch.firstinit(); }
    292e:	0f 90       	pop	r0
    2930:	0f 90       	pop	r0
    2932:	df 91       	pop	r29
    2934:	cf 91       	pop	r28
    2936:	1f 91       	pop	r17
    2938:	0f 91       	pop	r16
    293a:	08 95       	ret

0000293c <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::firstinit()>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E9firstinitEv():
    293c:	0f 93       	push	r16
    293e:	1f 93       	push	r17
    2940:	cf 93       	push	r28
    2942:	df 93       	push	r29
    2944:	00 d0       	rcall	.+0      	; 0x2946 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::firstinit()+0xa>
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
    294a:	8c 01       	movw	r16, r24
firstinit():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:165
    }
    return true;
  }

  void firstinit () {
    storage().clearData(address(),size());
    294c:	6f e0       	ldi	r22, 0x0F	; 15
    294e:	70 e0       	ldi	r23, 0x00	; 0
    2950:	fc 01       	movw	r30, r24
    2952:	86 81       	ldd	r24, Z+6	; 0x06
    2954:	97 81       	ldd	r25, Z+7	; 0x07
    2956:	0e 94 cb 13 	call	0x2796	; 0x2796 <as::StorageWrapper<as::InternalEprom>::clearData(unsigned int, unsigned int) [clone .isra.82]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:166
    List1Type cl1 = getList1();
    295a:	f8 01       	movw	r30, r16
    295c:	86 81       	ldd	r24, Z+6	; 0x06
    295e:	97 81       	ldd	r25, Z+7	; 0x07
    2960:	9a 83       	std	Y+2, r25	; 0x02
    2962:	89 83       	std	Y+1, r24	; 0x01
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:167
    cl1.defaults();
    2964:	ce 01       	movw	r24, r28
    2966:	01 96       	adiw	r24, 0x01	; 1
    2968:	0e 94 35 14 	call	0x286a	; 0x286a <UList1::defaults()>
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E9firstinitEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:430
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
  virtual bool peer (const Peer& p) { return ch.peer(p); }
  virtual bool peer (const Peer& p1,const Peer& p2) { return ch.peer(p1,p2); }
  virtual bool deletepeer (const Peer& p) { return ch.deletepeer(p); }
  virtual void firstinit () { ch.firstinit(); }
    296c:	0f 90       	pop	r0
    296e:	0f 90       	pop	r0
    2970:	df 91       	pop	r29
    2972:	cf 91       	pop	r28
    2974:	1f 91       	pop	r17
    2976:	0f 91       	pop	r16
    2978:	08 95       	ret

0000297a <as::InternalEprom::getByte(unsigned int) [clone .isra.4]>:
_ZN2as13InternalEprom7getByteEj.isra.4():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:202
    }
    FLASH_Lock();
#endif
  }

  uint8_t getByte (uint16_t addr) {
    297a:	cf 93       	push	r28
    297c:	df 93       	push	r29
    297e:	1f 92       	push	r1
    2980:	cd b7       	in	r28, 0x3d	; 61
    2982:	de b7       	in	r29, 0x3e	; 62
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:203
    uint8_t b = 0;
    2984:	19 82       	std	Y+1, r1	; 0x01
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:204
    eeprom_read_block(&b,(void*)(uintptr_t)addr,1);
    2986:	41 e0       	ldi	r20, 0x01	; 1
    2988:	50 e0       	ldi	r21, 0x00	; 0
    298a:	bc 01       	movw	r22, r24
    298c:	ce 01       	movw	r24, r28
    298e:	01 96       	adiw	r24, 0x01	; 1
    2990:	0e 94 ce 4e 	call	0x9d9c	; 0x9d9c <eeprom_read_block>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:206
    return b;
  }
    2994:	89 81       	ldd	r24, Y+1	; 0x01
    2996:	0f 90       	pop	r0
    2998:	df 91       	pop	r29
    299a:	cf 91       	pop	r28
    299c:	08 95       	ret

0000299e <as::RegList0<UReg0>::localResetDisable() const>:
_ZNK2as8RegList0I5UReg0E17localResetDisableEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:387
  bool tParamSelect (uint8_t value) const { return this->writeRegister(DREG_TPARAMS,value); }
    
  uint8_t confButtonTime () const { return this->readRegister(DREG_CONFBUTTONTIME,0); }
  bool confButtonTime (uint8_t value) const { return this->writeRegister(DREG_CONFBUTTONTIME,value); }
  bool localResetDisable (bool v) const { return this->writeBit(DREG_LOCALRESETDISABLE,0,v); }
  bool localResetDisable () const { return this->readBit(DREG_LOCALRESETDISABLE,0,false); }
    299e:	cf 93       	push	r28
    29a0:	df 93       	push	r29
    29a2:	ec 01       	movw	r28, r24
readBit():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:242
      value = getByte(offset,mask<<shift,shift);
    }
    return value;
  }
  bool readBit (uint8_t reg,uint8_t bitnum,bool value=false) const {
    uint8_t offset = RegisterType::getOffset(reg);
    29a4:	88 e1       	ldi	r24, 0x18	; 24
    29a6:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <UReg0::getOffset(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:243
    if( offset != 0xff ) {
    29aa:	8f 3f       	cpi	r24, 0xFF	; 255
    29ac:	59 f0       	breq	.+22     	; 0x29c4 <as::RegList0<UReg0>::localResetDisable() const+0x26>
isBitSet():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:43
    tmp |= (data << shift) & mask;
    return setByte(offset, tmp);
  }

  bool isBitSet (uint8_t offset, uint8_t bit) const {
    return (storage().getByte(addr + offset) & bit) == bit;
    29ae:	28 81       	ld	r18, Y
    29b0:	39 81       	ldd	r19, Y+1	; 0x01
    29b2:	82 0f       	add	r24, r18
    29b4:	93 2f       	mov	r25, r19
    29b6:	91 1d       	adc	r25, r1
    29b8:	0e 94 bd 14 	call	0x297a	; 0x297a <as::InternalEprom::getByte(unsigned int) [clone .isra.4]>
    29bc:	81 70       	andi	r24, 0x01	; 1
_ZNK2as8RegList0I5UReg0E17localResetDisableEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:387
  bool tParamSelect (uint8_t value) const { return this->writeRegister(DREG_TPARAMS,value); }
    
  uint8_t confButtonTime () const { return this->readRegister(DREG_CONFBUTTONTIME,0); }
  bool confButtonTime (uint8_t value) const { return this->writeRegister(DREG_CONFBUTTONTIME,value); }
  bool localResetDisable (bool v) const { return this->writeBit(DREG_LOCALRESETDISABLE,0,v); }
  bool localResetDisable () const { return this->readBit(DREG_LOCALRESETDISABLE,0,false); }
    29be:	df 91       	pop	r29
    29c0:	cf 91       	pop	r28
    29c2:	08 95       	ret
readBit():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:243
    }
    return value;
  }
  bool readBit (uint8_t reg,uint8_t bitnum,bool value=false) const {
    uint8_t offset = RegisterType::getOffset(reg);
    if( offset != 0xff ) {
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	fb cf       	rjmp	.-10     	; 0x29be <as::RegList0<UReg0>::localResetDisable() const+0x20>

000029c8 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::reset()>:
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E5resetEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:150
    for( uint8_t i=0; i<this->channels(); ++i ) {
      devchannels[i]->firstinit();
    }
  }

  void reset () {
    29c8:	cf 93       	push	r28
    29ca:	df 93       	push	r29
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:151
    if( getList0().localResetDisable() == false ) {
    29cc:	8e 96       	adiw	r24, 0x2e	; 46
    29ce:	0e 94 cf 14 	call	0x299e	; 0x299e <as::RegList0<UReg0>::localResetDisable() const>
    29d2:	81 11       	cpse	r24, r1
    29d4:	13 c0       	rjmp	.+38     	; 0x29fc <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::reset()+0x34>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:152
      DPRINTLN(F("RESET"));
    29d6:	8d e2       	ldi	r24, 0x2D	; 45
    29d8:	95 e0       	ldi	r25, 0x05	; 5
    29da:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <void DPRINTLN<__FlashStringHelper const*>(__FlashStringHelper const*)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:225
    eeprom_read_block(buf,(const void*)(uintptr_t)addr,size);
    return true;
  }

  bool clearData (uint16_t addr, uint16_t size) {
    for( uint16_t i=0; i<size; ++i) {
    29de:	d0 e0       	ldi	r29, 0x00	; 0
    29e0:	c0 e0       	ldi	r28, 0x00	; 0
_ZN2as13InternalEprom9clearDataEjj.isra.8():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:226
      setByte(addr+i,0);
    29e2:	60 e0       	ldi	r22, 0x00	; 0
    29e4:	ce 01       	movw	r24, r28
    29e6:	0e 94 a5 13 	call	0x274a	; 0x274a <as::InternalEprom::setByte(unsigned int, unsigned char) [clone .isra.5]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:225
    eeprom_read_block(buf,(const void*)(uintptr_t)addr,size);
    return true;
  }

  bool clearData (uint16_t addr, uint16_t size) {
    for( uint16_t i=0; i<size; ++i) {
    29ea:	21 96       	adiw	r28, 0x01	; 1
    29ec:	c4 30       	cpi	r28, 0x04	; 4
    29ee:	d1 05       	cpc	r29, r1
    29f0:	c1 f7       	brne	.-16     	; 0x29e2 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::reset()+0x1a>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E5resetEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:156
      storage().reset();
      storage().store();
  #if ARDUINO_ARCH_AVR
      resetFunc();
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	e0 e0       	ldi	r30, 0x00	; 0
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:165
      NVIC_SystemReset();
  #elif ARDUINO_ARCH_ESP32
      ESP.restart();
  #endif
    }
  }
    29f6:	df 91       	pop	r29
    29f8:	cf 91       	pop	r28
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:156
    if( getList0().localResetDisable() == false ) {
      DPRINTLN(F("RESET"));
      storage().reset();
      storage().store();
  #if ARDUINO_ARCH_AVR
      resetFunc();
    29fa:	09 94       	ijmp
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:165
      NVIC_SystemReset();
  #elif ARDUINO_ARCH_ESP32
      ESP.restart();
  #endif
    }
  }
    29fc:	df 91       	pop	r29
    29fe:	cf 91       	pop	r28
    2a00:	08 95       	ret

00002a02 <as::BaseList::getByte(unsigned char) const>:
_ZNK2as8BaseList7getByteEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:25
  uint16_t address () const { return addr; }

  bool valid () const { return addr != 0; }

  uint8_t getByte (uint8_t offset) const {
    return storage().getByte(addr + offset);
    2a02:	fc 01       	movw	r30, r24
    2a04:	80 81       	ld	r24, Z
    2a06:	91 81       	ldd	r25, Z+1	; 0x01
    2a08:	86 0f       	add	r24, r22
    2a0a:	91 1d       	adc	r25, r1
    2a0c:	0c 94 bd 14 	jmp	0x297a	; 0x297a <as::InternalEprom::getByte(unsigned int) [clone .isra.4]>

00002a10 <as::RegisterList<UReg1>::readRegister(unsigned char, unsigned char) const [clone .constprop.90]>:
_ZNK2as12RegisterListI5UReg1E12readRegisterEhh.constprop.90():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:227
      return setBit(offset,0x01<<bitnum,value);
    }
    return false;
  }

  uint8_t readRegister (uint8_t reg,uint8_t value=0) const {
    2a10:	cf 93       	push	r28
    2a12:	df 93       	push	r29
    2a14:	ec 01       	movw	r28, r24
    2a16:	86 2f       	mov	r24, r22
getOffset():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:127
      Messintervall(10);
      intKeyVisible(true);
    }
};

DEFREGISTER(UReg1, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a)
    2a18:	4a e0       	ldi	r20, 0x0A	; 10
    2a1a:	65 eb       	ldi	r22, 0xB5	; 181
    2a1c:	77 e0       	ldi	r23, 0x07	; 7
    2a1e:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <as::AskSinRegister::getOffset(unsigned char, unsigned char const*, unsigned char)>
_ZNK2as12RegisterListI5UReg1E12readRegisterEhh.constprop.90():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:229
    uint8_t offset = RegisterType::getOffset(reg);
    if( offset != 0xff ) {
    2a22:	8f 3f       	cpi	r24, 0xFF	; 255
    2a24:	31 f0       	breq	.+12     	; 0x2a32 <as::RegisterList<UReg1>::readRegister(unsigned char, unsigned char) const [clone .constprop.90]+0x22>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:230
      value = getByte(offset);
    2a26:	68 2f       	mov	r22, r24
    2a28:	ce 01       	movw	r24, r28
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:233
    }
    return value;
  }
    2a2a:	df 91       	pop	r29
    2a2c:	cf 91       	pop	r28
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:230
  }

  uint8_t readRegister (uint8_t reg,uint8_t value=0) const {
    uint8_t offset = RegisterType::getOffset(reg);
    if( offset != 0xff ) {
      value = getByte(offset);
    2a2e:	0c 94 01 15 	jmp	0x2a02	; 0x2a02 <as::BaseList::getByte(unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:233
    }
    return value;
  }
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    2a34:	df 91       	pop	r29
    2a36:	cf 91       	pop	r28
    2a38:	08 95       	ret

00002a3a <UList1::ToggleWaitTime() const>:
_ZNK6UList114ToggleWaitTimeEv():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:160

    bool FlowRateQFactor (uint16_t value) const { return this->writeRegister(0x07, (value >> 8) & 0xff) && this->writeRegister(0x08, value & 0xff); }
    uint16_t FlowRateQFactor () const { return (this->readRegister(0x07, 0) << 8) + this->readRegister(0x08, 0); }

    bool ToggleWaitTime (uint16_t value) const { return this->writeRegister(0x09, (value >> 8) & 0xff) && this->writeRegister(0x0a, value & 0xff); }
    uint16_t ToggleWaitTime () const { return (this->readRegister(0x09, 0) << 8) + this->readRegister(0x0a, 0); }
    2a3a:	0f 93       	push	r16
    2a3c:	1f 93       	push	r17
    2a3e:	cf 93       	push	r28
    2a40:	8c 01       	movw	r16, r24
    2a42:	69 e0       	ldi	r22, 0x09	; 9
    2a44:	0e 94 08 15 	call	0x2a10	; 0x2a10 <as::RegisterList<UReg1>::readRegister(unsigned char, unsigned char) const [clone .constprop.90]>
    2a48:	c8 2f       	mov	r28, r24
    2a4a:	6a e0       	ldi	r22, 0x0A	; 10
    2a4c:	c8 01       	movw	r24, r16
    2a4e:	0e 94 08 15 	call	0x2a10	; 0x2a10 <as::RegisterList<UReg1>::readRegister(unsigned char, unsigned char) const [clone .constprop.90]>
    2a52:	2c 2f       	mov	r18, r28
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	32 2f       	mov	r19, r18
    2a58:	22 27       	eor	r18, r18
    2a5a:	82 0f       	add	r24, r18
    2a5c:	93 2f       	mov	r25, r19
    2a5e:	91 1d       	adc	r25, r1
    2a60:	cf 91       	pop	r28
    2a62:	1f 91       	pop	r17
    2a64:	0f 91       	pop	r16
    2a66:	08 95       	ret

00002a68 <UList1::FlowRateQFactor() const>:
_ZNK6UList115FlowRateQFactorEv():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:157
          ((int32_t)(this->readRegister(0x04, 0)))
          ;
    }

    bool FlowRateQFactor (uint16_t value) const { return this->writeRegister(0x07, (value >> 8) & 0xff) && this->writeRegister(0x08, value & 0xff); }
    uint16_t FlowRateQFactor () const { return (this->readRegister(0x07, 0) << 8) + this->readRegister(0x08, 0); }
    2a68:	0f 93       	push	r16
    2a6a:	1f 93       	push	r17
    2a6c:	cf 93       	push	r28
    2a6e:	8c 01       	movw	r16, r24
    2a70:	67 e0       	ldi	r22, 0x07	; 7
    2a72:	0e 94 08 15 	call	0x2a10	; 0x2a10 <as::RegisterList<UReg1>::readRegister(unsigned char, unsigned char) const [clone .constprop.90]>
    2a76:	c8 2f       	mov	r28, r24
    2a78:	68 e0       	ldi	r22, 0x08	; 8
    2a7a:	c8 01       	movw	r24, r16
    2a7c:	0e 94 08 15 	call	0x2a10	; 0x2a10 <as::RegisterList<UReg1>::readRegister(unsigned char, unsigned char) const [clone .constprop.90]>
    2a80:	2c 2f       	mov	r18, r28
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	32 2f       	mov	r19, r18
    2a86:	22 27       	eor	r18, r18
    2a88:	82 0f       	add	r24, r18
    2a8a:	93 2f       	mov	r25, r19
    2a8c:	91 1d       	adc	r25, r1
    2a8e:	cf 91       	pop	r28
    2a90:	1f 91       	pop	r17
    2a92:	0f 91       	pop	r16
    2a94:	08 95       	ret

00002a96 <UList1::OrpOffset() const>:
_ZNK6UList19OrpOffsetEv():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:147
          this->writeRegister(0x03, (value >> 8) & 0xff) &&
          this->writeRegister(0x04, (value) & 0xff)
          ;
    }

    int32_t OrpOffset () const {
    2a96:	8f 92       	push	r8
    2a98:	9f 92       	push	r9
    2a9a:	af 92       	push	r10
    2a9c:	bf 92       	push	r11
    2a9e:	cf 92       	push	r12
    2aa0:	df 92       	push	r13
    2aa2:	ef 92       	push	r14
    2aa4:	ff 92       	push	r15
    2aa6:	cf 93       	push	r28
    2aa8:	df 93       	push	r29
    2aaa:	ec 01       	movw	r28, r24
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:149
      return
          ((int32_t)(this->readRegister(0x01, 0)) << 24) +
    2aac:	61 e0       	ldi	r22, 0x01	; 1
    2aae:	0e 94 08 15 	call	0x2a10	; 0x2a10 <as::RegisterList<UReg1>::readRegister(unsigned char, unsigned char) const [clone .constprop.90]>
    2ab2:	c8 2e       	mov	r12, r24
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:150
          ((int32_t)(this->readRegister(0x02, 0)) << 16) +
    2ab4:	62 e0       	ldi	r22, 0x02	; 2
    2ab6:	ce 01       	movw	r24, r28
    2ab8:	0e 94 08 15 	call	0x2a10	; 0x2a10 <as::RegisterList<UReg1>::readRegister(unsigned char, unsigned char) const [clone .constprop.90]>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:149
          ;
    }

    int32_t OrpOffset () const {
      return
          ((int32_t)(this->readRegister(0x01, 0)) << 24) +
    2abc:	d1 2c       	mov	r13, r1
    2abe:	f1 2c       	mov	r15, r1
    2ac0:	e1 2c       	mov	r14, r1
    2ac2:	fc 2c       	mov	r15, r12
    2ac4:	ee 24       	eor	r14, r14
    2ac6:	dd 24       	eor	r13, r13
    2ac8:	cc 24       	eor	r12, r12
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:150
          ((int32_t)(this->readRegister(0x02, 0)) << 16) +
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	b0 e0       	ldi	r27, 0x00	; 0
    2ace:	a0 e0       	ldi	r26, 0x00	; 0
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	99 27       	eor	r25, r25
    2ad4:	88 27       	eor	r24, r24
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:149
          ;
    }

    int32_t OrpOffset () const {
      return
          ((int32_t)(this->readRegister(0x01, 0)) << 24) +
    2ad6:	46 01       	movw	r8, r12
    2ad8:	57 01       	movw	r10, r14
    2ada:	88 0e       	add	r8, r24
    2adc:	99 1e       	adc	r9, r25
    2ade:	aa 1e       	adc	r10, r26
    2ae0:	bb 1e       	adc	r11, r27
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:151
          ((int32_t)(this->readRegister(0x02, 0)) << 16) +
          ((int32_t)(this->readRegister(0x03, 0)) << 8) +
    2ae2:	63 e0       	ldi	r22, 0x03	; 3
    2ae4:	ce 01       	movw	r24, r28
    2ae6:	0e 94 08 15 	call	0x2a10	; 0x2a10 <as::RegisterList<UReg1>::readRegister(unsigned char, unsigned char) const [clone .constprop.90]>
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	b0 e0       	ldi	r27, 0x00	; 0
    2aee:	a0 e0       	ldi	r26, 0x00	; 0
    2af0:	cc 24       	eor	r12, r12
    2af2:	d8 2e       	mov	r13, r24
    2af4:	e9 2e       	mov	r14, r25
    2af6:	fa 2e       	mov	r15, r26
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:150
    }

    int32_t OrpOffset () const {
      return
          ((int32_t)(this->readRegister(0x01, 0)) << 24) +
          ((int32_t)(this->readRegister(0x02, 0)) << 16) +
    2af8:	c8 0c       	add	r12, r8
    2afa:	d9 1c       	adc	r13, r9
    2afc:	ea 1c       	adc	r14, r10
    2afe:	fb 1c       	adc	r15, r11
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:152
          ((int32_t)(this->readRegister(0x03, 0)) << 8) +
          ((int32_t)(this->readRegister(0x04, 0)))
    2b00:	64 e0       	ldi	r22, 0x04	; 4
    2b02:	ce 01       	movw	r24, r28
    2b04:	0e 94 08 15 	call	0x2a10	; 0x2a10 <as::RegisterList<UReg1>::readRegister(unsigned char, unsigned char) const [clone .constprop.90]>
    2b08:	a7 01       	movw	r20, r14
    2b0a:	96 01       	movw	r18, r12
    2b0c:	28 0f       	add	r18, r24
    2b0e:	31 1d       	adc	r19, r1
    2b10:	41 1d       	adc	r20, r1
    2b12:	51 1d       	adc	r21, r1
    2b14:	ca 01       	movw	r24, r20
    2b16:	b9 01       	movw	r22, r18
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:154
          ;
    }
    2b18:	df 91       	pop	r29
    2b1a:	cf 91       	pop	r28
    2b1c:	ff 90       	pop	r15
    2b1e:	ef 90       	pop	r14
    2b20:	df 90       	pop	r13
    2b22:	cf 90       	pop	r12
    2b24:	bf 90       	pop	r11
    2b26:	af 90       	pop	r10
    2b28:	9f 90       	pop	r9
    2b2a:	8f 90       	pop	r8
    2b2c:	08 95       	ret

00002b2e <as::RegisterList<as::SwitchReg3>::readRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.69]>:
_ZNK2as12RegisterListINS_10SwitchReg3EE12readRegisterEhhhh.constprop.69():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:234
  uint8_t readRegister (uint8_t reg,uint8_t mask,uint8_t shift,uint8_t value=0) const {
    2b2e:	0f 93       	push	r16
    2b30:	1f 93       	push	r17
    2b32:	cf 93       	push	r28
    2b34:	df 93       	push	r29
    2b36:	8c 01       	movw	r16, r24
    2b38:	86 2f       	mov	r24, r22
    2b3a:	d4 2f       	mov	r29, r20
    2b3c:	c2 2f       	mov	r28, r18
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:235
    uint8_t offset = RegisterType::getOffset(reg);
    2b3e:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <as::SwitchReg3::getOffset(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:236
    if( offset != 0xff ) {
    2b42:	8f 3f       	cpi	r24, 0xFF	; 255
    2b44:	99 f0       	breq	.+38     	; 0x2b6c <as::RegisterList<as::SwitchReg3>::readRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.69]+0x3e>
_ZNK2as8BaseList7getByteEhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:29
  }

  uint8_t getByte (uint8_t offset, uint8_t mask, uint8_t shift) const {
    return (getByte(offset) & mask) >> shift;
    2b46:	68 2f       	mov	r22, r24
    2b48:	c8 01       	movw	r24, r16
    2b4a:	0e 94 01 15 	call	0x2a02	; 0x2a02 <as::BaseList::getByte(unsigned char) const>
_ZNK2as12RegisterListINS_10SwitchReg3EE12readRegisterEhhhh.constprop.69():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:237
      value = getByte(offset,mask<<shift,shift);
    2b4e:	2f e0       	ldi	r18, 0x0F	; 15
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	0d 2e       	mov	r0, r29
    2b54:	01 c0       	rjmp	.+2      	; 0x2b58 <as::RegisterList<as::SwitchReg3>::readRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.69]+0x2a>
    2b56:	22 0f       	add	r18, r18
    2b58:	0a 94       	dec	r0
    2b5a:	ea f7       	brpl	.-6      	; 0x2b56 <as::RegisterList<as::SwitchReg3>::readRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.69]+0x28>
_ZNK2as8BaseList7getByteEhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:29
    2b5c:	82 23       	and	r24, r18
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	02 c0       	rjmp	.+4      	; 0x2b66 <as::RegisterList<as::SwitchReg3>::readRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.69]+0x38>
    2b62:	95 95       	asr	r25
    2b64:	87 95       	ror	r24
    2b66:	da 95       	dec	r29
    2b68:	e2 f7       	brpl	.-8      	; 0x2b62 <as::RegisterList<as::SwitchReg3>::readRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.69]+0x34>
    2b6a:	c8 2f       	mov	r28, r24
_ZNK2as12RegisterListINS_10SwitchReg3EE12readRegisterEhhhh.constprop.69():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:240
    }
    return value;
  }
    2b6c:	8c 2f       	mov	r24, r28
    2b6e:	df 91       	pop	r29
    2b70:	cf 91       	pop	r28
    2b72:	1f 91       	pop	r17
    2b74:	0f 91       	pop	r16
    2b76:	08 95       	ret

00002b78 <as::RegisterList<Reg1>::readRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.17]>:
_ZNK2as12RegisterListI4Reg1E12readRegisterEhhhh.constprop.17():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:234
    if( offset != 0xff ) {
      value = getByte(offset);
    }
    return value;
  }
  uint8_t readRegister (uint8_t reg,uint8_t mask,uint8_t shift,uint8_t value=0) const {
    2b78:	0f 93       	push	r16
    2b7a:	1f 93       	push	r17
    2b7c:	cf 93       	push	r28
    2b7e:	df 93       	push	r29
    2b80:	8c 01       	movw	r16, r24
    2b82:	86 2f       	mov	r24, r22
    2b84:	c4 2f       	mov	r28, r20
    2b86:	d2 2f       	mov	r29, r18
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:235
    uint8_t offset = RegisterType::getOffset(reg);
    2b88:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <Reg1::getOffset(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:236
    if( offset != 0xff ) {
    2b8c:	8f 3f       	cpi	r24, 0xFF	; 255
    2b8e:	b1 f0       	breq	.+44     	; 0x2bbc <as::RegisterList<Reg1>::readRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.17]+0x44>
_ZNK2as8BaseList7getByteEhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:29
    2b90:	68 2f       	mov	r22, r24
    2b92:	c8 01       	movw	r24, r16
    2b94:	0e 94 01 15 	call	0x2a02	; 0x2a02 <as::BaseList::getByte(unsigned char) const>
_ZNK2as12RegisterListI4Reg1E12readRegisterEhhhh.constprop.17():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:237
      value = getByte(offset,mask<<shift,shift);
    2b98:	4c 2f       	mov	r20, r28
    2b9a:	0d 2e       	mov	r0, r29
    2b9c:	01 c0       	rjmp	.+2      	; 0x2ba0 <as::RegisterList<Reg1>::readRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.17]+0x28>
    2b9e:	44 0f       	add	r20, r20
    2ba0:	0a 94       	dec	r0
    2ba2:	ea f7       	brpl	.-6      	; 0x2b9e <as::RegisterList<Reg1>::readRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.17]+0x26>
_ZNK2as8BaseList7getByteEhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:29
    2ba4:	84 23       	and	r24, r20
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	02 c0       	rjmp	.+4      	; 0x2bae <as::RegisterList<Reg1>::readRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.17]+0x36>
    2baa:	95 95       	asr	r25
    2bac:	87 95       	ror	r24
    2bae:	da 95       	dec	r29
    2bb0:	e2 f7       	brpl	.-8      	; 0x2baa <as::RegisterList<Reg1>::readRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.17]+0x32>
_ZNK2as12RegisterListI4Reg1E12readRegisterEhhhh.constprop.17():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:240
    }
    return value;
  }
    2bb2:	df 91       	pop	r29
    2bb4:	cf 91       	pop	r28
    2bb6:	1f 91       	pop	r17
    2bb8:	0f 91       	pop	r16
    2bba:	08 95       	ret
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:236
    }
    return value;
  }
  uint8_t readRegister (uint8_t reg,uint8_t mask,uint8_t shift,uint8_t value=0) const {
    uint8_t offset = RegisterType::getOffset(reg);
    if( offset != 0xff ) {
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	f9 cf       	rjmp	.-14     	; 0x2bb2 <as::RegisterList<Reg1>::readRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.17]+0x3a>

00002bc0 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::aesActive() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E9aesActiveEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:424
  virtual uint8_t peers () const { return ch.peers(); }
  virtual bool changed () const { return ch.changed(); }
  virtual void changed (bool c) { ch.changed(c); }
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
    2bc0:	cf 93       	push	r28
    2bc2:	df 93       	push	r29
    2bc4:	00 d0       	rcall	.+0      	; 0x2bc6 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::aesActive() const+0x6>
    2bc6:	cd b7       	in	r28, 0x3d	; 61
    2bc8:	de b7       	in	r29, 0x3e	; 62
aesActive():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:56

  void inhibit (bool value) { inhi = value; }

  bool inhibit () const { return inhi; }

  bool aesActive () const { return getList1().aesActive(); }
    2bca:	fc 01       	movw	r30, r24
    2bcc:	86 85       	ldd	r24, Z+14	; 0x0e
    2bce:	97 85       	ldd	r25, Z+15	; 0x0f
    2bd0:	9a 83       	std	Y+2, r25	; 0x02
    2bd2:	89 83       	std	Y+1, r24	; 0x01
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:432
class RegList1 : public RegisterList<Register> {
public:
  RegList1(uint16_t a) : RegisterList<Register>(a) {}

  bool aesActive(bool v) const { return this->writeRegister(CREG_AES_ACTIVE,0x01,0,v); }
  bool aesActive() const { return this->readRegister(CREG_AES_ACTIVE,0x01,0,false); }
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	41 e0       	ldi	r20, 0x01	; 1
    2bd8:	68 e0       	ldi	r22, 0x08	; 8
    2bda:	ce 01       	movw	r24, r28
    2bdc:	01 96       	adiw	r24, 0x01	; 1
    2bde:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <as::RegisterList<Reg1>::readRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.17]>
    2be2:	91 e0       	ldi	r25, 0x01	; 1
    2be4:	81 11       	cpse	r24, r1
    2be6:	01 c0       	rjmp	.+2      	; 0x2bea <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::aesActive() const+0x2a>
    2be8:	90 e0       	ldi	r25, 0x00	; 0
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E9aesActiveEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:424
  virtual uint8_t peers () const { return ch.peers(); }
  virtual bool changed () const { return ch.changed(); }
  virtual void changed (bool c) { ch.changed(c); }
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
    2bea:	89 2f       	mov	r24, r25
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	df 91       	pop	r29
    2bf2:	cf 91       	pop	r28
    2bf4:	08 95       	ret

00002bf6 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::aesActive() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E9aesActiveEv():
    2bf6:	cf 93       	push	r28
    2bf8:	df 93       	push	r29
    2bfa:	00 d0       	rcall	.+0      	; 0x2bfc <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::aesActive() const+0x6>
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
aesActive():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:56

  void inhibit (bool value) { inhi = value; }

  bool inhibit () const { return inhi; }

  bool aesActive () const { return getList1().aesActive(); }
    2c00:	fc 01       	movw	r30, r24
    2c02:	81 89       	ldd	r24, Z+17	; 0x11
    2c04:	92 89       	ldd	r25, Z+18	; 0x12
    2c06:	9a 83       	std	Y+2, r25	; 0x02
    2c08:	89 83       	std	Y+1, r24	; 0x01
readRegister():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:235
      value = getByte(offset);
    }
    return value;
  }
  uint8_t readRegister (uint8_t reg,uint8_t mask,uint8_t shift,uint8_t value=0) const {
    uint8_t offset = RegisterType::getOffset(reg);
    2c0a:	88 e0       	ldi	r24, 0x08	; 8
    2c0c:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <as::SwitchReg1::getOffset(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:236
    if( offset != 0xff ) {
    2c10:	8f 3f       	cpi	r24, 0xFF	; 255
    2c12:	59 f0       	breq	.+22     	; 0x2c2a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::aesActive() const+0x34>
_ZNK2as8BaseList7getByteEhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:29
    2c14:	68 2f       	mov	r22, r24
    2c16:	ce 01       	movw	r24, r28
    2c18:	01 96       	adiw	r24, 0x01	; 1
    2c1a:	0e 94 01 15 	call	0x2a02	; 0x2a02 <as::BaseList::getByte(unsigned char) const>
    2c1e:	81 70       	andi	r24, 0x01	; 1
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E9aesActiveEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:424
  virtual uint8_t peers () const { return ch.peers(); }
  virtual bool changed () const { return ch.changed(); }
  virtual void changed (bool c) { ch.changed(c); }
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
    2c20:	0f 90       	pop	r0
    2c22:	0f 90       	pop	r0
    2c24:	df 91       	pop	r29
    2c26:	cf 91       	pop	r28
    2c28:	08 95       	ret
readRegister():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:236
    2c2a:	80 e0       	ldi	r24, 0x00	; 0
    2c2c:	f9 cf       	rjmp	.-14     	; 0x2c20 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::aesActive() const+0x2a>

00002c2e <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::aesActive() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E9aesActiveEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:424
    2c2e:	cf 93       	push	r28
    2c30:	df 93       	push	r29
    2c32:	00 d0       	rcall	.+0      	; 0x2c34 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::aesActive() const+0x6>
    2c34:	cd b7       	in	r28, 0x3d	; 61
    2c36:	de b7       	in	r29, 0x3e	; 62
aesActive():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:56

  void inhibit (bool value) { inhi = value; }

  bool inhibit () const { return inhi; }

  bool aesActive () const { return getList1().aesActive(); }
    2c38:	fc 01       	movw	r30, r24
    2c3a:	86 85       	ldd	r24, Z+14	; 0x0e
    2c3c:	97 85       	ldd	r25, Z+15	; 0x0f
    2c3e:	9a 83       	std	Y+2, r25	; 0x02
    2c40:	89 83       	std	Y+1, r24	; 0x01
getOffset():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:127
      Messintervall(10);
      intKeyVisible(true);
    }
};

DEFREGISTER(UReg1, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a)
    2c42:	4a e0       	ldi	r20, 0x0A	; 10
    2c44:	65 eb       	ldi	r22, 0xB5	; 181
    2c46:	77 e0       	ldi	r23, 0x07	; 7
    2c48:	88 e0       	ldi	r24, 0x08	; 8
    2c4a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <as::AskSinRegister::getOffset(unsigned char, unsigned char const*, unsigned char)>
readRegister():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:236
    2c4e:	8f 3f       	cpi	r24, 0xFF	; 255
    2c50:	59 f0       	breq	.+22     	; 0x2c68 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::aesActive() const+0x3a>
_ZNK2as8BaseList7getByteEhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:29
    2c52:	68 2f       	mov	r22, r24
    2c54:	ce 01       	movw	r24, r28
    2c56:	01 96       	adiw	r24, 0x01	; 1
    2c58:	0e 94 01 15 	call	0x2a02	; 0x2a02 <as::BaseList::getByte(unsigned char) const>
    2c5c:	81 70       	andi	r24, 0x01	; 1
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E9aesActiveEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:424
  virtual uint8_t peers () const { return ch.peers(); }
  virtual bool changed () const { return ch.changed(); }
  virtual void changed (bool c) { ch.changed(c); }
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
    2c5e:	0f 90       	pop	r0
    2c60:	0f 90       	pop	r0
    2c62:	df 91       	pop	r29
    2c64:	cf 91       	pop	r28
    2c66:	08 95       	ret
readRegister():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:236
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	f9 cf       	rjmp	.-14     	; 0x2c5e <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::aesActive() const+0x30>

00002c6c <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::aesActive() const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E9aesActiveEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:424
    2c6c:	cf 93       	push	r28
    2c6e:	df 93       	push	r29
    2c70:	00 d0       	rcall	.+0      	; 0x2c72 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::aesActive() const+0x6>
    2c72:	cd b7       	in	r28, 0x3d	; 61
    2c74:	de b7       	in	r29, 0x3e	; 62
aesActive():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:56

  void inhibit (bool value) { inhi = value; }

  bool inhibit () const { return inhi; }

  bool aesActive () const { return getList1().aesActive(); }
    2c76:	fc 01       	movw	r30, r24
    2c78:	86 81       	ldd	r24, Z+6	; 0x06
    2c7a:	97 81       	ldd	r25, Z+7	; 0x07
    2c7c:	9a 83       	std	Y+2, r25	; 0x02
    2c7e:	89 83       	std	Y+1, r24	; 0x01
getOffset():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:127
    2c80:	4a e0       	ldi	r20, 0x0A	; 10
    2c82:	65 eb       	ldi	r22, 0xB5	; 181
    2c84:	77 e0       	ldi	r23, 0x07	; 7
    2c86:	88 e0       	ldi	r24, 0x08	; 8
    2c88:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <as::AskSinRegister::getOffset(unsigned char, unsigned char const*, unsigned char)>
readRegister():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:236
    2c8c:	8f 3f       	cpi	r24, 0xFF	; 255
    2c8e:	59 f0       	breq	.+22     	; 0x2ca6 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::aesActive() const+0x3a>
_ZNK2as8BaseList7getByteEhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:29
    2c90:	68 2f       	mov	r22, r24
    2c92:	ce 01       	movw	r24, r28
    2c94:	01 96       	adiw	r24, 0x01	; 1
    2c96:	0e 94 01 15 	call	0x2a02	; 0x2a02 <as::BaseList::getByte(unsigned char) const>
    2c9a:	81 70       	andi	r24, 0x01	; 1
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E9aesActiveEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:424
  virtual uint8_t peers () const { return ch.peers(); }
  virtual bool changed () const { return ch.changed(); }
  virtual void changed (bool c) { ch.changed(c); }
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	df 91       	pop	r29
    2ca2:	cf 91       	pop	r28
    2ca4:	08 95       	ret
readRegister():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:236
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	f9 cf       	rjmp	.-14     	; 0x2c9c <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::aesActive() const+0x30>

00002caa <as::RegisterList<as::SwitchReg3>::readRegister(unsigned char, unsigned char) const>:
_ZNK2as12RegisterListINS_10SwitchReg3EE12readRegisterEhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:227
      return setBit(offset,0x01<<bitnum,value);
    }
    return false;
  }

  uint8_t readRegister (uint8_t reg,uint8_t value=0) const {
    2caa:	0f 93       	push	r16
    2cac:	1f 93       	push	r17
    2cae:	cf 93       	push	r28
    2cb0:	8c 01       	movw	r16, r24
    2cb2:	86 2f       	mov	r24, r22
    2cb4:	c4 2f       	mov	r28, r20
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:228
    uint8_t offset = RegisterType::getOffset(reg);
    2cb6:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <as::SwitchReg3::getOffset(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:229
    if( offset != 0xff ) {
    2cba:	8f 3f       	cpi	r24, 0xFF	; 255
    2cbc:	39 f0       	breq	.+14     	; 0x2ccc <as::RegisterList<as::SwitchReg3>::readRegister(unsigned char, unsigned char) const+0x22>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:230
      value = getByte(offset);
    2cbe:	68 2f       	mov	r22, r24
    2cc0:	c8 01       	movw	r24, r16
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:233
    }
    return value;
  }
    2cc2:	cf 91       	pop	r28
    2cc4:	1f 91       	pop	r17
    2cc6:	0f 91       	pop	r16
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:230
  }

  uint8_t readRegister (uint8_t reg,uint8_t value=0) const {
    uint8_t offset = RegisterType::getOffset(reg);
    if( offset != 0xff ) {
      value = getByte(offset);
    2cc8:	0c 94 01 15 	jmp	0x2a02	; 0x2a02 <as::BaseList::getByte(unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:233
    }
    return value;
  }
    2ccc:	8c 2f       	mov	r24, r28
    2cce:	cf 91       	pop	r28
    2cd0:	1f 91       	pop	r17
    2cd2:	0f 91       	pop	r16
    2cd4:	08 95       	ret

00002cd6 <as::SwitchStateMachine::getDelayForState(unsigned char, as::RegList3<as::SwitchReg3> const&) const [clone .isra.103]>:
_ZNK2as18SwitchStateMachine16getDelayForStateEhRKNS_8RegList3INS_10SwitchReg3EEE.isra.103():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:239
      default: break;
    }
    return AS_CM_CT_X_GE_COND_VALUE_LO;
  }

  uint32_t getDelayForState(uint8_t stat,const SwitchPeerList& lst) const {
    2cd6:	cf 93       	push	r28
    2cd8:	df 93       	push	r29
    2cda:	cd b7       	in	r28, 0x3d	; 61
    2cdc:	de b7       	in	r29, 0x3e	; 62
    2cde:	60 97       	sbiw	r28, 0x10	; 16
    2ce0:	0f b6       	in	r0, 0x3f	; 63
    2ce2:	f8 94       	cli
    2ce4:	de bf       	out	0x3e, r29	; 62
    2ce6:	0f be       	out	0x3f, r0	; 63
    2ce8:	cd bf       	out	0x3d, r28	; 61
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:240
    if( lst.valid() == false ) {
    2cea:	db 01       	movw	r26, r22
    2cec:	2d 91       	ld	r18, X+
    2cee:	3c 91       	ld	r19, X
    2cf0:	23 2b       	or	r18, r19
    2cf2:	61 f4       	brne	.+24     	; 0x2d0c <as::SwitchStateMachine::getDelayForState(unsigned char, as::RegList3<as::SwitchReg3> const&) const [clone .isra.103]+0x36>
_ZNK2as18SwitchStateMachine15getDefaultDelayEh.isra.72():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:255
    }
    return AskSinBase::byteTimeCvt(value);
  }

  uint32_t getDefaultDelay(uint8_t stat) const {
    switch( stat ) {
    2cf4:	83 30       	cpi	r24, 0x03	; 3
    2cf6:	31 f0       	breq	.+12     	; 0x2d04 <as::SwitchStateMachine::getDelayForState(unsigned char, as::RegList3<as::SwitchReg3> const&) const [clone .isra.103]+0x2e>
_ZNK2as18SwitchStateMachine16getDelayForStateEhRKNS_8RegList3INS_10SwitchReg3EEE.isra.103():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:261
      case AS_CM_JT_ON:
      case AS_CM_JT_OFF:
        return DELAY_INFINITE;
      default: break;
    }
    return DELAY_NO;
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	a9 01       	movw	r20, r18
_ZNK2as18SwitchStateMachine15getDefaultDelayEh.isra.72():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:255
    }
    return AskSinBase::byteTimeCvt(value);
  }

  uint32_t getDefaultDelay(uint8_t stat) const {
    switch( stat ) {
    2cfe:	86 30       	cpi	r24, 0x06	; 6
    2d00:	09 f0       	breq	.+2      	; 0x2d04 <as::SwitchStateMachine::getDelayForState(unsigned char, as::RegList3<as::SwitchReg3> const&) const [clone .isra.103]+0x2e>
    2d02:	48 c0       	rjmp	.+144    	; 0x2d94 <as::SwitchStateMachine::getDelayForState(unsigned char, as::RegList3<as::SwitchReg3> const&) const [clone .isra.103]+0xbe>
_ZNK2as18SwitchStateMachine16getDelayForStateEhRKNS_8RegList3INS_10SwitchReg3EEE.isra.103():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:258
      case AS_CM_JT_ON:
      case AS_CM_JT_OFF:
        return DELAY_INFINITE;
    2d04:	2f ef       	ldi	r18, 0xFF	; 255
    2d06:	3f ef       	ldi	r19, 0xFF	; 255
    2d08:	a9 01       	movw	r20, r18
    2d0a:	44 c0       	rjmp	.+136    	; 0x2d94 <as::SwitchStateMachine::getDelayForState(unsigned char, as::RegList3<as::SwitchReg3> const&) const [clone .isra.103]+0xbe>
    2d0c:	9b 01       	movw	r18, r22
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:244
  uint32_t getDelayForState(uint8_t stat,const SwitchPeerList& lst) const {
    if( lst.valid() == false ) {
      return getDefaultDelay(stat);
    }
    uint8_t value = 0;
    switch( stat ) {
    2d0e:	83 30       	cpi	r24, 0x03	; 3
    2d10:	09 f4       	brne	.+2      	; 0x2d14 <as::SwitchStateMachine::getDelayForState(unsigned char, as::RegList3<as::SwitchReg3> const&) const [clone .isra.103]+0x3e>
    2d12:	4b c0       	rjmp	.+150    	; 0x2daa <as::SwitchStateMachine::getDelayForState(unsigned char, as::RegList3<as::SwitchReg3> const&) const [clone .isra.103]+0xd4>
    2d14:	30 f4       	brcc	.+12     	; 0x2d22 <as::SwitchStateMachine::getDelayForState(unsigned char, as::RegList3<as::SwitchReg3> const&) const [clone .isra.103]+0x4c>
onDly():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:734

  uint8_t ctValLo() const { return this->readRegister(PREG_CONDVALUELOW,0x32); }
  bool ctValLo(uint8_t v) const { return this->writeRegister(PREG_CONDVALUELOW,v); }
  uint8_t ctValHi() const { return this->readRegister(PREG_CONDVALUEHIGH,0x64); }
  bool ctValHi(uint8_t v) const { return this->writeRegister(PREG_CONDVALUEHIGH,v); }
  uint8_t onDly() const { return this->readRegister(PREG_ONDELAYTIME,0x00); }
    2d16:	40 e0       	ldi	r20, 0x00	; 0
    2d18:	66 e0       	ldi	r22, 0x06	; 6
_ZNK2as18SwitchStateMachine16getDelayForStateEhRKNS_8RegList3INS_10SwitchReg3EEE.isra.103():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:244
    2d1a:	81 30       	cpi	r24, 0x01	; 1
    2d1c:	49 f0       	breq	.+18     	; 0x2d30 <as::SwitchStateMachine::getDelayForState(unsigned char, as::RegList3<as::SwitchReg3> const&) const [clone .isra.103]+0x5a>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:243

  uint32_t getDelayForState(uint8_t stat,const SwitchPeerList& lst) const {
    if( lst.valid() == false ) {
      return getDefaultDelay(stat);
    }
    uint8_t value = 0;
    2d1e:	80 e0       	ldi	r24, 0x00	; 0
    2d20:	0c c0       	rjmp	.+24     	; 0x2d3a <as::SwitchStateMachine::getDelayForState(unsigned char, as::RegList3<as::SwitchReg3> const&) const [clone .isra.103]+0x64>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:244
    switch( stat ) {
    2d22:	84 30       	cpi	r24, 0x04	; 4
    2d24:	09 f4       	brne	.+2      	; 0x2d28 <as::SwitchStateMachine::getDelayForState(unsigned char, as::RegList3<as::SwitchReg3> const&) const [clone .isra.103]+0x52>
    2d26:	44 c0       	rjmp	.+136    	; 0x2db0 <as::SwitchStateMachine::getDelayForState(unsigned char, as::RegList3<as::SwitchReg3> const&) const [clone .isra.103]+0xda>
offTime():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:740
  bool onDly(uint8_t v) const { return this->writeRegister(PREG_ONDELAYTIME,v); }
  uint8_t onTime() const { return this->readRegister(PREG_ONTIME,0xff); }
  bool onTime(uint8_t v) const { return this->writeRegister(PREG_ONTIME,v); }
  uint8_t offDly() const { return this->readRegister(PREG_OFFDELAYTIME,0x00); }
  bool offDly(uint8_t v) const { return this->writeRegister(PREG_OFFDELAYTIME,v); }
  uint8_t offTime() const { return this->readRegister(PREG_OFFTIME,0xff); }
    2d28:	4f ef       	ldi	r20, 0xFF	; 255
    2d2a:	69 e0       	ldi	r22, 0x09	; 9
_ZNK2as18SwitchStateMachine16getDelayForStateEhRKNS_8RegList3INS_10SwitchReg3EEE.isra.103():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:244
    2d2c:	86 30       	cpi	r24, 0x06	; 6
    2d2e:	b9 f7       	brne	.-18     	; 0x2d1e <as::SwitchStateMachine::getDelayForState(unsigned char, as::RegList3<as::SwitchReg3> const&) const [clone .isra.103]+0x48>
offTime():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:740
    2d30:	c9 01       	movw	r24, r18
    2d32:	0e 94 55 16 	call	0x2caa	; 0x2caa <as::RegisterList<as::SwitchReg3>::readRegister(unsigned char, unsigned char) const>
byteTimeCvt():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:153
    return crc & 0xFFFFFFL;
  }

  // get timer count in ticks
  static uint32_t byteTimeCvt(uint8_t tTime) {
    if( tTime == 0xff ) return 0xffffffff;
    2d36:	8f 3f       	cpi	r24, 0xFF	; 255
    2d38:	29 f3       	breq	.-54     	; 0x2d04 <as::SwitchStateMachine::getDelayForState(unsigned char, as::RegList3<as::SwitchReg3> const&) const [clone .isra.103]+0x2e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:154
    const uint16_t c[8] = {1,10,50,100,600,3000,6000,36000};
    2d3a:	90 e1       	ldi	r25, 0x10	; 16
    2d3c:	e4 e1       	ldi	r30, 0x14	; 20
    2d3e:	f1 e0       	ldi	r31, 0x01	; 1
    2d40:	de 01       	movw	r26, r28
    2d42:	11 96       	adiw	r26, 0x01	; 1
    2d44:	01 90       	ld	r0, Z+
    2d46:	0d 92       	st	X+, r0
    2d48:	9a 95       	dec	r25
    2d4a:	e1 f7       	brne	.-8      	; 0x2d44 <as::SwitchStateMachine::getDelayForState(unsigned char, as::RegList3<as::SwitchReg3> const&) const [clone .isra.103]+0x6e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:155
    return decis2ticks( (uint32_t)(tTime & 0x1F) * c[tTime >> 5] );
    2d4c:	28 2f       	mov	r18, r24
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	95 e0       	ldi	r25, 0x05	; 5
    2d52:	35 95       	asr	r19
    2d54:	27 95       	ror	r18
    2d56:	9a 95       	dec	r25
    2d58:	e1 f7       	brne	.-8      	; 0x2d52 <as::SwitchStateMachine::getDelayForState(unsigned char, as::RegList3<as::SwitchReg3> const&) const [clone .isra.103]+0x7c>
    2d5a:	22 0f       	add	r18, r18
    2d5c:	33 1f       	adc	r19, r19
    2d5e:	e1 e0       	ldi	r30, 0x01	; 1
    2d60:	f0 e0       	ldi	r31, 0x00	; 0
    2d62:	ec 0f       	add	r30, r28
    2d64:	fd 1f       	adc	r31, r29
    2d66:	2e 0f       	add	r18, r30
    2d68:	3f 1f       	adc	r19, r31
    2d6a:	d9 01       	movw	r26, r18
    2d6c:	ed 91       	ld	r30, X+
    2d6e:	fc 91       	ld	r31, X
    2d70:	8f 71       	andi	r24, 0x1F	; 31
    2d72:	28 2f       	mov	r18, r24
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	a4 e6       	ldi	r26, 0x64	; 100
    2d78:	b0 e0       	ldi	r27, 0x00	; 0
    2d7a:	0e 94 01 4f 	call	0x9e02	; 0x9e02 <__umulhisi3>
    2d7e:	9b 01       	movw	r18, r22
    2d80:	ac 01       	movw	r20, r24
    2d82:	df 01       	movw	r26, r30
    2d84:	0e 94 f6 4e 	call	0x9dec	; 0x9dec <__muluhisi3>
    2d88:	2a e0       	ldi	r18, 0x0A	; 10
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	40 e0       	ldi	r20, 0x00	; 0
    2d8e:	50 e0       	ldi	r21, 0x00	; 0
    2d90:	0e 94 d8 50 	call	0xa1b0	; 0xa1b0 <__udivmodsi4>
_ZNK2as18SwitchStateMachine16getDelayForStateEhRKNS_8RegList3INS_10SwitchReg3EEE.isra.103():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:252
      case AS_CM_JT_OFFDELAY: value = lst.offDly(); break;
      case AS_CM_JT_OFF:      value = lst.offTime(); break;
      default: break;
    }
    return AskSinBase::byteTimeCvt(value);
  }
    2d94:	ca 01       	movw	r24, r20
    2d96:	b9 01       	movw	r22, r18
    2d98:	60 96       	adiw	r28, 0x10	; 16
    2d9a:	0f b6       	in	r0, 0x3f	; 63
    2d9c:	f8 94       	cli
    2d9e:	de bf       	out	0x3e, r29	; 62
    2da0:	0f be       	out	0x3f, r0	; 63
    2da2:	cd bf       	out	0x3d, r28	; 61
    2da4:	df 91       	pop	r29
    2da6:	cf 91       	pop	r28
    2da8:	08 95       	ret
onTime():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:736
  bool ctValLo(uint8_t v) const { return this->writeRegister(PREG_CONDVALUELOW,v); }
  uint8_t ctValHi() const { return this->readRegister(PREG_CONDVALUEHIGH,0x64); }
  bool ctValHi(uint8_t v) const { return this->writeRegister(PREG_CONDVALUEHIGH,v); }
  uint8_t onDly() const { return this->readRegister(PREG_ONDELAYTIME,0x00); }
  bool onDly(uint8_t v) const { return this->writeRegister(PREG_ONDELAYTIME,v); }
  uint8_t onTime() const { return this->readRegister(PREG_ONTIME,0xff); }
    2daa:	4f ef       	ldi	r20, 0xFF	; 255
    2dac:	67 e0       	ldi	r22, 0x07	; 7
    2dae:	c0 cf       	rjmp	.-128    	; 0x2d30 <as::SwitchStateMachine::getDelayForState(unsigned char, as::RegList3<as::SwitchReg3> const&) const [clone .isra.103]+0x5a>
offDly():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:738
  bool onTime(uint8_t v) const { return this->writeRegister(PREG_ONTIME,v); }
  uint8_t offDly() const { return this->readRegister(PREG_OFFDELAYTIME,0x00); }
    2db0:	40 e0       	ldi	r20, 0x00	; 0
    2db2:	68 e0       	ldi	r22, 0x08	; 8
    2db4:	bd cf       	rjmp	.-134    	; 0x2d30 <as::SwitchStateMachine::getDelayForState(unsigned char, as::RegList3<as::SwitchReg3> const&) const [clone .isra.103]+0x5a>

00002db6 <as::SwitchStateMachine::setState(unsigned char, unsigned long, as::RegList3<as::SwitchReg3> const&, unsigned char) [clone .constprop.68]>:
_ZN2as18SwitchStateMachine8setStateEhmRKNS_8RegList3INS_10SwitchReg3EEEh.constprop.68():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:140
    uint32_t dly = getDelayForState(next,actlst);
    setState(next,dly,actlst);
  }


  void setState (uint8_t next,uint32_t delay,const SwitchPeerList& lst=SwitchPeerList(0),uint8_t deep=0) {
    2db6:	8f 92       	push	r8
    2db8:	9f 92       	push	r9
    2dba:	af 92       	push	r10
    2dbc:	bf 92       	push	r11
    2dbe:	cf 92       	push	r12
    2dc0:	df 92       	push	r13
    2dc2:	ef 92       	push	r14
    2dc4:	ff 92       	push	r15
    2dc6:	0f 93       	push	r16
    2dc8:	1f 93       	push	r17
    2dca:	cf 93       	push	r28
    2dcc:	df 93       	push	r29
    2dce:	ec 01       	movw	r28, r24
    2dd0:	d6 2e       	mov	r13, r22
    2dd2:	49 01       	movw	r8, r18
    2dd4:	5a 01       	movw	r10, r20
    2dd6:	78 01       	movw	r14, r16
    2dd8:	85 e0       	ldi	r24, 0x05	; 5
    2dda:	c8 2e       	mov	r12, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:141
    actlst = lst;
    2ddc:	f7 01       	movw	r30, r14
    2dde:	80 81       	ld	r24, Z
    2de0:	91 81       	ldd	r25, Z+1	; 0x01
    2de2:	9a 87       	std	Y+10, r25	; 0x0a
    2de4:	89 87       	std	Y+9, r24	; 0x09
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:143
    // check deep to prevent infinite recursion
    if( next != AS_CM_JT_NONE && deep < 4) {
    2de6:	dd 20       	and	r13, r13
    2de8:	09 f4       	brne	.+2      	; 0x2dec <as::SwitchStateMachine::setState(unsigned char, unsigned long, as::RegList3<as::SwitchReg3> const&, unsigned char) [clone .constprop.68]+0x36>
    2dea:	44 c0       	rjmp	.+136    	; 0x2e74 <as::SwitchStateMachine::setState(unsigned char, unsigned long, as::RegList3<as::SwitchReg3> const&, unsigned char) [clone .constprop.68]+0xbe>
    2dec:	ca 94       	dec	r12
    2dee:	cc 20       	and	r12, r12
    2df0:	09 f4       	brne	.+2      	; 0x2df4 <as::SwitchStateMachine::setState(unsigned char, unsigned long, as::RegList3<as::SwitchReg3> const&, unsigned char) [clone .constprop.68]+0x3e>
    2df2:	40 c0       	rjmp	.+128    	; 0x2e74 <as::SwitchStateMachine::setState(unsigned char, unsigned long, as::RegList3<as::SwitchReg3> const&, unsigned char) [clone .constprop.68]+0xbe>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:145
      // first cancel possible running alarm
      sysclock.cancel(*this);
    2df4:	ce 01       	movw	r24, r28
    2df6:	0e 94 22 10 	call	0x2044	; 0x2044 <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:147
      // if state is different
      if (state != next) {
    2dfa:	68 85       	ldd	r22, Y+8	; 0x08
    2dfc:	d6 16       	cp	r13, r22
    2dfe:	59 f0       	breq	.+22     	; 0x2e16 <as::SwitchStateMachine::setState(unsigned char, unsigned long, as::RegList3<as::SwitchReg3> const&, unsigned char) [clone .constprop.68]+0x60>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:148
        switchState(state, next,delay);
    2e00:	e8 81       	ld	r30, Y
    2e02:	f9 81       	ldd	r31, Y+1	; 0x01
    2e04:	06 80       	ldd	r0, Z+6	; 0x06
    2e06:	f7 81       	ldd	r31, Z+7	; 0x07
    2e08:	e0 2d       	mov	r30, r0
    2e0a:	95 01       	movw	r18, r10
    2e0c:	84 01       	movw	r16, r8
    2e0e:	4d 2d       	mov	r20, r13
    2e10:	ce 01       	movw	r24, r28
    2e12:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:149
        state = next;
    2e14:	d8 86       	std	Y+8, r13	; 0x08
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:151
      }
      if (delay == DELAY_NO) {
    2e16:	81 14       	cp	r8, r1
    2e18:	91 04       	cpc	r9, r1
    2e1a:	a1 04       	cpc	r10, r1
    2e1c:	b1 04       	cpc	r11, r1
    2e1e:	81 f4       	brne	.+32     	; 0x2e40 <as::SwitchStateMachine::setState(unsigned char, unsigned long, as::RegList3<as::SwitchReg3> const&, unsigned char) [clone .constprop.68]+0x8a>
    2e20:	e8 85       	ldd	r30, Y+8	; 0x08
    2e22:	e1 50       	subi	r30, 0x01	; 1
    2e24:	d1 2c       	mov	r13, r1
    2e26:	e6 30       	cpi	r30, 0x06	; 6
    2e28:	20 f4       	brcc	.+8      	; 0x2e32 <as::SwitchStateMachine::setState(unsigned char, unsigned long, as::RegList3<as::SwitchReg3> const&, unsigned char) [clone .constprop.68]+0x7c>
    2e2a:	f0 e0       	ldi	r31, 0x00	; 0
    2e2c:	ee 54       	subi	r30, 0x4E	; 78
    2e2e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e30:	d0 80       	ld	r13, Z
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:154
        // go immediately to the next state
        next = getNextState();
        delay = getDelayForState(next,lst);
    2e32:	b7 01       	movw	r22, r14
    2e34:	8d 2d       	mov	r24, r13
    2e36:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <as::SwitchStateMachine::getDelayForState(unsigned char, as::RegList3<as::SwitchReg3> const&) const [clone .isra.103]>
    2e3a:	4b 01       	movw	r8, r22
    2e3c:	5c 01       	movw	r10, r24
    2e3e:	ce cf       	rjmp	.-100    	; 0x2ddc <as::SwitchStateMachine::setState(unsigned char, unsigned long, as::RegList3<as::SwitchReg3> const&, unsigned char) [clone .constprop.68]+0x26>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:157
        setState(next, delay, lst, ++deep);
      }
      else if (delay != DELAY_INFINITE) {
    2e40:	ff ef       	ldi	r31, 0xFF	; 255
    2e42:	8f 16       	cp	r8, r31
    2e44:	9f 06       	cpc	r9, r31
    2e46:	af 06       	cpc	r10, r31
    2e48:	bf 06       	cpc	r11, r31
    2e4a:	a1 f0       	breq	.+40     	; 0x2e74 <as::SwitchStateMachine::setState(unsigned char, unsigned long, as::RegList3<as::SwitchReg3> const&, unsigned char) [clone .constprop.68]+0xbe>
_ZN2as5Alarm3setEm():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:41
  Alarm(uint32_t t) : flags(0), tick(t) {}
  Alarm(uint32_t t,bool asynch) : flags(0), tick(t) {
    async(asynch);
  }
  void set(uint32_t t) {
    tick = t;
    2e4c:	8d 82       	std	Y+5, r8	; 0x05
    2e4e:	9e 82       	std	Y+6, r9	; 0x06
    2e50:	af 82       	std	Y+7, r10	; 0x07
_ZN2as8SysClock3addERNS_5AlarmE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:221
    2e52:	be 01       	movw	r22, r28
    2e54:	87 e8       	ldi	r24, 0x87	; 135
    2e56:	95 e0       	ldi	r25, 0x05	; 5
_ZN2as18SwitchStateMachine8setStateEhmRKNS_8RegList3INS_10SwitchReg3EEEh.constprop.68():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:162
        Alarm::set(delay);
        sysclock.add(*this);
      }
    }
  }
    2e58:	df 91       	pop	r29
    2e5a:	cf 91       	pop	r28
    2e5c:	1f 91       	pop	r17
    2e5e:	0f 91       	pop	r16
    2e60:	ff 90       	pop	r15
    2e62:	ef 90       	pop	r14
    2e64:	df 90       	pop	r13
    2e66:	cf 90       	pop	r12
    2e68:	bf 90       	pop	r11
    2e6a:	af 90       	pop	r10
    2e6c:	9f 90       	pop	r9
    2e6e:	8f 90       	pop	r8
_ZN2as8SysClock3addERNS_5AlarmE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:221
    2e70:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <as::AlarmClock::add(as::Alarm&)>
_ZN2as18SwitchStateMachine8setStateEhmRKNS_8RegList3INS_10SwitchReg3EEEh.constprop.68():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:162
    2e74:	df 91       	pop	r29
    2e76:	cf 91       	pop	r28
    2e78:	1f 91       	pop	r17
    2e7a:	0f 91       	pop	r16
    2e7c:	ff 90       	pop	r15
    2e7e:	ef 90       	pop	r14
    2e80:	df 90       	pop	r13
    2e82:	cf 90       	pop	r12
    2e84:	bf 90       	pop	r11
    2e86:	af 90       	pop	r10
    2e88:	9f 90       	pop	r9
    2e8a:	8f 90       	pop	r8
    2e8c:	08 95       	ret

00002e8e <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::ActionSetMsg const&)>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E7processERKNS_12ActionSetMsgE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:434
  virtual bool deletepeer (const Peer& p) { return ch.deletepeer(p); }
  virtual void firstinit () { ch.firstinit(); }

#ifndef SENSOR_ONLY
  virtual void stop () { ch.stop(); };
  virtual bool process (const ActionSetMsg& msg) { return ch.process(msg); }
    2e8e:	8f 92       	push	r8
    2e90:	9f 92       	push	r9
    2e92:	af 92       	push	r10
    2e94:	bf 92       	push	r11
    2e96:	ef 92       	push	r14
    2e98:	ff 92       	push	r15
    2e9a:	0f 93       	push	r16
    2e9c:	1f 93       	push	r17
    2e9e:	cf 93       	push	r28
    2ea0:	df 93       	push	r29
    2ea2:	00 d0       	rcall	.+0      	; 0x2ea4 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::ActionSetMsg const&)+0x16>
    2ea4:	cd b7       	in	r28, 0x3d	; 61
    2ea6:	de b7       	in	r29, 0x3e	; 62
    2ea8:	fb 01       	movw	r30, r22
process():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:316
  bool process (__attribute__((unused)) const ActionCommandMsg& msg) {
    return true;
  }

  bool process (const ActionSetMsg& msg) {
    StateMachine::set( msg.value(), msg.ramp(), msg.delay() );
    2eaa:	02 96       	adiw	r24, 0x02	; 2
    2eac:	7c 01       	movw	r14, r24
_ZNK2as7Message8datasizeEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:106
  const uint8_t* data () const {
    return pload;
  }

	uint8_t datasize () const {
	  return len >= 11 ? len - 11 : 0;
    2eae:	80 81       	ld	r24, Z
    2eb0:	8b 30       	cpi	r24, 0x0B	; 11
    2eb2:	08 f4       	brcc	.+2      	; 0x2eb6 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::ActionSetMsg const&)+0x28>
    2eb4:	8b e0       	ldi	r24, 0x0B	; 11
    2eb6:	8b 50       	subi	r24, 0x0B	; 11
delay():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:559
    }
    return value;
  }
  uint16_t delay () const {
    uint16_t dly = 0xffff;
    if( datasize() >= 5) {
    2eb8:	85 30       	cpi	r24, 0x05	; 5
    2eba:	60 f0       	brcs	.+24     	; 0x2ed4 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::ActionSetMsg const&)+0x46>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:560
      dly = (*(data()+3) << 8) + *(data()+4);
    2ebc:	27 85       	ldd	r18, Z+15	; 0x0f
    2ebe:	82 2f       	mov	r24, r18
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	98 2f       	mov	r25, r24
    2ec4:	88 27       	eor	r24, r24
    2ec6:	20 89       	ldd	r18, Z+16	; 0x10
    2ec8:	28 0f       	add	r18, r24
    2eca:	39 2f       	mov	r19, r25
    2ecc:	31 1d       	adc	r19, r1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:562
    }
    if( dly == 0 ) dly = 0xffff;
    2ece:	21 15       	cp	r18, r1
    2ed0:	31 05       	cpc	r19, r1
    2ed2:	11 f4       	brne	.+4      	; 0x2ed8 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::ActionSetMsg const&)+0x4a>
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E7processERKNS_12ActionSetMsgE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:558
      value = (*(data()+1) << 8) + *(data()+2);
    }
    return value;
  }
  uint16_t delay () const {
    uint16_t dly = 0xffff;
    2ed4:	2f ef       	ldi	r18, 0xFF	; 255
    2ed6:	3f ef       	ldi	r19, 0xFF	; 255
_ZNK2as12ActionSetMsg5valueEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:549
class ActionSetMsg : public ActionMsg {
protected:
  ActionSetMsg() {}
public:
  uint8_t channel () const { return subcommand(); }
  uint8_t value () const { return *data(); }
    2ed8:	14 85       	ldd	r17, Z+12	; 0x0c
_ZN2as8BaseListC2Ej():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:18

class BaseList {
  uint16_t  addr;

public:
  BaseList (uint16_t a) : addr(a) {}
    2eda:	1a 82       	std	Y+2, r1	; 0x02
    2edc:	19 82       	std	Y+1, r1	; 0x01
intTimeCvt():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:166
  }

  // get timer count in ticks
  static uint32_t intTimeCvt(uint16_t iTime) {
    if (iTime == 0x00) return 0x00;
    if (iTime == 0xffff) return 0xffffffff;
    2ede:	2f 3f       	cpi	r18, 0xFF	; 255
    2ee0:	32 07       	cpc	r19, r18
    2ee2:	09 f4       	brne	.+2      	; 0x2ee6 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::ActionSetMsg const&)+0x58>
    2ee4:	46 c0       	rjmp	.+140    	; 0x2f72 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::ActionSetMsg const&)+0xe4>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:169

    uint32_t tByte;
    if ((iTime & 0x1F) != 0) {
    2ee6:	a9 01       	movw	r20, r18
    2ee8:	4f 71       	andi	r20, 0x1F	; 31
    2eea:	55 27       	eor	r21, r21
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E7processERKNS_12ActionSetMsgE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:172
      tByte = 2;
      for (uint8_t i = 1; i < (iTime & 0x1F); i++) tByte *= 2;
    } else tByte = 1;
    2eec:	81 2c       	mov	r8, r1
    2eee:	91 2c       	mov	r9, r1
    2ef0:	54 01       	movw	r10, r8
    2ef2:	83 94       	inc	r8
intTimeCvt():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:169
  static uint32_t intTimeCvt(uint16_t iTime) {
    if (iTime == 0x00) return 0x00;
    if (iTime == 0xffff) return 0xffffffff;

    uint32_t tByte;
    if ((iTime & 0x1F) != 0) {
    2ef4:	41 15       	cp	r20, r1
    2ef6:	51 05       	cpc	r21, r1
    2ef8:	79 f0       	breq	.+30     	; 0x2f18 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::ActionSetMsg const&)+0x8a>
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E7processERKNS_12ActionSetMsgE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:171
      tByte = 2;
      for (uint8_t i = 1; i < (iTime & 0x1F); i++) tByte *= 2;
    2efa:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:170
    if (iTime == 0x00) return 0x00;
    if (iTime == 0xffff) return 0xffffffff;

    uint32_t tByte;
    if ((iTime & 0x1F) != 0) {
      tByte = 2;
    2efc:	72 e0       	ldi	r23, 0x02	; 2
    2efe:	87 2e       	mov	r8, r23
    2f00:	91 2c       	mov	r9, r1
    2f02:	a1 2c       	mov	r10, r1
    2f04:	b1 2c       	mov	r11, r1
intTimeCvt():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:171
      for (uint8_t i = 1; i < (iTime & 0x1F); i++) tByte *= 2;
    2f06:	84 17       	cp	r24, r20
    2f08:	15 06       	cpc	r1, r21
    2f0a:	30 f4       	brcc	.+12     	; 0x2f18 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::ActionSetMsg const&)+0x8a>
    2f0c:	88 0c       	add	r8, r8
    2f0e:	99 1c       	adc	r9, r9
    2f10:	aa 1c       	adc	r10, r10
    2f12:	bb 1c       	adc	r11, r11
    2f14:	8f 5f       	subi	r24, 0xFF	; 255
    2f16:	f7 cf       	rjmp	.-18     	; 0x2f06 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::ActionSetMsg const&)+0x78>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:174
    } else tByte = 1;

    return decis2ticks( (uint32_t)tByte*(iTime>>5) );
    2f18:	85 e0       	ldi	r24, 0x05	; 5
    2f1a:	36 95       	lsr	r19
    2f1c:	27 95       	ror	r18
    2f1e:	8a 95       	dec	r24
    2f20:	e1 f7       	brne	.-8      	; 0x2f1a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::ActionSetMsg const&)+0x8c>
    2f22:	a4 e6       	ldi	r26, 0x64	; 100
    2f24:	b0 e0       	ldi	r27, 0x00	; 0
    2f26:	0e 94 01 4f 	call	0x9e02	; 0x9e02 <__umulhisi3>
    2f2a:	9b 01       	movw	r18, r22
    2f2c:	ac 01       	movw	r20, r24
    2f2e:	c5 01       	movw	r24, r10
    2f30:	b4 01       	movw	r22, r8
    2f32:	0e 94 b4 50 	call	0xa168	; 0xa168 <__mulsi3>
    2f36:	2a e0       	ldi	r18, 0x0A	; 10
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	40 e0       	ldi	r20, 0x00	; 0
    2f3c:	50 e0       	ldi	r21, 0x00	; 0
    2f3e:	0e 94 d8 50 	call	0xa1b0	; 0xa1b0 <__udivmodsi4>
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E7processERKNS_12ActionSetMsgE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:319
  }

  void stop () {}

  void status (uint8_t stat, uint16_t delay) {
    setState( stat == 0 ? AS_CM_JT_OFF : AS_CM_JT_ON, AskSinBase::intTimeCvt(delay) );
    2f42:	63 e0       	ldi	r22, 0x03	; 3
status():
    2f44:	11 11       	cpse	r17, r1
    2f46:	01 c0       	rjmp	.+2      	; 0x2f4a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::ActionSetMsg const&)+0xbc>
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E7processERKNS_12ActionSetMsgE():
    2f48:	66 e0       	ldi	r22, 0x06	; 6
status():
    2f4a:	8e 01       	movw	r16, r28
    2f4c:	0f 5f       	subi	r16, 0xFF	; 255
    2f4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f50:	c7 01       	movw	r24, r14
    2f52:	0e 94 db 16 	call	0x2db6	; 0x2db6 <as::SwitchStateMachine::setState(unsigned char, unsigned long, as::RegList3<as::SwitchReg3> const&, unsigned char) [clone .constprop.68]>
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E7processERKNS_12ActionSetMsgE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:434
  virtual bool deletepeer (const Peer& p) { return ch.deletepeer(p); }
  virtual void firstinit () { ch.firstinit(); }

#ifndef SENSOR_ONLY
  virtual void stop () { ch.stop(); };
  virtual bool process (const ActionSetMsg& msg) { return ch.process(msg); }
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	0f 90       	pop	r0
    2f5a:	0f 90       	pop	r0
    2f5c:	df 91       	pop	r29
    2f5e:	cf 91       	pop	r28
    2f60:	1f 91       	pop	r17
    2f62:	0f 91       	pop	r16
    2f64:	ff 90       	pop	r15
    2f66:	ef 90       	pop	r14
    2f68:	bf 90       	pop	r11
    2f6a:	af 90       	pop	r10
    2f6c:	9f 90       	pop	r9
    2f6e:	8f 90       	pop	r8
    2f70:	08 95       	ret
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:166
  }

  // get timer count in ticks
  static uint32_t intTimeCvt(uint16_t iTime) {
    if (iTime == 0x00) return 0x00;
    if (iTime == 0xffff) return 0xffffffff;
    2f72:	2f ef       	ldi	r18, 0xFF	; 255
    2f74:	3f ef       	ldi	r19, 0xFF	; 255
    2f76:	a9 01       	movw	r20, r18
    2f78:	e4 cf       	rjmp	.-56     	; 0x2f42 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::ActionSetMsg const&)+0xb4>

00002f7a <as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>::init(unsigned char, bool) [clone .constprop.33]>:
_ZN2as13SwitchChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEELi10E6UList0S3_E4initEhb.constprop.33():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:344

public:
  SwitchChannel () : BaseChannel(), pin(0) {}
  virtual ~SwitchChannel() {}

  void init (uint8_t p,bool value=false) {
    2f7a:	ef 92       	push	r14
    2f7c:	ff 92       	push	r15
    2f7e:	0f 93       	push	r16
    2f80:	1f 93       	push	r17
    2f82:	cf 93       	push	r28
    2f84:	df 93       	push	r29
    2f86:	00 d0       	rcall	.+0      	; 0x2f88 <as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>::init(unsigned char, bool) [clone .constprop.33]+0xe>
    2f88:	cd b7       	in	r28, 0x3d	; 61
    2f8a:	de b7       	in	r29, 0x3e	; 62
    2f8c:	7c 01       	movw	r14, r24
    2f8e:	86 2f       	mov	r24, r22
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:345
    pin=p;
    2f90:	f7 01       	movw	r30, r14
    2f92:	62 8b       	std	Z+18, r22	; 0x12
setOutput():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Pins.h:20

namespace as {

class ArduinoPins {
public:
  inline static void setOutput   (uint8_t pin) { pinMode(pin,OUTPUT); }
    2f94:	61 e0       	ldi	r22, 0x01	; 1
    2f96:	0e 94 de 07 	call	0xfbc	; 0xfbc <pinMode>
_ZN2as5Alarm7setflagEbh.isra.10():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:25
  ~Alarm() {}

  uint8_t flags;

public:
  void setflag(bool c,uint8_t mask) { c ? flags |= mask : flags &= ~mask; }
    2f9a:	f7 01       	movw	r30, r14
    2f9c:	84 81       	ldd	r24, Z+4	; 0x04
    2f9e:	87 7f       	andi	r24, 0xF7	; 247
    2fa0:	84 83       	std	Z+4, r24	; 0x04
    2fa2:	07 85       	ldd	r16, Z+15	; 0x0f
    2fa4:	10 89       	ldd	r17, Z+16	; 0x10
readBit():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:242
      value = getByte(offset,mask<<shift,shift);
    }
    return value;
  }
  bool readBit (uint8_t reg,uint8_t bitnum,bool value=false) const {
    uint8_t offset = RegisterType::getOffset(reg);
    2fa6:	86 e5       	ldi	r24, 0x56	; 86
    2fa8:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <as::SwitchReg1::getOffset(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:243
    if( offset != 0xff ) {
    2fac:	8f 3f       	cpi	r24, 0xFF	; 255
    2fae:	c9 f4       	brne	.+50     	; 0x2fe2 <as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>::init(unsigned char, bool) [clone .constprop.33]+0x68>
_ZN2as8BaseListC2Ej():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:18
    2fb0:	1a 82       	std	Y+2, r1	; 0x02
    2fb2:	19 82       	std	Y+1, r1	; 0x01
_ZN2as13SwitchChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEELi10E6UList0S3_E4initEhb.constprop.33():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:319
  }

  void stop () {}

  void status (uint8_t stat, uint16_t delay) {
    setState( stat == 0 ? AS_CM_JT_OFF : AS_CM_JT_ON, AskSinBase::intTimeCvt(delay) );
    2fb4:	66 e0       	ldi	r22, 0x06	; 6
status():
    2fb6:	8e 01       	movw	r16, r28
    2fb8:	0f 5f       	subi	r16, 0xFF	; 255
    2fba:	1f 4f       	sbci	r17, 0xFF	; 255
    2fbc:	2f ef       	ldi	r18, 0xFF	; 255
    2fbe:	3f ef       	ldi	r19, 0xFF	; 255
    2fc0:	a9 01       	movw	r20, r18
    2fc2:	c7 01       	movw	r24, r14
    2fc4:	0e 94 db 16 	call	0x2db6	; 0x2db6 <as::SwitchStateMachine::setState(unsigned char, unsigned long, as::RegList3<as::SwitchReg3> const&, unsigned char) [clone .constprop.68]>
_ZN2as5Alarm7setflagEbh.isra.10():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:25
    2fc8:	f7 01       	movw	r30, r14
    2fca:	84 81       	ldd	r24, Z+4	; 0x04
    2fcc:	84 60       	ori	r24, 0x04	; 4
    2fce:	84 83       	std	Z+4, r24	; 0x04
_ZN2as13SwitchChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEELi10E6UList0S3_E4initEhb.constprop.33():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:351
    IODriver::setOutput(pin);
    this->setflag(value,LOWACTIVE);
    typename BaseChannel::List1 l1 = BaseChannel::getList1();
    this->set(l1.powerUpAction() == true ? 200 : 0, 0, 0xffff );
    this->changed(true);
  }
    2fd0:	0f 90       	pop	r0
    2fd2:	0f 90       	pop	r0
    2fd4:	df 91       	pop	r29
    2fd6:	cf 91       	pop	r28
    2fd8:	1f 91       	pop	r17
    2fda:	0f 91       	pop	r16
    2fdc:	ff 90       	pop	r15
    2fde:	ef 90       	pop	r14
    2fe0:	08 95       	ret
isBitSet():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:43
    tmp |= (data << shift) & mask;
    return setByte(offset, tmp);
  }

  bool isBitSet (uint8_t offset, uint8_t bit) const {
    return (storage().getByte(addr + offset) & bit) == bit;
    2fe2:	80 0f       	add	r24, r16
    2fe4:	91 2f       	mov	r25, r17
    2fe6:	91 1d       	adc	r25, r1
    2fe8:	0e 94 bd 14 	call	0x297a	; 0x297a <as::InternalEprom::getByte(unsigned int) [clone .isra.4]>
_ZN2as13SwitchChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEELi10E6UList0S3_E4initEhb.constprop.33():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:349
  void init (uint8_t p,bool value=false) {
    pin=p;
    IODriver::setOutput(pin);
    this->setflag(value,LOWACTIVE);
    typename BaseChannel::List1 l1 = BaseChannel::getList1();
    this->set(l1.powerUpAction() == true ? 200 : 0, 0, 0xffff );
    2fec:	80 ff       	sbrs	r24, 0
    2fee:	e0 cf       	rjmp	.-64     	; 0x2fb0 <as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>::init(unsigned char, bool) [clone .constprop.33]+0x36>
_ZN2as8BaseListC2Ej():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:18

class BaseList {
  uint16_t  addr;

public:
  BaseList (uint16_t a) : addr(a) {}
    2ff0:	1a 82       	std	Y+2, r1	; 0x02
    2ff2:	19 82       	std	Y+1, r1	; 0x01
_ZN2as13SwitchChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEELi10E6UList0S3_E4initEhb.constprop.33():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:319
  }

  void stop () {}

  void status (uint8_t stat, uint16_t delay) {
    setState( stat == 0 ? AS_CM_JT_OFF : AS_CM_JT_ON, AskSinBase::intTimeCvt(delay) );
    2ff4:	63 e0       	ldi	r22, 0x03	; 3
    2ff6:	df cf       	rjmp	.-66     	; 0x2fb6 <as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>::init(unsigned char, bool) [clone .constprop.33]+0x3c>

00002ff8 <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)>:
_ZN2as18SwitchStateMachine6remoteERKNS_8RegList3INS_10SwitchReg3EEEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:271
  bool set (uint8_t value,__attribute__ ((unused)) uint16_t ramp,uint16_t delay) {
    status(value, delay);
    return true;
  }

  void remote (const SwitchPeerList& lst,uint8_t counter) {
    2ff8:	8f 92       	push	r8
    2ffa:	9f 92       	push	r9
    2ffc:	af 92       	push	r10
    2ffe:	bf 92       	push	r11
    3000:	cf 92       	push	r12
    3002:	df 92       	push	r13
    3004:	ff 92       	push	r15
    3006:	0f 93       	push	r16
    3008:	1f 93       	push	r17
    300a:	cf 93       	push	r28
    300c:	df 93       	push	r29
    300e:	00 d0       	rcall	.+0      	; 0x3010 <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0x18>
    3010:	cd b7       	in	r28, 0x3d	; 61
    3012:	de b7       	in	r29, 0x3e	; 62
    3014:	6c 01       	movw	r12, r24
    3016:	8b 01       	movw	r16, r22
    3018:	f4 2e       	mov	r15, r20
actionType():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:743
  uint8_t offDly() const { return this->readRegister(PREG_OFFDELAYTIME,0x00); }
  bool offDly(uint8_t v) const { return this->writeRegister(PREG_OFFDELAYTIME,v); }
  uint8_t offTime() const { return this->readRegister(PREG_OFFTIME,0xff); }
  bool offTime(uint8_t v) const { return this->writeRegister(PREG_OFFTIME,v); }

  uint8_t actionType() const { return this->readRegister(PREG_ACTIONTYPE,0x0f,0); }
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	40 e0       	ldi	r20, 0x00	; 0
    301e:	6a e0       	ldi	r22, 0x0A	; 10
    3020:	c8 01       	movw	r24, r16
    3022:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <as::RegisterList<as::SwitchReg3>::readRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.69]>
_ZN2as18SwitchStateMachine6remoteERKNS_8RegList3INS_10SwitchReg3EEEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:273
    // perform action as defined in the list
    switch (lst.actionType()) {
    3026:	82 30       	cpi	r24, 0x02	; 2
    3028:	09 f4       	brne	.+2      	; 0x302c <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0x34>
    302a:	5d c0       	rjmp	.+186    	; 0x30e6 <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0xee>
    302c:	83 30       	cpi	r24, 0x03	; 3
    302e:	09 f4       	brne	.+2      	; 0x3032 <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0x3a>
    3030:	66 c0       	rjmp	.+204    	; 0x30fe <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0x106>
    3032:	81 30       	cpi	r24, 0x01	; 1
    3034:	49 f4       	brne	.+18     	; 0x3048 <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0x50>
_ZNK2as18SwitchStateMachine13getJumpTargetEhRKNS_8RegList3INS_10SwitchReg3EEE.isra.101():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:218
    }
    return AS_CM_JT_NONE;
  }

  uint8_t getJumpTarget(uint8_t stat,const SwitchPeerList& lst) const {
    switch( stat ) {
    3036:	f6 01       	movw	r30, r12
    3038:	80 85       	ldd	r24, Z+8	; 0x08
    303a:	83 30       	cpi	r24, 0x03	; 3
    303c:	d9 f0       	breq	.+54     	; 0x3074 <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0x7c>
    303e:	90 f4       	brcc	.+36     	; 0x3064 <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0x6c>
jtDlyOn():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:756

  uint8_t jtOn () const { return this->readRegister(PREG_JTONOFF,0x0f,0,AS_CM_JT_OFFDELAY); }
  bool jtOn (uint8_t v) const { return this->writeRegister(PREG_JTONOFF,0x0f,0,v); }
  uint8_t jtOff () const { return this->readRegister(PREG_JTONOFF,0x0f,4,AS_CM_JT_ONDELAY); }
  bool jtOff (uint8_t v) const { return this->writeRegister(PREG_JTONOFF,0x0f,4,v); }
  uint8_t jtDlyOn () const { return this->readRegister(PREG_JTDELAYONOFF,0x0f,0,AS_CM_JT_REFON); }
    3040:	22 e0       	ldi	r18, 0x02	; 2
    3042:	40 e0       	ldi	r20, 0x00	; 0
_ZNK2as18SwitchStateMachine13getJumpTargetEhRKNS_8RegList3INS_10SwitchReg3EEE.isra.101():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:218
    3044:	81 30       	cpi	r24, 0x01	; 1
    3046:	d9 f0       	breq	.+54     	; 0x307e <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0x86>
_ZN2as18SwitchStateMachine6remoteERKNS_8RegList3INS_10SwitchReg3EEEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:285
    case AS_CM_ACTIONTYPE_TOGGLE_INVERSE_TO_COUNTER:
      setState((counter & 0x01) == 0x00 ? AS_CM_JT_ON : AS_CM_JT_OFF, DELAY_INFINITE);
      break;
    default: break;
    }
  }
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	df 91       	pop	r29
    304e:	cf 91       	pop	r28
    3050:	1f 91       	pop	r17
    3052:	0f 91       	pop	r16
    3054:	ff 90       	pop	r15
    3056:	df 90       	pop	r13
    3058:	cf 90       	pop	r12
    305a:	bf 90       	pop	r11
    305c:	af 90       	pop	r10
    305e:	9f 90       	pop	r9
    3060:	8f 90       	pop	r8
    3062:	08 95       	ret
_ZNK2as18SwitchStateMachine13getJumpTargetEhRKNS_8RegList3INS_10SwitchReg3EEE.isra.101():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:218
    }
    return AS_CM_JT_NONE;
  }

  uint8_t getJumpTarget(uint8_t stat,const SwitchPeerList& lst) const {
    switch( stat ) {
    3064:	84 30       	cpi	r24, 0x04	; 4
    3066:	49 f0       	breq	.+18     	; 0x307a <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0x82>
jtOff():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:754
  bool onTimeMode() const { return this->readBit(PREG_ACTIONTYPE,7,false); }
  bool onTimeMode(bool v) const { return this->writeBit(PREG_ACTIONTYPE,7,v); }

  uint8_t jtOn () const { return this->readRegister(PREG_JTONOFF,0x0f,0,AS_CM_JT_OFFDELAY); }
  bool jtOn (uint8_t v) const { return this->writeRegister(PREG_JTONOFF,0x0f,0,v); }
  uint8_t jtOff () const { return this->readRegister(PREG_JTONOFF,0x0f,4,AS_CM_JT_ONDELAY); }
    3068:	21 e0       	ldi	r18, 0x01	; 1
    306a:	44 e0       	ldi	r20, 0x04	; 4
_ZNK2as18SwitchStateMachine13getJumpTargetEhRKNS_8RegList3INS_10SwitchReg3EEE.isra.101():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:218
    306c:	86 30       	cpi	r24, 0x06	; 6
    306e:	61 f7       	brne	.-40     	; 0x3048 <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0x50>
jtOff():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:754
    3070:	6b e0       	ldi	r22, 0x0B	; 11
    3072:	06 c0       	rjmp	.+12     	; 0x3080 <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0x88>
jtOn():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:752
  bool offTimeMode() const { return this->readBit(PREG_ACTIONTYPE,6,false); }
  bool offTimeMode(bool v) const { return this->writeBit(PREG_ACTIONTYPE,6,v); }
  bool onTimeMode() const { return this->readBit(PREG_ACTIONTYPE,7,false); }
  bool onTimeMode(bool v) const { return this->writeBit(PREG_ACTIONTYPE,7,v); }

  uint8_t jtOn () const { return this->readRegister(PREG_JTONOFF,0x0f,0,AS_CM_JT_OFFDELAY); }
    3074:	24 e0       	ldi	r18, 0x04	; 4
    3076:	40 e0       	ldi	r20, 0x00	; 0
    3078:	fb cf       	rjmp	.-10     	; 0x3070 <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0x78>
jtDlyOff():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:758
  bool jtOn (uint8_t v) const { return this->writeRegister(PREG_JTONOFF,0x0f,0,v); }
  uint8_t jtOff () const { return this->readRegister(PREG_JTONOFF,0x0f,4,AS_CM_JT_ONDELAY); }
  bool jtOff (uint8_t v) const { return this->writeRegister(PREG_JTONOFF,0x0f,4,v); }
  uint8_t jtDlyOn () const { return this->readRegister(PREG_JTDELAYONOFF,0x0f,0,AS_CM_JT_REFON); }
  bool jtDlyOn (uint8_t v) const { return this->writeRegister(PREG_JTDELAYONOFF,0x0f,0,v); }
  uint8_t jtDlyOff () const { return this->readRegister(PREG_JTDELAYONOFF,0x0f,4,AS_CM_JT_REFOFF); }
    307a:	25 e0       	ldi	r18, 0x05	; 5
    307c:	44 e0       	ldi	r20, 0x04	; 4
    307e:	6c e0       	ldi	r22, 0x0C	; 12
jtOff():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:754
  bool onTimeMode() const { return this->readBit(PREG_ACTIONTYPE,7,false); }
  bool onTimeMode(bool v) const { return this->writeBit(PREG_ACTIONTYPE,7,v); }

  uint8_t jtOn () const { return this->readRegister(PREG_JTONOFF,0x0f,0,AS_CM_JT_OFFDELAY); }
  bool jtOn (uint8_t v) const { return this->writeRegister(PREG_JTONOFF,0x0f,0,v); }
  uint8_t jtOff () const { return this->readRegister(PREG_JTONOFF,0x0f,4,AS_CM_JT_ONDELAY); }
    3080:	c8 01       	movw	r24, r16
    3082:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <as::RegisterList<as::SwitchReg3>::readRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.69]>
    3086:	f8 2e       	mov	r15, r24
jumpToTarget():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:181

  virtual void switchState(__attribute__((unused)) uint8_t oldstate,__attribute__((unused)) uint8_t newstate,__attribute__((unused)) uint32_t delay) {}

  void jumpToTarget(const SwitchPeerList& lst) {
    uint8_t next = getJumpTarget(state,lst);
    if( next != AS_CM_JT_NONE ) {
    3088:	88 23       	and	r24, r24
    308a:	f1 f2       	breq	.-68     	; 0x3048 <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0x50>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:183
      // get delay for the next state
      uint32_t dly = getDelayForState(next,lst);
    308c:	b8 01       	movw	r22, r16
    308e:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <as::SwitchStateMachine::getDelayForState(unsigned char, as::RegList3<as::SwitchReg3> const&) const [clone .isra.103]>
    3092:	4b 01       	movw	r8, r22
    3094:	5c 01       	movw	r10, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:185
      // on/off time mode / absolute / minimal
      if( next == state && (next == AS_CM_JT_ON || next == AS_CM_JT_OFF) && dly < DELAY_INFINITE) {
    3096:	f6 01       	movw	r30, r12
    3098:	80 85       	ldd	r24, Z+8	; 0x08
    309a:	8f 15       	cp	r24, r15
    309c:	39 f0       	breq	.+14     	; 0x30ac <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0xb4>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:198
            return;
          }
        }
      }
      // switch to next
      setState(next,dly,lst);
    309e:	a5 01       	movw	r20, r10
    30a0:	94 01       	movw	r18, r8
    30a2:	6f 2d       	mov	r22, r15
_ZN2as18SwitchStateMachine6remoteERKNS_8RegList3INS_10SwitchReg3EEEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:281
      break;
    case AS_CM_ACTIONTYPE_TOGGLE_TO_COUNTER:
      setState((counter & 0x01) == 0x01 ? AS_CM_JT_ON : AS_CM_JT_OFF, DELAY_INFINITE);
      break;
    case AS_CM_ACTIONTYPE_TOGGLE_INVERSE_TO_COUNTER:
      setState((counter & 0x01) == 0x00 ? AS_CM_JT_ON : AS_CM_JT_OFF, DELAY_INFINITE);
    30a4:	c6 01       	movw	r24, r12
    30a6:	0e 94 db 16 	call	0x2db6	; 0x2db6 <as::SwitchStateMachine::setState(unsigned char, unsigned long, as::RegList3<as::SwitchReg3> const&, unsigned char) [clone .constprop.68]>
    30aa:	ce cf       	rjmp	.-100    	; 0x3048 <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0x50>
jumpToTarget():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:185
    uint8_t next = getJumpTarget(state,lst);
    if( next != AS_CM_JT_NONE ) {
      // get delay for the next state
      uint32_t dly = getDelayForState(next,lst);
      // on/off time mode / absolute / minimal
      if( next == state && (next == AS_CM_JT_ON || next == AS_CM_JT_OFF) && dly < DELAY_INFINITE) {
    30ac:	f3 e0       	ldi	r31, 0x03	; 3
    30ae:	ff 16       	cp	r15, r31
    30b0:	61 f1       	breq	.+88     	; 0x310a <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0x112>
    30b2:	86 e0       	ldi	r24, 0x06	; 6
    30b4:	f8 12       	cpse	r15, r24
    30b6:	f3 cf       	rjmp	.-26     	; 0x309e <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0xa6>
    30b8:	ef ef       	ldi	r30, 0xFF	; 255
    30ba:	8e 16       	cp	r8, r30
    30bc:	9e 06       	cpc	r9, r30
    30be:	ae 06       	cpc	r10, r30
    30c0:	be 06       	cpc	r11, r30
    30c2:	69 f3       	breq	.-38     	; 0x309e <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0xa6>
readBit():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:242
      value = getByte(offset,mask<<shift,shift);
    }
    return value;
  }
  bool readBit (uint8_t reg,uint8_t bitnum,bool value=false) const {
    uint8_t offset = RegisterType::getOffset(reg);
    30c4:	8a e0       	ldi	r24, 0x0A	; 10
    30c6:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <as::SwitchReg3::getOffset(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:243
    if( offset != 0xff ) {
    30ca:	8f 3f       	cpi	r24, 0xFF	; 255
    30cc:	41 f3       	breq	.-48     	; 0x309e <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0xa6>
isBitSet():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:43
    tmp |= (data << shift) & mask;
    return setByte(offset, tmp);
  }

  bool isBitSet (uint8_t offset, uint8_t bit) const {
    return (storage().getByte(addr + offset) & bit) == bit;
    30ce:	f8 01       	movw	r30, r16
    30d0:	20 81       	ld	r18, Z
    30d2:	31 81       	ldd	r19, Z+1	; 0x01
    30d4:	82 0f       	add	r24, r18
    30d6:	93 2f       	mov	r25, r19
    30d8:	91 1d       	adc	r25, r1
    30da:	0e 94 bd 14 	call	0x297a	; 0x297a <as::InternalEprom::getByte(unsigned int) [clone .isra.4]>
    30de:	86 fb       	bst	r24, 6
    30e0:	88 27       	eor	r24, r24
    30e2:	80 f9       	bld	r24, 0
    30e4:	29 c0       	rjmp	.+82     	; 0x3138 <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0x140>
_ZN2as8BaseListC2Ej():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:18

class BaseList {
  uint16_t  addr;

public:
  BaseList (uint16_t a) : addr(a) {}
    30e6:	1a 82       	std	Y+2, r1	; 0x02
    30e8:	19 82       	std	Y+1, r1	; 0x01
_ZN2as18SwitchStateMachine6remoteERKNS_8RegList3INS_10SwitchReg3EEEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:278
    switch (lst.actionType()) {
    case AS_CM_ACTIONTYPE_JUMP_TO_TARGET:
      jumpToTarget(lst);
      break;
    case AS_CM_ACTIONTYPE_TOGGLE_TO_COUNTER:
      setState((counter & 0x01) == 0x01 ? AS_CM_JT_ON : AS_CM_JT_OFF, DELAY_INFINITE);
    30ea:	f0 fc       	sbrc	r15, 0
    30ec:	0c c0       	rjmp	.+24     	; 0x3106 <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0x10e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:281
      break;
    case AS_CM_ACTIONTYPE_TOGGLE_INVERSE_TO_COUNTER:
      setState((counter & 0x01) == 0x00 ? AS_CM_JT_ON : AS_CM_JT_OFF, DELAY_INFINITE);
    30ee:	66 e0       	ldi	r22, 0x06	; 6
    30f0:	8e 01       	movw	r16, r28
    30f2:	0f 5f       	subi	r16, 0xFF	; 255
    30f4:	1f 4f       	sbci	r17, 0xFF	; 255
    30f6:	2f ef       	ldi	r18, 0xFF	; 255
    30f8:	3f ef       	ldi	r19, 0xFF	; 255
    30fa:	a9 01       	movw	r20, r18
    30fc:	d3 cf       	rjmp	.-90     	; 0x30a4 <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0xac>
_ZN2as8BaseListC2Ej():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:18
    30fe:	1a 82       	std	Y+2, r1	; 0x02
    3100:	19 82       	std	Y+1, r1	; 0x01
_ZN2as18SwitchStateMachine6remoteERKNS_8RegList3INS_10SwitchReg3EEEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:281
    3102:	f0 fc       	sbrc	r15, 0
    3104:	f4 cf       	rjmp	.-24     	; 0x30ee <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0xf6>
    3106:	63 e0       	ldi	r22, 0x03	; 3
    3108:	f3 cf       	rjmp	.-26     	; 0x30f0 <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0xf8>
jumpToTarget():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:185
    uint8_t next = getJumpTarget(state,lst);
    if( next != AS_CM_JT_NONE ) {
      // get delay for the next state
      uint32_t dly = getDelayForState(next,lst);
      // on/off time mode / absolute / minimal
      if( next == state && (next == AS_CM_JT_ON || next == AS_CM_JT_OFF) && dly < DELAY_INFINITE) {
    310a:	ff ef       	ldi	r31, 0xFF	; 255
    310c:	8f 16       	cp	r8, r31
    310e:	9f 06       	cpc	r9, r31
    3110:	af 06       	cpc	r10, r31
    3112:	bf 06       	cpc	r11, r31
    3114:	21 f2       	breq	.-120    	; 0x309e <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0xa6>
readBit():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:242
      value = getByte(offset,mask<<shift,shift);
    }
    return value;
  }
  bool readBit (uint8_t reg,uint8_t bitnum,bool value=false) const {
    uint8_t offset = RegisterType::getOffset(reg);
    3116:	8a e0       	ldi	r24, 0x0A	; 10
    3118:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <as::SwitchReg3::getOffset(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:243
    if( offset != 0xff ) {
    311c:	8f 3f       	cpi	r24, 0xFF	; 255
    311e:	09 f4       	brne	.+2      	; 0x3122 <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0x12a>
    3120:	be cf       	rjmp	.-132    	; 0x309e <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0xa6>
isBitSet():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:43
    tmp |= (data << shift) & mask;
    return setByte(offset, tmp);
  }

  bool isBitSet (uint8_t offset, uint8_t bit) const {
    return (storage().getByte(addr + offset) & bit) == bit;
    3122:	f8 01       	movw	r30, r16
    3124:	20 81       	ld	r18, Z
    3126:	31 81       	ldd	r19, Z+1	; 0x01
    3128:	82 0f       	add	r24, r18
    312a:	93 2f       	mov	r25, r19
    312c:	91 1d       	adc	r25, r1
    312e:	0e 94 bd 14 	call	0x297a	; 0x297a <as::InternalEprom::getByte(unsigned int) [clone .isra.4]>
    3132:	88 1f       	adc	r24, r24
    3134:	88 27       	eor	r24, r24
    3136:	88 1f       	adc	r24, r24
jumpToTarget():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:188
        bool minimal = next == AS_CM_JT_ON ? lst.onTimeMode() : lst.offTimeMode();
        // if minimal is set - we jump out if the new delay is shorter
        if( minimal == true ) {
    3138:	88 23       	and	r24, r24
    313a:	09 f4       	brne	.+2      	; 0x313e <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0x146>
    313c:	b0 cf       	rjmp	.-160    	; 0x309e <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0xa6>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:190
          // DPRINT("Minimal");DDECLN(dly);
          uint32_t curdly = sysclock.get(*this); // 0 means DELAY_INFINITE
    313e:	c6 01       	movw	r24, r12
    3140:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <as::AlarmClock::get(as::Alarm const&) const [clone .constprop.127]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:191
          if( curdly == 0 || curdly > dly ) {
    3144:	61 15       	cp	r22, r1
    3146:	71 05       	cpc	r23, r1
    3148:	81 05       	cpc	r24, r1
    314a:	91 05       	cpc	r25, r1
    314c:	09 f4       	brne	.+2      	; 0x3150 <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0x158>
    314e:	7c cf       	rjmp	.-264    	; 0x3048 <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0x50>
    3150:	86 16       	cp	r8, r22
    3152:	97 06       	cpc	r9, r23
    3154:	a8 06       	cpc	r10, r24
    3156:	b9 06       	cpc	r11, r25
    3158:	08 f0       	brcs	.+2      	; 0x315c <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0x164>
    315a:	a1 cf       	rjmp	.-190    	; 0x309e <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0xa6>
    315c:	75 cf       	rjmp	.-278    	; 0x3048 <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)+0x50>

0000315e <as::SwitchStateMachine::trigger(as::AlarmClock&)>:
_ZN2as18SwitchStateMachine7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:133
  enum { CHANGED=0x04 };

#define DELAY_NO 0x00
#define DELAY_INFINITE 0xffffffff

  virtual void trigger (__attribute__((unused)) AlarmClock& clock) {
    315e:	ff 92       	push	r15
    3160:	0f 93       	push	r16
    3162:	1f 93       	push	r17
    3164:	cf 93       	push	r28
    3166:	df 93       	push	r29
    3168:	ec 01       	movw	r28, r24
    316a:	e8 85       	ldd	r30, Y+8	; 0x08
    316c:	e1 50       	subi	r30, 0x01	; 1
    316e:	f1 2c       	mov	r15, r1
    3170:	e6 30       	cpi	r30, 0x06	; 6
    3172:	20 f4       	brcc	.+8      	; 0x317c <as::SwitchStateMachine::trigger(as::AlarmClock&)+0x1e>
    3174:	f0 e0       	ldi	r31, 0x00	; 0
    3176:	ee 54       	subi	r30, 0x4E	; 78
    3178:	fe 4f       	sbci	r31, 0xFE	; 254
    317a:	f0 80       	ld	r15, Z
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:135
    uint8_t next = getNextState();
    uint32_t dly = getDelayForState(next,actlst);
    317c:	8e 01       	movw	r16, r28
    317e:	07 5f       	subi	r16, 0xF7	; 247
    3180:	1f 4f       	sbci	r17, 0xFF	; 255
    3182:	b8 01       	movw	r22, r16
    3184:	8f 2d       	mov	r24, r15
    3186:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <as::SwitchStateMachine::getDelayForState(unsigned char, as::RegList3<as::SwitchReg3> const&) const [clone .isra.103]>
    318a:	9b 01       	movw	r18, r22
    318c:	ac 01       	movw	r20, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:136
    setState(next,dly,actlst);
    318e:	6f 2d       	mov	r22, r15
    3190:	ce 01       	movw	r24, r28
    3192:	0e 94 db 16 	call	0x2db6	; 0x2db6 <as::SwitchStateMachine::setState(unsigned char, unsigned long, as::RegList3<as::SwitchReg3> const&, unsigned char) [clone .constprop.68]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:137
  }
    3196:	df 91       	pop	r29
    3198:	cf 91       	pop	r28
    319a:	1f 91       	pop	r17
    319c:	0f 91       	pop	r16
    319e:	ff 90       	pop	r15
    31a0:	08 95       	ret

000031a2 <as::RegisterList<UReg0>::readRegister(unsigned char, unsigned char) const>:
_ZNK2as12RegisterListI5UReg0E12readRegisterEhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:227
      return setBit(offset,0x01<<bitnum,value);
    }
    return false;
  }

  uint8_t readRegister (uint8_t reg,uint8_t value=0) const {
    31a2:	0f 93       	push	r16
    31a4:	1f 93       	push	r17
    31a6:	cf 93       	push	r28
    31a8:	8c 01       	movw	r16, r24
    31aa:	86 2f       	mov	r24, r22
    31ac:	c4 2f       	mov	r28, r20
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:228
    uint8_t offset = RegisterType::getOffset(reg);
    31ae:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <UReg0::getOffset(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:229
    if( offset != 0xff ) {
    31b2:	8f 3f       	cpi	r24, 0xFF	; 255
    31b4:	39 f0       	breq	.+14     	; 0x31c4 <as::RegisterList<UReg0>::readRegister(unsigned char, unsigned char) const+0x22>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:230
      value = getByte(offset);
    31b6:	68 2f       	mov	r22, r24
    31b8:	c8 01       	movw	r24, r16
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:233
    }
    return value;
  }
    31ba:	cf 91       	pop	r28
    31bc:	1f 91       	pop	r17
    31be:	0f 91       	pop	r16
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:230
  }

  uint8_t readRegister (uint8_t reg,uint8_t value=0) const {
    uint8_t offset = RegisterType::getOffset(reg);
    if( offset != 0xff ) {
      value = getByte(offset);
    31c0:	0c 94 01 15 	jmp	0x2a02	; 0x2a02 <as::BaseList::getByte(unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:233
    }
    return value;
  }
    31c4:	8c 2f       	mov	r24, r28
    31c6:	cf 91       	pop	r28
    31c8:	1f 91       	pop	r17
    31ca:	0f 91       	pop	r16
    31cc:	08 95       	ret

000031ce <as::RegList0<UReg0>::masterid() const>:
_ZNK2as8RegList0I5UReg0E8masteridEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:343
  bool burstRx (bool v) const { return this->writeRegister(DREG_BURSTRX,v); }
  bool burstRx () const { return this->readRegister(DREG_BURSTRX,false); }
  bool intKeyVisible (bool v) const { return this->writeBit(DREG_INTKEY,7,v); }
  bool intKeyVisible () const { return this->readBit(DREG_INTKEY,7,false); }

  HMID masterid () const { return HMID(
    31ce:	ef 92       	push	r14
    31d0:	ff 92       	push	r15
    31d2:	0f 93       	push	r16
    31d4:	1f 93       	push	r17
    31d6:	cf 93       	push	r28
    31d8:	df 93       	push	r29
    31da:	ec 01       	movw	r28, r24
    31dc:	8b 01       	movw	r16, r22
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:346
    this->readRegister(DREG_MASTER_ID1),
    this->readRegister(DREG_MASTER_ID2),
    this->readRegister(DREG_MASTER_ID3));
    31de:	40 e0       	ldi	r20, 0x00	; 0
    31e0:	6c e0       	ldi	r22, 0x0C	; 12
    31e2:	c8 01       	movw	r24, r16
    31e4:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <as::RegisterList<UReg0>::readRegister(unsigned char, unsigned char) const>
    31e8:	f8 2e       	mov	r15, r24
    31ea:	40 e0       	ldi	r20, 0x00	; 0
    31ec:	6b e0       	ldi	r22, 0x0B	; 11
    31ee:	c8 01       	movw	r24, r16
    31f0:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <as::RegisterList<UReg0>::readRegister(unsigned char, unsigned char) const>
    31f4:	e8 2e       	mov	r14, r24
    31f6:	40 e0       	ldi	r20, 0x00	; 0
    31f8:	6a e0       	ldi	r22, 0x0A	; 10
    31fa:	c8 01       	movw	r24, r16
    31fc:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <as::RegisterList<UReg0>::readRegister(unsigned char, unsigned char) const>
_ZN2as4HMIDC2Ehhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:21
public:
  HMID () {
    id[0]=id[1]=id[2]=0;
  }
  HMID (uint8_t i1, uint8_t i2, uint8_t i3) {
    id[0]=i1;
    3200:	88 83       	st	Y, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:22
    id[1]=i2;
    3202:	e9 82       	std	Y+1, r14	; 0x01
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:23
    id[2]=i3;
    3204:	fa 82       	std	Y+2, r15	; 0x02
_ZNK2as8RegList0I5UReg0E8masteridEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:347
  }
    3206:	ce 01       	movw	r24, r28
    3208:	df 91       	pop	r29
    320a:	cf 91       	pop	r28
    320c:	1f 91       	pop	r17
    320e:	0f 91       	pop	r16
    3210:	ff 90       	pop	r15
    3212:	ef 90       	pop	r14
    3214:	08 95       	ret

00003216 <UList0::Messintervall() const>:
_ZNK6UList013MessintervallEv():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:113
    }

    bool Messintervall (uint16_t value) const {
      return this->writeRegister(0x1f, (value >> 8) & 0xff) && this->writeRegister(0x20, value & 0xff);
    }
    uint16_t Messintervall () const {
    3216:	0f 93       	push	r16
    3218:	1f 93       	push	r17
    321a:	cf 93       	push	r28
    321c:	8c 01       	movw	r16, r24
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:114
      return (this->readRegister(0x1f, 0) << 8) + this->readRegister(0x20, 0);
    321e:	40 e0       	ldi	r20, 0x00	; 0
    3220:	6f e1       	ldi	r22, 0x1F	; 31
    3222:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <as::RegisterList<UReg0>::readRegister(unsigned char, unsigned char) const>
    3226:	c8 2f       	mov	r28, r24
    3228:	40 e0       	ldi	r20, 0x00	; 0
    322a:	60 e2       	ldi	r22, 0x20	; 32
    322c:	c8 01       	movw	r24, r16
    322e:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <as::RegisterList<UReg0>::readRegister(unsigned char, unsigned char) const>
    3232:	2c 2f       	mov	r18, r28
    3234:	30 e0       	ldi	r19, 0x00	; 0
    3236:	32 2f       	mov	r19, r18
    3238:	22 27       	eor	r18, r18
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:115
    }
    323a:	82 0f       	add	r24, r18
    323c:	93 2f       	mov	r25, r19
    323e:	91 1d       	adc	r25, r1
    3240:	cf 91       	pop	r28
    3242:	1f 91       	pop	r17
    3244:	0f 91       	pop	r16
    3246:	08 95       	ret

00003248 <as::BaseList::setByte(unsigned char, unsigned char, unsigned char, unsigned char) const>:
_ZNK2as8BaseList7setByteEhhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:36

  bool setByte (uint8_t offset, uint8_t data) const {
    return storage().setByte(addr + offset, data);
  }

  bool setByte (uint8_t offset, uint8_t data, uint8_t mask, uint8_t shift) const {
    3248:	ef 92       	push	r14
    324a:	ff 92       	push	r15
    324c:	0f 93       	push	r16
    324e:	1f 93       	push	r17
    3250:	cf 93       	push	r28
    3252:	df 93       	push	r29
    3254:	7c 01       	movw	r14, r24
    3256:	d6 2f       	mov	r29, r22
    3258:	c4 2f       	mov	r28, r20
    325a:	12 2f       	mov	r17, r18
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:37
    uint8_t tmp = getByte(offset) & ~mask;
    325c:	0e 94 01 15 	call	0x2a02	; 0x2a02 <as::BaseList::getByte(unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:38
    tmp |= (data << shift) & mask;
    3260:	2c 2f       	mov	r18, r28
    3262:	01 c0       	rjmp	.+2      	; 0x3266 <as::BaseList::setByte(unsigned char, unsigned char, unsigned char, unsigned char) const+0x1e>
    3264:	22 0f       	add	r18, r18
    3266:	0a 95       	dec	r16
    3268:	ea f7       	brpl	.-6      	; 0x3264 <as::BaseList::setByte(unsigned char, unsigned char, unsigned char, unsigned char) const+0x1c>
    326a:	68 2f       	mov	r22, r24
    326c:	62 27       	eor	r22, r18
    326e:	61 23       	and	r22, r17
    3270:	68 27       	eor	r22, r24
setByte():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:33
  uint8_t getByte (uint8_t offset, uint8_t mask, uint8_t shift) const {
    return (getByte(offset) & mask) >> shift;
  }

  bool setByte (uint8_t offset, uint8_t data) const {
    return storage().setByte(addr + offset, data);
    3272:	f7 01       	movw	r30, r14
    3274:	80 81       	ld	r24, Z
    3276:	91 81       	ldd	r25, Z+1	; 0x01
    3278:	8d 0f       	add	r24, r29
    327a:	91 1d       	adc	r25, r1
_ZNK2as8BaseList7setByteEhhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:40

  bool setByte (uint8_t offset, uint8_t data, uint8_t mask, uint8_t shift) const {
    uint8_t tmp = getByte(offset) & ~mask;
    tmp |= (data << shift) & mask;
    return setByte(offset, tmp);
  }
    327c:	df 91       	pop	r29
    327e:	cf 91       	pop	r28
    3280:	1f 91       	pop	r17
    3282:	0f 91       	pop	r16
    3284:	ff 90       	pop	r15
    3286:	ef 90       	pop	r14
setByte():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:33
  uint8_t getByte (uint8_t offset, uint8_t mask, uint8_t shift) const {
    return (getByte(offset) & mask) >> shift;
  }

  bool setByte (uint8_t offset, uint8_t data) const {
    return storage().setByte(addr + offset, data);
    3288:	0c 94 a5 13 	jmp	0x274a	; 0x274a <as::InternalEprom::setByte(unsigned int, unsigned char) [clone .isra.5]>

0000328c <as::RegisterList<as::SwitchReg3>::writeRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.31]>:
_ZNK2as12RegisterListINS_10SwitchReg3EE13writeRegisterEhhhh.constprop.31():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:212
    if( offset != 0xff ) {
      return setByte(offset,value);
    }
    return false;
  }
  bool writeRegister (uint8_t reg, uint8_t mask,uint8_t shift,uint8_t value) const {
    328c:	0f 93       	push	r16
    328e:	1f 93       	push	r17
    3290:	cf 93       	push	r28
    3292:	df 93       	push	r29
    3294:	ec 01       	movw	r28, r24
    3296:	86 2f       	mov	r24, r22
    3298:	04 2f       	mov	r16, r20
    329a:	12 2f       	mov	r17, r18
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:213
    uint8_t offset = RegisterType::getOffset(reg);
    329c:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <as::SwitchReg3::getOffset(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:214
    if( offset != 0xff ) {
    32a0:	8f 3f       	cpi	r24, 0xFF	; 255
    32a2:	89 f0       	breq	.+34     	; 0x32c6 <as::RegisterList<as::SwitchReg3>::writeRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.31]+0x3a>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:215
      return setByte(offset,value,mask<<shift,shift);
    32a4:	2f e0       	ldi	r18, 0x0F	; 15
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	00 2e       	mov	r0, r16
    32aa:	01 c0       	rjmp	.+2      	; 0x32ae <as::RegisterList<as::SwitchReg3>::writeRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.31]+0x22>
    32ac:	22 0f       	add	r18, r18
    32ae:	0a 94       	dec	r0
    32b0:	ea f7       	brpl	.-6      	; 0x32ac <as::RegisterList<as::SwitchReg3>::writeRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.31]+0x20>
    32b2:	41 2f       	mov	r20, r17
    32b4:	68 2f       	mov	r22, r24
    32b6:	ce 01       	movw	r24, r28
    32b8:	0e 94 24 19 	call	0x3248	; 0x3248 <as::BaseList::setByte(unsigned char, unsigned char, unsigned char, unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:218
    }
    return false;
  }
    32bc:	df 91       	pop	r29
    32be:	cf 91       	pop	r28
    32c0:	1f 91       	pop	r17
    32c2:	0f 91       	pop	r16
    32c4:	08 95       	ret
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:217
  bool writeRegister (uint8_t reg, uint8_t mask,uint8_t shift,uint8_t value) const {
    uint8_t offset = RegisterType::getOffset(reg);
    if( offset != 0xff ) {
      return setByte(offset,value,mask<<shift,shift);
    }
    return false;
    32c6:	80 e0       	ldi	r24, 0x00	; 0
    32c8:	f9 cf       	rjmp	.-14     	; 0x32bc <as::RegisterList<as::SwitchReg3>::writeRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.31]+0x30>

000032ca <as::RegList3<as::SwitchReg3>::jtDlyOff(unsigned char) const>:
_ZNK2as8RegList3INS_10SwitchReg3EE8jtDlyOffEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:759
  uint8_t jtOff () const { return this->readRegister(PREG_JTONOFF,0x0f,4,AS_CM_JT_ONDELAY); }
  bool jtOff (uint8_t v) const { return this->writeRegister(PREG_JTONOFF,0x0f,4,v); }
  uint8_t jtDlyOn () const { return this->readRegister(PREG_JTDELAYONOFF,0x0f,0,AS_CM_JT_REFON); }
  bool jtDlyOn (uint8_t v) const { return this->writeRegister(PREG_JTDELAYONOFF,0x0f,0,v); }
  uint8_t jtDlyOff () const { return this->readRegister(PREG_JTDELAYONOFF,0x0f,4,AS_CM_JT_REFOFF); }
  bool jtDlyOff (uint8_t v) const { return this->writeRegister(PREG_JTDELAYONOFF,0x0f,4,v); }
    32ca:	26 2f       	mov	r18, r22
    32cc:	44 e0       	ldi	r20, 0x04	; 4
    32ce:	6c e0       	ldi	r22, 0x0C	; 12
    32d0:	0c 94 46 19 	jmp	0x328c	; 0x328c <as::RegisterList<as::SwitchReg3>::writeRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.31]>

000032d4 <as::RegList3<as::SwitchReg3>::jtDlyOn(unsigned char) const>:
_ZNK2as8RegList3INS_10SwitchReg3EE7jtDlyOnEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:757
  uint8_t jtOn () const { return this->readRegister(PREG_JTONOFF,0x0f,0,AS_CM_JT_OFFDELAY); }
  bool jtOn (uint8_t v) const { return this->writeRegister(PREG_JTONOFF,0x0f,0,v); }
  uint8_t jtOff () const { return this->readRegister(PREG_JTONOFF,0x0f,4,AS_CM_JT_ONDELAY); }
  bool jtOff (uint8_t v) const { return this->writeRegister(PREG_JTONOFF,0x0f,4,v); }
  uint8_t jtDlyOn () const { return this->readRegister(PREG_JTDELAYONOFF,0x0f,0,AS_CM_JT_REFON); }
  bool jtDlyOn (uint8_t v) const { return this->writeRegister(PREG_JTDELAYONOFF,0x0f,0,v); }
    32d4:	26 2f       	mov	r18, r22
    32d6:	40 e0       	ldi	r20, 0x00	; 0
    32d8:	6c e0       	ldi	r22, 0x0C	; 12
    32da:	0c 94 46 19 	jmp	0x328c	; 0x328c <as::RegisterList<as::SwitchReg3>::writeRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.31]>

000032de <as::RegList3<as::SwitchReg3>::jtOff(unsigned char) const>:
_ZNK2as8RegList3INS_10SwitchReg3EE5jtOffEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:755
  bool onTimeMode(bool v) const { return this->writeBit(PREG_ACTIONTYPE,7,v); }

  uint8_t jtOn () const { return this->readRegister(PREG_JTONOFF,0x0f,0,AS_CM_JT_OFFDELAY); }
  bool jtOn (uint8_t v) const { return this->writeRegister(PREG_JTONOFF,0x0f,0,v); }
  uint8_t jtOff () const { return this->readRegister(PREG_JTONOFF,0x0f,4,AS_CM_JT_ONDELAY); }
  bool jtOff (uint8_t v) const { return this->writeRegister(PREG_JTONOFF,0x0f,4,v); }
    32de:	26 2f       	mov	r18, r22
    32e0:	44 e0       	ldi	r20, 0x04	; 4
    32e2:	6b e0       	ldi	r22, 0x0B	; 11
    32e4:	0c 94 46 19 	jmp	0x328c	; 0x328c <as::RegisterList<as::SwitchReg3>::writeRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.31]>

000032e8 <as::RegList3<as::SwitchReg3>::jtOn(unsigned char) const>:
_ZNK2as8RegList3INS_10SwitchReg3EE4jtOnEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:753
  bool offTimeMode(bool v) const { return this->writeBit(PREG_ACTIONTYPE,6,v); }
  bool onTimeMode() const { return this->readBit(PREG_ACTIONTYPE,7,false); }
  bool onTimeMode(bool v) const { return this->writeBit(PREG_ACTIONTYPE,7,v); }

  uint8_t jtOn () const { return this->readRegister(PREG_JTONOFF,0x0f,0,AS_CM_JT_OFFDELAY); }
  bool jtOn (uint8_t v) const { return this->writeRegister(PREG_JTONOFF,0x0f,0,v); }
    32e8:	26 2f       	mov	r18, r22
    32ea:	40 e0       	ldi	r20, 0x00	; 0
    32ec:	6b e0       	ldi	r22, 0x0B	; 11
    32ee:	0c 94 46 19 	jmp	0x328c	; 0x328c <as::RegisterList<as::SwitchReg3>::writeRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.31]>

000032f2 <as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >::defaults()>:
_ZN2as15SwitchList3TmplINS_8RegList3INS_10SwitchReg3EEEE8defaultsEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:41

template <class PeerRegisterListType>
class SwitchList3Tmpl : public ShortLongList<PeerRegisterListType> {
public:
  SwitchList3Tmpl (uint16_t addr) : ShortLongList<PeerRegisterListType>(addr) {}
  void defaults() {
    32f2:	0f 93       	push	r16
    32f4:	1f 93       	push	r17
    32f6:	cf 93       	push	r28
    32f8:	df 93       	push	r29
    32fa:	00 d0       	rcall	.+0      	; 0x32fc <as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >::defaults()+0xa>
    32fc:	cd b7       	in	r28, 0x3d	; 61
    32fe:	de b7       	in	r29, 0x3e	; 62
    3300:	8c 01       	movw	r16, r24
_ZNK2as8BaseList7addressEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:20
  uint16_t  addr;

public:
  BaseList (uint16_t a) : addr(a) {}

  uint16_t address () const { return addr; }
    3302:	fc 01       	movw	r30, r24
    3304:	80 81       	ld	r24, Z
    3306:	91 81       	ldd	r25, Z+1	; 0x01
_ZN2as15SwitchList3TmplINS_8RegList3INS_10SwitchReg3EEEE8defaultsEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:42
    PeerRegisterListType ssl = this->sh();
    3308:	9a 83       	std	Y+2, r25	; 0x02
    330a:	89 83       	std	Y+1, r24	; 0x01
clear():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:62
  bool getData (uint8_t offset,uint8_t* buf,uint16_t size) const {
    return storage().getData(addr + offset,buf,size);
  }

  void clear (uint8_t offset,uint16_t size) {
    storage().clearData(addr + offset,size);
    330c:	6b e0       	ldi	r22, 0x0B	; 11
    330e:	70 e0       	ldi	r23, 0x00	; 0
    3310:	0e 94 cb 13 	call	0x2796	; 0x2796 <as::StorageWrapper<as::InternalEprom>::clearData(unsigned int, unsigned int) [clone .isra.82]>
ctValLo():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:731
  bool ctRepOn (uint8_t v) const { return this->writeRegister(PREG_CTREPONOFF,0x0f,0,v); }
  uint8_t ctRepOff () const { return this->readRegister(PREG_CTREPONOFF,0x0f,4); }
  bool ctRepOff (uint8_t v) const { return this->writeRegister(PREG_CTREPONOFF,0x0f,4,v); }

  uint8_t ctValLo() const { return this->readRegister(PREG_CONDVALUELOW,0x32); }
  bool ctValLo(uint8_t v) const { return this->writeRegister(PREG_CONDVALUELOW,v); }
    3314:	42 e3       	ldi	r20, 0x32	; 50
    3316:	64 e0       	ldi	r22, 0x04	; 4
    3318:	ce 01       	movw	r24, r28
    331a:	01 96       	adiw	r24, 0x01	; 1
    331c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <as::RegisterList<as::SwitchReg3>::writeRegister(unsigned char, unsigned char) const>
ctValHi():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:733
  uint8_t ctValHi() const { return this->readRegister(PREG_CONDVALUEHIGH,0x64); }
  bool ctValHi(uint8_t v) const { return this->writeRegister(PREG_CONDVALUEHIGH,v); }
    3320:	44 e6       	ldi	r20, 0x64	; 100
    3322:	65 e0       	ldi	r22, 0x05	; 5
    3324:	ce 01       	movw	r24, r28
    3326:	01 96       	adiw	r24, 0x01	; 1
    3328:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <as::RegisterList<as::SwitchReg3>::writeRegister(unsigned char, unsigned char) const>
onTime():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:737
  uint8_t onDly() const { return this->readRegister(PREG_ONDELAYTIME,0x00); }
  bool onDly(uint8_t v) const { return this->writeRegister(PREG_ONDELAYTIME,v); }
  uint8_t onTime() const { return this->readRegister(PREG_ONTIME,0xff); }
  bool onTime(uint8_t v) const { return this->writeRegister(PREG_ONTIME,v); }
    332c:	4f ef       	ldi	r20, 0xFF	; 255
    332e:	67 e0       	ldi	r22, 0x07	; 7
    3330:	ce 01       	movw	r24, r28
    3332:	01 96       	adiw	r24, 0x01	; 1
    3334:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <as::RegisterList<as::SwitchReg3>::writeRegister(unsigned char, unsigned char) const>
offTime():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:741
  uint8_t offDly() const { return this->readRegister(PREG_OFFDELAYTIME,0x00); }
  bool offDly(uint8_t v) const { return this->writeRegister(PREG_OFFDELAYTIME,v); }
  uint8_t offTime() const { return this->readRegister(PREG_OFFTIME,0xff); }
  bool offTime(uint8_t v) const { return this->writeRegister(PREG_OFFTIME,v); }
    3338:	4f ef       	ldi	r20, 0xFF	; 255
    333a:	69 e0       	ldi	r22, 0x09	; 9
    333c:	ce 01       	movw	r24, r28
    333e:	01 96       	adiw	r24, 0x01	; 1
    3340:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <as::RegisterList<as::SwitchReg3>::writeRegister(unsigned char, unsigned char) const>
actionType():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:744

  uint8_t actionType() const { return this->readRegister(PREG_ACTIONTYPE,0x0f,0); }
  bool actionType(uint8_t v) const { return this->writeRegister(PREG_ACTIONTYPE,0x0f,0,v); }
    3344:	21 e0       	ldi	r18, 0x01	; 1
    3346:	40 e0       	ldi	r20, 0x00	; 0
    3348:	6a e0       	ldi	r22, 0x0A	; 10
    334a:	ce 01       	movw	r24, r28
    334c:	01 96       	adiw	r24, 0x01	; 1
    334e:	0e 94 46 19 	call	0x328c	; 0x328c <as::RegisterList<as::SwitchReg3>::writeRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.31]>
_ZNK2as13ShortLongListINS_8RegList3INS_10SwitchReg3EEEE2lgEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:869
public:
  typedef PeerListType PeerList;
  ShortLongList(uint16_t a) : BaseList(a) {}

  const PeerList sh () const { return PeerList(this->address()); }
  const PeerList lg () const { return PeerList(this->address() + PeerList::size() ); }
    3352:	f8 01       	movw	r30, r16
    3354:	80 81       	ld	r24, Z
    3356:	91 81       	ldd	r25, Z+1	; 0x01
    3358:	0b 96       	adiw	r24, 0x0b	; 11
_ZN2as15SwitchList3TmplINS_8RegList3INS_10SwitchReg3EEEE8defaultsEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:58
    ssl.offTime(0xff);
    ssl.actionType(AS_CM_ACTIONTYPE_JUMP_TO_TARGET);
//    ssl.offTimeMode(false);
//    ssl.onTimeMode(false);

    ssl = this->lg();
    335a:	9a 83       	std	Y+2, r25	; 0x02
    335c:	89 83       	std	Y+1, r24	; 0x01
clear():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:62
    335e:	6b e0       	ldi	r22, 0x0B	; 11
    3360:	70 e0       	ldi	r23, 0x00	; 0
    3362:	0e 94 cb 13 	call	0x2796	; 0x2796 <as::StorageWrapper<as::InternalEprom>::clearData(unsigned int, unsigned int) [clone .isra.82]>
ctValLo():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:731
  bool ctRepOn (uint8_t v) const { return this->writeRegister(PREG_CTREPONOFF,0x0f,0,v); }
  uint8_t ctRepOff () const { return this->readRegister(PREG_CTREPONOFF,0x0f,4); }
  bool ctRepOff (uint8_t v) const { return this->writeRegister(PREG_CTREPONOFF,0x0f,4,v); }

  uint8_t ctValLo() const { return this->readRegister(PREG_CONDVALUELOW,0x32); }
  bool ctValLo(uint8_t v) const { return this->writeRegister(PREG_CONDVALUELOW,v); }
    3366:	42 e3       	ldi	r20, 0x32	; 50
    3368:	64 e0       	ldi	r22, 0x04	; 4
    336a:	ce 01       	movw	r24, r28
    336c:	01 96       	adiw	r24, 0x01	; 1
    336e:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <as::RegisterList<as::SwitchReg3>::writeRegister(unsigned char, unsigned char) const>
ctValHi():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:733
  uint8_t ctValHi() const { return this->readRegister(PREG_CONDVALUEHIGH,0x64); }
  bool ctValHi(uint8_t v) const { return this->writeRegister(PREG_CONDVALUEHIGH,v); }
    3372:	44 e6       	ldi	r20, 0x64	; 100
    3374:	65 e0       	ldi	r22, 0x05	; 5
    3376:	ce 01       	movw	r24, r28
    3378:	01 96       	adiw	r24, 0x01	; 1
    337a:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <as::RegisterList<as::SwitchReg3>::writeRegister(unsigned char, unsigned char) const>
onTime():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:737
  uint8_t onDly() const { return this->readRegister(PREG_ONDELAYTIME,0x00); }
  bool onDly(uint8_t v) const { return this->writeRegister(PREG_ONDELAYTIME,v); }
  uint8_t onTime() const { return this->readRegister(PREG_ONTIME,0xff); }
  bool onTime(uint8_t v) const { return this->writeRegister(PREG_ONTIME,v); }
    337e:	4f ef       	ldi	r20, 0xFF	; 255
    3380:	67 e0       	ldi	r22, 0x07	; 7
    3382:	ce 01       	movw	r24, r28
    3384:	01 96       	adiw	r24, 0x01	; 1
    3386:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <as::RegisterList<as::SwitchReg3>::writeRegister(unsigned char, unsigned char) const>
offTime():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:741
  uint8_t offDly() const { return this->readRegister(PREG_OFFDELAYTIME,0x00); }
  bool offDly(uint8_t v) const { return this->writeRegister(PREG_OFFDELAYTIME,v); }
  uint8_t offTime() const { return this->readRegister(PREG_OFFTIME,0xff); }
  bool offTime(uint8_t v) const { return this->writeRegister(PREG_OFFTIME,v); }
    338a:	4f ef       	ldi	r20, 0xFF	; 255
    338c:	69 e0       	ldi	r22, 0x09	; 9
    338e:	ce 01       	movw	r24, r28
    3390:	01 96       	adiw	r24, 0x01	; 1
    3392:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <as::RegisterList<as::SwitchReg3>::writeRegister(unsigned char, unsigned char) const>
actionType():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:744

  uint8_t actionType() const { return this->readRegister(PREG_ACTIONTYPE,0x0f,0); }
  bool actionType(uint8_t v) const { return this->writeRegister(PREG_ACTIONTYPE,0x0f,0,v); }
    3396:	21 e0       	ldi	r18, 0x01	; 1
    3398:	40 e0       	ldi	r20, 0x00	; 0
    339a:	6a e0       	ldi	r22, 0x0A	; 10
    339c:	ce 01       	movw	r24, r28
    339e:	01 96       	adiw	r24, 0x01	; 1
    33a0:	0e 94 46 19 	call	0x328c	; 0x328c <as::RegisterList<as::SwitchReg3>::writeRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.31]>
writeBit():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:220
      return setByte(offset,value,mask<<shift,shift);
    }
    return false;
  }
  bool writeBit (uint8_t reg,uint8_t bitnum,bool value) const {
    uint8_t offset = RegisterType::getOffset(reg);
    33a4:	8a e0       	ldi	r24, 0x0A	; 10
    33a6:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <as::SwitchReg3::getOffset(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:221
    if( offset != 0xff ) {
    33aa:	8f 3f       	cpi	r24, 0xFF	; 255
    33ac:	61 f0       	breq	.+24     	; 0x33c6 <as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >::defaults()+0xd4>
setBit():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:48
    return (storage().getByte(addr + offset) & bit) == bit;
  }

  bool setBit (uint8_t offset, uint8_t bit, bool value) const {
    if( value == true ) {
      return storage().setBits(addr + offset, bit);
    33ae:	09 81       	ldd	r16, Y+1	; 0x01
    33b0:	1a 81       	ldd	r17, Y+2	; 0x02
    33b2:	08 0f       	add	r16, r24
    33b4:	11 1d       	adc	r17, r1
_ZN2as14StorageWrapperINS_13InternalEpromEE7setBitsEjh.isra.85():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:491
    }
    return firststart;
  }

  bool setBits (uint16_t addr, uint8_t bits) {
    DRIVER::setByte(addr,DRIVER::getByte(addr) | bits);
    33b6:	c8 01       	movw	r24, r16
    33b8:	0e 94 bd 14 	call	0x297a	; 0x297a <as::InternalEprom::getByte(unsigned int) [clone .isra.4]>
    33bc:	68 2f       	mov	r22, r24
    33be:	60 62       	ori	r22, 0x20	; 32
    33c0:	c8 01       	movw	r24, r16
    33c2:	0e 94 a5 13 	call	0x274a	; 0x274a <as::InternalEprom::setByte(unsigned int, unsigned char) [clone .isra.5]>
_ZN2as15SwitchList3TmplINS_8RegList3INS_10SwitchReg3EEEE8defaultsEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:74
    ssl.offTime(0xff);
    ssl.actionType(AS_CM_ACTIONTYPE_JUMP_TO_TARGET);
    ssl.multiExec(true);
//    ssl.offTimeMode(false);
//    ssl.onTimeMode(false);
  }
    33c6:	0f 90       	pop	r0
    33c8:	0f 90       	pop	r0
    33ca:	df 91       	pop	r29
    33cc:	cf 91       	pop	r28
    33ce:	1f 91       	pop	r17
    33d0:	0f 91       	pop	r16
    33d2:	08 95       	ret

000033d4 <as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >::even()>:
_ZN2as15SwitchList3TmplINS_8RegList3INS_10SwitchReg3EEEE4evenEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:90
    ssl.jtOff(AS_CM_JT_OFF);
    ssl.jtDlyOn(AS_CM_JT_OFF);
    ssl.jtDlyOff(AS_CM_JT_OFF);
  }

  void even() {
    33d4:	0f 93       	push	r16
    33d6:	1f 93       	push	r17
    33d8:	cf 93       	push	r28
    33da:	df 93       	push	r29
    33dc:	00 d0       	rcall	.+0      	; 0x33de <as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >::even()+0xa>
    33de:	cd b7       	in	r28, 0x3d	; 61
    33e0:	de b7       	in	r29, 0x3e	; 62
    33e2:	8c 01       	movw	r16, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:91
    defaults();
    33e4:	0e 94 79 19 	call	0x32f2	; 0x32f2 <as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >::defaults()>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:92
    PeerRegisterListType ssl = this->sh();
    33e8:	f8 01       	movw	r30, r16
    33ea:	80 81       	ld	r24, Z
    33ec:	91 81       	ldd	r25, Z+1	; 0x01
    33ee:	9a 83       	std	Y+2, r25	; 0x02
    33f0:	89 83       	std	Y+1, r24	; 0x01
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:93
    ssl.jtOn(AS_CM_JT_ON);
    33f2:	63 e0       	ldi	r22, 0x03	; 3
    33f4:	ce 01       	movw	r24, r28
    33f6:	01 96       	adiw	r24, 0x01	; 1
    33f8:	0e 94 74 19 	call	0x32e8	; 0x32e8 <as::RegList3<as::SwitchReg3>::jtOn(unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:94
    ssl.jtOff(AS_CM_JT_ONDELAY);
    33fc:	61 e0       	ldi	r22, 0x01	; 1
    33fe:	ce 01       	movw	r24, r28
    3400:	01 96       	adiw	r24, 0x01	; 1
    3402:	0e 94 6f 19 	call	0x32de	; 0x32de <as::RegList3<as::SwitchReg3>::jtOff(unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:95
    ssl.jtDlyOn(AS_CM_JT_ON);
    3406:	63 e0       	ldi	r22, 0x03	; 3
    3408:	ce 01       	movw	r24, r28
    340a:	01 96       	adiw	r24, 0x01	; 1
    340c:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <as::RegList3<as::SwitchReg3>::jtDlyOn(unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:96
    ssl.jtDlyOff(AS_CM_JT_ON);
    3410:	63 e0       	ldi	r22, 0x03	; 3
    3412:	ce 01       	movw	r24, r28
    3414:	01 96       	adiw	r24, 0x01	; 1
    3416:	0e 94 65 19 	call	0x32ca	; 0x32ca <as::RegList3<as::SwitchReg3>::jtDlyOff(unsigned char) const>
_ZNK2as13ShortLongListINS_8RegList3INS_10SwitchReg3EEEE2lgEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:869
public:
  typedef PeerListType PeerList;
  ShortLongList(uint16_t a) : BaseList(a) {}

  const PeerList sh () const { return PeerList(this->address()); }
  const PeerList lg () const { return PeerList(this->address() + PeerList::size() ); }
    341a:	f8 01       	movw	r30, r16
    341c:	80 81       	ld	r24, Z
    341e:	91 81       	ldd	r25, Z+1	; 0x01
    3420:	0b 96       	adiw	r24, 0x0b	; 11
_ZN2as15SwitchList3TmplINS_8RegList3INS_10SwitchReg3EEEE4evenEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:97
    ssl = this->lg();
    3422:	9a 83       	std	Y+2, r25	; 0x02
    3424:	89 83       	std	Y+1, r24	; 0x01
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:98
    ssl.jtOn(AS_CM_JT_ON);
    3426:	63 e0       	ldi	r22, 0x03	; 3
    3428:	ce 01       	movw	r24, r28
    342a:	01 96       	adiw	r24, 0x01	; 1
    342c:	0e 94 74 19 	call	0x32e8	; 0x32e8 <as::RegList3<as::SwitchReg3>::jtOn(unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:99
    ssl.jtOff(AS_CM_JT_ONDELAY);
    3430:	61 e0       	ldi	r22, 0x01	; 1
    3432:	ce 01       	movw	r24, r28
    3434:	01 96       	adiw	r24, 0x01	; 1
    3436:	0e 94 6f 19 	call	0x32de	; 0x32de <as::RegList3<as::SwitchReg3>::jtOff(unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:100
    ssl.jtDlyOn(AS_CM_JT_ON);
    343a:	63 e0       	ldi	r22, 0x03	; 3
    343c:	ce 01       	movw	r24, r28
    343e:	01 96       	adiw	r24, 0x01	; 1
    3440:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <as::RegList3<as::SwitchReg3>::jtDlyOn(unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:101
    ssl.jtDlyOff(AS_CM_JT_ON);
    3444:	63 e0       	ldi	r22, 0x03	; 3
    3446:	ce 01       	movw	r24, r28
    3448:	01 96       	adiw	r24, 0x01	; 1
    344a:	0e 94 65 19 	call	0x32ca	; 0x32ca <as::RegList3<as::SwitchReg3>::jtDlyOff(unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:102
  }
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	df 91       	pop	r29
    3454:	cf 91       	pop	r28
    3456:	1f 91       	pop	r17
    3458:	0f 91       	pop	r16
    345a:	08 95       	ret

0000345c <as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >::odd()>:
_ZN2as15SwitchList3TmplINS_8RegList3INS_10SwitchReg3EEEE3oddEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:76
    ssl.multiExec(true);
//    ssl.offTimeMode(false);
//    ssl.onTimeMode(false);
  }

  void odd() {
    345c:	0f 93       	push	r16
    345e:	1f 93       	push	r17
    3460:	cf 93       	push	r28
    3462:	df 93       	push	r29
    3464:	00 d0       	rcall	.+0      	; 0x3466 <as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >::odd()+0xa>
    3466:	cd b7       	in	r28, 0x3d	; 61
    3468:	de b7       	in	r29, 0x3e	; 62
    346a:	8c 01       	movw	r16, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:77
    defaults();
    346c:	0e 94 79 19 	call	0x32f2	; 0x32f2 <as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >::defaults()>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:78
    PeerRegisterListType ssl = this->sh();
    3470:	f8 01       	movw	r30, r16
    3472:	80 81       	ld	r24, Z
    3474:	91 81       	ldd	r25, Z+1	; 0x01
    3476:	9a 83       	std	Y+2, r25	; 0x02
    3478:	89 83       	std	Y+1, r24	; 0x01
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:79
    ssl.jtOn(AS_CM_JT_OFFDELAY);
    347a:	64 e0       	ldi	r22, 0x04	; 4
    347c:	ce 01       	movw	r24, r28
    347e:	01 96       	adiw	r24, 0x01	; 1
    3480:	0e 94 74 19 	call	0x32e8	; 0x32e8 <as::RegList3<as::SwitchReg3>::jtOn(unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:80
    ssl.jtOff(AS_CM_JT_OFF);
    3484:	66 e0       	ldi	r22, 0x06	; 6
    3486:	ce 01       	movw	r24, r28
    3488:	01 96       	adiw	r24, 0x01	; 1
    348a:	0e 94 6f 19 	call	0x32de	; 0x32de <as::RegList3<as::SwitchReg3>::jtOff(unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:81
    ssl.jtDlyOn(AS_CM_JT_OFF);
    348e:	66 e0       	ldi	r22, 0x06	; 6
    3490:	ce 01       	movw	r24, r28
    3492:	01 96       	adiw	r24, 0x01	; 1
    3494:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <as::RegList3<as::SwitchReg3>::jtDlyOn(unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:82
    ssl.jtDlyOff(AS_CM_JT_OFF);
    3498:	66 e0       	ldi	r22, 0x06	; 6
    349a:	ce 01       	movw	r24, r28
    349c:	01 96       	adiw	r24, 0x01	; 1
    349e:	0e 94 65 19 	call	0x32ca	; 0x32ca <as::RegList3<as::SwitchReg3>::jtDlyOff(unsigned char) const>
_ZNK2as13ShortLongListINS_8RegList3INS_10SwitchReg3EEEE2lgEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:869
    34a2:	f8 01       	movw	r30, r16
    34a4:	80 81       	ld	r24, Z
    34a6:	91 81       	ldd	r25, Z+1	; 0x01
    34a8:	0b 96       	adiw	r24, 0x0b	; 11
_ZN2as15SwitchList3TmplINS_8RegList3INS_10SwitchReg3EEEE3oddEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:83
    ssl = this->lg();
    34aa:	9a 83       	std	Y+2, r25	; 0x02
    34ac:	89 83       	std	Y+1, r24	; 0x01
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:84
    ssl.jtOn(AS_CM_JT_OFFDELAY);
    34ae:	64 e0       	ldi	r22, 0x04	; 4
    34b0:	ce 01       	movw	r24, r28
    34b2:	01 96       	adiw	r24, 0x01	; 1
    34b4:	0e 94 74 19 	call	0x32e8	; 0x32e8 <as::RegList3<as::SwitchReg3>::jtOn(unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:85
    ssl.jtOff(AS_CM_JT_OFF);
    34b8:	66 e0       	ldi	r22, 0x06	; 6
    34ba:	ce 01       	movw	r24, r28
    34bc:	01 96       	adiw	r24, 0x01	; 1
    34be:	0e 94 6f 19 	call	0x32de	; 0x32de <as::RegList3<as::SwitchReg3>::jtOff(unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:86
    ssl.jtDlyOn(AS_CM_JT_OFF);
    34c2:	66 e0       	ldi	r22, 0x06	; 6
    34c4:	ce 01       	movw	r24, r28
    34c6:	01 96       	adiw	r24, 0x01	; 1
    34c8:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <as::RegList3<as::SwitchReg3>::jtDlyOn(unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:87
    ssl.jtDlyOff(AS_CM_JT_OFF);
    34cc:	66 e0       	ldi	r22, 0x06	; 6
    34ce:	ce 01       	movw	r24, r28
    34d0:	01 96       	adiw	r24, 0x01	; 1
    34d2:	0e 94 65 19 	call	0x32ca	; 0x32ca <as::RegList3<as::SwitchReg3>::jtDlyOff(unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:88
  }
    34d6:	0f 90       	pop	r0
    34d8:	0f 90       	pop	r0
    34da:	df 91       	pop	r29
    34dc:	cf 91       	pop	r28
    34de:	1f 91       	pop	r17
    34e0:	0f 91       	pop	r16
    34e2:	08 95       	ret

000034e4 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::firstinit()>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E9firstinitEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:430
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
  virtual bool peer (const Peer& p) { return ch.peer(p); }
  virtual bool peer (const Peer& p1,const Peer& p2) { return ch.peer(p1,p2); }
  virtual bool deletepeer (const Peer& p) { return ch.deletepeer(p); }
  virtual void firstinit () { ch.firstinit(); }
    34e4:	0f 93       	push	r16
    34e6:	1f 93       	push	r17
    34e8:	cf 93       	push	r28
    34ea:	df 93       	push	r29
    34ec:	00 d0       	rcall	.+0      	; 0x34ee <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::firstinit()+0xa>
    34ee:	cd b7       	in	r28, 0x3d	; 61
    34f0:	de b7       	in	r29, 0x3e	; 62
    34f2:	8c 01       	movw	r16, r24
firstinit():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:165
    }
    return true;
  }

  void firstinit () {
    storage().clearData(address(),size());
    34f4:	68 e0       	ldi	r22, 0x08	; 8
    34f6:	71 e0       	ldi	r23, 0x01	; 1
    34f8:	fc 01       	movw	r30, r24
    34fa:	81 89       	ldd	r24, Z+17	; 0x11
    34fc:	92 89       	ldd	r25, Z+18	; 0x12
    34fe:	0e 94 cb 13 	call	0x2796	; 0x2796 <as::StorageWrapper<as::InternalEprom>::clearData(unsigned int, unsigned int) [clone .isra.82]>
    3502:	f8 01       	movw	r30, r16
    3504:	81 89       	ldd	r24, Z+17	; 0x11
    3506:	92 89       	ldd	r25, Z+18	; 0x12
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:166
    List1Type cl1 = getList1();
    3508:	9a 83       	std	Y+2, r25	; 0x02
    350a:	89 83       	std	Y+1, r24	; 0x01
clear():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:62
  bool getData (uint8_t offset,uint8_t* buf,uint16_t size) const {
    return storage().getData(addr + offset,buf,size);
  }

  void clear (uint8_t offset,uint16_t size) {
    storage().clearData(addr + offset,size);
    350c:	64 e0       	ldi	r22, 0x04	; 4
    350e:	70 e0       	ldi	r23, 0x00	; 0
    3510:	0e 94 cb 13 	call	0x2796	; 0x2796 <as::StorageWrapper<as::InternalEprom>::clearData(unsigned int, unsigned int) [clone .isra.82]>
writeRegister():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:206
  }

  RegisterList (uint16_t a) : BaseList(a) {}

  bool writeRegister (uint8_t reg, uint8_t value) const {
    uint8_t offset = RegisterType::getOffset(reg);
    3514:	80 e3       	ldi	r24, 0x30	; 48
    3516:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <as::SwitchReg1::getOffset(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:207
    if( offset != 0xff ) {
    351a:	8f 3f       	cpi	r24, 0xFF	; 255
    351c:	41 f0       	breq	.+16     	; 0x352e <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::firstinit()+0x4a>
setByte():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:33
  uint8_t getByte (uint8_t offset, uint8_t mask, uint8_t shift) const {
    return (getByte(offset) & mask) >> shift;
  }

  bool setByte (uint8_t offset, uint8_t data) const {
    return storage().setByte(addr + offset, data);
    351e:	29 81       	ldd	r18, Y+1	; 0x01
    3520:	3a 81       	ldd	r19, Y+2	; 0x02
    3522:	66 e0       	ldi	r22, 0x06	; 6
    3524:	82 0f       	add	r24, r18
    3526:	93 2f       	mov	r25, r19
    3528:	91 1d       	adc	r25, r1
    352a:	0e 94 a5 13 	call	0x274a	; 0x274a <as::InternalEprom::setByte(unsigned int, unsigned char) [clone .isra.5]>
writeRegister():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:213
      return setByte(offset,value);
    }
    return false;
  }
  bool writeRegister (uint8_t reg, uint8_t mask,uint8_t shift,uint8_t value) const {
    uint8_t offset = RegisterType::getOffset(reg);
    352e:	87 e5       	ldi	r24, 0x57	; 87
    3530:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <as::SwitchReg1::getOffset(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:214
    if( offset != 0xff ) {
    3534:	8f 3f       	cpi	r24, 0xFF	; 255
    3536:	41 f0       	breq	.+16     	; 0x3548 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::firstinit()+0x64>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:215
      return setByte(offset,value,mask<<shift,shift);
    3538:	00 e0       	ldi	r16, 0x00	; 0
    353a:	2f e1       	ldi	r18, 0x1F	; 31
    353c:	44 e0       	ldi	r20, 0x04	; 4
    353e:	68 2f       	mov	r22, r24
    3540:	ce 01       	movw	r24, r28
    3542:	01 96       	adiw	r24, 0x01	; 1
    3544:	0e 94 24 19 	call	0x3248	; 0x3248 <as::BaseList::setByte(unsigned char, unsigned char, unsigned char, unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:213
      return setByte(offset,value);
    }
    return false;
  }
  bool writeRegister (uint8_t reg, uint8_t mask,uint8_t shift,uint8_t value) const {
    uint8_t offset = RegisterType::getOffset(reg);
    3548:	87 e5       	ldi	r24, 0x57	; 87
    354a:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <as::SwitchReg1::getOffset(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:214
    if( offset != 0xff ) {
    354e:	8f 3f       	cpi	r24, 0xFF	; 255
    3550:	41 f0       	breq	.+16     	; 0x3562 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::firstinit()+0x7e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:215
      return setByte(offset,value,mask<<shift,shift);
    3552:	05 e0       	ldi	r16, 0x05	; 5
    3554:	20 ee       	ldi	r18, 0xE0	; 224
    3556:	41 e0       	ldi	r20, 0x01	; 1
    3558:	68 2f       	mov	r22, r24
    355a:	ce 01       	movw	r24, r28
    355c:	01 96       	adiw	r24, 0x01	; 1
    355e:	0e 94 24 19 	call	0x3248	; 0x3248 <as::BaseList::setByte(unsigned char, unsigned char, unsigned char, unsigned char) const>
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E9firstinitEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:430
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
  virtual bool peer (const Peer& p) { return ch.peer(p); }
  virtual bool peer (const Peer& p1,const Peer& p2) { return ch.peer(p1,p2); }
  virtual bool deletepeer (const Peer& p) { return ch.deletepeer(p); }
  virtual void firstinit () { ch.firstinit(); }
    3562:	0f 90       	pop	r0
    3564:	0f 90       	pop	r0
    3566:	df 91       	pop	r29
    3568:	cf 91       	pop	r28
    356a:	1f 91       	pop	r17
    356c:	0f 91       	pop	r16
    356e:	08 95       	ret

00003570 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::firstinit()>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E9firstinitEv():
    3570:	0f 93       	push	r16
    3572:	1f 93       	push	r17
    3574:	cf 93       	push	r28
    3576:	df 93       	push	r29
    3578:	00 d0       	rcall	.+0      	; 0x357a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::firstinit()+0xa>
    357a:	cd b7       	in	r28, 0x3d	; 61
    357c:	de b7       	in	r29, 0x3e	; 62
    357e:	8c 01       	movw	r16, r24
firstinit():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:165
    }
    return true;
  }

  void firstinit () {
    storage().clearData(address(),size());
    3580:	67 e3       	ldi	r22, 0x37	; 55
    3582:	70 e0       	ldi	r23, 0x00	; 0
    3584:	fc 01       	movw	r30, r24
    3586:	86 85       	ldd	r24, Z+14	; 0x0e
    3588:	97 85       	ldd	r25, Z+15	; 0x0f
    358a:	0e 94 cb 13 	call	0x2796	; 0x2796 <as::StorageWrapper<as::InternalEprom>::clearData(unsigned int, unsigned int) [clone .isra.82]>
    358e:	f8 01       	movw	r30, r16
    3590:	86 85       	ldd	r24, Z+14	; 0x0e
    3592:	97 85       	ldd	r25, Z+15	; 0x0f
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:166
    List1Type cl1 = getList1();
    3594:	9a 83       	std	Y+2, r25	; 0x02
    3596:	89 83       	std	Y+1, r24	; 0x01
clear():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:62
  bool getData (uint8_t offset,uint8_t* buf,uint16_t size) const {
    return storage().getData(addr + offset,buf,size);
  }

  void clear (uint8_t offset,uint16_t size) {
    storage().clearData(addr + offset,size);
    3598:	65 e0       	ldi	r22, 0x05	; 5
    359a:	70 e0       	ldi	r23, 0x00	; 0
    359c:	0e 94 cb 13 	call	0x2796	; 0x2796 <as::StorageWrapper<as::InternalEprom>::clearData(unsigned int, unsigned int) [clone .isra.82]>
writeRegister():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:213
      return setByte(offset,value);
    }
    return false;
  }
  bool writeRegister (uint8_t reg, uint8_t mask,uint8_t shift,uint8_t value) const {
    uint8_t offset = RegisterType::getOffset(reg);
    35a0:	80 e2       	ldi	r24, 0x20	; 32
    35a2:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <Reg1::getOffset(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:214
    if( offset != 0xff ) {
    35a6:	8f 3f       	cpi	r24, 0xFF	; 255
    35a8:	41 f0       	breq	.+16     	; 0x35ba <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::firstinit()+0x4a>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:215
      return setByte(offset,value,mask<<shift,shift);
    35aa:	06 e0       	ldi	r16, 0x06	; 6
    35ac:	20 ec       	ldi	r18, 0xC0	; 192
    35ae:	41 e0       	ldi	r20, 0x01	; 1
    35b0:	68 2f       	mov	r22, r24
    35b2:	ce 01       	movw	r24, r28
    35b4:	01 96       	adiw	r24, 0x01	; 1
    35b6:	0e 94 24 19 	call	0x3248	; 0x3248 <as::BaseList::setByte(unsigned char, unsigned char, unsigned char, unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:213
      return setByte(offset,value);
    }
    return false;
  }
  bool writeRegister (uint8_t reg, uint8_t mask,uint8_t shift,uint8_t value) const {
    uint8_t offset = RegisterType::getOffset(reg);
    35ba:	80 e2       	ldi	r24, 0x20	; 32
    35bc:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <Reg1::getOffset(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:214
    if( offset != 0xff ) {
    35c0:	8f 3f       	cpi	r24, 0xFF	; 255
    35c2:	41 f0       	breq	.+16     	; 0x35d4 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::firstinit()+0x64>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:215
      return setByte(offset,value,mask<<shift,shift);
    35c4:	04 e0       	ldi	r16, 0x04	; 4
    35c6:	20 e3       	ldi	r18, 0x30	; 48
    35c8:	42 e0       	ldi	r20, 0x02	; 2
    35ca:	68 2f       	mov	r22, r24
    35cc:	ce 01       	movw	r24, r28
    35ce:	01 96       	adiw	r24, 0x01	; 1
    35d0:	0e 94 24 19 	call	0x3248	; 0x3248 <as::BaseList::setByte(unsigned char, unsigned char, unsigned char, unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:213
      return setByte(offset,value);
    }
    return false;
  }
  bool writeRegister (uint8_t reg, uint8_t mask,uint8_t shift,uint8_t value) const {
    uint8_t offset = RegisterType::getOffset(reg);
    35d4:	88 e0       	ldi	r24, 0x08	; 8
    35d6:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <Reg1::getOffset(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:214
    if( offset != 0xff ) {
    35da:	8f 3f       	cpi	r24, 0xFF	; 255
    35dc:	41 f0       	breq	.+16     	; 0x35ee <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::firstinit()+0x7e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:215
      return setByte(offset,value,mask<<shift,shift);
    35de:	00 e0       	ldi	r16, 0x00	; 0
    35e0:	21 e0       	ldi	r18, 0x01	; 1
    35e2:	40 e0       	ldi	r20, 0x00	; 0
    35e4:	68 2f       	mov	r22, r24
    35e6:	ce 01       	movw	r24, r28
    35e8:	01 96       	adiw	r24, 0x01	; 1
    35ea:	0e 94 24 19 	call	0x3248	; 0x3248 <as::BaseList::setByte(unsigned char, unsigned char, unsigned char, unsigned char) const>
eventDelaytime():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:441
  bool msgForPosB(uint8_t v) const { return this->writeRegister(CREG_MSGFORPOS,0x03,4,v); }
  uint8_t msgForPosB() const { return this->readRegister(CREG_MSGFORPOS,0x03,4,0); }
  bool msgForPosA(uint8_t v) const { return this->writeRegister(CREG_MSGFORPOS,0x03,6,v); }
  uint8_t msgForPosA() const { return this->readRegister(CREG_MSGFORPOS,0x03,6,0); }

  bool eventDelaytime(uint8_t v) const { return this->writeRegister(CREG_EVENTDELAYTIME,v); }
    35ee:	40 e0       	ldi	r20, 0x00	; 0
    35f0:	61 e2       	ldi	r22, 0x21	; 33
    35f2:	ce 01       	movw	r24, r28
    35f4:	01 96       	adiw	r24, 0x01	; 1
    35f6:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <as::RegisterList<Reg1>::writeRegister(unsigned char, unsigned char) const>
ledOntime():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:443
  uint8_t eventDelaytime() const { return this->readRegister(CREG_EVENTDELAYTIME,0); }
  bool ledOntime(uint8_t v) const { return this->writeRegister(CREG_LEDONTIME,v); }
    35fa:	44 e6       	ldi	r20, 0x64	; 100
    35fc:	62 e2       	ldi	r22, 0x22	; 34
    35fe:	ce 01       	movw	r24, r28
    3600:	01 96       	adiw	r24, 0x01	; 1
    3602:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <as::RegisterList<Reg1>::writeRegister(unsigned char, unsigned char) const>
transmitTryMax():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:447
  uint8_t ledOntime() const { return this->readRegister(CREG_LEDONTIME,100); }
  bool eventFilterTime(uint8_t v) const { return this->writeRegister(CREG_EVENTFILTERTIME,v); }
  uint8_t eventFilterTime() const { return this->readRegister(CREG_EVENTFILTERTIME,5); }
  bool transmitTryMax(uint8_t v) const { return this->writeRegister(CREG_TRANSMITTRYMAX,v); }
    3606:	46 e0       	ldi	r20, 0x06	; 6
    3608:	60 e3       	ldi	r22, 0x30	; 48
    360a:	ce 01       	movw	r24, r28
    360c:	01 96       	adiw	r24, 0x01	; 1
    360e:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <as::RegisterList<Reg1>::writeRegister(unsigned char, unsigned char) const>
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E9firstinitEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:430
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
  virtual bool peer (const Peer& p) { return ch.peer(p); }
  virtual bool peer (const Peer& p1,const Peer& p2) { return ch.peer(p1,p2); }
  virtual bool deletepeer (const Peer& p) { return ch.deletepeer(p); }
  virtual void firstinit () { ch.firstinit(); }
    3612:	0f 90       	pop	r0
    3614:	0f 90       	pop	r0
    3616:	df 91       	pop	r29
    3618:	cf 91       	pop	r28
    361a:	1f 91       	pop	r17
    361c:	0f 91       	pop	r16
    361e:	08 95       	ret

00003620 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 1, UList0, as::EmptyList>::peerat(unsigned char) const>:
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi1E6UList0SF_E6peeratEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:90
      }
    }
    return 0xff;
  }

  Peer peerat (uint8_t idx) const {
    3620:	cf 93       	push	r28
    3622:	df 93       	push	r29
    3624:	ec 01       	movw	r28, r24
_ZN2as4HMIDC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:18

class HMID {
  uint8_t id[3];
public:
  HMID () {
    id[0]=id[1]=id[2]=0;
    3626:	1a 82       	std	Y+2, r1	; 0x02
    3628:	19 82       	std	Y+1, r1	; 0x01
    362a:	18 82       	st	Y, r1
_ZN2as4PeerC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Peer.h:17
namespace as {

class Peer : public HMID {
  uint8_t chan;
public:
  Peer() : chan(0) {}
    362c:	1b 82       	std	Y+3, r1	; 0x03
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi1E6UList0SF_E11peerAddressEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:261

  void configChanged () {}

  protected:
  uint16_t peerAddress (uint8_t pidx) const {
    if( pidx < PeerCount ) {
    362e:	41 11       	cpse	r20, r1
    3630:	0a c0       	rjmp	.+20     	; 0x3646 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 1, UList0, as::EmptyList>::peerat(unsigned char) const+0x26>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:266
      uint16_t offset = sizeof(Peer);
      offset += List3::size() + List4::size();
      offset *= pidx;
      offset += List1::size() + List2::size();
      return addr + offset;
    3632:	fb 01       	movw	r30, r22
    3634:	64 81       	ldd	r22, Z+4	; 0x04
    3636:	75 81       	ldd	r23, Z+5	; 0x05
    3638:	66 5f       	subi	r22, 0xF6	; 246
    363a:	7f 4f       	sbci	r23, 0xFF	; 255
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi1E6UList0SF_E6peeratEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:93
  }

  Peer peerat (uint8_t idx) const {
    Peer result;
    uint16_t paddr = peerAddress(idx);
    if( paddr != 0 ) {
    363c:	21 f0       	breq	.+8      	; 0x3646 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 1, UList0, as::EmptyList>::peerat(unsigned char) const+0x26>
_ZN2as13InternalEprom7getDataEjPhj():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:220
    eeprom_write_block(buf,(void*)(uintptr_t)addr,size);
    return true;
  }

  bool getData (uint16_t addr,uint8_t* buf,uint16_t size) {
    eeprom_read_block(buf,(const void*)(uintptr_t)addr,size);
    363e:	44 e0       	ldi	r20, 0x04	; 4
    3640:	50 e0       	ldi	r21, 0x00	; 0
    3642:	0e 94 ce 4e 	call	0x9d9c	; 0x9d9c <eeprom_read_block>
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi1E6UList0SF_E6peeratEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:97
      storage().getData(paddr,&result);
    }
    return result;
  }
    3646:	ce 01       	movw	r24, r28
    3648:	df 91       	pop	r29
    364a:	cf 91       	pop	r28
    364c:	08 95       	ret

0000364e <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 1, UList0, as::EmptyList>::findpeer() const>:
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi1E6UList0SF_E8findpeerEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:146

  bool deletepeer (uint8_t idx) const {
    return storage().setData(peerAddress(idx),Peer());
  }

  uint8_t findpeer () const {
    364e:	cf 93       	push	r28
    3650:	df 93       	push	r29
    3652:	00 d0       	rcall	.+0      	; 0x3654 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 1, UList0, as::EmptyList>::findpeer() const+0x6>
    3654:	00 d0       	rcall	.+0      	; 0x3656 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 1, UList0, as::EmptyList>::findpeer() const+0x8>
    3656:	cd b7       	in	r28, 0x3d	; 61
    3658:	de b7       	in	r29, 0x3e	; 62
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:148
    for( int i=0; i<peers(); ++i ) {
      if( peerat(i).valid()==false ) {
    365a:	40 e0       	ldi	r20, 0x00	; 0
    365c:	bc 01       	movw	r22, r24
    365e:	ce 01       	movw	r24, r28
    3660:	01 96       	adiw	r24, 0x01	; 1
    3662:	0e 94 10 1b 	call	0x3620	; 0x3620 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 1, UList0, as::EmptyList>::peerat(unsigned char) const>
    3666:	ce 01       	movw	r24, r28
    3668:	01 96       	adiw	r24, 0x01	; 1
    366a:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <as::HMID::valid() const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:153
        return i;
      }
    }
    return 0xff;
  }
    366e:	81 95       	neg	r24
    3670:	0f 90       	pop	r0
    3672:	0f 90       	pop	r0
    3674:	0f 90       	pop	r0
    3676:	0f 90       	pop	r0
    3678:	df 91       	pop	r29
    367a:	cf 91       	pop	r28
    367c:	08 95       	ret

0000367e <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 1, UList0, as::EmptyList>::deletepeer(as::Peer const&) const>:
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi1E6UList0SF_E10deletepeerERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:155

  bool deletepeer (const Peer& p) const {
    367e:	ef 92       	push	r14
    3680:	ff 92       	push	r15
    3682:	0f 93       	push	r16
    3684:	1f 93       	push	r17
    3686:	cf 93       	push	r28
    3688:	df 93       	push	r29
    368a:	00 d0       	rcall	.+0      	; 0x368c <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 1, UList0, as::EmptyList>::deletepeer(as::Peer const&) const+0xe>
    368c:	00 d0       	rcall	.+0      	; 0x368e <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 1, UList0, as::EmptyList>::deletepeer(as::Peer const&) const+0x10>
    368e:	cd b7       	in	r28, 0x3d	; 61
    3690:	de b7       	in	r29, 0x3e	; 62
    3692:	8c 01       	movw	r16, r24
    3694:	7b 01       	movw	r14, r22
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:157
    for( uint8_t i=0; i<peers(); ++i ) {
      if( peerat(i) == p ) {
    3696:	40 e0       	ldi	r20, 0x00	; 0
    3698:	bc 01       	movw	r22, r24
    369a:	ce 01       	movw	r24, r28
    369c:	01 96       	adiw	r24, 0x01	; 1
    369e:	0e 94 10 1b 	call	0x3620	; 0x3620 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 1, UList0, as::EmptyList>::peerat(unsigned char) const>
    36a2:	b7 01       	movw	r22, r14
    36a4:	ce 01       	movw	r24, r28
    36a6:	01 96       	adiw	r24, 0x01	; 1
    36a8:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <as::Peer::operator==(as::Peer const&) const>
    36ac:	88 23       	and	r24, r24
    36ae:	79 f0       	breq	.+30     	; 0x36ce <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 1, UList0, as::EmptyList>::deletepeer(as::Peer const&) const+0x50>
_ZN2as4HMIDC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:18
    36b0:	1b 82       	std	Y+3, r1	; 0x03
    36b2:	1a 82       	std	Y+2, r1	; 0x02
    36b4:	19 82       	std	Y+1, r1	; 0x01
_ZN2as4PeerC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Peer.h:17
    36b6:	1c 82       	std	Y+4, r1	; 0x04
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi1E6UList0SF_E11peerAddressEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:266
    if( pidx < PeerCount ) {
      uint16_t offset = sizeof(Peer);
      offset += List3::size() + List4::size();
      offset *= pidx;
      offset += List1::size() + List2::size();
      return addr + offset;
    36b8:	f8 01       	movw	r30, r16
    36ba:	64 81       	ldd	r22, Z+4	; 0x04
    36bc:	75 81       	ldd	r23, Z+5	; 0x05
    36be:	66 5f       	subi	r22, 0xF6	; 246
    36c0:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN2as13InternalEprom7setDataEjPhj():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:215
    eeprom_write_block(&b,(void*)(uintptr_t)addr,1);
    return true;
  }

  bool setData (uint16_t addr,uint8_t* buf,uint16_t size) {
    eeprom_write_block(buf,(void*)(uintptr_t)addr,size);
    36c2:	44 e0       	ldi	r20, 0x04	; 4
    36c4:	50 e0       	ldi	r21, 0x00	; 0
    36c6:	ce 01       	movw	r24, r28
    36c8:	01 96       	adiw	r24, 0x01	; 1
    36ca:	0e 94 de 4e 	call	0x9dbc	; 0x9dbc <eeprom_write_block>
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi1E6UList0SF_E10deletepeerERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:162
      if( peerat(i) == p ) {
        deletepeer(i);
      }
    }
    return true;
  }
    36ce:	81 e0       	ldi	r24, 0x01	; 1
    36d0:	0f 90       	pop	r0
    36d2:	0f 90       	pop	r0
    36d4:	0f 90       	pop	r0
    36d6:	0f 90       	pop	r0
    36d8:	df 91       	pop	r29
    36da:	cf 91       	pop	r28
    36dc:	1f 91       	pop	r17
    36de:	0f 91       	pop	r16
    36e0:	ff 90       	pop	r15
    36e2:	ef 90       	pop	r14
    36e4:	08 95       	ret

000036e6 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::deletepeer(as::Peer const&)>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E10deletepeerERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:429
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
  virtual bool peer (const Peer& p) { return ch.peer(p); }
  virtual bool peer (const Peer& p1,const Peer& p2) { return ch.peer(p1,p2); }
  virtual bool deletepeer (const Peer& p) { return ch.deletepeer(p); }
    36e6:	02 96       	adiw	r24, 0x02	; 2
    36e8:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 1, UList0, as::EmptyList>::deletepeer(as::Peer const&) const>

000036ec <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::peer(as::Peer const&, as::Peer const&)>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E4peerERKNS_4PeerESJ_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:428
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
  virtual bool peer (const Peer& p) { return ch.peer(p); }
  virtual bool peer (const Peer& p1,const Peer& p2) { return ch.peer(p1,p2); }
    36ec:	cf 92       	push	r12
    36ee:	df 92       	push	r13
    36f0:	ef 92       	push	r14
    36f2:	ff 92       	push	r15
    36f4:	0f 93       	push	r16
    36f6:	1f 93       	push	r17
    36f8:	cf 93       	push	r28
    36fa:	df 93       	push	r29
    36fc:	6c 01       	movw	r12, r24
    36fe:	7b 01       	movw	r14, r22
    3700:	8a 01       	movw	r16, r20
    3702:	ec 01       	movw	r28, r24
    3704:	22 96       	adiw	r28, 0x02	; 2
peer():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:114
    }
    return false;
  }

  bool peer (const Peer& p1,const Peer& p2) const {
    deletepeer(p1);
    3706:	ce 01       	movw	r24, r28
    3708:	0e 94 3f 1b 	call	0x367e	; 0x367e <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 1, UList0, as::EmptyList>::deletepeer(as::Peer const&) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:115
    deletepeer(p2);
    370c:	b8 01       	movw	r22, r16
    370e:	ce 01       	movw	r24, r28
    3710:	0e 94 3f 1b 	call	0x367e	; 0x367e <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 1, UList0, as::EmptyList>::deletepeer(as::Peer const&) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:116
    uint8_t pidx1 = findpeer();
    3714:	ce 01       	movw	r24, r28
    3716:	0e 94 27 1b 	call	0x364e	; 0x364e <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 1, UList0, as::EmptyList>::findpeer() const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:117
    if( pidx1 != 0xff ) {
    371a:	8f 3f       	cpi	r24, 0xFF	; 255
    371c:	59 f1       	breq	.+86     	; 0x3774 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::peer(as::Peer const&, as::Peer const&)+0x88>
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi1E6UList0SF_E11peerAddressEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:261

  void configChanged () {}

  protected:
  uint16_t peerAddress (uint8_t pidx) const {
    if( pidx < PeerCount ) {
    371e:	81 11       	cpse	r24, r1
    3720:	1f c0       	rjmp	.+62     	; 0x3760 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::peer(as::Peer const&, as::Peer const&)+0x74>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:266
      uint16_t offset = sizeof(Peer);
      offset += List3::size() + List4::size();
      offset *= pidx;
      offset += List1::size() + List2::size();
      return addr + offset;
    3722:	f6 01       	movw	r30, r12
    3724:	86 81       	ldd	r24, Z+6	; 0x06
    3726:	97 81       	ldd	r25, Z+7	; 0x07
    3728:	0a 96       	adiw	r24, 0x0a	; 10
peer():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:118
  bool peer (const Peer& p1,const Peer& p2) const {
    deletepeer(p1);
    deletepeer(p2);
    uint8_t pidx1 = findpeer();
    if( pidx1 != 0xff ) {
      storage().setData(peerAddress(pidx1),p1);
    372a:	b7 01       	movw	r22, r14
    372c:	0e 94 9c 13 	call	0x2738	; 0x2738 <bool as::StorageWrapper<as::InternalEprom>::setData<as::Peer>(unsigned int, as::Peer const&) [clone .isra.111]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:119
      uint8_t pidx2 = findpeer();
    3730:	ce 01       	movw	r24, r28
    3732:	0e 94 27 1b 	call	0x364e	; 0x364e <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 1, UList0, as::EmptyList>::findpeer() const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:120
      if( pidx2 != 0xff ) {
    3736:	8f 3f       	cpi	r24, 0xFF	; 255
    3738:	c9 f0       	breq	.+50     	; 0x376c <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::peer(as::Peer const&, as::Peer const&)+0x80>
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi1E6UList0SF_E11peerAddressEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:261

  void configChanged () {}

  protected:
  uint16_t peerAddress (uint8_t pidx) const {
    if( pidx < PeerCount ) {
    373a:	81 11       	cpse	r24, r1
    373c:	14 c0       	rjmp	.+40     	; 0x3766 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::peer(as::Peer const&, as::Peer const&)+0x7a>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:266
      uint16_t offset = sizeof(Peer);
      offset += List3::size() + List4::size();
      offset *= pidx;
      offset += List1::size() + List2::size();
      return addr + offset;
    373e:	f6 01       	movw	r30, r12
    3740:	86 81       	ldd	r24, Z+6	; 0x06
    3742:	97 81       	ldd	r25, Z+7	; 0x07
    3744:	0a 96       	adiw	r24, 0x0a	; 10
peer():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:121
    uint8_t pidx1 = findpeer();
    if( pidx1 != 0xff ) {
      storage().setData(peerAddress(pidx1),p1);
      uint8_t pidx2 = findpeer();
      if( pidx2 != 0xff ) {
        storage().setData(peerAddress(pidx2),p2);
    3746:	b8 01       	movw	r22, r16
    3748:	0e 94 9c 13 	call	0x2738	; 0x2738 <bool as::StorageWrapper<as::InternalEprom>::setData<as::Peer>(unsigned int, as::Peer const&) [clone .isra.111]>
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E4peerERKNS_4PeerESJ_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:132
          else {
            getList3(pidx2).odd();
            getList3(pidx1).even();
          }
        }
        return true;
    374c:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:428
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
  virtual bool peer (const Peer& p) { return ch.peer(p); }
  virtual bool peer (const Peer& p1,const Peer& p2) { return ch.peer(p1,p2); }
    374e:	df 91       	pop	r29
    3750:	cf 91       	pop	r28
    3752:	1f 91       	pop	r17
    3754:	0f 91       	pop	r16
    3756:	ff 90       	pop	r15
    3758:	ef 90       	pop	r14
    375a:	df 90       	pop	r13
    375c:	cf 90       	pop	r12
    375e:	08 95       	ret
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:268
      offset += List3::size() + List4::size();
      offset *= pidx;
      offset += List1::size() + List2::size();
      return addr + offset;
    }
    return 0x00;
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	80 e0       	ldi	r24, 0x00	; 0
    3764:	e2 cf       	rjmp	.-60     	; 0x372a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::peer(as::Peer const&, as::Peer const&)+0x3e>
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	80 e0       	ldi	r24, 0x00	; 0
    376a:	ed cf       	rjmp	.-38     	; 0x3746 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::peer(as::Peer const&, as::Peer const&)+0x5a>
peer():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:136
        }
        return true;
      }
      else {
        // free already stored data
        deletepeer(p1);
    376c:	b7 01       	movw	r22, r14
    376e:	ce 01       	movw	r24, r28
    3770:	0e 94 3f 1b 	call	0x367e	; 0x367e <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 1, UList0, as::EmptyList>::deletepeer(as::Peer const&) const>
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E4peerERKNS_4PeerESJ_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:139
      }
    }
    return false;
    3774:	80 e0       	ldi	r24, 0x00	; 0
    3776:	eb cf       	rjmp	.-42     	; 0x374e <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::peer(as::Peer const&, as::Peer const&)+0x62>

00003778 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::peer(as::Peer const&)>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E4peerERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:427
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
  virtual bool peer (const Peer& p) { return ch.peer(p); }
    3778:	ef 92       	push	r14
    377a:	ff 92       	push	r15
    377c:	0f 93       	push	r16
    377e:	1f 93       	push	r17
    3780:	cf 93       	push	r28
    3782:	df 93       	push	r29
    3784:	8c 01       	movw	r16, r24
    3786:	eb 01       	movw	r28, r22
    3788:	7c 01       	movw	r14, r24
    378a:	82 e0       	ldi	r24, 0x02	; 2
    378c:	e8 0e       	add	r14, r24
    378e:	f1 1c       	adc	r15, r1
peer():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:101
    return result;
  }


  bool peer (const Peer& p) {
    deletepeer(p);
    3790:	c7 01       	movw	r24, r14
    3792:	0e 94 3f 1b 	call	0x367e	; 0x367e <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 1, UList0, as::EmptyList>::deletepeer(as::Peer const&) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:102
    uint8_t pidx = findpeer();
    3796:	c7 01       	movw	r24, r14
    3798:	0e 94 27 1b 	call	0x364e	; 0x364e <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 1, UList0, as::EmptyList>::findpeer() const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:103
    if( pidx != 0xff ) {
    379c:	8f 3f       	cpi	r24, 0xFF	; 255
    379e:	a1 f0       	breq	.+40     	; 0x37c8 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::peer(as::Peer const&)+0x50>
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi1E6UList0SF_E11peerAddressEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:261

  void configChanged () {}

  protected:
  uint16_t peerAddress (uint8_t pidx) const {
    if( pidx < PeerCount ) {
    37a0:	81 11       	cpse	r24, r1
    37a2:	0f c0       	rjmp	.+30     	; 0x37c2 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::peer(as::Peer const&)+0x4a>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:266
      uint16_t offset = sizeof(Peer);
      offset += List3::size() + List4::size();
      offset *= pidx;
      offset += List1::size() + List2::size();
      return addr + offset;
    37a4:	f8 01       	movw	r30, r16
    37a6:	86 81       	ldd	r24, Z+6	; 0x06
    37a8:	97 81       	ldd	r25, Z+7	; 0x07
    37aa:	0a 96       	adiw	r24, 0x0a	; 10
peer():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:104

  bool peer (const Peer& p) {
    deletepeer(p);
    uint8_t pidx = findpeer();
    if( pidx != 0xff ) {
      storage().setData(peerAddress(pidx),p);
    37ac:	be 01       	movw	r22, r28
    37ae:	0e 94 9c 13 	call	0x2738	; 0x2738 <bool as::StorageWrapper<as::InternalEprom>::setData<as::Peer>(unsigned int, as::Peer const&) [clone .isra.111]>
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E4peerERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:108
      if( hasList3() == true ) {
        getList3(pidx).single();
      }
      return true;
    37b2:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:427
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
  virtual bool peer (const Peer& p) { return ch.peer(p); }
    37b4:	df 91       	pop	r29
    37b6:	cf 91       	pop	r28
    37b8:	1f 91       	pop	r17
    37ba:	0f 91       	pop	r16
    37bc:	ff 90       	pop	r15
    37be:	ef 90       	pop	r14
    37c0:	08 95       	ret
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:268
      offset += List3::size() + List4::size();
      offset *= pidx;
      offset += List1::size() + List2::size();
      return addr + offset;
    }
    return 0x00;
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	80 e0       	ldi	r24, 0x00	; 0
    37c6:	f2 cf       	rjmp	.-28     	; 0x37ac <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::peer(as::Peer const&)+0x34>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:110
      if( hasList3() == true ) {
        getList3(pidx).single();
      }
      return true;
    }
    return false;
    37c8:	80 e0       	ldi	r24, 0x00	; 0
    37ca:	f4 cf       	rjmp	.-24     	; 0x37b4 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::peer(as::Peer const&)+0x3c>

000037cc <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::getList4(as::Peer const&) const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E8getList4ERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:448
  virtual void configChanged () { ch.configChanged(); }

  virtual GenericList getList1 () const { return ch.getList1(); }
  virtual GenericList getList2 () const { return ch.getList2(); }
  virtual GenericList getList3 (const Peer& p) const { return ch.getList3(p); }
  virtual GenericList getList4 (const Peer& p) const { return ch.getList4(p); }
    37cc:	ef 92       	push	r14
    37ce:	ff 92       	push	r15
    37d0:	0f 93       	push	r16
    37d2:	1f 93       	push	r17
    37d4:	cf 93       	push	r28
    37d6:	df 93       	push	r29
    37d8:	00 d0       	rcall	.+0      	; 0x37da <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::getList4(as::Peer const&) const+0xe>
    37da:	00 d0       	rcall	.+0      	; 0x37dc <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::getList4(as::Peer const&) const+0x10>
    37dc:	00 d0       	rcall	.+0      	; 0x37de <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::getList4(as::Peer const&) const+0x12>
    37de:	1f 92       	push	r1
    37e0:	cd b7       	in	r28, 0x3d	; 61
    37e2:	de b7       	in	r29, 0x3e	; 62
    37e4:	8c 01       	movw	r16, r24
    37e6:	7b 01       	movw	r14, r22
    37e8:	bc 01       	movw	r22, r24
    37ea:	6e 5f       	subi	r22, 0xFE	; 254
    37ec:	7f 4f       	sbci	r23, 0xFF	; 255
getList4():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:200

  List4Type getList4 (const Peer& p) const {
    uint16_t liststart = 0x00;
    if( hasList4() == true ) {
      for( uint8_t i=0; i<peers(); ++i ) {
        if( peerat(i) == p ) {
    37ee:	40 e0       	ldi	r20, 0x00	; 0
    37f0:	ce 01       	movw	r24, r28
    37f2:	01 96       	adiw	r24, 0x01	; 1
    37f4:	0e 94 10 1b 	call	0x3620	; 0x3620 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 1, UList0, as::EmptyList>::peerat(unsigned char) const>
    37f8:	b7 01       	movw	r22, r14
    37fa:	ce 01       	movw	r24, r28
    37fc:	01 96       	adiw	r24, 0x01	; 1
    37fe:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <as::Peer::operator==(as::Peer const&) const>
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E8getList4ERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:197
    }
    return List3Type(liststart);
  }

  List4Type getList4 (const Peer& p) const {
    uint16_t liststart = 0x00;
    3802:	30 e0       	ldi	r19, 0x00	; 0
    3804:	20 e0       	ldi	r18, 0x00	; 0
getList4():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:200
    if( hasList4() == true ) {
      for( uint8_t i=0; i<peers(); ++i ) {
        if( peerat(i) == p ) {
    3806:	88 23       	and	r24, r24
    3808:	29 f0       	breq	.+10     	; 0x3814 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::getList4(as::Peer const&) const+0x48>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:201
          liststart = peerAddress(i) + sizeof(Peer) + List3::size();
    380a:	f8 01       	movw	r30, r16
    380c:	26 81       	ldd	r18, Z+6	; 0x06
    380e:	37 81       	ldd	r19, Z+7	; 0x07
    3810:	22 5f       	subi	r18, 0xF2	; 242
    3812:	3f 4f       	sbci	r19, 0xFF	; 255
    3814:	3a 83       	std	Y+2, r19	; 0x02
    3816:	29 83       	std	Y+1, r18	; 0x01
    3818:	45 e5       	ldi	r20, 0x55	; 85
    381a:	5a e0       	ldi	r21, 0x0A	; 10
    381c:	5d 83       	std	Y+5, r21	; 0x05
    381e:	4c 83       	std	Y+4, r20	; 0x04
    3820:	8d ed       	ldi	r24, 0xDD	; 221
    3822:	9d e0       	ldi	r25, 0x0D	; 13
    3824:	9f 83       	std	Y+7, r25	; 0x07
    3826:	8e 83       	std	Y+6, r24	; 0x06
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E8getList4ERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:448
  virtual void configChanged () { ch.configChanged(); }

  virtual GenericList getList1 () const { return ch.getList1(); }
  virtual GenericList getList2 () const { return ch.getList2(); }
  virtual GenericList getList3 (const Peer& p) const { return ch.getList3(p); }
  virtual GenericList getList4 (const Peer& p) const { return ch.getList4(p); }
    3828:	3a 81       	ldd	r19, Y+2	; 0x02
    382a:	54 2f       	mov	r21, r20
    382c:	6d 81       	ldd	r22, Y+5	; 0x05
    382e:	78 2f       	mov	r23, r24
    3830:	41 e0       	ldi	r20, 0x01	; 1
    3832:	8f 81       	ldd	r24, Y+7	; 0x07
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	27 96       	adiw	r28, 0x07	; 7
    3838:	0f b6       	in	r0, 0x3f	; 63
    383a:	f8 94       	cli
    383c:	de bf       	out	0x3e, r29	; 62
    383e:	0f be       	out	0x3f, r0	; 63
    3840:	cd bf       	out	0x3d, r28	; 61
    3842:	df 91       	pop	r29
    3844:	cf 91       	pop	r28
    3846:	1f 91       	pop	r17
    3848:	0f 91       	pop	r16
    384a:	ff 90       	pop	r15
    384c:	ef 90       	pop	r14
    384e:	08 95       	ret

00003850 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::peerat(unsigned char) const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E6peeratEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:426
  virtual void changed (bool c) { ch.changed(c); }
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
    3850:	cf 93       	push	r28
    3852:	df 93       	push	r29
    3854:	ec 01       	movw	r28, r24
    3856:	6e 5f       	subi	r22, 0xFE	; 254
    3858:	7f 4f       	sbci	r23, 0xFF	; 255
    385a:	0e 94 10 1b 	call	0x3620	; 0x3620 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 1, UList0, as::EmptyList>::peerat(unsigned char) const>
    385e:	ce 01       	movw	r24, r28
    3860:	df 91       	pop	r29
    3862:	cf 91       	pop	r28
    3864:	08 95       	ret

00003866 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::has(as::Peer const&) const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E3hasERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:425
  virtual bool changed () const { return ch.changed(); }
  virtual void changed (bool c) { ch.changed(c); }
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
    3866:	0f 93       	push	r16
    3868:	1f 93       	push	r17
    386a:	cf 93       	push	r28
    386c:	df 93       	push	r29
    386e:	00 d0       	rcall	.+0      	; 0x3870 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::has(as::Peer const&) const+0xa>
    3870:	00 d0       	rcall	.+0      	; 0x3872 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::has(as::Peer const&) const+0xc>
    3872:	cd b7       	in	r28, 0x3d	; 61
    3874:	de b7       	in	r29, 0x3e	; 62
    3876:	8b 01       	movw	r16, r22
    3878:	bc 01       	movw	r22, r24
    387a:	6e 5f       	subi	r22, 0xFE	; 254
    387c:	7f 4f       	sbci	r23, 0xFF	; 255
has():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:74
    return size;
  }

  bool has (const Peer& p) const {
    for( uint8_t i=0; i<peers(); ++i ) {
      if( p == peerat(i) ) {
    387e:	40 e0       	ldi	r20, 0x00	; 0
    3880:	ce 01       	movw	r24, r28
    3882:	01 96       	adiw	r24, 0x01	; 1
    3884:	0e 94 10 1b 	call	0x3620	; 0x3620 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 1, UList0, as::EmptyList>::peerat(unsigned char) const>
    3888:	be 01       	movw	r22, r28
    388a:	6f 5f       	subi	r22, 0xFF	; 255
    388c:	7f 4f       	sbci	r23, 0xFF	; 255
    388e:	c8 01       	movw	r24, r16
    3890:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <as::Peer::operator==(as::Peer const&) const>
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0E3hasERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:425
  virtual bool changed () const { return ch.changed(); }
  virtual void changed (bool c) { ch.changed(c); }
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
    3894:	0f 90       	pop	r0
    3896:	0f 90       	pop	r0
    3898:	0f 90       	pop	r0
    389a:	0f 90       	pop	r0
    389c:	df 91       	pop	r29
    389e:	cf 91       	pop	r28
    38a0:	1f 91       	pop	r17
    38a2:	0f 91       	pop	r16
    38a4:	08 95       	ret

000038a6 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::peerat(unsigned char) const>:
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_5List4ELi6E6UList0SF_E6peeratEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:90
      }
    }
    return 0xff;
  }

  Peer peerat (uint8_t idx) const {
    38a6:	cf 93       	push	r28
    38a8:	df 93       	push	r29
    38aa:	ec 01       	movw	r28, r24
    38ac:	cb 01       	movw	r24, r22
_ZN2as4HMIDC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:18
    38ae:	1a 82       	std	Y+2, r1	; 0x02
    38b0:	19 82       	std	Y+1, r1	; 0x01
    38b2:	18 82       	st	Y, r1
_ZN2as4PeerC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Peer.h:17
    38b4:	1b 82       	std	Y+3, r1	; 0x03
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_5List4ELi6E6UList0SF_E6peeratEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:92
    Peer result;
    uint16_t paddr = peerAddress(idx);
    38b6:	64 2f       	mov	r22, r20
    38b8:	04 96       	adiw	r24, 0x04	; 4
    38ba:	0e 94 ed 09 	call	0x13da	; 0x13da <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::peerAddress(unsigned char) const [clone .isra.205]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:93
    if( paddr != 0 ) {
    38be:	00 97       	sbiw	r24, 0x00	; 0
    38c0:	31 f0       	breq	.+12     	; 0x38ce <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::peerat(unsigned char) const+0x28>
_ZN2as13InternalEprom7getDataEjPhj():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:220
    return true;
  }

  bool getData (uint16_t addr,uint8_t* buf,uint16_t size) {
    eeprom_read_block(buf,(const void*)(uintptr_t)addr,size);
    38c2:	44 e0       	ldi	r20, 0x04	; 4
    38c4:	50 e0       	ldi	r21, 0x00	; 0
    38c6:	bc 01       	movw	r22, r24
    38c8:	ce 01       	movw	r24, r28
    38ca:	0e 94 ce 4e 	call	0x9d9c	; 0x9d9c <eeprom_read_block>
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_5List4ELi6E6UList0SF_E6peeratEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:97
      storage().getData(paddr,&result);
    }
    return result;
  }
    38ce:	ce 01       	movw	r24, r28
    38d0:	df 91       	pop	r29
    38d2:	cf 91       	pop	r28
    38d4:	08 95       	ret

000038d6 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::findpeer() const>:
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_5List4ELi6E6UList0SF_E8findpeerEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:146

  bool deletepeer (uint8_t idx) const {
    return storage().setData(peerAddress(idx),Peer());
  }

  uint8_t findpeer () const {
    38d6:	ef 92       	push	r14
    38d8:	ff 92       	push	r15
    38da:	1f 93       	push	r17
    38dc:	cf 93       	push	r28
    38de:	df 93       	push	r29
    38e0:	00 d0       	rcall	.+0      	; 0x38e2 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::findpeer() const+0xc>
    38e2:	00 d0       	rcall	.+0      	; 0x38e4 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::findpeer() const+0xe>
    38e4:	cd b7       	in	r28, 0x3d	; 61
    38e6:	de b7       	in	r29, 0x3e	; 62
    38e8:	7c 01       	movw	r14, r24
    38ea:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:148
    for( int i=0; i<peers(); ++i ) {
      if( peerat(i).valid()==false ) {
    38ec:	41 2f       	mov	r20, r17
    38ee:	b7 01       	movw	r22, r14
    38f0:	ce 01       	movw	r24, r28
    38f2:	01 96       	adiw	r24, 0x01	; 1
    38f4:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::peerat(unsigned char) const>
    38f8:	ce 01       	movw	r24, r28
    38fa:	01 96       	adiw	r24, 0x01	; 1
    38fc:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <as::HMID::valid() const>
    3900:	88 23       	and	r24, r24
    3902:	21 f0       	breq	.+8      	; 0x390c <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::findpeer() const+0x36>
    3904:	1f 5f       	subi	r17, 0xFF	; 255
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:147
  bool deletepeer (uint8_t idx) const {
    return storage().setData(peerAddress(idx),Peer());
  }

  uint8_t findpeer () const {
    for( int i=0; i<peers(); ++i ) {
    3906:	16 30       	cpi	r17, 0x06	; 6
    3908:	89 f7       	brne	.-30     	; 0x38ec <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::findpeer() const+0x16>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:152
      if( peerat(i).valid()==false ) {
        return i;
      }
    }
    return 0xff;
    390a:	1f ef       	ldi	r17, 0xFF	; 255
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:153
  }
    390c:	81 2f       	mov	r24, r17
    390e:	0f 90       	pop	r0
    3910:	0f 90       	pop	r0
    3912:	0f 90       	pop	r0
    3914:	0f 90       	pop	r0
    3916:	df 91       	pop	r29
    3918:	cf 91       	pop	r28
    391a:	1f 91       	pop	r17
    391c:	ff 90       	pop	r15
    391e:	ef 90       	pop	r14
    3920:	08 95       	ret

00003922 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::deletepeer(as::Peer const&) const>:
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_5List4ELi6E6UList0SF_E10deletepeerERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:155

  bool deletepeer (const Peer& p) const {
    3922:	af 92       	push	r10
    3924:	bf 92       	push	r11
    3926:	cf 92       	push	r12
    3928:	df 92       	push	r13
    392a:	ef 92       	push	r14
    392c:	ff 92       	push	r15
    392e:	1f 93       	push	r17
    3930:	cf 93       	push	r28
    3932:	df 93       	push	r29
    3934:	00 d0       	rcall	.+0      	; 0x3936 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::deletepeer(as::Peer const&) const+0x14>
    3936:	00 d0       	rcall	.+0      	; 0x3938 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::deletepeer(as::Peer const&) const+0x16>
    3938:	cd b7       	in	r28, 0x3d	; 61
    393a:	de b7       	in	r29, 0x3e	; 62
    393c:	7c 01       	movw	r14, r24
    393e:	6b 01       	movw	r12, r22
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:156
    for( uint8_t i=0; i<peers(); ++i ) {
    3940:	10 e0       	ldi	r17, 0x00	; 0
deletepeer():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:143
    }
    return false;
  }

  bool deletepeer (uint8_t idx) const {
    return storage().setData(peerAddress(idx),Peer());
    3942:	5c 01       	movw	r10, r24
    3944:	84 e0       	ldi	r24, 0x04	; 4
    3946:	a8 0e       	add	r10, r24
    3948:	b1 1c       	adc	r11, r1
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_5List4ELi6E6UList0SF_E10deletepeerERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:157
    return 0xff;
  }

  bool deletepeer (const Peer& p) const {
    for( uint8_t i=0; i<peers(); ++i ) {
      if( peerat(i) == p ) {
    394a:	41 2f       	mov	r20, r17
    394c:	b7 01       	movw	r22, r14
    394e:	ce 01       	movw	r24, r28
    3950:	01 96       	adiw	r24, 0x01	; 1
    3952:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::peerat(unsigned char) const>
    3956:	b6 01       	movw	r22, r12
    3958:	ce 01       	movw	r24, r28
    395a:	01 96       	adiw	r24, 0x01	; 1
    395c:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <as::Peer::operator==(as::Peer const&) const>
    3960:	88 23       	and	r24, r24
    3962:	79 f0       	breq	.+30     	; 0x3982 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::deletepeer(as::Peer const&) const+0x60>
_ZN2as4HMIDC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:18
    3964:	1b 82       	std	Y+3, r1	; 0x03
    3966:	1a 82       	std	Y+2, r1	; 0x02
    3968:	19 82       	std	Y+1, r1	; 0x01
_ZN2as4PeerC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Peer.h:17
    396a:	1c 82       	std	Y+4, r1	; 0x04
deletepeer():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:143
    }
    return false;
  }

  bool deletepeer (uint8_t idx) const {
    return storage().setData(peerAddress(idx),Peer());
    396c:	61 2f       	mov	r22, r17
    396e:	c5 01       	movw	r24, r10
    3970:	0e 94 ed 09 	call	0x13da	; 0x13da <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::peerAddress(unsigned char) const [clone .isra.205]>
_ZN2as13InternalEprom7setDataEjPhj():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:215
    eeprom_write_block(&b,(void*)(uintptr_t)addr,1);
    return true;
  }

  bool setData (uint16_t addr,uint8_t* buf,uint16_t size) {
    eeprom_write_block(buf,(void*)(uintptr_t)addr,size);
    3974:	44 e0       	ldi	r20, 0x04	; 4
    3976:	50 e0       	ldi	r21, 0x00	; 0
    3978:	bc 01       	movw	r22, r24
    397a:	ce 01       	movw	r24, r28
    397c:	01 96       	adiw	r24, 0x01	; 1
    397e:	0e 94 de 4e 	call	0x9dbc	; 0x9dbc <eeprom_write_block>
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_5List4ELi6E6UList0SF_E10deletepeerERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:156
    }
    return 0xff;
  }

  bool deletepeer (const Peer& p) const {
    for( uint8_t i=0; i<peers(); ++i ) {
    3982:	1f 5f       	subi	r17, 0xFF	; 255
    3984:	16 30       	cpi	r17, 0x06	; 6
    3986:	09 f7       	brne	.-62     	; 0x394a <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::deletepeer(as::Peer const&) const+0x28>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:162
      if( peerat(i) == p ) {
        deletepeer(i);
      }
    }
    return true;
  }
    3988:	81 e0       	ldi	r24, 0x01	; 1
    398a:	0f 90       	pop	r0
    398c:	0f 90       	pop	r0
    398e:	0f 90       	pop	r0
    3990:	0f 90       	pop	r0
    3992:	df 91       	pop	r29
    3994:	cf 91       	pop	r28
    3996:	1f 91       	pop	r17
    3998:	ff 90       	pop	r15
    399a:	ef 90       	pop	r14
    399c:	df 90       	pop	r13
    399e:	cf 90       	pop	r12
    39a0:	bf 90       	pop	r11
    39a2:	af 90       	pop	r10
    39a4:	08 95       	ret

000039a6 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::deletepeer(as::Peer const&)>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E10deletepeerERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:429
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
  virtual bool peer (const Peer& p) { return ch.peer(p); }
  virtual bool peer (const Peer& p1,const Peer& p2) { return ch.peer(p1,p2); }
  virtual bool deletepeer (const Peer& p) { return ch.deletepeer(p); }
    39a6:	0a 96       	adiw	r24, 0x0a	; 10
    39a8:	0c 94 91 1c 	jmp	0x3922	; 0x3922 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::deletepeer(as::Peer const&) const>

000039ac <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::peer(as::Peer const&, as::Peer const&)>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E4peerERKNS_4PeerESJ_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:428
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
  virtual bool peer (const Peer& p) { return ch.peer(p); }
  virtual bool peer (const Peer& p1,const Peer& p2) { return ch.peer(p1,p2); }
    39ac:	cf 92       	push	r12
    39ae:	df 92       	push	r13
    39b0:	ef 92       	push	r14
    39b2:	ff 92       	push	r15
    39b4:	0f 93       	push	r16
    39b6:	1f 93       	push	r17
    39b8:	cf 93       	push	r28
    39ba:	df 93       	push	r29
    39bc:	8c 01       	movw	r16, r24
    39be:	7b 01       	movw	r14, r22
    39c0:	6a 01       	movw	r12, r20
    39c2:	ec 01       	movw	r28, r24
    39c4:	2a 96       	adiw	r28, 0x0a	; 10
peer():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:114
    }
    return false;
  }

  bool peer (const Peer& p1,const Peer& p2) const {
    deletepeer(p1);
    39c6:	ce 01       	movw	r24, r28
    39c8:	0e 94 91 1c 	call	0x3922	; 0x3922 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::deletepeer(as::Peer const&) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:115
    deletepeer(p2);
    39cc:	b6 01       	movw	r22, r12
    39ce:	ce 01       	movw	r24, r28
    39d0:	0e 94 91 1c 	call	0x3922	; 0x3922 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::deletepeer(as::Peer const&) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:116
    uint8_t pidx1 = findpeer();
    39d4:	ce 01       	movw	r24, r28
    39d6:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::findpeer() const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:117
    if( pidx1 != 0xff ) {
    39da:	8f 3f       	cpi	r24, 0xFF	; 255
    39dc:	19 f1       	breq	.+70     	; 0x3a24 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::peer(as::Peer const&, as::Peer const&)+0x78>
    39de:	02 5f       	subi	r16, 0xF2	; 242
    39e0:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:118
      storage().setData(peerAddress(pidx1),p1);
    39e2:	68 2f       	mov	r22, r24
    39e4:	c8 01       	movw	r24, r16
    39e6:	0e 94 ed 09 	call	0x13da	; 0x13da <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::peerAddress(unsigned char) const [clone .isra.205]>
    39ea:	b7 01       	movw	r22, r14
    39ec:	0e 94 9c 13 	call	0x2738	; 0x2738 <bool as::StorageWrapper<as::InternalEprom>::setData<as::Peer>(unsigned int, as::Peer const&) [clone .isra.111]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:119
      uint8_t pidx2 = findpeer();
    39f0:	ce 01       	movw	r24, r28
    39f2:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::findpeer() const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:120
      if( pidx2 != 0xff ) {
    39f6:	8f 3f       	cpi	r24, 0xFF	; 255
    39f8:	89 f0       	breq	.+34     	; 0x3a1c <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::peer(as::Peer const&, as::Peer const&)+0x70>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:121
        storage().setData(peerAddress(pidx2),p2);
    39fa:	68 2f       	mov	r22, r24
    39fc:	c8 01       	movw	r24, r16
    39fe:	0e 94 ed 09 	call	0x13da	; 0x13da <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::peerAddress(unsigned char) const [clone .isra.205]>
    3a02:	b6 01       	movw	r22, r12
    3a04:	0e 94 9c 13 	call	0x2738	; 0x2738 <bool as::StorageWrapper<as::InternalEprom>::setData<as::Peer>(unsigned int, as::Peer const&) [clone .isra.111]>
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E4peerERKNS_4PeerESJ_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:132
          else {
            getList3(pidx2).odd();
            getList3(pidx1).even();
          }
        }
        return true;
    3a08:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:428
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
  virtual bool peer (const Peer& p) { return ch.peer(p); }
  virtual bool peer (const Peer& p1,const Peer& p2) { return ch.peer(p1,p2); }
    3a0a:	df 91       	pop	r29
    3a0c:	cf 91       	pop	r28
    3a0e:	1f 91       	pop	r17
    3a10:	0f 91       	pop	r16
    3a12:	ff 90       	pop	r15
    3a14:	ef 90       	pop	r14
    3a16:	df 90       	pop	r13
    3a18:	cf 90       	pop	r12
    3a1a:	08 95       	ret
peer():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:136
        }
        return true;
      }
      else {
        // free already stored data
        deletepeer(p1);
    3a1c:	b7 01       	movw	r22, r14
    3a1e:	ce 01       	movw	r24, r28
    3a20:	0e 94 91 1c 	call	0x3922	; 0x3922 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::deletepeer(as::Peer const&) const>
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E4peerERKNS_4PeerESJ_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:139
      }
    }
    return false;
    3a24:	80 e0       	ldi	r24, 0x00	; 0
    3a26:	f1 cf       	rjmp	.-30     	; 0x3a0a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::peer(as::Peer const&, as::Peer const&)+0x5e>

00003a28 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::peer(as::Peer const&)>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E4peerERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:427
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
  virtual bool peer (const Peer& p) { return ch.peer(p); }
    3a28:	ef 92       	push	r14
    3a2a:	ff 92       	push	r15
    3a2c:	0f 93       	push	r16
    3a2e:	1f 93       	push	r17
    3a30:	cf 93       	push	r28
    3a32:	df 93       	push	r29
    3a34:	8c 01       	movw	r16, r24
    3a36:	eb 01       	movw	r28, r22
    3a38:	7c 01       	movw	r14, r24
    3a3a:	8a e0       	ldi	r24, 0x0A	; 10
    3a3c:	e8 0e       	add	r14, r24
    3a3e:	f1 1c       	adc	r15, r1
peer():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:101
    return result;
  }


  bool peer (const Peer& p) {
    deletepeer(p);
    3a40:	c7 01       	movw	r24, r14
    3a42:	0e 94 91 1c 	call	0x3922	; 0x3922 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::deletepeer(as::Peer const&) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:102
    uint8_t pidx = findpeer();
    3a46:	c7 01       	movw	r24, r14
    3a48:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::findpeer() const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:103
    if( pidx != 0xff ) {
    3a4c:	8f 3f       	cpi	r24, 0xFF	; 255
    3a4e:	81 f0       	breq	.+32     	; 0x3a70 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::peer(as::Peer const&)+0x48>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:104
      storage().setData(peerAddress(pidx),p);
    3a50:	68 2f       	mov	r22, r24
    3a52:	c8 01       	movw	r24, r16
    3a54:	0e 96       	adiw	r24, 0x0e	; 14
    3a56:	0e 94 ed 09 	call	0x13da	; 0x13da <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::peerAddress(unsigned char) const [clone .isra.205]>
    3a5a:	be 01       	movw	r22, r28
    3a5c:	0e 94 9c 13 	call	0x2738	; 0x2738 <bool as::StorageWrapper<as::InternalEprom>::setData<as::Peer>(unsigned int, as::Peer const&) [clone .isra.111]>
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E4peerERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:108
      if( hasList3() == true ) {
        getList3(pidx).single();
      }
      return true;
    3a60:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:427
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
  virtual bool peer (const Peer& p) { return ch.peer(p); }
    3a62:	df 91       	pop	r29
    3a64:	cf 91       	pop	r28
    3a66:	1f 91       	pop	r17
    3a68:	0f 91       	pop	r16
    3a6a:	ff 90       	pop	r15
    3a6c:	ef 90       	pop	r14
    3a6e:	08 95       	ret
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:110
      if( hasList3() == true ) {
        getList3(pidx).single();
      }
      return true;
    }
    return false;
    3a70:	80 e0       	ldi	r24, 0x00	; 0
    3a72:	f7 cf       	rjmp	.-18     	; 0x3a62 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::peer(as::Peer const&)+0x3a>

00003a74 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::getList4(as::Peer const&) const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E8getList4ERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:448
  virtual void configChanged () { ch.configChanged(); }

  virtual GenericList getList1 () const { return ch.getList1(); }
  virtual GenericList getList2 () const { return ch.getList2(); }
  virtual GenericList getList3 (const Peer& p) const { return ch.getList3(p); }
  virtual GenericList getList4 (const Peer& p) const { return ch.getList4(p); }
    3a74:	af 92       	push	r10
    3a76:	bf 92       	push	r11
    3a78:	cf 92       	push	r12
    3a7a:	df 92       	push	r13
    3a7c:	ef 92       	push	r14
    3a7e:	ff 92       	push	r15
    3a80:	1f 93       	push	r17
    3a82:	cf 93       	push	r28
    3a84:	df 93       	push	r29
    3a86:	00 d0       	rcall	.+0      	; 0x3a88 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::getList4(as::Peer const&) const+0x14>
    3a88:	00 d0       	rcall	.+0      	; 0x3a8a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::getList4(as::Peer const&) const+0x16>
    3a8a:	00 d0       	rcall	.+0      	; 0x3a8c <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::getList4(as::Peer const&) const+0x18>
    3a8c:	1f 92       	push	r1
    3a8e:	cd b7       	in	r28, 0x3d	; 61
    3a90:	de b7       	in	r29, 0x3e	; 62
    3a92:	7c 01       	movw	r14, r24
    3a94:	5b 01       	movw	r10, r22
    3a96:	6c 01       	movw	r12, r24
    3a98:	8a e0       	ldi	r24, 0x0A	; 10
    3a9a:	c8 0e       	add	r12, r24
    3a9c:	d1 1c       	adc	r13, r1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:199
  }

  List4Type getList4 (const Peer& p) const {
    uint16_t liststart = 0x00;
    if( hasList4() == true ) {
      for( uint8_t i=0; i<peers(); ++i ) {
    3a9e:	10 e0       	ldi	r17, 0x00	; 0
getList4():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:200
        if( peerat(i) == p ) {
    3aa0:	41 2f       	mov	r20, r17
    3aa2:	b6 01       	movw	r22, r12
    3aa4:	ce 01       	movw	r24, r28
    3aa6:	01 96       	adiw	r24, 0x01	; 1
    3aa8:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::peerat(unsigned char) const>
    3aac:	b5 01       	movw	r22, r10
    3aae:	ce 01       	movw	r24, r28
    3ab0:	01 96       	adiw	r24, 0x01	; 1
    3ab2:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <as::Peer::operator==(as::Peer const&) const>
    3ab6:	88 23       	and	r24, r24
    3ab8:	41 f1       	breq	.+80     	; 0x3b0a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::getList4(as::Peer const&) const+0x96>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:201
          liststart = peerAddress(i) + sizeof(Peer) + List3::size();
    3aba:	61 2f       	mov	r22, r17
    3abc:	c7 01       	movw	r24, r14
    3abe:	0e 96       	adiw	r24, 0x0e	; 14
    3ac0:	0e 94 ed 09 	call	0x13da	; 0x13da <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::peerAddress(unsigned char) const [clone .isra.205]>
    3ac4:	04 96       	adiw	r24, 0x04	; 4
    3ac6:	9a 83       	std	Y+2, r25	; 0x02
    3ac8:	89 83       	std	Y+1, r24	; 0x01
    3aca:	6f e4       	ldi	r22, 0x4F	; 79
    3acc:	7a e0       	ldi	r23, 0x0A	; 10
    3ace:	7d 83       	std	Y+5, r23	; 0x05
    3ad0:	6c 83       	std	Y+4, r22	; 0x04
    3ad2:	49 e4       	ldi	r20, 0x49	; 73
    3ad4:	5a e0       	ldi	r21, 0x0A	; 10
    3ad6:	5f 83       	std	Y+7, r21	; 0x07
    3ad8:	4e 83       	std	Y+6, r20	; 0x06
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E8getList4ERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:448
  virtual void configChanged () { ch.configChanged(); }

  virtual GenericList getList1 () const { return ch.getList1(); }
  virtual GenericList getList2 () const { return ch.getList2(); }
  virtual GenericList getList3 (const Peer& p) const { return ch.getList3(p); }
  virtual GenericList getList4 (const Peer& p) const { return ch.getList4(p); }
    3ada:	28 2f       	mov	r18, r24
    3adc:	3a 81       	ldd	r19, Y+2	; 0x02
    3ade:	56 2f       	mov	r21, r22
    3ae0:	6d 81       	ldd	r22, Y+5	; 0x05
    3ae2:	74 2f       	mov	r23, r20
    3ae4:	41 e0       	ldi	r20, 0x01	; 1
    3ae6:	8f 81       	ldd	r24, Y+7	; 0x07
    3ae8:	90 e0       	ldi	r25, 0x00	; 0
    3aea:	27 96       	adiw	r28, 0x07	; 7
    3aec:	0f b6       	in	r0, 0x3f	; 63
    3aee:	f8 94       	cli
    3af0:	de bf       	out	0x3e, r29	; 62
    3af2:	0f be       	out	0x3f, r0	; 63
    3af4:	cd bf       	out	0x3d, r28	; 61
    3af6:	df 91       	pop	r29
    3af8:	cf 91       	pop	r28
    3afa:	1f 91       	pop	r17
    3afc:	ff 90       	pop	r15
    3afe:	ef 90       	pop	r14
    3b00:	df 90       	pop	r13
    3b02:	cf 90       	pop	r12
    3b04:	bf 90       	pop	r11
    3b06:	af 90       	pop	r10
    3b08:	08 95       	ret
getList4():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:199
  }

  List4Type getList4 (const Peer& p) const {
    uint16_t liststart = 0x00;
    if( hasList4() == true ) {
      for( uint8_t i=0; i<peers(); ++i ) {
    3b0a:	1f 5f       	subi	r17, 0xFF	; 255
    3b0c:	16 30       	cpi	r17, 0x06	; 6
    3b0e:	41 f6       	brne	.-112    	; 0x3aa0 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::getList4(as::Peer const&) const+0x2c>
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E8getList4ERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:197
    }
    return List3Type(liststart);
  }

  List4Type getList4 (const Peer& p) const {
    uint16_t liststart = 0x00;
    3b10:	90 e0       	ldi	r25, 0x00	; 0
    3b12:	80 e0       	ldi	r24, 0x00	; 0
    3b14:	d8 cf       	rjmp	.-80     	; 0x3ac6 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::getList4(as::Peer const&) const+0x52>

00003b16 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::peerat(unsigned char) const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E6peeratEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:426
  virtual void changed (bool c) { ch.changed(c); }
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
    3b16:	cf 93       	push	r28
    3b18:	df 93       	push	r29
    3b1a:	ec 01       	movw	r28, r24
    3b1c:	66 5f       	subi	r22, 0xF6	; 246
    3b1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b20:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::peerat(unsigned char) const>
    3b24:	ce 01       	movw	r24, r28
    3b26:	df 91       	pop	r29
    3b28:	cf 91       	pop	r28
    3b2a:	08 95       	ret

00003b2c <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::has(as::Peer const&) const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E3hasERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:425
  virtual bool changed () const { return ch.changed(); }
  virtual void changed (bool c) { ch.changed(c); }
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
    3b2c:	cf 92       	push	r12
    3b2e:	df 92       	push	r13
    3b30:	ef 92       	push	r14
    3b32:	ff 92       	push	r15
    3b34:	1f 93       	push	r17
    3b36:	cf 93       	push	r28
    3b38:	df 93       	push	r29
    3b3a:	00 d0       	rcall	.+0      	; 0x3b3c <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::has(as::Peer const&) const+0x10>
    3b3c:	00 d0       	rcall	.+0      	; 0x3b3e <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::has(as::Peer const&) const+0x12>
    3b3e:	cd b7       	in	r28, 0x3d	; 61
    3b40:	de b7       	in	r29, 0x3e	; 62
    3b42:	6b 01       	movw	r12, r22
    3b44:	0a 96       	adiw	r24, 0x0a	; 10
    3b46:	7c 01       	movw	r14, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:73
    size += List1::size();
    return size;
  }

  bool has (const Peer& p) const {
    for( uint8_t i=0; i<peers(); ++i ) {
    3b48:	10 e0       	ldi	r17, 0x00	; 0
has():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:74
      if( p == peerat(i) ) {
    3b4a:	41 2f       	mov	r20, r17
    3b4c:	b7 01       	movw	r22, r14
    3b4e:	ce 01       	movw	r24, r28
    3b50:	01 96       	adiw	r24, 0x01	; 1
    3b52:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList1, as::EmptyList, as::List4, 6, UList0, as::EmptyList>::peerat(unsigned char) const>
    3b56:	be 01       	movw	r22, r28
    3b58:	6f 5f       	subi	r22, 0xFF	; 255
    3b5a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b5c:	c6 01       	movw	r24, r12
    3b5e:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <as::Peer::operator==(as::Peer const&) const>
    3b62:	81 11       	cpse	r24, r1
    3b64:	03 c0       	rjmp	.+6      	; 0x3b6c <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::has(as::Peer const&) const+0x40>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:73
    size += List1::size();
    return size;
  }

  bool has (const Peer& p) const {
    for( uint8_t i=0; i<peers(); ++i ) {
    3b66:	1f 5f       	subi	r17, 0xFF	; 255
    3b68:	16 30       	cpi	r17, 0x06	; 6
    3b6a:	79 f7       	brne	.-34     	; 0x3b4a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::has(as::Peer const&) const+0x1e>
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E3hasERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:425
  virtual bool changed () const { return ch.changed(); }
  virtual void changed (bool c) { ch.changed(c); }
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
    3b6c:	0f 90       	pop	r0
    3b6e:	0f 90       	pop	r0
    3b70:	0f 90       	pop	r0
    3b72:	0f 90       	pop	r0
    3b74:	df 91       	pop	r29
    3b76:	cf 91       	pop	r28
    3b78:	1f 91       	pop	r17
    3b7a:	ff 90       	pop	r15
    3b7c:	ef 90       	pop	r14
    3b7e:	df 90       	pop	r13
    3b80:	cf 90       	pop	r12
    3b82:	08 95       	ret

00003b84 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::peerat(unsigned char) const>:
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE7SCList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi10E6UList0SF_E6peeratEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:90
      }
    }
    return 0xff;
  }

  Peer peerat (uint8_t idx) const {
    3b84:	cf 93       	push	r28
    3b86:	df 93       	push	r29
    3b88:	ec 01       	movw	r28, r24
    3b8a:	cb 01       	movw	r24, r22
_ZN2as4HMIDC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:18
    3b8c:	1a 82       	std	Y+2, r1	; 0x02
    3b8e:	19 82       	std	Y+1, r1	; 0x01
    3b90:	18 82       	st	Y, r1
_ZN2as4PeerC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Peer.h:17
    3b92:	1b 82       	std	Y+3, r1	; 0x03
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE7SCList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi10E6UList0SF_E6peeratEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:92
    Peer result;
    uint16_t paddr = peerAddress(idx);
    3b94:	64 2f       	mov	r22, r20
    3b96:	04 96       	adiw	r24, 0x04	; 4
    3b98:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::peerAddress(unsigned char) const [clone .isra.157]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:93
    if( paddr != 0 ) {
    3b9c:	00 97       	sbiw	r24, 0x00	; 0
    3b9e:	31 f0       	breq	.+12     	; 0x3bac <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::peerat(unsigned char) const+0x28>
_ZN2as13InternalEprom7getDataEjPhj():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:220
    return true;
  }

  bool getData (uint16_t addr,uint8_t* buf,uint16_t size) {
    eeprom_read_block(buf,(const void*)(uintptr_t)addr,size);
    3ba0:	44 e0       	ldi	r20, 0x04	; 4
    3ba2:	50 e0       	ldi	r21, 0x00	; 0
    3ba4:	bc 01       	movw	r22, r24
    3ba6:	ce 01       	movw	r24, r28
    3ba8:	0e 94 ce 4e 	call	0x9d9c	; 0x9d9c <eeprom_read_block>
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE7SCList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi10E6UList0SF_E6peeratEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:97
      storage().getData(paddr,&result);
    }
    return result;
  }
    3bac:	ce 01       	movw	r24, r28
    3bae:	df 91       	pop	r29
    3bb0:	cf 91       	pop	r28
    3bb2:	08 95       	ret

00003bb4 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::findpeer() const>:
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE7SCList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi10E6UList0SF_E8findpeerEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:146

  bool deletepeer (uint8_t idx) const {
    return storage().setData(peerAddress(idx),Peer());
  }

  uint8_t findpeer () const {
    3bb4:	ef 92       	push	r14
    3bb6:	ff 92       	push	r15
    3bb8:	1f 93       	push	r17
    3bba:	cf 93       	push	r28
    3bbc:	df 93       	push	r29
    3bbe:	00 d0       	rcall	.+0      	; 0x3bc0 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::findpeer() const+0xc>
    3bc0:	00 d0       	rcall	.+0      	; 0x3bc2 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::findpeer() const+0xe>
    3bc2:	cd b7       	in	r28, 0x3d	; 61
    3bc4:	de b7       	in	r29, 0x3e	; 62
    3bc6:	7c 01       	movw	r14, r24
    3bc8:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:148
    for( int i=0; i<peers(); ++i ) {
      if( peerat(i).valid()==false ) {
    3bca:	41 2f       	mov	r20, r17
    3bcc:	b7 01       	movw	r22, r14
    3bce:	ce 01       	movw	r24, r28
    3bd0:	01 96       	adiw	r24, 0x01	; 1
    3bd2:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::peerat(unsigned char) const>
    3bd6:	ce 01       	movw	r24, r28
    3bd8:	01 96       	adiw	r24, 0x01	; 1
    3bda:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <as::HMID::valid() const>
    3bde:	88 23       	and	r24, r24
    3be0:	21 f0       	breq	.+8      	; 0x3bea <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::findpeer() const+0x36>
    3be2:	1f 5f       	subi	r17, 0xFF	; 255
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:147
  bool deletepeer (uint8_t idx) const {
    return storage().setData(peerAddress(idx),Peer());
  }

  uint8_t findpeer () const {
    for( int i=0; i<peers(); ++i ) {
    3be4:	1a 30       	cpi	r17, 0x0A	; 10
    3be6:	89 f7       	brne	.-30     	; 0x3bca <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::findpeer() const+0x16>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:152
      if( peerat(i).valid()==false ) {
        return i;
      }
    }
    return 0xff;
    3be8:	1f ef       	ldi	r17, 0xFF	; 255
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:153
  }
    3bea:	81 2f       	mov	r24, r17
    3bec:	0f 90       	pop	r0
    3bee:	0f 90       	pop	r0
    3bf0:	0f 90       	pop	r0
    3bf2:	0f 90       	pop	r0
    3bf4:	df 91       	pop	r29
    3bf6:	cf 91       	pop	r28
    3bf8:	1f 91       	pop	r17
    3bfa:	ff 90       	pop	r15
    3bfc:	ef 90       	pop	r14
    3bfe:	08 95       	ret

00003c00 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::deletepeer(as::Peer const&) const>:
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE7SCList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi10E6UList0SF_E10deletepeerERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:155

  bool deletepeer (const Peer& p) const {
    3c00:	af 92       	push	r10
    3c02:	bf 92       	push	r11
    3c04:	cf 92       	push	r12
    3c06:	df 92       	push	r13
    3c08:	ef 92       	push	r14
    3c0a:	ff 92       	push	r15
    3c0c:	1f 93       	push	r17
    3c0e:	cf 93       	push	r28
    3c10:	df 93       	push	r29
    3c12:	00 d0       	rcall	.+0      	; 0x3c14 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::deletepeer(as::Peer const&) const+0x14>
    3c14:	00 d0       	rcall	.+0      	; 0x3c16 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::deletepeer(as::Peer const&) const+0x16>
    3c16:	cd b7       	in	r28, 0x3d	; 61
    3c18:	de b7       	in	r29, 0x3e	; 62
    3c1a:	7c 01       	movw	r14, r24
    3c1c:	6b 01       	movw	r12, r22
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:156
    for( uint8_t i=0; i<peers(); ++i ) {
    3c1e:	10 e0       	ldi	r17, 0x00	; 0
deletepeer():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:143
    }
    return false;
  }

  bool deletepeer (uint8_t idx) const {
    return storage().setData(peerAddress(idx),Peer());
    3c20:	5c 01       	movw	r10, r24
    3c22:	84 e0       	ldi	r24, 0x04	; 4
    3c24:	a8 0e       	add	r10, r24
    3c26:	b1 1c       	adc	r11, r1
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE7SCList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi10E6UList0SF_E10deletepeerERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:157
    return 0xff;
  }

  bool deletepeer (const Peer& p) const {
    for( uint8_t i=0; i<peers(); ++i ) {
      if( peerat(i) == p ) {
    3c28:	41 2f       	mov	r20, r17
    3c2a:	b7 01       	movw	r22, r14
    3c2c:	ce 01       	movw	r24, r28
    3c2e:	01 96       	adiw	r24, 0x01	; 1
    3c30:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::peerat(unsigned char) const>
    3c34:	b6 01       	movw	r22, r12
    3c36:	ce 01       	movw	r24, r28
    3c38:	01 96       	adiw	r24, 0x01	; 1
    3c3a:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <as::Peer::operator==(as::Peer const&) const>
    3c3e:	88 23       	and	r24, r24
    3c40:	79 f0       	breq	.+30     	; 0x3c60 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::deletepeer(as::Peer const&) const+0x60>
_ZN2as4HMIDC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:18
    3c42:	1b 82       	std	Y+3, r1	; 0x03
    3c44:	1a 82       	std	Y+2, r1	; 0x02
    3c46:	19 82       	std	Y+1, r1	; 0x01
_ZN2as4PeerC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Peer.h:17
    3c48:	1c 82       	std	Y+4, r1	; 0x04
deletepeer():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:143
    }
    return false;
  }

  bool deletepeer (uint8_t idx) const {
    return storage().setData(peerAddress(idx),Peer());
    3c4a:	61 2f       	mov	r22, r17
    3c4c:	c5 01       	movw	r24, r10
    3c4e:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::peerAddress(unsigned char) const [clone .isra.157]>
_ZN2as13InternalEprom7setDataEjPhj():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:215
    eeprom_write_block(&b,(void*)(uintptr_t)addr,1);
    return true;
  }

  bool setData (uint16_t addr,uint8_t* buf,uint16_t size) {
    eeprom_write_block(buf,(void*)(uintptr_t)addr,size);
    3c52:	44 e0       	ldi	r20, 0x04	; 4
    3c54:	50 e0       	ldi	r21, 0x00	; 0
    3c56:	bc 01       	movw	r22, r24
    3c58:	ce 01       	movw	r24, r28
    3c5a:	01 96       	adiw	r24, 0x01	; 1
    3c5c:	0e 94 de 4e 	call	0x9dbc	; 0x9dbc <eeprom_write_block>
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE7SCList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi10E6UList0SF_E10deletepeerERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:156
    }
    return 0xff;
  }

  bool deletepeer (const Peer& p) const {
    for( uint8_t i=0; i<peers(); ++i ) {
    3c60:	1f 5f       	subi	r17, 0xFF	; 255
    3c62:	1a 30       	cpi	r17, 0x0A	; 10
    3c64:	09 f7       	brne	.-62     	; 0x3c28 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::deletepeer(as::Peer const&) const+0x28>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:162
      if( peerat(i) == p ) {
        deletepeer(i);
      }
    }
    return true;
  }
    3c66:	81 e0       	ldi	r24, 0x01	; 1
    3c68:	0f 90       	pop	r0
    3c6a:	0f 90       	pop	r0
    3c6c:	0f 90       	pop	r0
    3c6e:	0f 90       	pop	r0
    3c70:	df 91       	pop	r29
    3c72:	cf 91       	pop	r28
    3c74:	1f 91       	pop	r17
    3c76:	ff 90       	pop	r15
    3c78:	ef 90       	pop	r14
    3c7a:	df 90       	pop	r13
    3c7c:	cf 90       	pop	r12
    3c7e:	bf 90       	pop	r11
    3c80:	af 90       	pop	r10
    3c82:	08 95       	ret

00003c84 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::deletepeer(as::Peer const&)>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E10deletepeerERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:429
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
  virtual bool peer (const Peer& p) { return ch.peer(p); }
  virtual bool peer (const Peer& p1,const Peer& p2) { return ch.peer(p1,p2); }
  virtual bool deletepeer (const Peer& p) { return ch.deletepeer(p); }
    3c84:	0a 96       	adiw	r24, 0x0a	; 10
    3c86:	0c 94 00 1e 	jmp	0x3c00	; 0x3c00 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::deletepeer(as::Peer const&) const>

00003c8a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::peer(as::Peer const&, as::Peer const&)>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E4peerERKNS_4PeerESO_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:428
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
  virtual bool peer (const Peer& p) { return ch.peer(p); }
  virtual bool peer (const Peer& p1,const Peer& p2) { return ch.peer(p1,p2); }
    3c8a:	cf 92       	push	r12
    3c8c:	df 92       	push	r13
    3c8e:	ef 92       	push	r14
    3c90:	ff 92       	push	r15
    3c92:	0f 93       	push	r16
    3c94:	1f 93       	push	r17
    3c96:	cf 93       	push	r28
    3c98:	df 93       	push	r29
    3c9a:	8c 01       	movw	r16, r24
    3c9c:	7b 01       	movw	r14, r22
    3c9e:	6a 01       	movw	r12, r20
    3ca0:	ec 01       	movw	r28, r24
    3ca2:	2a 96       	adiw	r28, 0x0a	; 10
peer():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:114
    }
    return false;
  }

  bool peer (const Peer& p1,const Peer& p2) const {
    deletepeer(p1);
    3ca4:	ce 01       	movw	r24, r28
    3ca6:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::deletepeer(as::Peer const&) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:115
    deletepeer(p2);
    3caa:	b6 01       	movw	r22, r12
    3cac:	ce 01       	movw	r24, r28
    3cae:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::deletepeer(as::Peer const&) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:116
    uint8_t pidx1 = findpeer();
    3cb2:	ce 01       	movw	r24, r28
    3cb4:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::findpeer() const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:117
    if( pidx1 != 0xff ) {
    3cb8:	8f 3f       	cpi	r24, 0xFF	; 255
    3cba:	19 f1       	breq	.+70     	; 0x3d02 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::peer(as::Peer const&, as::Peer const&)+0x78>
    3cbc:	02 5f       	subi	r16, 0xF2	; 242
    3cbe:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:118
      storage().setData(peerAddress(pidx1),p1);
    3cc0:	68 2f       	mov	r22, r24
    3cc2:	c8 01       	movw	r24, r16
    3cc4:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::peerAddress(unsigned char) const [clone .isra.157]>
    3cc8:	b7 01       	movw	r22, r14
    3cca:	0e 94 9c 13 	call	0x2738	; 0x2738 <bool as::StorageWrapper<as::InternalEprom>::setData<as::Peer>(unsigned int, as::Peer const&) [clone .isra.111]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:119
      uint8_t pidx2 = findpeer();
    3cce:	ce 01       	movw	r24, r28
    3cd0:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::findpeer() const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:120
      if( pidx2 != 0xff ) {
    3cd4:	8f 3f       	cpi	r24, 0xFF	; 255
    3cd6:	89 f0       	breq	.+34     	; 0x3cfa <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::peer(as::Peer const&, as::Peer const&)+0x70>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:121
        storage().setData(peerAddress(pidx2),p2);
    3cd8:	68 2f       	mov	r22, r24
    3cda:	c8 01       	movw	r24, r16
    3cdc:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::peerAddress(unsigned char) const [clone .isra.157]>
    3ce0:	b6 01       	movw	r22, r12
    3ce2:	0e 94 9c 13 	call	0x2738	; 0x2738 <bool as::StorageWrapper<as::InternalEprom>::setData<as::Peer>(unsigned int, as::Peer const&) [clone .isra.111]>
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E4peerERKNS_4PeerESO_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:132
          else {
            getList3(pidx2).odd();
            getList3(pidx1).even();
          }
        }
        return true;
    3ce6:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:428
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
  virtual bool peer (const Peer& p) { return ch.peer(p); }
  virtual bool peer (const Peer& p1,const Peer& p2) { return ch.peer(p1,p2); }
    3ce8:	df 91       	pop	r29
    3cea:	cf 91       	pop	r28
    3cec:	1f 91       	pop	r17
    3cee:	0f 91       	pop	r16
    3cf0:	ff 90       	pop	r15
    3cf2:	ef 90       	pop	r14
    3cf4:	df 90       	pop	r13
    3cf6:	cf 90       	pop	r12
    3cf8:	08 95       	ret
peer():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:136
        }
        return true;
      }
      else {
        // free already stored data
        deletepeer(p1);
    3cfa:	b7 01       	movw	r22, r14
    3cfc:	ce 01       	movw	r24, r28
    3cfe:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::deletepeer(as::Peer const&) const>
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E4peerERKNS_4PeerESO_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:139
      }
    }
    return false;
    3d02:	80 e0       	ldi	r24, 0x00	; 0
    3d04:	f1 cf       	rjmp	.-30     	; 0x3ce8 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::peer(as::Peer const&, as::Peer const&)+0x5e>

00003d06 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::peer(as::Peer const&)>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E4peerERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:427
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
  virtual bool peer (const Peer& p) { return ch.peer(p); }
    3d06:	ef 92       	push	r14
    3d08:	ff 92       	push	r15
    3d0a:	0f 93       	push	r16
    3d0c:	1f 93       	push	r17
    3d0e:	cf 93       	push	r28
    3d10:	df 93       	push	r29
    3d12:	8c 01       	movw	r16, r24
    3d14:	eb 01       	movw	r28, r22
    3d16:	7c 01       	movw	r14, r24
    3d18:	8a e0       	ldi	r24, 0x0A	; 10
    3d1a:	e8 0e       	add	r14, r24
    3d1c:	f1 1c       	adc	r15, r1
peer():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:101
    return result;
  }


  bool peer (const Peer& p) {
    deletepeer(p);
    3d1e:	c7 01       	movw	r24, r14
    3d20:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::deletepeer(as::Peer const&) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:102
    uint8_t pidx = findpeer();
    3d24:	c7 01       	movw	r24, r14
    3d26:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::findpeer() const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:103
    if( pidx != 0xff ) {
    3d2a:	8f 3f       	cpi	r24, 0xFF	; 255
    3d2c:	81 f0       	breq	.+32     	; 0x3d4e <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::peer(as::Peer const&)+0x48>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:104
      storage().setData(peerAddress(pidx),p);
    3d2e:	68 2f       	mov	r22, r24
    3d30:	c8 01       	movw	r24, r16
    3d32:	0e 96       	adiw	r24, 0x0e	; 14
    3d34:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::peerAddress(unsigned char) const [clone .isra.157]>
    3d38:	be 01       	movw	r22, r28
    3d3a:	0e 94 9c 13 	call	0x2738	; 0x2738 <bool as::StorageWrapper<as::InternalEprom>::setData<as::Peer>(unsigned int, as::Peer const&) [clone .isra.111]>
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E4peerERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:108
      if( hasList3() == true ) {
        getList3(pidx).single();
      }
      return true;
    3d3e:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:427
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
  virtual bool peer (const Peer& p) { return ch.peer(p); }
    3d40:	df 91       	pop	r29
    3d42:	cf 91       	pop	r28
    3d44:	1f 91       	pop	r17
    3d46:	0f 91       	pop	r16
    3d48:	ff 90       	pop	r15
    3d4a:	ef 90       	pop	r14
    3d4c:	08 95       	ret
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:110
      if( hasList3() == true ) {
        getList3(pidx).single();
      }
      return true;
    }
    return false;
    3d4e:	80 e0       	ldi	r24, 0x00	; 0
    3d50:	f7 cf       	rjmp	.-18     	; 0x3d40 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::peer(as::Peer const&)+0x3a>

00003d52 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::peerat(unsigned char) const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E6peeratEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:426
  virtual void changed (bool c) { ch.changed(c); }
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
    3d52:	cf 93       	push	r28
    3d54:	df 93       	push	r29
    3d56:	ec 01       	movw	r28, r24
    3d58:	66 5f       	subi	r22, 0xF6	; 246
    3d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d5c:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::peerat(unsigned char) const>
    3d60:	ce 01       	movw	r24, r28
    3d62:	df 91       	pop	r29
    3d64:	cf 91       	pop	r28
    3d66:	08 95       	ret

00003d68 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::has(as::Peer const&) const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E3hasERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:425
  virtual bool changed () const { return ch.changed(); }
  virtual void changed (bool c) { ch.changed(c); }
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
    3d68:	cf 92       	push	r12
    3d6a:	df 92       	push	r13
    3d6c:	ef 92       	push	r14
    3d6e:	ff 92       	push	r15
    3d70:	1f 93       	push	r17
    3d72:	cf 93       	push	r28
    3d74:	df 93       	push	r29
    3d76:	00 d0       	rcall	.+0      	; 0x3d78 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::has(as::Peer const&) const+0x10>
    3d78:	00 d0       	rcall	.+0      	; 0x3d7a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::has(as::Peer const&) const+0x12>
    3d7a:	cd b7       	in	r28, 0x3d	; 61
    3d7c:	de b7       	in	r29, 0x3e	; 62
    3d7e:	6b 01       	movw	r12, r22
    3d80:	0a 96       	adiw	r24, 0x0a	; 10
    3d82:	7c 01       	movw	r14, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:73
    size += List1::size();
    return size;
  }

  bool has (const Peer& p) const {
    for( uint8_t i=0; i<peers(); ++i ) {
    3d84:	10 e0       	ldi	r17, 0x00	; 0
has():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:74
      if( p == peerat(i) ) {
    3d86:	41 2f       	mov	r20, r17
    3d88:	b7 01       	movw	r22, r14
    3d8a:	ce 01       	movw	r24, r28
    3d8c:	01 96       	adiw	r24, 0x01	; 1
    3d8e:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::peerat(unsigned char) const>
    3d92:	be 01       	movw	r22, r28
    3d94:	6f 5f       	subi	r22, 0xFF	; 255
    3d96:	7f 4f       	sbci	r23, 0xFF	; 255
    3d98:	c6 01       	movw	r24, r12
    3d9a:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <as::Peer::operator==(as::Peer const&) const>
    3d9e:	81 11       	cpse	r24, r1
    3da0:	03 c0       	rjmp	.+6      	; 0x3da8 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::has(as::Peer const&) const+0x40>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:73
    size += List1::size();
    return size;
  }

  bool has (const Peer& p) const {
    for( uint8_t i=0; i<peers(); ++i ) {
    3da2:	1f 5f       	subi	r17, 0xFF	; 255
    3da4:	1a 30       	cpi	r17, 0x0A	; 10
    3da6:	79 f7       	brne	.-34     	; 0x3d86 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::has(as::Peer const&) const+0x1e>
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E3hasERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:425
  virtual bool changed () const { return ch.changed(); }
  virtual void changed (bool c) { ch.changed(c); }
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
    3da8:	0f 90       	pop	r0
    3daa:	0f 90       	pop	r0
    3dac:	0f 90       	pop	r0
    3dae:	0f 90       	pop	r0
    3db0:	df 91       	pop	r29
    3db2:	cf 91       	pop	r28
    3db4:	1f 91       	pop	r17
    3db6:	ff 90       	pop	r15
    3db8:	ef 90       	pop	r14
    3dba:	df 90       	pop	r13
    3dbc:	cf 90       	pop	r12
    3dbe:	08 95       	ret

00003dc0 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::getList4(as::Peer const&) const>:
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE7SCList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi10E6UList0SF_E8getList4ERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:196
      }
    }
    return List3Type(liststart);
  }

  List4Type getList4 (const Peer& p) const {
    3dc0:	cf 92       	push	r12
    3dc2:	df 92       	push	r13
    3dc4:	ef 92       	push	r14
    3dc6:	ff 92       	push	r15
    3dc8:	1f 93       	push	r17
    3dca:	cf 93       	push	r28
    3dcc:	df 93       	push	r29
    3dce:	00 d0       	rcall	.+0      	; 0x3dd0 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::getList4(as::Peer const&) const+0x10>
    3dd0:	00 d0       	rcall	.+0      	; 0x3dd2 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::getList4(as::Peer const&) const+0x12>
    3dd2:	cd b7       	in	r28, 0x3d	; 61
    3dd4:	de b7       	in	r29, 0x3e	; 62
    3dd6:	7c 01       	movw	r14, r24
    3dd8:	6b 01       	movw	r12, r22
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:199
    uint16_t liststart = 0x00;
    if( hasList4() == true ) {
      for( uint8_t i=0; i<peers(); ++i ) {
    3dda:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:200
        if( peerat(i) == p ) {
    3ddc:	41 2f       	mov	r20, r17
    3dde:	b7 01       	movw	r22, r14
    3de0:	ce 01       	movw	r24, r28
    3de2:	01 96       	adiw	r24, 0x01	; 1
    3de4:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::peerat(unsigned char) const>
    3de8:	b6 01       	movw	r22, r12
    3dea:	ce 01       	movw	r24, r28
    3dec:	01 96       	adiw	r24, 0x01	; 1
    3dee:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <as::Peer::operator==(as::Peer const&) const>
    3df2:	88 23       	and	r24, r24
    3df4:	91 f0       	breq	.+36     	; 0x3e1a <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::getList4(as::Peer const&) const+0x5a>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:201
          liststart = peerAddress(i) + sizeof(Peer) + List3::size();
    3df6:	61 2f       	mov	r22, r17
    3df8:	c7 01       	movw	r24, r14
    3dfa:	04 96       	adiw	r24, 0x04	; 4
    3dfc:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::peerAddress(unsigned char) const [clone .isra.157]>
    3e00:	04 96       	adiw	r24, 0x04	; 4
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:207
          break;
        }
      }
    }
    return List4Type(liststart);
  }
    3e02:	0f 90       	pop	r0
    3e04:	0f 90       	pop	r0
    3e06:	0f 90       	pop	r0
    3e08:	0f 90       	pop	r0
    3e0a:	df 91       	pop	r29
    3e0c:	cf 91       	pop	r28
    3e0e:	1f 91       	pop	r17
    3e10:	ff 90       	pop	r15
    3e12:	ef 90       	pop	r14
    3e14:	df 90       	pop	r13
    3e16:	cf 90       	pop	r12
    3e18:	08 95       	ret
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:199
  }

  List4Type getList4 (const Peer& p) const {
    uint16_t liststart = 0x00;
    if( hasList4() == true ) {
      for( uint8_t i=0; i<peers(); ++i ) {
    3e1a:	1f 5f       	subi	r17, 0xFF	; 255
    3e1c:	1a 30       	cpi	r17, 0x0A	; 10
    3e1e:	f1 f6       	brne	.-68     	; 0x3ddc <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::getList4(as::Peer const&) const+0x1c>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:197
    }
    return List3Type(liststart);
  }

  List4Type getList4 (const Peer& p) const {
    uint16_t liststart = 0x00;
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	80 e0       	ldi	r24, 0x00	; 0
    3e24:	ee cf       	rjmp	.-36     	; 0x3e02 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::getList4(as::Peer const&) const+0x42>

00003e26 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::getList4(as::Peer const&) const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_E8getList4ERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:448
  virtual void configChanged () { ch.configChanged(); }

  virtual GenericList getList1 () const { return ch.getList1(); }
  virtual GenericList getList2 () const { return ch.getList2(); }
  virtual GenericList getList3 (const Peer& p) const { return ch.getList3(p); }
  virtual GenericList getList4 (const Peer& p) const { return ch.getList4(p); }
    3e26:	cf 93       	push	r28
    3e28:	df 93       	push	r29
    3e2a:	00 d0       	rcall	.+0      	; 0x3e2c <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::getList4(as::Peer const&) const+0x6>
    3e2c:	00 d0       	rcall	.+0      	; 0x3e2e <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::getList4(as::Peer const&) const+0x8>
    3e2e:	00 d0       	rcall	.+0      	; 0x3e30 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::getList4(as::Peer const&) const+0xa>
    3e30:	1f 92       	push	r1
    3e32:	cd b7       	in	r28, 0x3d	; 61
    3e34:	de b7       	in	r29, 0x3e	; 62
    3e36:	0a 96       	adiw	r24, 0x0a	; 10
    3e38:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::getList4(as::Peer const&) const>
    3e3c:	65 e5       	ldi	r22, 0x55	; 85
    3e3e:	7a e0       	ldi	r23, 0x0A	; 10
    3e40:	7d 83       	std	Y+5, r23	; 0x05
    3e42:	6c 83       	std	Y+4, r22	; 0x04
    3e44:	4d ed       	ldi	r20, 0xDD	; 221
    3e46:	5d e0       	ldi	r21, 0x0D	; 13
    3e48:	5f 83       	std	Y+7, r21	; 0x07
    3e4a:	4e 83       	std	Y+6, r20	; 0x06
    3e4c:	9c 01       	movw	r18, r24
    3e4e:	56 2f       	mov	r21, r22
    3e50:	6d 81       	ldd	r22, Y+5	; 0x05
    3e52:	74 2f       	mov	r23, r20
    3e54:	41 e0       	ldi	r20, 0x01	; 1
    3e56:	8f 81       	ldd	r24, Y+7	; 0x07
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	27 96       	adiw	r28, 0x07	; 7
    3e5c:	0f b6       	in	r0, 0x3f	; 63
    3e5e:	f8 94       	cli
    3e60:	de bf       	out	0x3e, r29	; 62
    3e62:	0f be       	out	0x3f, r0	; 63
    3e64:	cd bf       	out	0x3d, r28	; 61
    3e66:	df 91       	pop	r29
    3e68:	cf 91       	pop	r28
    3e6a:	08 95       	ret

00003e6c <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peerat(unsigned char) const>:
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_11SwitchList1ENS_15SwitchList3TmplINS_8RegList3INS_10SwitchReg3EEEEENS_9EmptyListELi10E6UList0SK_E6peeratEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:90
      }
    }
    return 0xff;
  }

  Peer peerat (uint8_t idx) const {
    3e6c:	cf 93       	push	r28
    3e6e:	df 93       	push	r29
    3e70:	ec 01       	movw	r28, r24
    3e72:	cb 01       	movw	r24, r22
_ZN2as4HMIDC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:18
    3e74:	1a 82       	std	Y+2, r1	; 0x02
    3e76:	19 82       	std	Y+1, r1	; 0x01
    3e78:	18 82       	st	Y, r1
_ZN2as4PeerC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Peer.h:17
    3e7a:	1b 82       	std	Y+3, r1	; 0x03
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_11SwitchList1ENS_15SwitchList3TmplINS_8RegList3INS_10SwitchReg3EEEEENS_9EmptyListELi10E6UList0SK_E6peeratEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:92
    Peer result;
    uint16_t paddr = peerAddress(idx);
    3e7c:	64 2f       	mov	r22, r20
    3e7e:	04 96       	adiw	r24, 0x04	; 4
    3e80:	0e 94 19 0a 	call	0x1432	; 0x1432 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peerAddress(unsigned char) const [clone .isra.126]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:93
    if( paddr != 0 ) {
    3e84:	00 97       	sbiw	r24, 0x00	; 0
    3e86:	31 f0       	breq	.+12     	; 0x3e94 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peerat(unsigned char) const+0x28>
_ZN2as13InternalEprom7getDataEjPhj():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:220
    return true;
  }

  bool getData (uint16_t addr,uint8_t* buf,uint16_t size) {
    eeprom_read_block(buf,(const void*)(uintptr_t)addr,size);
    3e88:	44 e0       	ldi	r20, 0x04	; 4
    3e8a:	50 e0       	ldi	r21, 0x00	; 0
    3e8c:	bc 01       	movw	r22, r24
    3e8e:	ce 01       	movw	r24, r28
    3e90:	0e 94 ce 4e 	call	0x9d9c	; 0x9d9c <eeprom_read_block>
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_11SwitchList1ENS_15SwitchList3TmplINS_8RegList3INS_10SwitchReg3EEEEENS_9EmptyListELi10E6UList0SK_E6peeratEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:97
      storage().getData(paddr,&result);
    }
    return result;
  }
    3e94:	ce 01       	movw	r24, r28
    3e96:	df 91       	pop	r29
    3e98:	cf 91       	pop	r28
    3e9a:	08 95       	ret

00003e9c <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::getList3(as::Peer const&) const>:
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_11SwitchList1ENS_15SwitchList3TmplINS_8RegList3INS_10SwitchReg3EEEEENS_9EmptyListELi10E6UList0SK_E8getList3ERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:183

  List2Type getList2 () const {
    return List2Type(address()+List1::size());
  }

  List3Type getList3 (const Peer& p) const {
    3e9c:	cf 92       	push	r12
    3e9e:	df 92       	push	r13
    3ea0:	ef 92       	push	r14
    3ea2:	ff 92       	push	r15
    3ea4:	1f 93       	push	r17
    3ea6:	cf 93       	push	r28
    3ea8:	df 93       	push	r29
    3eaa:	00 d0       	rcall	.+0      	; 0x3eac <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::getList3(as::Peer const&) const+0x10>
    3eac:	00 d0       	rcall	.+0      	; 0x3eae <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::getList3(as::Peer const&) const+0x12>
    3eae:	cd b7       	in	r28, 0x3d	; 61
    3eb0:	de b7       	in	r29, 0x3e	; 62
    3eb2:	7c 01       	movw	r14, r24
    3eb4:	6b 01       	movw	r12, r22
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:186
    uint16_t liststart = 0x00;
    if( hasList3() == true ) {
      for( uint8_t i=0; i<peers(); ++i ) {
    3eb6:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:187
        if( peerat(i) == p ) {
    3eb8:	41 2f       	mov	r20, r17
    3eba:	b7 01       	movw	r22, r14
    3ebc:	ce 01       	movw	r24, r28
    3ebe:	01 96       	adiw	r24, 0x01	; 1
    3ec0:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peerat(unsigned char) const>
    3ec4:	b6 01       	movw	r22, r12
    3ec6:	ce 01       	movw	r24, r28
    3ec8:	01 96       	adiw	r24, 0x01	; 1
    3eca:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <as::Peer::operator==(as::Peer const&) const>
    3ece:	88 23       	and	r24, r24
    3ed0:	91 f0       	breq	.+36     	; 0x3ef6 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::getList3(as::Peer const&) const+0x5a>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:188
          liststart = peerAddress(i) + sizeof(Peer);
    3ed2:	61 2f       	mov	r22, r17
    3ed4:	c7 01       	movw	r24, r14
    3ed6:	04 96       	adiw	r24, 0x04	; 4
    3ed8:	0e 94 19 0a 	call	0x1432	; 0x1432 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peerAddress(unsigned char) const [clone .isra.126]>
    3edc:	04 96       	adiw	r24, 0x04	; 4
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:194
          break;
        }
      }
    }
    return List3Type(liststart);
  }
    3ede:	0f 90       	pop	r0
    3ee0:	0f 90       	pop	r0
    3ee2:	0f 90       	pop	r0
    3ee4:	0f 90       	pop	r0
    3ee6:	df 91       	pop	r29
    3ee8:	cf 91       	pop	r28
    3eea:	1f 91       	pop	r17
    3eec:	ff 90       	pop	r15
    3eee:	ef 90       	pop	r14
    3ef0:	df 90       	pop	r13
    3ef2:	cf 90       	pop	r12
    3ef4:	08 95       	ret
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:186
  }

  List3Type getList3 (const Peer& p) const {
    uint16_t liststart = 0x00;
    if( hasList3() == true ) {
      for( uint8_t i=0; i<peers(); ++i ) {
    3ef6:	1f 5f       	subi	r17, 0xFF	; 255
    3ef8:	1a 30       	cpi	r17, 0x0A	; 10
    3efa:	f1 f6       	brne	.-68     	; 0x3eb8 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::getList3(as::Peer const&) const+0x1c>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:184
  List2Type getList2 () const {
    return List2Type(address()+List1::size());
  }

  List3Type getList3 (const Peer& p) const {
    uint16_t liststart = 0x00;
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	80 e0       	ldi	r24, 0x00	; 0
    3f00:	ee cf       	rjmp	.-36     	; 0x3ede <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::getList3(as::Peer const&) const+0x42>

00003f02 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::getList3(as::Peer const&) const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E8getList3ERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:447
  virtual void patchStatus (Message& msg) { ch.patchStatus(msg); }
  virtual void configChanged () { ch.configChanged(); }

  virtual GenericList getList1 () const { return ch.getList1(); }
  virtual GenericList getList2 () const { return ch.getList2(); }
  virtual GenericList getList3 (const Peer& p) const { return ch.getList3(p); }
    3f02:	cf 93       	push	r28
    3f04:	df 93       	push	r29
    3f06:	00 d0       	rcall	.+0      	; 0x3f08 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::getList3(as::Peer const&) const+0x6>
    3f08:	00 d0       	rcall	.+0      	; 0x3f0a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::getList3(as::Peer const&) const+0x8>
    3f0a:	00 d0       	rcall	.+0      	; 0x3f0c <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::getList3(as::Peer const&) const+0xa>
    3f0c:	1f 92       	push	r1
    3f0e:	cd b7       	in	r28, 0x3d	; 61
    3f10:	de b7       	in	r29, 0x3e	; 62
    3f12:	0d 96       	adiw	r24, 0x0d	; 13
    3f14:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::getList3(as::Peer const&) const>
    3f18:	68 e2       	ldi	r22, 0x28	; 40
    3f1a:	7a e0       	ldi	r23, 0x0A	; 10
    3f1c:	7d 83       	std	Y+5, r23	; 0x05
    3f1e:	6c 83       	std	Y+4, r22	; 0x04
    3f20:	4a ef       	ldi	r20, 0xFA	; 250
    3f22:	5d e0       	ldi	r21, 0x0D	; 13
    3f24:	5f 83       	std	Y+7, r21	; 0x07
    3f26:	4e 83       	std	Y+6, r20	; 0x06
    3f28:	9c 01       	movw	r18, r24
    3f2a:	56 2f       	mov	r21, r22
    3f2c:	6d 81       	ldd	r22, Y+5	; 0x05
    3f2e:	74 2f       	mov	r23, r20
    3f30:	46 e1       	ldi	r20, 0x16	; 22
    3f32:	8f 81       	ldd	r24, Y+7	; 0x07
    3f34:	90 e0       	ldi	r25, 0x00	; 0
    3f36:	27 96       	adiw	r28, 0x07	; 7
    3f38:	0f b6       	in	r0, 0x3f	; 63
    3f3a:	f8 94       	cli
    3f3c:	de bf       	out	0x3e, r29	; 62
    3f3e:	0f be       	out	0x3f, r0	; 63
    3f40:	cd bf       	out	0x3d, r28	; 61
    3f42:	df 91       	pop	r29
    3f44:	cf 91       	pop	r28
    3f46:	08 95       	ret

00003f48 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E7processERKNS_14SensorEventMsgE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:437
#ifndef SENSOR_ONLY
  virtual void stop () { ch.stop(); };
  virtual bool process (const ActionSetMsg& msg) { return ch.process(msg); }
  virtual bool process (const ActionCommandMsg& msg) { return ch.process(msg); }
  virtual bool process (const RemoteEventMsg& msg) { return ch.process(msg); }
  virtual bool process (const SensorEventMsg& msg) { return ch.process(msg); }
    3f48:	df 92       	push	r13
    3f4a:	ef 92       	push	r14
    3f4c:	ff 92       	push	r15
    3f4e:	0f 93       	push	r16
    3f50:	1f 93       	push	r17
    3f52:	cf 93       	push	r28
    3f54:	df 93       	push	r29
    3f56:	00 d0       	rcall	.+0      	; 0x3f58 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0x10>
    3f58:	00 d0       	rcall	.+0      	; 0x3f5a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0x12>
    3f5a:	00 d0       	rcall	.+0      	; 0x3f5c <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0x14>
    3f5c:	cd b7       	in	r28, 0x3d	; 61
    3f5e:	de b7       	in	r29, 0x3e	; 62
    3f60:	7c 01       	movw	r14, r24
    3f62:	fb 01       	movw	r30, r22
    3f64:	02 85       	ldd	r16, Z+10	; 0x0a
_ZN2as4HMIDC2ERKS0_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:31
    id[0]=*ptr;
    id[1]=*(ptr+1);
    id[2]=*(ptr+2);
  }
  HMID (const HMID& other) {
    id[0]=other.id[0];
    3f66:	84 81       	ldd	r24, Z+4	; 0x04
    3f68:	89 83       	std	Y+1, r24	; 0x01
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:32
    id[1]=other.id[1];
    3f6a:	85 81       	ldd	r24, Z+5	; 0x05
    3f6c:	8a 83       	std	Y+2, r24	; 0x02
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:33
    id[2]=other.id[2];
    3f6e:	86 81       	ldd	r24, Z+6	; 0x06
    3f70:	8b 83       	std	Y+3, r24	; 0x03
peer():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:479
      flags |= 0x80; // low battery
    }
    Message::init(0xb,msgcnt,AS_MESSAGE_REMOTE_EVENT,BIDI|WKMEUP,(ch & 0x3f) | flags,counter);
  }

  Peer peer () const { return Peer(from(),command() & 0x3f); }
    3f72:	80 2f       	mov	r24, r16
    3f74:	8f 73       	andi	r24, 0x3F	; 63
_ZN2as4PeerC2ERKNS_4HMIDEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Peer.h:18
  Peer (const HMID& id,uint8_t ch) : HMID(id), chan(ch) {}
    3f76:	8c 83       	std	Y+4, r24	; 0x04
    3f78:	d3 84       	ldd	r13, Z+11	; 0x0b
_ZNK2as14SensorEventMsg5valueEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:499
          flags |= 0x80; // low battery
      }
      Message::init(0xc,msgcnt,AS_MESSAGE_SENSOR_EVENT,BIDI|WKMEUP,(ch & 0x3f) | flags,counter);
      *data() = value;
  }
  uint8_t value () const { return *data(); }
    3f7a:	14 85       	ldd	r17, Z+12	; 0x0c
process():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:346
    if( BaseChannel::hasList3() ) {
      bool lg = msg.isLong();
      Peer p(msg.peer());
      uint8_t cnt = msg.counter();
      uint8_t value = msg.value();
      List3Type l3 = BaseChannel::getList3(p);
    3f7c:	be 01       	movw	r22, r28
    3f7e:	6f 5f       	subi	r22, 0xFF	; 255
    3f80:	7f 4f       	sbci	r23, 0xFF	; 255
    3f82:	c7 01       	movw	r24, r14
    3f84:	0d 96       	adiw	r24, 0x0d	; 13
    3f86:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::getList3(as::Peer const&) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:347
      if( l3.valid() == true ) {
    3f8a:	00 97       	sbiw	r24, 0x00	; 0
    3f8c:	09 f4       	brne	.+2      	; 0x3f90 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0x48>
    3f8e:	6b c0       	rjmp	.+214    	; 0x4066 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0x11e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:349
        // l3.dump();
        typename List3Type::PeerList pl = lg ? l3.lg() : l3.sh();
    3f90:	06 fd       	sbrc	r16, 6
_ZNK2as13ShortLongListINS_8RegList3INS_10SwitchReg3EEEE2lgEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:869
public:
  typedef PeerListType PeerList;
  ShortLongList(uint16_t a) : BaseList(a) {}

  const PeerList sh () const { return PeerList(this->address()); }
  const PeerList lg () const { return PeerList(this->address() + PeerList::size() ); }
    3f92:	0b 96       	adiw	r24, 0x0b	; 11
process():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:349
    3f94:	9e 83       	std	Y+6, r25	; 0x06
    3f96:	8d 83       	std	Y+5, r24	; 0x05
_ZNK2as18SwitchStateMachine20getConditionForStateEhRKNS_8RegList3INS_10SwitchReg3EEE.isra.102():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:229
    }
    return AS_CM_JT_NONE;
  }

  uint8_t getConditionForState(uint8_t stat,const SwitchPeerList& lst) const {
    switch( stat ) {
    3f98:	f7 01       	movw	r30, r14
    3f9a:	82 85       	ldd	r24, Z+10	; 0x0a
    3f9c:	83 30       	cpi	r24, 0x03	; 3
    3f9e:	b9 f0       	breq	.+46     	; 0x3fce <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0x86>
    3fa0:	70 f4       	brcc	.+28     	; 0x3fbe <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0x76>
ctDlyOn():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:717

  uint8_t ctRampOn () const { return this->readRegister(PREG_CTRAMPONOFF,0x0f,0); }
  bool ctRampOn (uint8_t v) const { return this->writeRegister(PREG_CTRAMPONOFF,0x0f,0,v); }
  uint8_t ctRampOff () const { return this->readRegister(PREG_CTRAMPONOFF,0x0f,4); }
  bool ctRampOff (uint8_t v) const { return this->writeRegister(PREG_CTRAMPONOFF,0x0f,4,v); }
  uint8_t ctDlyOn () const { return this->readRegister(PREG_CTDELAYONOFF,0x0f,0); }
    3fa2:	20 e0       	ldi	r18, 0x00	; 0
    3fa4:	40 e0       	ldi	r20, 0x00	; 0
_ZNK2as18SwitchStateMachine20getConditionForStateEhRKNS_8RegList3INS_10SwitchReg3EEE.isra.102():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:229
    3fa6:	81 30       	cpi	r24, 0x01	; 1
    3fa8:	b9 f0       	breq	.+46     	; 0x3fd8 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0x90>
ctValLo():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:730
  uint8_t ctRepOn () const { return this->readRegister(PREG_CTREPONOFF,0x0f,0); }
  bool ctRepOn (uint8_t v) const { return this->writeRegister(PREG_CTREPONOFF,0x0f,0,v); }
  uint8_t ctRepOff () const { return this->readRegister(PREG_CTREPONOFF,0x0f,4); }
  bool ctRepOff (uint8_t v) const { return this->writeRegister(PREG_CTREPONOFF,0x0f,4,v); }

  uint8_t ctValLo() const { return this->readRegister(PREG_CONDVALUELOW,0x32); }
    3faa:	42 e3       	ldi	r20, 0x32	; 50
    3fac:	64 e0       	ldi	r22, 0x04	; 4
ctValHi():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:732
  bool ctValLo(uint8_t v) const { return this->writeRegister(PREG_CONDVALUELOW,v); }
  uint8_t ctValHi() const { return this->readRegister(PREG_CONDVALUEHIGH,0x64); }
    3fae:	ce 01       	movw	r24, r28
    3fb0:	05 96       	adiw	r24, 0x05	; 5
    3fb2:	0e 94 55 16 	call	0x2caa	; 0x2caa <as::RegisterList<as::SwitchReg3>::readRegister(unsigned char, unsigned char) const>
sensor():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:307
      break;
    case AS_CM_CT_COND_VALUE_LO_LE_X_LT_COND_VALUE_HI:
      doit = ((lst.ctValLo() <= value) && (value < lst.ctValHi()));
      break;
    case AS_CM_CT_X_LT_COND_VALUE_LO_OR_X_GE_COND_VALUE_HI:
      doit =((value < lst.ctValLo()) || (value >= lst.ctValHi()));
    3fb6:	18 17       	cp	r17, r24
    3fb8:	08 f0       	brcs	.+2      	; 0x3fbc <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0x74>
    3fba:	41 c0       	rjmp	.+130    	; 0x403e <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0xf6>
    3fbc:	19 c0       	rjmp	.+50     	; 0x3ff0 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0xa8>
_ZNK2as18SwitchStateMachine20getConditionForStateEhRKNS_8RegList3INS_10SwitchReg3EEE.isra.102():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:229
    }
    return AS_CM_JT_NONE;
  }

  uint8_t getConditionForState(uint8_t stat,const SwitchPeerList& lst) const {
    switch( stat ) {
    3fbe:	84 30       	cpi	r24, 0x04	; 4
    3fc0:	49 f0       	breq	.+18     	; 0x3fd4 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0x8c>
ctOff():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:723
  bool ctDlyOn (uint8_t v) const { return this->writeRegister(PREG_CTDELAYONOFF,0x0f,0,v); }
  uint8_t ctDlyOff () const { return this->readRegister(PREG_CTDELAYONOFF,0x0f,4); }
  bool ctDlyOff (uint8_t v) const { return this->writeRegister(PREG_CTDELAYONOFF,0x0f,4,v); }
  uint8_t ctOn () const { return this->readRegister(PREG_CTONOFF,0x0f,0); }
  bool ctOn (uint8_t v) const { return this->writeRegister(PREG_CTONOFF,0x0f,0,v); }
  uint8_t ctOff () const { return this->readRegister(PREG_CTONOFF,0x0f,4); }
    3fc2:	20 e0       	ldi	r18, 0x00	; 0
    3fc4:	44 e0       	ldi	r20, 0x04	; 4
_ZNK2as18SwitchStateMachine20getConditionForStateEhRKNS_8RegList3INS_10SwitchReg3EEE.isra.102():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:229
    3fc6:	86 30       	cpi	r24, 0x06	; 6
    3fc8:	81 f7       	brne	.-32     	; 0x3faa <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0x62>
ctOff():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:723
    3fca:	63 e0       	ldi	r22, 0x03	; 3
    3fcc:	06 c0       	rjmp	.+12     	; 0x3fda <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0x92>
ctOn():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:721
  bool ctRampOff (uint8_t v) const { return this->writeRegister(PREG_CTRAMPONOFF,0x0f,4,v); }
  uint8_t ctDlyOn () const { return this->readRegister(PREG_CTDELAYONOFF,0x0f,0); }
  bool ctDlyOn (uint8_t v) const { return this->writeRegister(PREG_CTDELAYONOFF,0x0f,0,v); }
  uint8_t ctDlyOff () const { return this->readRegister(PREG_CTDELAYONOFF,0x0f,4); }
  bool ctDlyOff (uint8_t v) const { return this->writeRegister(PREG_CTDELAYONOFF,0x0f,4,v); }
  uint8_t ctOn () const { return this->readRegister(PREG_CTONOFF,0x0f,0); }
    3fce:	20 e0       	ldi	r18, 0x00	; 0
    3fd0:	40 e0       	ldi	r20, 0x00	; 0
    3fd2:	fb cf       	rjmp	.-10     	; 0x3fca <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0x82>
ctDlyOff():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:719
  bool ctRampOn (uint8_t v) const { return this->writeRegister(PREG_CTRAMPONOFF,0x0f,0,v); }
  uint8_t ctRampOff () const { return this->readRegister(PREG_CTRAMPONOFF,0x0f,4); }
  bool ctRampOff (uint8_t v) const { return this->writeRegister(PREG_CTRAMPONOFF,0x0f,4,v); }
  uint8_t ctDlyOn () const { return this->readRegister(PREG_CTDELAYONOFF,0x0f,0); }
  bool ctDlyOn (uint8_t v) const { return this->writeRegister(PREG_CTDELAYONOFF,0x0f,0,v); }
  uint8_t ctDlyOff () const { return this->readRegister(PREG_CTDELAYONOFF,0x0f,4); }
    3fd4:	20 e0       	ldi	r18, 0x00	; 0
    3fd6:	44 e0       	ldi	r20, 0x04	; 4
    3fd8:	62 e0       	ldi	r22, 0x02	; 2
ctOff():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:723
  bool ctDlyOff (uint8_t v) const { return this->writeRegister(PREG_CTDELAYONOFF,0x0f,4,v); }
  uint8_t ctOn () const { return this->readRegister(PREG_CTONOFF,0x0f,0); }
  bool ctOn (uint8_t v) const { return this->writeRegister(PREG_CTONOFF,0x0f,0,v); }
  uint8_t ctOff () const { return this->readRegister(PREG_CTONOFF,0x0f,4); }
    3fda:	ce 01       	movw	r24, r28
    3fdc:	05 96       	adiw	r24, 0x05	; 5
    3fde:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <as::RegisterList<as::SwitchReg3>::readRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.69]>
sensor():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:290
  }

  void sensor (const SwitchPeerList& lst,uint8_t counter,uint8_t value) {
    uint8_t cond = getConditionForState(state,lst);
    bool doit = false;
    switch( cond ) {
    3fe2:	82 30       	cpi	r24, 0x02	; 2
    3fe4:	21 f1       	breq	.+72     	; 0x402e <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0xe6>
    3fe6:	98 f4       	brcc	.+38     	; 0x400e <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0xc6>
    3fe8:	88 23       	and	r24, r24
    3fea:	f9 f2       	breq	.-66     	; 0x3faa <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0x62>
    3fec:	81 30       	cpi	r24, 0x01	; 1
    3fee:	e1 f0       	breq	.+56     	; 0x4028 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0xe0>
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E7processERKNS_14SensorEventMsgE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:352
        // pl.dump();
        StateMachine::sensor(pl,cnt,value);
        return true;
    3ff0:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:437
#ifndef SENSOR_ONLY
  virtual void stop () { ch.stop(); };
  virtual bool process (const ActionSetMsg& msg) { return ch.process(msg); }
  virtual bool process (const ActionCommandMsg& msg) { return ch.process(msg); }
  virtual bool process (const RemoteEventMsg& msg) { return ch.process(msg); }
  virtual bool process (const SensorEventMsg& msg) { return ch.process(msg); }
    3ff2:	26 96       	adiw	r28, 0x06	; 6
    3ff4:	0f b6       	in	r0, 0x3f	; 63
    3ff6:	f8 94       	cli
    3ff8:	de bf       	out	0x3e, r29	; 62
    3ffa:	0f be       	out	0x3f, r0	; 63
    3ffc:	cd bf       	out	0x3d, r28	; 61
    3ffe:	df 91       	pop	r29
    4000:	cf 91       	pop	r28
    4002:	1f 91       	pop	r17
    4004:	0f 91       	pop	r16
    4006:	ff 90       	pop	r15
    4008:	ef 90       	pop	r14
    400a:	df 90       	pop	r13
    400c:	08 95       	ret
sensor():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:290
    400e:	84 30       	cpi	r24, 0x04	; 4
    4010:	f9 f0       	breq	.+62     	; 0x4050 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0x108>
    4012:	30 f1       	brcs	.+76     	; 0x4060 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0x118>
    4014:	85 30       	cpi	r24, 0x05	; 5
    4016:	61 f7       	brne	.-40     	; 0x3ff0 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0xa8>
ctValLo():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:730
  uint8_t ctRepOn () const { return this->readRegister(PREG_CTREPONOFF,0x0f,0); }
  bool ctRepOn (uint8_t v) const { return this->writeRegister(PREG_CTREPONOFF,0x0f,0,v); }
  uint8_t ctRepOff () const { return this->readRegister(PREG_CTREPONOFF,0x0f,4); }
  bool ctRepOff (uint8_t v) const { return this->writeRegister(PREG_CTREPONOFF,0x0f,4,v); }

  uint8_t ctValLo() const { return this->readRegister(PREG_CONDVALUELOW,0x32); }
    4018:	42 e3       	ldi	r20, 0x32	; 50
    401a:	64 e0       	ldi	r22, 0x04	; 4
    401c:	ce 01       	movw	r24, r28
    401e:	05 96       	adiw	r24, 0x05	; 5
    4020:	0e 94 55 16 	call	0x2caa	; 0x2caa <as::RegisterList<as::SwitchReg3>::readRegister(unsigned char, unsigned char) const>
sensor():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:307
      break;
    case AS_CM_CT_COND_VALUE_LO_LE_X_LT_COND_VALUE_HI:
      doit = ((lst.ctValLo() <= value) && (value < lst.ctValHi()));
      break;
    case AS_CM_CT_X_LT_COND_VALUE_LO_OR_X_GE_COND_VALUE_HI:
      doit =((value < lst.ctValLo()) || (value >= lst.ctValHi()));
    4024:	18 17       	cp	r17, r24
    4026:	58 f0       	brcs	.+22     	; 0x403e <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0xf6>
ctValHi():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:732
  bool ctValLo(uint8_t v) const { return this->writeRegister(PREG_CONDVALUELOW,v); }
  uint8_t ctValHi() const { return this->readRegister(PREG_CONDVALUEHIGH,0x64); }
    4028:	44 e6       	ldi	r20, 0x64	; 100
    402a:	65 e0       	ldi	r22, 0x05	; 5
    402c:	c0 cf       	rjmp	.-128    	; 0x3fae <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0x66>
ctValLo():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:730
  uint8_t ctRepOn () const { return this->readRegister(PREG_CTREPONOFF,0x0f,0); }
  bool ctRepOn (uint8_t v) const { return this->writeRegister(PREG_CTREPONOFF,0x0f,0,v); }
  uint8_t ctRepOff () const { return this->readRegister(PREG_CTREPONOFF,0x0f,4); }
  bool ctRepOff (uint8_t v) const { return this->writeRegister(PREG_CTREPONOFF,0x0f,4,v); }

  uint8_t ctValLo() const { return this->readRegister(PREG_CONDVALUELOW,0x32); }
    402e:	42 e3       	ldi	r20, 0x32	; 50
    4030:	64 e0       	ldi	r22, 0x04	; 4
ctValHi():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:732
  bool ctValLo(uint8_t v) const { return this->writeRegister(PREG_CONDVALUELOW,v); }
  uint8_t ctValHi() const { return this->readRegister(PREG_CONDVALUEHIGH,0x64); }
    4032:	ce 01       	movw	r24, r28
    4034:	05 96       	adiw	r24, 0x05	; 5
    4036:	0e 94 55 16 	call	0x2caa	; 0x2caa <as::RegisterList<as::SwitchReg3>::readRegister(unsigned char, unsigned char) const>
sensor():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:304
      break;
    case AS_CM_CT_X_LT_COND_VALUE_HI:
      doit = (value < lst.ctValHi());
      break;
    case AS_CM_CT_COND_VALUE_LO_LE_X_LT_COND_VALUE_HI:
      doit = ((lst.ctValLo() <= value) && (value < lst.ctValHi()));
    403a:	18 17       	cp	r17, r24
    403c:	c8 f6       	brcc	.-78     	; 0x3ff0 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0xa8>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:312
      doit =((value < lst.ctValLo()) || (value >= lst.ctValHi()));
      break;
    default: break;
    }
    if( doit == true ) {
      remote(lst,counter);
    403e:	4d 2d       	mov	r20, r13
    4040:	be 01       	movw	r22, r28
    4042:	6b 5f       	subi	r22, 0xFB	; 251
    4044:	7f 4f       	sbci	r23, 0xFF	; 255
    4046:	c7 01       	movw	r24, r14
    4048:	02 96       	adiw	r24, 0x02	; 2
    404a:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)>
    404e:	d0 cf       	rjmp	.-96     	; 0x3ff0 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0xa8>
ctValLo():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:730
  uint8_t ctRepOn () const { return this->readRegister(PREG_CTREPONOFF,0x0f,0); }
  bool ctRepOn (uint8_t v) const { return this->writeRegister(PREG_CTREPONOFF,0x0f,0,v); }
  uint8_t ctRepOff () const { return this->readRegister(PREG_CTREPONOFF,0x0f,4); }
  bool ctRepOff (uint8_t v) const { return this->writeRegister(PREG_CTREPONOFF,0x0f,4,v); }

  uint8_t ctValLo() const { return this->readRegister(PREG_CONDVALUELOW,0x32); }
    4050:	42 e3       	ldi	r20, 0x32	; 50
    4052:	64 e0       	ldi	r22, 0x04	; 4
    4054:	ce 01       	movw	r24, r28
    4056:	05 96       	adiw	r24, 0x05	; 5
    4058:	0e 94 55 16 	call	0x2caa	; 0x2caa <as::RegisterList<as::SwitchReg3>::readRegister(unsigned char, unsigned char) const>
sensor():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:304
      break;
    case AS_CM_CT_X_LT_COND_VALUE_HI:
      doit = (value < lst.ctValHi());
      break;
    case AS_CM_CT_COND_VALUE_LO_LE_X_LT_COND_VALUE_HI:
      doit = ((lst.ctValLo() <= value) && (value < lst.ctValHi()));
    405c:	18 17       	cp	r17, r24
    405e:	40 f2       	brcs	.-112    	; 0x3ff0 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0xa8>
ctValHi():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:732
  bool ctValLo(uint8_t v) const { return this->writeRegister(PREG_CONDVALUELOW,v); }
  uint8_t ctValHi() const { return this->readRegister(PREG_CONDVALUEHIGH,0x64); }
    4060:	44 e6       	ldi	r20, 0x64	; 100
    4062:	65 e0       	ldi	r22, 0x05	; 5
    4064:	e6 cf       	rjmp	.-52     	; 0x4032 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0xea>
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E7processERKNS_14SensorEventMsgE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:355
        // pl.dump();
        StateMachine::sensor(pl,cnt,value);
        return true;
      }
    }
    return false;
    4066:	80 e0       	ldi	r24, 0x00	; 0
    4068:	c4 cf       	rjmp	.-120    	; 0x3ff2 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::SensorEventMsg const&)+0xaa>

0000406a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::RemoteEventMsg const&)>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E7processERKNS_14RemoteEventMsgE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:436

#ifndef SENSOR_ONLY
  virtual void stop () { ch.stop(); };
  virtual bool process (const ActionSetMsg& msg) { return ch.process(msg); }
  virtual bool process (const ActionCommandMsg& msg) { return ch.process(msg); }
  virtual bool process (const RemoteEventMsg& msg) { return ch.process(msg); }
    406a:	ef 92       	push	r14
    406c:	ff 92       	push	r15
    406e:	0f 93       	push	r16
    4070:	1f 93       	push	r17
    4072:	cf 93       	push	r28
    4074:	df 93       	push	r29
    4076:	00 d0       	rcall	.+0      	; 0x4078 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::RemoteEventMsg const&)+0xe>
    4078:	00 d0       	rcall	.+0      	; 0x407a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::RemoteEventMsg const&)+0x10>
    407a:	00 d0       	rcall	.+0      	; 0x407c <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::RemoteEventMsg const&)+0x12>
    407c:	cd b7       	in	r28, 0x3d	; 61
    407e:	de b7       	in	r29, 0x3e	; 62
    4080:	8c 01       	movw	r16, r24
    4082:	fb 01       	movw	r30, r22
    4084:	e2 84       	ldd	r14, Z+10	; 0x0a
_ZN2as4HMIDC2ERKS0_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:31
    id[0]=*ptr;
    id[1]=*(ptr+1);
    id[2]=*(ptr+2);
  }
  HMID (const HMID& other) {
    id[0]=other.id[0];
    4086:	84 81       	ldd	r24, Z+4	; 0x04
    4088:	89 83       	std	Y+1, r24	; 0x01
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:32
    id[1]=other.id[1];
    408a:	85 81       	ldd	r24, Z+5	; 0x05
    408c:	8a 83       	std	Y+2, r24	; 0x02
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:33
    id[2]=other.id[2];
    408e:	86 81       	ldd	r24, Z+6	; 0x06
    4090:	8b 83       	std	Y+3, r24	; 0x03
peer():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:479
      flags |= 0x80; // low battery
    }
    Message::init(0xb,msgcnt,AS_MESSAGE_REMOTE_EVENT,BIDI|WKMEUP,(ch & 0x3f) | flags,counter);
  }

  Peer peer () const { return Peer(from(),command() & 0x3f); }
    4092:	8e 2d       	mov	r24, r14
    4094:	8f 73       	andi	r24, 0x3F	; 63
_ZN2as4PeerC2ERKNS_4HMIDEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Peer.h:18
    4096:	8c 83       	std	Y+4, r24	; 0x04
    4098:	f3 84       	ldd	r15, Z+11	; 0x0b
process():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:325
  bool process (const RemoteEventMsg& msg) {
    if( BaseChannel::hasList3() ) {
      bool lg = msg.isLong();
      Peer p(msg.peer());
      uint8_t cnt = msg.counter();
      List3Type l3 = BaseChannel::getList3(p);
    409a:	be 01       	movw	r22, r28
    409c:	6f 5f       	subi	r22, 0xFF	; 255
    409e:	7f 4f       	sbci	r23, 0xFF	; 255
    40a0:	c8 01       	movw	r24, r16
    40a2:	0d 96       	adiw	r24, 0x0d	; 13
    40a4:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::getList3(as::Peer const&) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:326
      if( l3.valid() == true ) {
    40a8:	00 97       	sbiw	r24, 0x00	; 0
    40aa:	91 f1       	breq	.+100    	; 0x4110 <__stack+0x11>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:328
        // l3.dump();
        typename List3Type::PeerList pl = lg ? l3.lg() : l3.sh();
    40ac:	e6 fe       	sbrs	r14, 6
    40ae:	23 c0       	rjmp	.+70     	; 0x40f6 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::RemoteEventMsg const&)+0x8c>
_ZNK2as13ShortLongListINS_8RegList3INS_10SwitchReg3EEEE2lgEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:869
public:
  typedef PeerListType PeerList;
  ShortLongList(uint16_t a) : BaseList(a) {}

  const PeerList sh () const { return PeerList(this->address()); }
  const PeerList lg () const { return PeerList(this->address() + PeerList::size() ); }
    40b0:	0b 96       	adiw	r24, 0x0b	; 11
process():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:328
    40b2:	9e 83       	std	Y+6, r25	; 0x06
    40b4:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:330
        // pl.dump();
        if( lg == false || cnt != lastmsgcnt || pl.multiExec() == true ) {
    40b6:	f8 01       	movw	r30, r16
    40b8:	83 89       	ldd	r24, Z+19	; 0x13
    40ba:	f8 12       	cpse	r15, r24
    40bc:	1e c0       	rjmp	.+60     	; 0x40fa <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::RemoteEventMsg const&)+0x90>
readBit():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:242
      value = getByte(offset,mask<<shift,shift);
    }
    return value;
  }
  bool readBit (uint8_t reg,uint8_t bitnum,bool value=false) const {
    uint8_t offset = RegisterType::getOffset(reg);
    40be:	8a e0       	ldi	r24, 0x0A	; 10
    40c0:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <as::SwitchReg3::getOffset(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:243
    if( offset != 0xff ) {
    40c4:	8f 3f       	cpi	r24, 0xFF	; 255
    40c6:	49 f0       	breq	.+18     	; 0x40da <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::RemoteEventMsg const&)+0x70>
isBitSet():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:43
    tmp |= (data << shift) & mask;
    return setByte(offset, tmp);
  }

  bool isBitSet (uint8_t offset, uint8_t bit) const {
    return (storage().getByte(addr + offset) & bit) == bit;
    40c8:	2d 81       	ldd	r18, Y+5	; 0x05
    40ca:	3e 81       	ldd	r19, Y+6	; 0x06
    40cc:	82 0f       	add	r24, r18
    40ce:	93 2f       	mov	r25, r19
    40d0:	91 1d       	adc	r25, r1
    40d2:	0e 94 bd 14 	call	0x297a	; 0x297a <as::InternalEprom::getByte(unsigned int) [clone .isra.4]>
process():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:330
    40d6:	85 fd       	sbrc	r24, 5
    40d8:	10 c0       	rjmp	.+32     	; 0x40fa <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::RemoteEventMsg const&)+0x90>
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E7processERKNS_14RemoteEventMsgE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:334
          lastmsgcnt = cnt;
          StateMachine::remote(pl,cnt);
        }
        return true;
    40da:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:436

#ifndef SENSOR_ONLY
  virtual void stop () { ch.stop(); };
  virtual bool process (const ActionSetMsg& msg) { return ch.process(msg); }
  virtual bool process (const ActionCommandMsg& msg) { return ch.process(msg); }
  virtual bool process (const RemoteEventMsg& msg) { return ch.process(msg); }
    40dc:	26 96       	adiw	r28, 0x06	; 6
    40de:	0f b6       	in	r0, 0x3f	; 63
    40e0:	f8 94       	cli
    40e2:	de bf       	out	0x3e, r29	; 62
    40e4:	0f be       	out	0x3f, r0	; 63
    40e6:	cd bf       	out	0x3d, r28	; 61
    40e8:	df 91       	pop	r29
    40ea:	cf 91       	pop	r28
    40ec:	1f 91       	pop	r17
    40ee:	0f 91       	pop	r16
    40f0:	ff 90       	pop	r15
    40f2:	ef 90       	pop	r14
    40f4:	08 95       	ret
process():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:328
      Peer p(msg.peer());
      uint8_t cnt = msg.counter();
      List3Type l3 = BaseChannel::getList3(p);
      if( l3.valid() == true ) {
        // l3.dump();
        typename List3Type::PeerList pl = lg ? l3.lg() : l3.sh();
    40f6:	9e 83       	std	Y+6, r25	; 0x06
    40f8:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:331
        // pl.dump();
        if( lg == false || cnt != lastmsgcnt || pl.multiExec() == true ) {
          lastmsgcnt = cnt;
    40fa:	f8 01       	movw	r30, r16
    40fc:	f3 8a       	std	Z+19, r15	; 0x13
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:332
          StateMachine::remote(pl,cnt);
    40fe:	4f 2d       	mov	r20, r15
    4100:	be 01       	movw	r22, r28
    4102:	6b 5f       	subi	r22, 0xFB	; 251
    4104:	7f 4f       	sbci	r23, 0xFF	; 255
    4106:	c8 01       	movw	r24, r16
    4108:	02 96       	adiw	r24, 0x02	; 2
    410a:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <as::SwitchStateMachine::remote(as::RegList3<as::SwitchReg3> const&, unsigned char)>
    410e:	e5 cf       	rjmp	.-54     	; 0x40da <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::RemoteEventMsg const&)+0x70>
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E7processERKNS_14RemoteEventMsgE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:337
        }
        return true;
      }
    }
    return false;
    4110:	80 e0       	ldi	r24, 0x00	; 0
    4112:	e4 cf       	rjmp	.-56     	; 0x40dc <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::process(as::RemoteEventMsg const&)+0x72>

00004114 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::peerat(unsigned char) const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E6peeratEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:426
  virtual void changed (bool c) { ch.changed(c); }
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
    4114:	cf 93       	push	r28
    4116:	df 93       	push	r29
    4118:	ec 01       	movw	r28, r24
    411a:	63 5f       	subi	r22, 0xF3	; 243
    411c:	7f 4f       	sbci	r23, 0xFF	; 255
    411e:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peerat(unsigned char) const>
    4122:	ce 01       	movw	r24, r28
    4124:	df 91       	pop	r29
    4126:	cf 91       	pop	r28
    4128:	08 95       	ret

0000412a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::has(as::Peer const&) const>:
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E3hasERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:425
  virtual bool changed () const { return ch.changed(); }
  virtual void changed (bool c) { ch.changed(c); }
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
    412a:	cf 92       	push	r12
    412c:	df 92       	push	r13
    412e:	ef 92       	push	r14
    4130:	ff 92       	push	r15
    4132:	1f 93       	push	r17
    4134:	cf 93       	push	r28
    4136:	df 93       	push	r29
    4138:	00 d0       	rcall	.+0      	; 0x413a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::has(as::Peer const&) const+0x10>
    413a:	00 d0       	rcall	.+0      	; 0x413c <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::has(as::Peer const&) const+0x12>
    413c:	cd b7       	in	r28, 0x3d	; 61
    413e:	de b7       	in	r29, 0x3e	; 62
    4140:	6b 01       	movw	r12, r22
    4142:	0d 96       	adiw	r24, 0x0d	; 13
    4144:	7c 01       	movw	r14, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:73
    size += List1::size();
    return size;
  }

  bool has (const Peer& p) const {
    for( uint8_t i=0; i<peers(); ++i ) {
    4146:	10 e0       	ldi	r17, 0x00	; 0
has():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:74
      if( p == peerat(i) ) {
    4148:	41 2f       	mov	r20, r17
    414a:	b7 01       	movw	r22, r14
    414c:	ce 01       	movw	r24, r28
    414e:	01 96       	adiw	r24, 0x01	; 1
    4150:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peerat(unsigned char) const>
    4154:	be 01       	movw	r22, r28
    4156:	6f 5f       	subi	r22, 0xFF	; 255
    4158:	7f 4f       	sbci	r23, 0xFF	; 255
    415a:	c6 01       	movw	r24, r12
    415c:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <as::Peer::operator==(as::Peer const&) const>
    4160:	81 11       	cpse	r24, r1
    4162:	03 c0       	rjmp	.+6      	; 0x416a <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::has(as::Peer const&) const+0x40>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:73
    size += List1::size();
    return size;
  }

  bool has (const Peer& p) const {
    for( uint8_t i=0; i<peers(); ++i ) {
    4164:	1f 5f       	subi	r17, 0xFF	; 255
    4166:	1a 30       	cpi	r17, 0x0A	; 10
    4168:	79 f7       	brne	.-34     	; 0x4148 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::has(as::Peer const&) const+0x1e>
_ZNK2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E3hasERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:425
  virtual bool changed () const { return ch.changed(); }
  virtual void changed (bool c) { ch.changed(c); }
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
    416a:	0f 90       	pop	r0
    416c:	0f 90       	pop	r0
    416e:	0f 90       	pop	r0
    4170:	0f 90       	pop	r0
    4172:	df 91       	pop	r29
    4174:	cf 91       	pop	r28
    4176:	1f 91       	pop	r17
    4178:	ff 90       	pop	r15
    417a:	ef 90       	pop	r14
    417c:	df 90       	pop	r13
    417e:	cf 90       	pop	r12
    4180:	08 95       	ret

00004182 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::findpeer() const>:
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_11SwitchList1ENS_15SwitchList3TmplINS_8RegList3INS_10SwitchReg3EEEEENS_9EmptyListELi10E6UList0SK_E8findpeerEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:146

  bool deletepeer (uint8_t idx) const {
    return storage().setData(peerAddress(idx),Peer());
  }

  uint8_t findpeer () const {
    4182:	ef 92       	push	r14
    4184:	ff 92       	push	r15
    4186:	1f 93       	push	r17
    4188:	cf 93       	push	r28
    418a:	df 93       	push	r29
    418c:	00 d0       	rcall	.+0      	; 0x418e <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::findpeer() const+0xc>
    418e:	00 d0       	rcall	.+0      	; 0x4190 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::findpeer() const+0xe>
    4190:	cd b7       	in	r28, 0x3d	; 61
    4192:	de b7       	in	r29, 0x3e	; 62
    4194:	7c 01       	movw	r14, r24
    4196:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:148
    for( int i=0; i<peers(); ++i ) {
      if( peerat(i).valid()==false ) {
    4198:	41 2f       	mov	r20, r17
    419a:	b7 01       	movw	r22, r14
    419c:	ce 01       	movw	r24, r28
    419e:	01 96       	adiw	r24, 0x01	; 1
    41a0:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peerat(unsigned char) const>
    41a4:	ce 01       	movw	r24, r28
    41a6:	01 96       	adiw	r24, 0x01	; 1
    41a8:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <as::HMID::valid() const>
    41ac:	88 23       	and	r24, r24
    41ae:	21 f0       	breq	.+8      	; 0x41b8 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::findpeer() const+0x36>
    41b0:	1f 5f       	subi	r17, 0xFF	; 255
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:147
  bool deletepeer (uint8_t idx) const {
    return storage().setData(peerAddress(idx),Peer());
  }

  uint8_t findpeer () const {
    for( int i=0; i<peers(); ++i ) {
    41b2:	1a 30       	cpi	r17, 0x0A	; 10
    41b4:	89 f7       	brne	.-30     	; 0x4198 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::findpeer() const+0x16>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:152
      if( peerat(i).valid()==false ) {
        return i;
      }
    }
    return 0xff;
    41b6:	1f ef       	ldi	r17, 0xFF	; 255
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:153
  }
    41b8:	81 2f       	mov	r24, r17
    41ba:	0f 90       	pop	r0
    41bc:	0f 90       	pop	r0
    41be:	0f 90       	pop	r0
    41c0:	0f 90       	pop	r0
    41c2:	df 91       	pop	r29
    41c4:	cf 91       	pop	r28
    41c6:	1f 91       	pop	r17
    41c8:	ff 90       	pop	r15
    41ca:	ef 90       	pop	r14
    41cc:	08 95       	ret

000041ce <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::deletepeer(as::Peer const&) const>:
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_11SwitchList1ENS_15SwitchList3TmplINS_8RegList3INS_10SwitchReg3EEEEENS_9EmptyListELi10E6UList0SK_E10deletepeerERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:155

  bool deletepeer (const Peer& p) const {
    41ce:	af 92       	push	r10
    41d0:	bf 92       	push	r11
    41d2:	cf 92       	push	r12
    41d4:	df 92       	push	r13
    41d6:	ef 92       	push	r14
    41d8:	ff 92       	push	r15
    41da:	1f 93       	push	r17
    41dc:	cf 93       	push	r28
    41de:	df 93       	push	r29
    41e0:	00 d0       	rcall	.+0      	; 0x41e2 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::deletepeer(as::Peer const&) const+0x14>
    41e2:	00 d0       	rcall	.+0      	; 0x41e4 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::deletepeer(as::Peer const&) const+0x16>
    41e4:	cd b7       	in	r28, 0x3d	; 61
    41e6:	de b7       	in	r29, 0x3e	; 62
    41e8:	7c 01       	movw	r14, r24
    41ea:	6b 01       	movw	r12, r22
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:156
    for( uint8_t i=0; i<peers(); ++i ) {
    41ec:	10 e0       	ldi	r17, 0x00	; 0
deletepeer():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:143
    }
    return false;
  }

  bool deletepeer (uint8_t idx) const {
    return storage().setData(peerAddress(idx),Peer());
    41ee:	5c 01       	movw	r10, r24
    41f0:	84 e0       	ldi	r24, 0x04	; 4
    41f2:	a8 0e       	add	r10, r24
    41f4:	b1 1c       	adc	r11, r1
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_11SwitchList1ENS_15SwitchList3TmplINS_8RegList3INS_10SwitchReg3EEEEENS_9EmptyListELi10E6UList0SK_E10deletepeerERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:157
    return 0xff;
  }

  bool deletepeer (const Peer& p) const {
    for( uint8_t i=0; i<peers(); ++i ) {
      if( peerat(i) == p ) {
    41f6:	41 2f       	mov	r20, r17
    41f8:	b7 01       	movw	r22, r14
    41fa:	ce 01       	movw	r24, r28
    41fc:	01 96       	adiw	r24, 0x01	; 1
    41fe:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peerat(unsigned char) const>
    4202:	b6 01       	movw	r22, r12
    4204:	ce 01       	movw	r24, r28
    4206:	01 96       	adiw	r24, 0x01	; 1
    4208:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <as::Peer::operator==(as::Peer const&) const>
    420c:	88 23       	and	r24, r24
    420e:	79 f0       	breq	.+30     	; 0x422e <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::deletepeer(as::Peer const&) const+0x60>
_ZN2as4HMIDC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:18

class HMID {
  uint8_t id[3];
public:
  HMID () {
    id[0]=id[1]=id[2]=0;
    4210:	1b 82       	std	Y+3, r1	; 0x03
    4212:	1a 82       	std	Y+2, r1	; 0x02
    4214:	19 82       	std	Y+1, r1	; 0x01
_ZN2as4PeerC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Peer.h:17
namespace as {

class Peer : public HMID {
  uint8_t chan;
public:
  Peer() : chan(0) {}
    4216:	1c 82       	std	Y+4, r1	; 0x04
deletepeer():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:143
    }
    return false;
  }

  bool deletepeer (uint8_t idx) const {
    return storage().setData(peerAddress(idx),Peer());
    4218:	61 2f       	mov	r22, r17
    421a:	c5 01       	movw	r24, r10
    421c:	0e 94 19 0a 	call	0x1432	; 0x1432 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peerAddress(unsigned char) const [clone .isra.126]>
_ZN2as13InternalEprom7setDataEjPhj():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:215
    eeprom_write_block(&b,(void*)(uintptr_t)addr,1);
    return true;
  }

  bool setData (uint16_t addr,uint8_t* buf,uint16_t size) {
    eeprom_write_block(buf,(void*)(uintptr_t)addr,size);
    4220:	44 e0       	ldi	r20, 0x04	; 4
    4222:	50 e0       	ldi	r21, 0x00	; 0
    4224:	bc 01       	movw	r22, r24
    4226:	ce 01       	movw	r24, r28
    4228:	01 96       	adiw	r24, 0x01	; 1
    422a:	0e 94 de 4e 	call	0x9dbc	; 0x9dbc <eeprom_write_block>
_ZNK2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_11SwitchList1ENS_15SwitchList3TmplINS_8RegList3INS_10SwitchReg3EEEEENS_9EmptyListELi10E6UList0SK_E10deletepeerERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:156
    }
    return 0xff;
  }

  bool deletepeer (const Peer& p) const {
    for( uint8_t i=0; i<peers(); ++i ) {
    422e:	1f 5f       	subi	r17, 0xFF	; 255
    4230:	1a 30       	cpi	r17, 0x0A	; 10
    4232:	09 f7       	brne	.-62     	; 0x41f6 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::deletepeer(as::Peer const&) const+0x28>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:162
      if( peerat(i) == p ) {
        deletepeer(i);
      }
    }
    return true;
  }
    4234:	81 e0       	ldi	r24, 0x01	; 1
    4236:	0f 90       	pop	r0
    4238:	0f 90       	pop	r0
    423a:	0f 90       	pop	r0
    423c:	0f 90       	pop	r0
    423e:	df 91       	pop	r29
    4240:	cf 91       	pop	r28
    4242:	1f 91       	pop	r17
    4244:	ff 90       	pop	r15
    4246:	ef 90       	pop	r14
    4248:	df 90       	pop	r13
    424a:	cf 90       	pop	r12
    424c:	bf 90       	pop	r11
    424e:	af 90       	pop	r10
    4250:	08 95       	ret

00004252 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::deletepeer(as::Peer const&)>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E10deletepeerERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:429
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
  virtual bool peer (const Peer& p) { return ch.peer(p); }
  virtual bool peer (const Peer& p1,const Peer& p2) { return ch.peer(p1,p2); }
  virtual bool deletepeer (const Peer& p) { return ch.deletepeer(p); }
    4252:	0d 96       	adiw	r24, 0x0d	; 13
    4254:	0c 94 e7 20 	jmp	0x41ce	; 0x41ce <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::deletepeer(as::Peer const&) const>

00004258 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::peer(as::Peer const&, as::Peer const&)>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E4peerERKNS_4PeerESK_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:428
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
  virtual bool peer (const Peer& p) { return ch.peer(p); }
  virtual bool peer (const Peer& p1,const Peer& p2) { return ch.peer(p1,p2); }
    4258:	8f 92       	push	r8
    425a:	9f 92       	push	r9
    425c:	af 92       	push	r10
    425e:	bf 92       	push	r11
    4260:	cf 92       	push	r12
    4262:	df 92       	push	r13
    4264:	ef 92       	push	r14
    4266:	ff 92       	push	r15
    4268:	0f 93       	push	r16
    426a:	1f 93       	push	r17
    426c:	cf 93       	push	r28
    426e:	df 93       	push	r29
    4270:	00 d0       	rcall	.+0      	; 0x4272 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::peer(as::Peer const&, as::Peer const&)+0x1a>
    4272:	cd b7       	in	r28, 0x3d	; 61
    4274:	de b7       	in	r29, 0x3e	; 62
    4276:	7c 01       	movw	r14, r24
    4278:	6b 01       	movw	r12, r22
    427a:	5a 01       	movw	r10, r20
    427c:	8c 01       	movw	r16, r24
    427e:	03 5f       	subi	r16, 0xF3	; 243
    4280:	1f 4f       	sbci	r17, 0xFF	; 255
peer():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:114
    }
    return false;
  }

  bool peer (const Peer& p1,const Peer& p2) const {
    deletepeer(p1);
    4282:	c8 01       	movw	r24, r16
    4284:	0e 94 e7 20 	call	0x41ce	; 0x41ce <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::deletepeer(as::Peer const&) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:115
    deletepeer(p2);
    4288:	b5 01       	movw	r22, r10
    428a:	c8 01       	movw	r24, r16
    428c:	0e 94 e7 20 	call	0x41ce	; 0x41ce <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::deletepeer(as::Peer const&) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:116
    uint8_t pidx1 = findpeer();
    4290:	c8 01       	movw	r24, r16
    4292:	0e 94 c1 20 	call	0x4182	; 0x4182 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::findpeer() const>
    4296:	98 2e       	mov	r9, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:117
    if( pidx1 != 0xff ) {
    4298:	8f ef       	ldi	r24, 0xFF	; 255
    429a:	98 16       	cp	r9, r24
    429c:	09 f4       	brne	.+2      	; 0x42a0 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::peer(as::Peer const&, as::Peer const&)+0x48>
    429e:	50 c0       	rjmp	.+160    	; 0x4340 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::peer(as::Peer const&, as::Peer const&)+0xe8>
    42a0:	e1 e1       	ldi	r30, 0x11	; 17
    42a2:	ee 0e       	add	r14, r30
    42a4:	f1 1c       	adc	r15, r1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:118
      storage().setData(peerAddress(pidx1),p1);
    42a6:	69 2d       	mov	r22, r9
    42a8:	c7 01       	movw	r24, r14
    42aa:	0e 94 19 0a 	call	0x1432	; 0x1432 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peerAddress(unsigned char) const [clone .isra.126]>
    42ae:	b6 01       	movw	r22, r12
    42b0:	0e 94 9c 13 	call	0x2738	; 0x2738 <bool as::StorageWrapper<as::InternalEprom>::setData<as::Peer>(unsigned int, as::Peer const&) [clone .isra.111]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:119
      uint8_t pidx2 = findpeer();
    42b4:	c8 01       	movw	r24, r16
    42b6:	0e 94 c1 20 	call	0x4182	; 0x4182 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::findpeer() const>
    42ba:	88 2e       	mov	r8, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:120
      if( pidx2 != 0xff ) {
    42bc:	ff ef       	ldi	r31, 0xFF	; 255
    42be:	8f 17       	cp	r24, r31
    42c0:	d9 f1       	breq	.+118    	; 0x4338 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::peer(as::Peer const&, as::Peer const&)+0xe0>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:121
        storage().setData(peerAddress(pidx2),p2);
    42c2:	68 2f       	mov	r22, r24
    42c4:	c7 01       	movw	r24, r14
    42c6:	0e 94 19 0a 	call	0x1432	; 0x1432 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peerAddress(unsigned char) const [clone .isra.126]>
    42ca:	b5 01       	movw	r22, r10
    42cc:	0e 94 9c 13 	call	0x2738	; 0x2738 <bool as::StorageWrapper<as::InternalEprom>::setData<as::Peer>(unsigned int, as::Peer const&) [clone .isra.111]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:123
        if( hasList3() == true ) {
          if( p1.odd() == true ) {
    42d0:	f6 01       	movw	r30, r12
    42d2:	83 81       	ldd	r24, Z+3	; 0x03
    42d4:	80 ff       	sbrs	r24, 0
    42d6:	24 c0       	rjmp	.+72     	; 0x4320 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::peer(as::Peer const&, as::Peer const&)+0xc8>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:124
            getList3(pidx1).odd();
    42d8:	69 2d       	mov	r22, r9
    42da:	c8 01       	movw	r24, r16
    42dc:	0e 94 77 0d 	call	0x1aee	; 0x1aee <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::getList3(unsigned char) const>
    42e0:	9a 83       	std	Y+2, r25	; 0x02
    42e2:	89 83       	std	Y+1, r24	; 0x01
    42e4:	ce 01       	movw	r24, r28
    42e6:	01 96       	adiw	r24, 0x01	; 1
    42e8:	0e 94 2e 1a 	call	0x345c	; 0x345c <as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >::odd()>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:125
            getList3(pidx2).even();
    42ec:	68 2d       	mov	r22, r8
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:129
          }
          else {
            getList3(pidx2).odd();
            getList3(pidx1).even();
    42ee:	c8 01       	movw	r24, r16
    42f0:	0e 94 77 0d 	call	0x1aee	; 0x1aee <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::getList3(unsigned char) const>
    42f4:	9a 83       	std	Y+2, r25	; 0x02
    42f6:	89 83       	std	Y+1, r24	; 0x01
    42f8:	ce 01       	movw	r24, r28
    42fa:	01 96       	adiw	r24, 0x01	; 1
    42fc:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >::even()>
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E4peerERKNS_4PeerESK_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:132
          }
        }
        return true;
    4300:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:428
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
  virtual bool peer (const Peer& p) { return ch.peer(p); }
  virtual bool peer (const Peer& p1,const Peer& p2) { return ch.peer(p1,p2); }
    4302:	0f 90       	pop	r0
    4304:	0f 90       	pop	r0
    4306:	df 91       	pop	r29
    4308:	cf 91       	pop	r28
    430a:	1f 91       	pop	r17
    430c:	0f 91       	pop	r16
    430e:	ff 90       	pop	r15
    4310:	ef 90       	pop	r14
    4312:	df 90       	pop	r13
    4314:	cf 90       	pop	r12
    4316:	bf 90       	pop	r11
    4318:	af 90       	pop	r10
    431a:	9f 90       	pop	r9
    431c:	8f 90       	pop	r8
    431e:	08 95       	ret
peer():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:128
          if( p1.odd() == true ) {
            getList3(pidx1).odd();
            getList3(pidx2).even();
          }
          else {
            getList3(pidx2).odd();
    4320:	68 2d       	mov	r22, r8
    4322:	c8 01       	movw	r24, r16
    4324:	0e 94 77 0d 	call	0x1aee	; 0x1aee <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::getList3(unsigned char) const>
    4328:	9a 83       	std	Y+2, r25	; 0x02
    432a:	89 83       	std	Y+1, r24	; 0x01
    432c:	ce 01       	movw	r24, r28
    432e:	01 96       	adiw	r24, 0x01	; 1
    4330:	0e 94 2e 1a 	call	0x345c	; 0x345c <as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >::odd()>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:129
            getList3(pidx1).even();
    4334:	69 2d       	mov	r22, r9
    4336:	db cf       	rjmp	.-74     	; 0x42ee <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::peer(as::Peer const&, as::Peer const&)+0x96>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:136
        }
        return true;
      }
      else {
        // free already stored data
        deletepeer(p1);
    4338:	b6 01       	movw	r22, r12
    433a:	c8 01       	movw	r24, r16
    433c:	0e 94 e7 20 	call	0x41ce	; 0x41ce <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::deletepeer(as::Peer const&) const>
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E4peerERKNS_4PeerESK_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:139
      }
    }
    return false;
    4340:	80 e0       	ldi	r24, 0x00	; 0
    4342:	df cf       	rjmp	.-66     	; 0x4302 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::peer(as::Peer const&, as::Peer const&)+0xaa>

00004344 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peer(as::Peer const&)>:
_ZN2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_11SwitchList1ENS_15SwitchList3TmplINS_8RegList3INS_10SwitchReg3EEEEENS_9EmptyListELi10E6UList0SK_E4peerERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:100
    }
    return result;
  }


  bool peer (const Peer& p) {
    4344:	cf 92       	push	r12
    4346:	df 92       	push	r13
    4348:	ff 92       	push	r15
    434a:	0f 93       	push	r16
    434c:	1f 93       	push	r17
    434e:	cf 93       	push	r28
    4350:	df 93       	push	r29
    4352:	00 d0       	rcall	.+0      	; 0x4354 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peer(as::Peer const&)+0x10>
    4354:	00 d0       	rcall	.+0      	; 0x4356 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peer(as::Peer const&)+0x12>
    4356:	cd b7       	in	r28, 0x3d	; 61
    4358:	de b7       	in	r29, 0x3e	; 62
    435a:	8c 01       	movw	r16, r24
    435c:	6b 01       	movw	r12, r22
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:101
    deletepeer(p);
    435e:	0e 94 e7 20 	call	0x41ce	; 0x41ce <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::deletepeer(as::Peer const&) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:102
    uint8_t pidx = findpeer();
    4362:	c8 01       	movw	r24, r16
    4364:	0e 94 c1 20 	call	0x4182	; 0x4182 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::findpeer() const>
    4368:	f8 2e       	mov	r15, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:103
    if( pidx != 0xff ) {
    436a:	8f ef       	ldi	r24, 0xFF	; 255
    436c:	f8 16       	cp	r15, r24
    436e:	09 f4       	brne	.+2      	; 0x4372 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peer(as::Peer const&)+0x2e>
    4370:	61 c0       	rjmp	.+194    	; 0x4434 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peer(as::Peer const&)+0xf0>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:104
      storage().setData(peerAddress(pidx),p);
    4372:	6f 2d       	mov	r22, r15
    4374:	c8 01       	movw	r24, r16
    4376:	04 96       	adiw	r24, 0x04	; 4
    4378:	0e 94 19 0a 	call	0x1432	; 0x1432 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peerAddress(unsigned char) const [clone .isra.126]>
    437c:	b6 01       	movw	r22, r12
    437e:	0e 94 9c 13 	call	0x2738	; 0x2738 <bool as::StorageWrapper<as::InternalEprom>::setData<as::Peer>(unsigned int, as::Peer const&) [clone .isra.111]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:106
      if( hasList3() == true ) {
        getList3(pidx).single();
    4382:	6f 2d       	mov	r22, r15
    4384:	c8 01       	movw	r24, r16
    4386:	0e 94 77 0d 	call	0x1aee	; 0x1aee <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::getList3(unsigned char) const>
    438a:	9c 83       	std	Y+4, r25	; 0x04
    438c:	8b 83       	std	Y+3, r24	; 0x03
single():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:105
    ssl.jtDlyOn(AS_CM_JT_ON);
    ssl.jtDlyOff(AS_CM_JT_ON);
  }

  void single() {
    defaults();
    438e:	ce 01       	movw	r24, r28
    4390:	03 96       	adiw	r24, 0x03	; 3
    4392:	0e 94 79 19 	call	0x32f2	; 0x32f2 <as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >::defaults()>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:106
    PeerRegisterListType ssl = this->sh();
    4396:	8b 81       	ldd	r24, Y+3	; 0x03
    4398:	9c 81       	ldd	r25, Y+4	; 0x04
    439a:	9a 83       	std	Y+2, r25	; 0x02
    439c:	89 83       	std	Y+1, r24	; 0x01
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:107
    ssl.jtOn(AS_CM_JT_OFFDELAY);
    439e:	64 e0       	ldi	r22, 0x04	; 4
    43a0:	ce 01       	movw	r24, r28
    43a2:	01 96       	adiw	r24, 0x01	; 1
    43a4:	0e 94 74 19 	call	0x32e8	; 0x32e8 <as::RegList3<as::SwitchReg3>::jtOn(unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:108
    ssl.jtOff(AS_CM_JT_ONDELAY);
    43a8:	61 e0       	ldi	r22, 0x01	; 1
    43aa:	ce 01       	movw	r24, r28
    43ac:	01 96       	adiw	r24, 0x01	; 1
    43ae:	0e 94 6f 19 	call	0x32de	; 0x32de <as::RegList3<as::SwitchReg3>::jtOff(unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:110
//    ssl.writeRegister(PREG_JTONOFF, (AS_CM_JT_ONDELAY<<4) | AS_CM_JT_OFFDELAY);
    ssl.jtDlyOn(AS_CM_JT_ON);
    43b2:	63 e0       	ldi	r22, 0x03	; 3
    43b4:	ce 01       	movw	r24, r28
    43b6:	01 96       	adiw	r24, 0x01	; 1
    43b8:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <as::RegList3<as::SwitchReg3>::jtDlyOn(unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:111
    ssl.jtDlyOff(AS_CM_JT_OFF);
    43bc:	66 e0       	ldi	r22, 0x06	; 6
    43be:	ce 01       	movw	r24, r28
    43c0:	01 96       	adiw	r24, 0x01	; 1
    43c2:	0e 94 65 19 	call	0x32ca	; 0x32ca <as::RegList3<as::SwitchReg3>::jtDlyOff(unsigned char) const>
_ZNK2as13ShortLongListINS_8RegList3INS_10SwitchReg3EEEE2lgEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:869
public:
  typedef PeerListType PeerList;
  ShortLongList(uint16_t a) : BaseList(a) {}

  const PeerList sh () const { return PeerList(this->address()); }
  const PeerList lg () const { return PeerList(this->address() + PeerList::size() ); }
    43c6:	8b 81       	ldd	r24, Y+3	; 0x03
    43c8:	9c 81       	ldd	r25, Y+4	; 0x04
    43ca:	0b 96       	adiw	r24, 0x0b	; 11
single():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:113
//    ssl.writeRegister(PREG_JTDELAYONOFF, (AS_CM_JT_OFF<<4) | AS_CM_JT_ON);
    ssl = this->lg();
    43cc:	9a 83       	std	Y+2, r25	; 0x02
    43ce:	89 83       	std	Y+1, r24	; 0x01
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:114
    ssl.jtOn(AS_CM_JT_OFFDELAY);
    43d0:	64 e0       	ldi	r22, 0x04	; 4
    43d2:	ce 01       	movw	r24, r28
    43d4:	01 96       	adiw	r24, 0x01	; 1
    43d6:	0e 94 74 19 	call	0x32e8	; 0x32e8 <as::RegList3<as::SwitchReg3>::jtOn(unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:115
    ssl.jtOff(AS_CM_JT_ONDELAY);
    43da:	61 e0       	ldi	r22, 0x01	; 1
    43dc:	ce 01       	movw	r24, r28
    43de:	01 96       	adiw	r24, 0x01	; 1
    43e0:	0e 94 6f 19 	call	0x32de	; 0x32de <as::RegList3<as::SwitchReg3>::jtOff(unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:117
//    ssl.writeRegister(PREG_JTONOFF, (AS_CM_JT_ONDELAY<<4) | AS_CM_JT_OFFDELAY);
    ssl.jtDlyOn(AS_CM_JT_ON);
    43e4:	63 e0       	ldi	r22, 0x03	; 3
    43e6:	ce 01       	movw	r24, r28
    43e8:	01 96       	adiw	r24, 0x01	; 1
    43ea:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <as::RegList3<as::SwitchReg3>::jtDlyOn(unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:118
    ssl.jtDlyOff(AS_CM_JT_OFF);
    43ee:	66 e0       	ldi	r22, 0x06	; 6
    43f0:	ce 01       	movw	r24, r28
    43f2:	01 96       	adiw	r24, 0x01	; 1
    43f4:	0e 94 65 19 	call	0x32ca	; 0x32ca <as::RegList3<as::SwitchReg3>::jtDlyOff(unsigned char) const>
writeBit():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:220
      return setByte(offset,value,mask<<shift,shift);
    }
    return false;
  }
  bool writeBit (uint8_t reg,uint8_t bitnum,bool value) const {
    uint8_t offset = RegisterType::getOffset(reg);
    43f8:	8a e0       	ldi	r24, 0x0A	; 10
    43fa:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <as::SwitchReg3::getOffset(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:221
    if( offset != 0xff ) {
    43fe:	8f 3f       	cpi	r24, 0xFF	; 255
    4400:	61 f0       	breq	.+24     	; 0x441a <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peer(as::Peer const&)+0xd6>
setBit():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:50

  bool setBit (uint8_t offset, uint8_t bit, bool value) const {
    if( value == true ) {
      return storage().setBits(addr + offset, bit);
    }
    return storage().clearBits(addr + offset, bit);
    4402:	09 81       	ldd	r16, Y+1	; 0x01
    4404:	1a 81       	ldd	r17, Y+2	; 0x02
    4406:	08 0f       	add	r16, r24
    4408:	11 1d       	adc	r17, r1
_ZN2as14StorageWrapperINS_13InternalEpromEE9clearBitsEjh.isra.86():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:496
    DRIVER::setByte(addr,DRIVER::getByte(addr) | bits);
    return true;
  }

  bool clearBits (uint16_t addr, uint8_t bits) {
    DRIVER::setByte(addr,DRIVER::getByte(addr) & ~bits);
    440a:	c8 01       	movw	r24, r16
    440c:	0e 94 bd 14 	call	0x297a	; 0x297a <as::InternalEprom::getByte(unsigned int) [clone .isra.4]>
    4410:	68 2f       	mov	r22, r24
    4412:	6f 7d       	andi	r22, 0xDF	; 223
    4414:	c8 01       	movw	r24, r16
    4416:	0e 94 a5 13 	call	0x274a	; 0x274a <as::InternalEprom::setByte(unsigned int, unsigned char) [clone .isra.5]>
_ZN2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_11SwitchList1ENS_15SwitchList3TmplINS_8RegList3INS_10SwitchReg3EEEEENS_9EmptyListELi10E6UList0SK_E4peerERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:108
      }
      return true;
    441a:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:111
    }
    return false;
  }
    441c:	0f 90       	pop	r0
    441e:	0f 90       	pop	r0
    4420:	0f 90       	pop	r0
    4422:	0f 90       	pop	r0
    4424:	df 91       	pop	r29
    4426:	cf 91       	pop	r28
    4428:	1f 91       	pop	r17
    442a:	0f 91       	pop	r16
    442c:	ff 90       	pop	r15
    442e:	df 90       	pop	r13
    4430:	cf 90       	pop	r12
    4432:	08 95       	ret
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:110
      if( hasList3() == true ) {
        getList3(pidx).single();
      }
      return true;
    }
    return false;
    4434:	80 e0       	ldi	r24, 0x00	; 0
    4436:	f2 cf       	rjmp	.-28     	; 0x441c <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peer(as::Peer const&)+0xd8>

00004438 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::peer(as::Peer const&)>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_E4peerERKNS_4PeerE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:427
  virtual void inhibit (bool value) { ch.inhibit(value); }
  virtual bool inhibit () const { return ch.inhibit(); }
  virtual bool aesActive () const { return ch.aesActive(); }
  virtual bool has (const Peer& p) const { return ch.has(p); };
  virtual Peer peerat (uint8_t idx) const { return ch.peerat(idx); }
  virtual bool peer (const Peer& p) { return ch.peer(p); }
    4438:	0d 96       	adiw	r24, 0x0d	; 13
    443a:	0c 94 a2 21 	jmp	0x4344	; 0x4344 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peer(as::Peer const&)>

0000443e <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc.part.2():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    443e:	fb 01       	movw	r30, r22
    4440:	01 90       	ld	r0, Z+
    4442:	00 20       	and	r0, r0
    4444:	e9 f7       	brne	.-6      	; 0x4440 <Print::write(char const*) [clone .part.2]+0x2>
    4446:	31 97       	sbiw	r30, 0x01	; 1
    4448:	af 01       	movw	r20, r30
    444a:	46 1b       	sub	r20, r22
    444c:	57 0b       	sbc	r21, r23
    444e:	dc 01       	movw	r26, r24
    4450:	ed 91       	ld	r30, X+
    4452:	fc 91       	ld	r31, X
    4454:	02 80       	ldd	r0, Z+2	; 0x02
    4456:	f3 81       	ldd	r31, Z+3	; 0x03
    4458:	e0 2d       	mov	r30, r0
    445a:	09 94       	ijmp

0000445c <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:233
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    445c:	8f 92       	push	r8
    445e:	9f 92       	push	r9
    4460:	af 92       	push	r10
    4462:	bf 92       	push	r11
    4464:	ef 92       	push	r14
    4466:	ff 92       	push	r15
    4468:	0f 93       	push	r16
    446a:	1f 93       	push	r17
    446c:	cf 93       	push	r28
    446e:	df 93       	push	r29
    4470:	cd b7       	in	r28, 0x3d	; 61
    4472:	de b7       	in	r29, 0x3e	; 62
    4474:	a1 97       	sbiw	r28, 0x21	; 33
    4476:	0f b6       	in	r0, 0x3f	; 63
    4478:	f8 94       	cli
    447a:	de bf       	out	0x3e, r29	; 62
    447c:	0f be       	out	0x3f, r0	; 63
    447e:	cd bf       	out	0x3d, r28	; 61
    4480:	7c 01       	movw	r14, r24
    4482:	fa 01       	movw	r30, r20
    4484:	cb 01       	movw	r24, r22
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:237
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    4486:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    4488:	22 30       	cpi	r18, 0x02	; 2
    448a:	08 f4       	brcc	.+2      	; 0x448e <Print::printNumber(unsigned long, unsigned char)+0x32>
    448c:	2a e0       	ldi	r18, 0x0A	; 10
    448e:	8e 01       	movw	r16, r28
    4490:	0f 5d       	subi	r16, 0xDF	; 223
    4492:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
    4494:	82 2e       	mov	r8, r18
    4496:	91 2c       	mov	r9, r1
    4498:	b1 2c       	mov	r11, r1
    449a:	a1 2c       	mov	r10, r1
    449c:	bf 01       	movw	r22, r30
    449e:	a5 01       	movw	r20, r10
    44a0:	94 01       	movw	r18, r8
    44a2:	0e 94 d8 50 	call	0xa1b0	; 0xa1b0 <__udivmodsi4>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:244
    n /= base;
    44a6:	f9 01       	movw	r30, r18
    44a8:	ca 01       	movw	r24, r20
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    44aa:	6a 30       	cpi	r22, 0x0A	; 10
    44ac:	0c f5       	brge	.+66     	; 0x44f0 <Print::printNumber(unsigned long, unsigned char)+0x94>
    44ae:	60 5d       	subi	r22, 0xD0	; 208
    44b0:	d8 01       	movw	r26, r16
    44b2:	6e 93       	st	-X, r22
    44b4:	8d 01       	movw	r16, r26
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:247
  } while(n);
    44b6:	23 2b       	or	r18, r19
    44b8:	24 2b       	or	r18, r20
    44ba:	25 2b       	or	r18, r21
    44bc:	79 f7       	brne	.-34     	; 0x449c <Print::printNumber(unsigned long, unsigned char)+0x40>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    44be:	90 e0       	ldi	r25, 0x00	; 0
    44c0:	80 e0       	ldi	r24, 0x00	; 0
write():
    44c2:	10 97       	sbiw	r26, 0x00	; 0
    44c4:	21 f0       	breq	.+8      	; 0x44ce <Print::printNumber(unsigned long, unsigned char)+0x72>
    44c6:	bd 01       	movw	r22, r26
    44c8:	c7 01       	movw	r24, r14
    44ca:	0e 94 1f 22 	call	0x443e	; 0x443e <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:250

  return write(str);
}
    44ce:	a1 96       	adiw	r28, 0x21	; 33
    44d0:	0f b6       	in	r0, 0x3f	; 63
    44d2:	f8 94       	cli
    44d4:	de bf       	out	0x3e, r29	; 62
    44d6:	0f be       	out	0x3f, r0	; 63
    44d8:	cd bf       	out	0x3d, r28	; 61
    44da:	df 91       	pop	r29
    44dc:	cf 91       	pop	r28
    44de:	1f 91       	pop	r17
    44e0:	0f 91       	pop	r16
    44e2:	ff 90       	pop	r15
    44e4:	ef 90       	pop	r14
    44e6:	bf 90       	pop	r11
    44e8:	af 90       	pop	r10
    44ea:	9f 90       	pop	r9
    44ec:	8f 90       	pop	r8
    44ee:	08 95       	ret
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    44f0:	69 5c       	subi	r22, 0xC9	; 201
    44f2:	de cf       	rjmp	.-68     	; 0x44b0 <Print::printNumber(unsigned long, unsigned char)+0x54>

000044f4 <DHEX(unsigned char)>:
_Z4DHEXh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:43
  inline void DHEX(uint8_t b) {
    44f4:	cf 93       	push	r28
    44f6:	c8 2f       	mov	r28, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:44
    if( b<0x10 ) DSERIAL.print('0');
    44f8:	80 31       	cpi	r24, 0x10	; 16
    44fa:	28 f4       	brcc	.+10     	; 0x4506 <DHEX(unsigned char)+0x12>
print():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    44fc:	60 e3       	ldi	r22, 0x30	; 48
    44fe:	89 ed       	ldi	r24, 0xD9	; 217
    4500:	94 e0       	ldi	r25, 0x04	; 4
    4502:	0e 94 99 06 	call	0xd32	; 0xd32 <HardwareSerial::write(unsigned char)>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:74
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    4506:	4c 2f       	mov	r20, r28
    4508:	50 e0       	ldi	r21, 0x00	; 0
    450a:	70 e0       	ldi	r23, 0x00	; 0
    450c:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    450e:	20 e1       	ldi	r18, 0x10	; 16
    4510:	89 ed       	ldi	r24, 0xD9	; 217
    4512:	94 e0       	ldi	r25, 0x04	; 4
_Z4DHEXh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:46
    DSERIAL.print(b,HEX);
  }
    4514:	cf 91       	pop	r28
print():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:106
    4516:	0c 94 2e 22 	jmp	0x445c	; 0x445c <Print::printNumber(unsigned long, unsigned char)>

0000451a <DHEXLN(unsigned char)>:
_Z6DHEXLNh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:109
  inline void DHEX(const uint8_t* b,uint8_t l) {
    for( int i=0; i<l; i++, b++) {
      DHEX(*b); DPRINT(F(" "));
    }
  }
  inline void DHEXLN(uint8_t b) { DHEX(b); DPRINT(F("\r\n")); }
    451a:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <DHEX(unsigned char)>
    451e:	83 e0       	ldi	r24, 0x03	; 3
    4520:	92 e0       	ldi	r25, 0x02	; 2
    4522:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>

00004526 <as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255>::initReg(unsigned char, unsigned char, unsigned char) [clone .constprop.37]>:
_ZN2as6CC1101INS_6LibSPIILh4ELm2000000ELh1ELh0EEELh255EE7initRegEhhh.constprop.37():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:684
  bool initReg (uint8_t regAddr, uint8_t val) {
    spi.writeReg(regAddr, val);
    return true;
  }
#else
  bool initReg (uint8_t regAddr, uint8_t val, uint8_t retries=3) {
    4526:	0f 93       	push	r16
    4528:	1f 93       	push	r17
    452a:	cf 93       	push	r28
    452c:	df 93       	push	r29
    452e:	d8 2f       	mov	r29, r24
    4530:	c6 2f       	mov	r28, r22
    4532:	14 2f       	mov	r17, r20
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:685
    spi.writeReg(regAddr, val);
    4534:	0e 94 e5 11 	call	0x23ca	; 0x23ca <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::writeReg(unsigned char, unsigned char) [clone .isra.138]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:686
    uint8_t val_read = spi.readReg(regAddr, CC1101_CONFIG);
    4538:	60 e8       	ldi	r22, 0x80	; 128
    453a:	8d 2f       	mov	r24, r29
    453c:	0e 94 13 12 	call	0x2426	; 0x2426 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::readReg(unsigned char, unsigned char) [clone .isra.135]>
    4540:	08 2f       	mov	r16, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:687
    bool initResult = true;
    4542:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:688
    if( val_read != val ) {
    4544:	c0 17       	cp	r28, r16
    4546:	71 f0       	breq	.+28     	; 0x4564 <as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255>::initReg(unsigned char, unsigned char, unsigned char) [clone .constprop.37]+0x3e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:689
      if( retries > 0 ) {
    4548:	11 23       	and	r17, r17
    454a:	89 f0       	breq	.+34     	; 0x456e <as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255>::initReg(unsigned char, unsigned char, unsigned char) [clone .constprop.37]+0x48>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:690
        initResult = initReg(regAddr, val, --retries);
    454c:	4f ef       	ldi	r20, 0xFF	; 255
    454e:	41 0f       	add	r20, r17
    4550:	6c 2f       	mov	r22, r28
    4552:	8d 2f       	mov	r24, r29
    4554:	0e 94 93 22 	call	0x4526	; 0x4526 <as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255>::initReg(unsigned char, unsigned char, unsigned char) [clone .constprop.37]>
_delay_ms():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay.h:187
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4558:	ef ec       	ldi	r30, 0xCF	; 207
    455a:	f7 e0       	ldi	r31, 0x07	; 7
    455c:	31 97       	sbiw	r30, 0x01	; 1
    455e:	f1 f7       	brne	.-4      	; 0x455c <as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255>::initReg(unsigned char, unsigned char, unsigned char) [clone .constprop.37]+0x36>
    4560:	00 c0       	rjmp	.+0      	; 0x4562 <as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255>::initReg(unsigned char, unsigned char, unsigned char) [clone .constprop.37]+0x3c>
    4562:	00 00       	nop
_ZN2as6CC1101INS_6LibSPIILh4ELm2000000ELh1ELh0EEELh255EE7initRegEhhh.constprop.37():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:700
        DPRINT(F(" expected: ")); DHEX(val); DPRINT(F(" read: ")); DHEXLN(val_read);
        return false;
      }
    }
    return initResult;
  }
    4564:	df 91       	pop	r29
    4566:	cf 91       	pop	r28
    4568:	1f 91       	pop	r17
    456a:	0f 91       	pop	r16
    456c:	08 95       	ret
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:694
      if( retries > 0 ) {
        initResult = initReg(regAddr, val, --retries);
        _delay_ms(1);
      }
      else {
        DPRINT(F("Error at ")); DHEX(regAddr);
    456e:	83 e6       	ldi	r24, 0x63	; 99
    4570:	97 e0       	ldi	r25, 0x07	; 7
    4572:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    4576:	8d 2f       	mov	r24, r29
    4578:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <DHEX(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:695
        DPRINT(F(" expected: ")); DHEX(val); DPRINT(F(" read: ")); DHEXLN(val_read);
    457c:	87 e5       	ldi	r24, 0x57	; 87
    457e:	97 e0       	ldi	r25, 0x07	; 7
    4580:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    4584:	8c 2f       	mov	r24, r28
    4586:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <DHEX(unsigned char)>
    458a:	8f e4       	ldi	r24, 0x4F	; 79
    458c:	97 e0       	ldi	r25, 0x07	; 7
    458e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    4592:	80 2f       	mov	r24, r16
    4594:	0e 94 8d 22 	call	0x451a	; 0x451a <DHEXLN(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:696
        return false;
    4598:	80 e0       	ldi	r24, 0x00	; 0
    459a:	e4 cf       	rjmp	.-56     	; 0x4564 <as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255>::initReg(unsigned char, unsigned char, unsigned char) [clone .constprop.37]+0x3e>

0000459c <Print::print(unsigned int, int) [clone .constprop.104]>:
_ZN5Print5printEji.constprop.104():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:84
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    459c:	ab 01       	movw	r20, r22
    459e:	70 e0       	ldi	r23, 0x00	; 0
    45a0:	60 e0       	ldi	r22, 0x00	; 0
print():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    45a2:	2a e0       	ldi	r18, 0x0A	; 10
    45a4:	0c 94 2e 22 	jmp	0x445c	; 0x445c <Print::printNumber(unsigned long, unsigned char)>

000045a8 <void DDECLN<unsigned int>(unsigned int)>:
_Z6DDECLNIjEvT_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:66
    DSERIAL.print(b,HEX);
  }

  template<typename TYPE>
  inline void DDEC(TYPE b) {
    DSERIAL.print(b,DEC);
    45a8:	bc 01       	movw	r22, r24
    45aa:	89 ed       	ldi	r24, 0xD9	; 217
    45ac:	94 e0       	ldi	r25, 0x04	; 4
    45ae:	0e 94 ce 22 	call	0x459c	; 0x459c <Print::print(unsigned int, int) [clone .constprop.104]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:113
  }
  inline void DHEXLN(uint8_t b) { DHEX(b); DPRINT(F("\r\n")); }
  inline void DHEXLN(uint16_t b) { DHEX(b); DPRINT(F("\r\n")); }
  inline void DHEXLN(uint32_t b) { DHEX(b); DPRINT(F("\r\n")); }
  template<typename TYPE>
  inline void DDECLN(TYPE b) { DDEC(b); DPRINT(F("\r\n")); }
    45b2:	8b ee       	ldi	r24, 0xEB	; 235
    45b4:	94 e0       	ldi	r25, 0x04	; 4
    45b6:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>

000045ba <Print::print(long, int) [clone .part.3] [clone .constprop.54]>:
_ZN5Print5printEli.part.3.constprop.54():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:87
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    45ba:	cf 92       	push	r12
    45bc:	df 92       	push	r13
    45be:	ef 92       	push	r14
    45c0:	ff 92       	push	r15
    45c2:	cf 93       	push	r28
    45c4:	df 93       	push	r29
    45c6:	6b 01       	movw	r12, r22
    45c8:	7c 01       	movw	r14, r24
print():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    45ca:	6d e2       	ldi	r22, 0x2D	; 45
    45cc:	89 ed       	ldi	r24, 0xD9	; 217
    45ce:	94 e0       	ldi	r25, 0x04	; 4
    45d0:	0e 94 99 06 	call	0xd32	; 0xd32 <HardwareSerial::write(unsigned char)>
    45d4:	ec 01       	movw	r28, r24
_ZN5Print5printEli.part.3.constprop.54():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:94
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
    45d6:	44 27       	eor	r20, r20
    45d8:	55 27       	eor	r21, r21
    45da:	ba 01       	movw	r22, r20
    45dc:	4c 19       	sub	r20, r12
    45de:	5d 09       	sbc	r21, r13
    45e0:	6e 09       	sbc	r22, r14
    45e2:	7f 09       	sbc	r23, r15
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:95
      return printNumber(n, 10) + t;
    45e4:	2a e0       	ldi	r18, 0x0A	; 10
    45e6:	89 ed       	ldi	r24, 0xD9	; 217
    45e8:	94 e0       	ldi	r25, 0x04	; 4
    45ea:	0e 94 2e 22 	call	0x445c	; 0x445c <Print::printNumber(unsigned long, unsigned char)>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:101
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    45ee:	8c 0f       	add	r24, r28
    45f0:	9d 1f       	adc	r25, r29
    45f2:	df 91       	pop	r29
    45f4:	cf 91       	pop	r28
    45f6:	ff 90       	pop	r15
    45f8:	ef 90       	pop	r14
    45fa:	df 90       	pop	r13
    45fc:	cf 90       	pop	r12
    45fe:	08 95       	ret

00004600 <void DDECLN<int>(int)>:
_Z6DDECLNIiEvT_():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:79
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    4600:	ac 01       	movw	r20, r24
    4602:	99 0f       	add	r25, r25
    4604:	66 0b       	sbc	r22, r22
    4606:	77 0b       	sbc	r23, r23
print():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:92
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    4608:	77 ff       	sbrs	r23, 7
    460a:	08 c0       	rjmp	.+16     	; 0x461c <void DDECLN<int>(int)+0x1c>
    460c:	cb 01       	movw	r24, r22
    460e:	ba 01       	movw	r22, r20
    4610:	0e 94 dd 22 	call	0x45ba	; 0x45ba <Print::print(long, int) [clone .part.3] [clone .constprop.54]>
_Z6DDECLNIiEvT_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:113
    4614:	8e ee       	ldi	r24, 0xEE	; 238
    4616:	94 e0       	ldi	r25, 0x04	; 4
    4618:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
print():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:97
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    461c:	2a e0       	ldi	r18, 0x0A	; 10
    461e:	89 ed       	ldi	r24, 0xD9	; 217
    4620:	94 e0       	ldi	r25, 0x04	; 4
    4622:	0e 94 2e 22 	call	0x445c	; 0x445c <Print::printNumber(unsigned long, unsigned char)>
    4626:	f6 cf       	rjmp	.-20     	; 0x4614 <void DDECLN<int>(int)+0x14>

00004628 <void DDECLN<unsigned long>(unsigned long)>:
_Z6DDECLNImEvT_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:113
    4628:	ab 01       	movw	r20, r22
    462a:	bc 01       	movw	r22, r24
print():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    462c:	2a e0       	ldi	r18, 0x0A	; 10
    462e:	89 ed       	ldi	r24, 0xD9	; 217
    4630:	94 e0       	ldi	r25, 0x04	; 4
    4632:	0e 94 2e 22 	call	0x445c	; 0x445c <Print::printNumber(unsigned long, unsigned char)>
_Z6DDECLNImEvT_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:113
    4636:	88 ee       	ldi	r24, 0xE8	; 232
    4638:	94 e0       	ldi	r25, 0x04	; 4
    463a:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>

0000463e <as::Message::dump() const>:
_ZNK2as7Message4dumpEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:269
      buf[i] = prev;
    }
    buf[i] ^= buf2;
  }

  void dump () const {
    463e:	ef 92       	push	r14
    4640:	ff 92       	push	r15
    4642:	0f 93       	push	r16
    4644:	1f 93       	push	r17
    4646:	cf 93       	push	r28
    4648:	df 93       	push	r29
    464a:	ec 01       	movw	r28, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:270
    DHEX(length());
    464c:	88 81       	ld	r24, Y
    464e:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <DHEX(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:271
    DPRINT(F(" "));
    4652:	86 e1       	ldi	r24, 0x16	; 22
    4654:	92 e0       	ldi	r25, 0x02	; 2
    4656:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:272
    DHEX(count());
    465a:	89 81       	ldd	r24, Y+1	; 0x01
    465c:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <DHEX(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:273
    DPRINT(F(" "));
    4660:	84 e1       	ldi	r24, 0x14	; 20
    4662:	92 e0       	ldi	r25, 0x02	; 2
    4664:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:274
    DHEX(flags());
    4668:	8a 81       	ldd	r24, Y+2	; 0x02
    466a:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <DHEX(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:275
    DPRINT(F(" "));
    466e:	82 e1       	ldi	r24, 0x12	; 18
    4670:	92 e0       	ldi	r25, 0x02	; 2
    4672:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:276
    DHEX(type());
    4676:	8b 81       	ldd	r24, Y+3	; 0x03
    4678:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <DHEX(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:277
    DPRINT(F(" "));
    467c:	80 e1       	ldi	r24, 0x10	; 16
    467e:	92 e0       	ldi	r25, 0x02	; 2
    4680:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
dump():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:59
  operator uint32_t () const {
    return (uint32_t)id[0] << 16 | (uint16_t)id[1] << 8 | id[2];
  }

  void dump () const {
    DHEX(id0());
    4684:	8c 81       	ldd	r24, Y+4	; 0x04
    4686:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <DHEX(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:60
    DHEX(id1());
    468a:	8d 81       	ldd	r24, Y+5	; 0x05
    468c:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <DHEX(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:61
    DHEX(id2());
    4690:	8e 81       	ldd	r24, Y+6	; 0x06
    4692:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <DHEX(unsigned char)>
_ZNK2as7Message4dumpEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:279
    from().dump();
    DPRINT(F(" "));
    4696:	8e e0       	ldi	r24, 0x0E	; 14
    4698:	92 e0       	ldi	r25, 0x02	; 2
    469a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
dump():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:59
  operator uint32_t () const {
    return (uint32_t)id[0] << 16 | (uint16_t)id[1] << 8 | id[2];
  }

  void dump () const {
    DHEX(id0());
    469e:	8f 81       	ldd	r24, Y+7	; 0x07
    46a0:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <DHEX(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:60
    DHEX(id1());
    46a4:	88 85       	ldd	r24, Y+8	; 0x08
    46a6:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <DHEX(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:61
    DHEX(id2());
    46aa:	89 85       	ldd	r24, Y+9	; 0x09
    46ac:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <DHEX(unsigned char)>
_ZNK2as7Message4dumpEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:281
    to().dump();
    DPRINT(F(" "));
    46b0:	8c e0       	ldi	r24, 0x0C	; 12
    46b2:	92 e0       	ldi	r25, 0x02	; 2
    46b4:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:282
    DHEX(buffer()+9,length()-9);
    46b8:	08 81       	ld	r16, Y
    46ba:	09 50       	subi	r16, 0x09	; 9
    46bc:	2a 96       	adiw	r28, 0x0a	; 10
    46be:	7e 01       	movw	r14, r28
DHEX():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:105
  inline void DDEC(TYPE b) { std::cout << std::dec << (int)b; }

#endif // ARDUINO

  inline void DHEX(const uint8_t* b,uint8_t l) {
    for( int i=0; i<l; i++, b++) {
    46c0:	10 e0       	ldi	r17, 0x00	; 0
    46c2:	c7 01       	movw	r24, r14
    46c4:	8c 1b       	sub	r24, r28
    46c6:	9d 0b       	sbc	r25, r29
    46c8:	80 17       	cp	r24, r16
    46ca:	91 07       	cpc	r25, r17
    46cc:	54 f4       	brge	.+20     	; 0x46e2 <as::Message::dump() const+0xa4>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:106
      DHEX(*b); DPRINT(F(" "));
    46ce:	f7 01       	movw	r30, r14
    46d0:	81 91       	ld	r24, Z+
    46d2:	7f 01       	movw	r14, r30
    46d4:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <DHEX(unsigned char)>
    46d8:	86 e0       	ldi	r24, 0x06	; 6
    46da:	92 e0       	ldi	r25, 0x02	; 2
    46dc:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    46e0:	f0 cf       	rjmp	.-32     	; 0x46c2 <as::Message::dump() const+0x84>
_ZNK2as7Message4dumpEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:283
    DPRINT(F(" - "));
    46e2:	88 e0       	ldi	r24, 0x08	; 8
    46e4:	92 e0       	ldi	r25, 0x02	; 2
    46e6:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
millis():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    46ea:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    46ec:	f8 94       	cli
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    46ee:	60 91 2d 04 	lds	r22, 0x042D	; 0x80042d <timer0_millis>
    46f2:	70 91 2e 04 	lds	r23, 0x042E	; 0x80042e <timer0_millis+0x1>
    46f6:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <timer0_millis+0x2>
    46fa:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <timer0_millis+0x3>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    46fe:	2f bf       	out	0x3f, r18	; 63
_ZNK2as7Message4dumpEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:285
    DDECLN((uint32_t)millis());
  }
    4700:	df 91       	pop	r29
    4702:	cf 91       	pop	r28
    4704:	1f 91       	pop	r17
    4706:	0f 91       	pop	r16
    4708:	ff 90       	pop	r15
    470a:	ef 90       	pop	r14
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:284
    DPRINT(F(" "));
    to().dump();
    DPRINT(F(" "));
    DHEX(buffer()+9,length()-9);
    DPRINT(F(" - "));
    DDECLN((uint32_t)millis());
    470c:	0c 94 14 23 	jmp	0x4628	; 0x4628 <void DDECLN<unsigned long>(unsigned long)>

00004710 <void DDEC<unsigned char>(unsigned char)>:
_Z4DDECIhEvT_():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:74
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    4710:	48 2f       	mov	r20, r24
    4712:	50 e0       	ldi	r21, 0x00	; 0
    4714:	70 e0       	ldi	r23, 0x00	; 0
    4716:	60 e0       	ldi	r22, 0x00	; 0
print():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    4718:	2a e0       	ldi	r18, 0x0A	; 10
    471a:	89 ed       	ldi	r24, 0xD9	; 217
    471c:	94 e0       	ldi	r25, 0x04	; 4
    471e:	0c 94 2e 22 	jmp	0x445c	; 0x445c <Print::printNumber(unsigned long, unsigned char)>

00004722 <MeasureChannel::readVoltage() [clone .isra.83]>:
_ZN14MeasureChannel11readVoltageEv.isra.83():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:416
      int16_t t = ntc2.temperature() + (-14+2*this->getList1().TemperatureOffsetIndex2());
      DPRINT(F("2. Temperatur     : "));DDECLN(t);
      return t;
    }

    uint32_t readVoltage() {
    4722:	cf 92       	push	r12
    4724:	df 92       	push	r13
    4726:	ef 92       	push	r14
    4728:	ff 92       	push	r15
    472a:	cf 93       	push	r28
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:417
      analogRead(ORPH_SIGNAL_PIN);
    472c:	8f e1       	ldi	r24, 0x1F	; 31
    472e:	0e 94 1a 08 	call	0x1034	; 0x1034 <analogRead>
    4732:	c5 e0       	ldi	r28, 0x05	; 5
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:420

      //Mittelwert über 5 Messungen
      uint32_t analogValue = 0;
    4734:	c1 2c       	mov	r12, r1
    4736:	d1 2c       	mov	r13, r1
    4738:	76 01       	movw	r14, r12
_delay_ms():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay.h:187
    473a:	8f e0       	ldi	r24, 0x0F	; 15
    473c:	97 e2       	ldi	r25, 0x27	; 39
    473e:	01 97       	sbiw	r24, 0x01	; 1
    4740:	f1 f7       	brne	.-4      	; 0x473e <MeasureChannel::readVoltage() [clone .isra.83]+0x1c>
    4742:	00 c0       	rjmp	.+0      	; 0x4744 <MeasureChannel::readVoltage() [clone .isra.83]+0x22>
    4744:	00 00       	nop
_ZN14MeasureChannel11readVoltageEv.isra.83():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:423
      for (uint8_t i=0; i <5; i++) {
        _delay_ms(5);
        analogValue += analogRead(ORPH_SIGNAL_PIN);
    4746:	8f e1       	ldi	r24, 0x1F	; 31
    4748:	0e 94 1a 08 	call	0x1034	; 0x1034 <analogRead>
    474c:	09 2e       	mov	r0, r25
    474e:	00 0c       	add	r0, r0
    4750:	aa 0b       	sbc	r26, r26
    4752:	bb 0b       	sbc	r27, r27
    4754:	c8 0e       	add	r12, r24
    4756:	d9 1e       	adc	r13, r25
    4758:	ea 1e       	adc	r14, r26
    475a:	fb 1e       	adc	r15, r27
    475c:	c1 50       	subi	r28, 0x01	; 1
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:421
    uint32_t readVoltage() {
      analogRead(ORPH_SIGNAL_PIN);

      //Mittelwert über 5 Messungen
      uint32_t analogValue = 0;
      for (uint8_t i=0; i <5; i++) {
    475e:	69 f7       	brne	.-38     	; 0x473a <MeasureChannel::readVoltage() [clone .isra.83]+0x18>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:425
        _delay_ms(5);
        analogValue += analogRead(ORPH_SIGNAL_PIN);
      }
      analogValue = analogValue / 5;
    4760:	c7 01       	movw	r24, r14
    4762:	b6 01       	movw	r22, r12
    4764:	25 e0       	ldi	r18, 0x05	; 5
    4766:	30 e0       	ldi	r19, 0x00	; 0
    4768:	40 e0       	ldi	r20, 0x00	; 0
    476a:	50 e0       	ldi	r21, 0x00	; 0
    476c:	0e 94 d8 50 	call	0xa1b0	; 0xa1b0 <__udivmodsi4>
    4770:	69 01       	movw	r12, r18
    4772:	7a 01       	movw	r14, r20
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:426
      DPRINT(F("analogValue ("));DDEC(ORPH_SIGNAL_PIN);DPRINT(F(")  : "));DDECLN(analogValue);
    4774:	8f e0       	ldi	r24, 0x0F	; 15
    4776:	96 e0       	ldi	r25, 0x06	; 6
    4778:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    477c:	8f e1       	ldi	r24, 0x1F	; 31
    477e:	0e 94 88 23 	call	0x4710	; 0x4710 <void DDEC<unsigned char>(unsigned char)>
    4782:	89 e0       	ldi	r24, 0x09	; 9
    4784:	96 e0       	ldi	r25, 0x06	; 6
    4786:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    478a:	c7 01       	movw	r24, r14
    478c:	b6 01       	movw	r22, r12
    478e:	0e 94 14 23 	call	0x4628	; 0x4628 <void DDECLN<unsigned long>(unsigned long)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:429
      //

      uint32_t voltage = ((uint32_t)analogValue * REF_VOLTAGE * 10UL) / 1024;
    4792:	a8 ee       	ldi	r26, 0xE8	; 232
    4794:	b0 e8       	ldi	r27, 0x80	; 128
    4796:	a7 01       	movw	r20, r14
    4798:	96 01       	movw	r18, r12
    479a:	0e 94 f6 4e 	call	0x9dec	; 0x9dec <__muluhisi3>
    479e:	6b 01       	movw	r12, r22
    47a0:	7c 01       	movw	r14, r24
    47a2:	8a e0       	ldi	r24, 0x0A	; 10
    47a4:	f6 94       	lsr	r15
    47a6:	e7 94       	ror	r14
    47a8:	d7 94       	ror	r13
    47aa:	c7 94       	ror	r12
    47ac:	8a 95       	dec	r24
    47ae:	d1 f7       	brne	.-12     	; 0x47a4 <MeasureChannel::readVoltage() [clone .isra.83]+0x82>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:430
      DPRINT(F("measured Voltage  : "));DDECLN(voltage);
    47b0:	84 ef       	ldi	r24, 0xF4	; 244
    47b2:	95 e0       	ldi	r25, 0x05	; 5
    47b4:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    47b8:	c7 01       	movw	r24, r14
    47ba:	b6 01       	movw	r22, r12
    47bc:	0e 94 14 23 	call	0x4628	; 0x4628 <void DDECLN<unsigned long>(unsigned long)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:433

      return voltage;
    }
    47c0:	c7 01       	movw	r24, r14
    47c2:	b6 01       	movw	r22, r12
    47c4:	cf 91       	pop	r28
    47c6:	ff 90       	pop	r15
    47c8:	ef 90       	pop	r14
    47ca:	df 90       	pop	r13
    47cc:	cf 90       	pop	r12
    47ce:	08 95       	ret

000047d0 <MeasureChannel::ShowCalibAnalogValueAlarm::trigger(as::AlarmClock&)>:
_ZN14MeasureChannel25ShowCalibAnalogValueAlarm7triggerERN2as10AlarmClockE():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:362
    LcdType& lcdDev;
    MeasureChannel& mc;
  public:
    ShowCalibAnalogValueAlarm (LcdType& l, MeasureChannel& m) :  Alarm(0), lcdDev(l), mc(m) {}
    virtual ~ShowCalibAnalogValueAlarm () {}
    virtual void trigger (__attribute__((unused)) AlarmClock& clock) {
    47d0:	cf 92       	push	r12
    47d2:	df 92       	push	r13
    47d4:	ef 92       	push	r14
    47d6:	ff 92       	push	r15
    47d8:	cf 93       	push	r28
    47da:	df 93       	push	r29
    47dc:	ec 01       	movw	r28, r24
    47de:	cb 01       	movw	r24, r22
_ZN2as5Alarm3setEm():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:41
  Alarm(uint32_t t) : flags(0), tick(t) {}
  Alarm(uint32_t t,bool asynch) : flags(0), tick(t) {
    async(asynch);
  }
  void set(uint32_t t) {
    tick = t;
    47e0:	24 e6       	ldi	r18, 0x64	; 100
    47e2:	30 e0       	ldi	r19, 0x00	; 0
    47e4:	40 e0       	ldi	r20, 0x00	; 0
    47e6:	2d 83       	std	Y+5, r18	; 0x05
    47e8:	3e 83       	std	Y+6, r19	; 0x06
    47ea:	4f 83       	std	Y+7, r20	; 0x07
_ZN14MeasureChannel25ShowCalibAnalogValueAlarm7triggerERN2as10AlarmClockE():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:364
      set(millis2ticks(1000));
      clock.add(*this);
    47ec:	be 01       	movw	r22, r28
    47ee:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <as::AlarmClock::add(as::Alarm&)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:365
      uint16_t a = mc.readVoltage();
    47f2:	0e 94 91 23 	call	0x4722	; 0x4722 <MeasureChannel::readVoltage() [clone .isra.83]>
    47f6:	6b 01       	movw	r12, r22
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:366
      lcdDev.lcd.setCursor(7,3);lcdDev.lcd.print(F("     "));
    47f8:	88 85       	ldd	r24, Y+8	; 0x08
    47fa:	99 85       	ldd	r25, Y+9	; 0x09
    47fc:	43 e0       	ldi	r20, 0x03	; 3
    47fe:	67 e0       	ldi	r22, 0x07	; 7
    4800:	45 96       	adiw	r24, 0x15	; 21
    4802:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
    4806:	88 85       	ldd	r24, Y+8	; 0x08
    4808:	99 85       	ldd	r25, Y+9	; 0x09
    480a:	68 e1       	ldi	r22, 0x18	; 24
    480c:	72 e0       	ldi	r23, 0x02	; 2
    480e:	45 96       	adiw	r24, 0x15	; 21
    4810:	0e 94 d6 05 	call	0xbac	; 0xbac <Print::print(__FlashStringHelper const*)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:367
      lcdDev.lcd.setCursor(7,3);lcdDev.lcd.print(a);
    4814:	88 85       	ldd	r24, Y+8	; 0x08
    4816:	99 85       	ldd	r25, Y+9	; 0x09
    4818:	43 e0       	ldi	r20, 0x03	; 3
    481a:	67 e0       	ldi	r22, 0x07	; 7
    481c:	45 96       	adiw	r24, 0x15	; 21
    481e:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
    4822:	88 85       	ldd	r24, Y+8	; 0x08
    4824:	99 85       	ldd	r25, Y+9	; 0x09
    4826:	b6 01       	movw	r22, r12
    4828:	45 96       	adiw	r24, 0x15	; 21
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:369

    }
    482a:	df 91       	pop	r29
    482c:	cf 91       	pop	r28
    482e:	ff 90       	pop	r15
    4830:	ef 90       	pop	r14
    4832:	df 90       	pop	r13
    4834:	cf 90       	pop	r12
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:367
    virtual void trigger (__attribute__((unused)) AlarmClock& clock) {
      set(millis2ticks(1000));
      clock.add(*this);
      uint16_t a = mc.readVoltage();
      lcdDev.lcd.setCursor(7,3);lcdDev.lcd.print(F("     "));
      lcdDev.lcd.setCursor(7,3);lcdDev.lcd.print(a);
    4836:	0c 94 ce 22 	jmp	0x459c	; 0x459c <Print::print(unsigned int, int) [clone .constprop.104]>

0000483a <void DDECLN<unsigned char>(unsigned char)>:
_Z6DDECLNIhEvT_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:113
  }
  inline void DHEXLN(uint8_t b) { DHEX(b); DPRINT(F("\r\n")); }
  inline void DHEXLN(uint16_t b) { DHEX(b); DPRINT(F("\r\n")); }
  inline void DHEXLN(uint32_t b) { DHEX(b); DPRINT(F("\r\n")); }
  template<typename TYPE>
  inline void DDECLN(TYPE b) { DDEC(b); DPRINT(F("\r\n")); }
    483a:	0e 94 88 23 	call	0x4710	; 0x4710 <void DDEC<unsigned char>(unsigned char)>
    483e:	85 ee       	ldi	r24, 0xE5	; 229
    4840:	94 e0       	ldi	r25, 0x04	; 4
    4842:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>

00004846 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::configChanged()>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E13configChangedEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:443
#endif
  virtual uint8_t status () { return ch.status(); }
  virtual uint8_t flags () { return ch.flags(); }

  virtual void patchStatus (Message& msg) { ch.patchStatus(msg); }
  virtual void configChanged () { ch.configChanged(); }
    4846:	0f 93       	push	r16
    4848:	1f 93       	push	r17
    484a:	cf 93       	push	r28
    484c:	df 93       	push	r29
    484e:	00 d0       	rcall	.+0      	; 0x4850 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::configChanged()+0xa>
    4850:	cd b7       	in	r28, 0x3d	; 61
    4852:	de b7       	in	r29, 0x3e	; 62
    4854:	8c 01       	movw	r16, r24
configChanged():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:698
    void setUserStorage(const UserStorage& storage) {
      us = storage;
    }

    void configChanged() {
      DPRINT(F("*1.Temperature Offset : "));DDECLN(this->getList1().TemperatureOffsetIndex1());
    4856:	86 ec       	ldi	r24, 0xC6	; 198
    4858:	95 e0       	ldi	r25, 0x05	; 5
    485a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    485e:	f8 01       	movw	r30, r16
    4860:	86 85       	ldd	r24, Z+14	; 0x0e
    4862:	97 85       	ldd	r25, Z+15	; 0x0f
    4864:	9a 83       	std	Y+2, r25	; 0x02
    4866:	89 83       	std	Y+1, r24	; 0x01
TemperatureOffsetIndex1():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:133
class UList1 : public RegList1<UReg1> {
  public:
    UList1 (uint16_t addr) : RegList1<UReg1>(addr) {}

    bool TemperatureOffsetIndex1 (uint8_t value) const { return this->writeRegister(0x05, value & 0xff); }
    uint8_t TemperatureOffsetIndex1 () const { return this->readRegister(0x05, 0); }
    4868:	65 e0       	ldi	r22, 0x05	; 5
    486a:	ce 01       	movw	r24, r28
    486c:	01 96       	adiw	r24, 0x01	; 1
    486e:	0e 94 08 15 	call	0x2a10	; 0x2a10 <as::RegisterList<UReg1>::readRegister(unsigned char, unsigned char) const [clone .constprop.90]>
configChanged():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:698
    void setUserStorage(const UserStorage& storage) {
      us = storage;
    }

    void configChanged() {
      DPRINT(F("*1.Temperature Offset : "));DDECLN(this->getList1().TemperatureOffsetIndex1());
    4872:	0e 94 1d 24 	call	0x483a	; 0x483a <void DDECLN<unsigned char>(unsigned char)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:699
      DPRINT(F("*2.Temperature Offset : "));DDECLN(this->getList1().TemperatureOffsetIndex2());
    4876:	8d ea       	ldi	r24, 0xAD	; 173
    4878:	95 e0       	ldi	r25, 0x05	; 5
    487a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    487e:	f8 01       	movw	r30, r16
    4880:	86 85       	ldd	r24, Z+14	; 0x0e
    4882:	97 85       	ldd	r25, Z+15	; 0x0f
    4884:	9a 83       	std	Y+2, r25	; 0x02
    4886:	89 83       	std	Y+1, r24	; 0x01
TemperatureOffsetIndex2():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:136

    bool TemperatureOffsetIndex1 (uint8_t value) const { return this->writeRegister(0x05, value & 0xff); }
    uint8_t TemperatureOffsetIndex1 () const { return this->readRegister(0x05, 0); }

    bool TemperatureOffsetIndex2 (uint8_t value) const { return this->writeRegister(0x06, value & 0xff); }
    uint8_t TemperatureOffsetIndex2 () const { return this->readRegister(0x06, 0); }
    4888:	66 e0       	ldi	r22, 0x06	; 6
    488a:	ce 01       	movw	r24, r28
    488c:	01 96       	adiw	r24, 0x01	; 1
    488e:	0e 94 08 15 	call	0x2a10	; 0x2a10 <as::RegisterList<UReg1>::readRegister(unsigned char, unsigned char) const [clone .constprop.90]>
configChanged():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:699
      us = storage;
    }

    void configChanged() {
      DPRINT(F("*1.Temperature Offset : "));DDECLN(this->getList1().TemperatureOffsetIndex1());
      DPRINT(F("*2.Temperature Offset : "));DDECLN(this->getList1().TemperatureOffsetIndex2());
    4892:	0e 94 1d 24 	call	0x483a	; 0x483a <void DDECLN<unsigned char>(unsigned char)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:700
      DPRINT(F("*Orp         Offset   : "));DDECLN(this->getList1().OrpOffset());
    4896:	84 e9       	ldi	r24, 0x94	; 148
    4898:	95 e0       	ldi	r25, 0x05	; 5
    489a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    489e:	f8 01       	movw	r30, r16
    48a0:	86 85       	ldd	r24, Z+14	; 0x0e
    48a2:	97 85       	ldd	r25, Z+15	; 0x0f
    48a4:	9a 83       	std	Y+2, r25	; 0x02
    48a6:	89 83       	std	Y+1, r24	; 0x01
    48a8:	ce 01       	movw	r24, r28
    48aa:	01 96       	adiw	r24, 0x01	; 1
    48ac:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <UList1::OrpOffset() const>
print():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:92
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    48b0:	97 ff       	sbrs	r25, 7
    48b2:	39 c0       	rjmp	.+114    	; 0x4926 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::configChanged()+0xe0>
    48b4:	0e 94 dd 22 	call	0x45ba	; 0x45ba <Print::print(long, int) [clone .part.3] [clone .constprop.54]>
DDECLN():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:113
    48b8:	8f e5       	ldi	r24, 0x5F	; 95
    48ba:	95 e0       	ldi	r25, 0x05	; 5
    48bc:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
configChanged():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:701
      DPRINT(F("*FlowRateQFactor      : "));DDECLN(this->getList1().FlowRateQFactor());
    48c0:	8b e7       	ldi	r24, 0x7B	; 123
    48c2:	95 e0       	ldi	r25, 0x05	; 5
    48c4:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    48c8:	f8 01       	movw	r30, r16
    48ca:	86 85       	ldd	r24, Z+14	; 0x0e
    48cc:	97 85       	ldd	r25, Z+15	; 0x0f
    48ce:	9a 83       	std	Y+2, r25	; 0x02
    48d0:	89 83       	std	Y+1, r24	; 0x01
    48d2:	ce 01       	movw	r24, r28
    48d4:	01 96       	adiw	r24, 0x01	; 1
    48d6:	0e 94 34 15 	call	0x2a68	; 0x2a68 <UList1::FlowRateQFactor() const>
    48da:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <void DDECLN<unsigned int>(unsigned int)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:702
      DPRINT(F("*ToggleWaitTime       : "));DDECLN(this->getList1().ToggleWaitTime());
    48de:	82 e6       	ldi	r24, 0x62	; 98
    48e0:	95 e0       	ldi	r25, 0x05	; 5
    48e2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    48e6:	f8 01       	movw	r30, r16
    48e8:	86 85       	ldd	r24, Z+14	; 0x0e
    48ea:	97 85       	ldd	r25, Z+15	; 0x0f
    48ec:	9a 83       	std	Y+2, r25	; 0x02
    48ee:	89 83       	std	Y+1, r24	; 0x01
    48f0:	ce 01       	movw	r24, r28
    48f2:	01 96       	adiw	r24, 0x01	; 1
    48f4:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <UList1::ToggleWaitTime() const>
    48f8:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <void DDECLN<unsigned int>(unsigned int)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:703
      toggleWaitTime = this->getList1().ToggleWaitTime();
    48fc:	f8 01       	movw	r30, r16
    48fe:	86 85       	ldd	r24, Z+14	; 0x0e
    4900:	97 85       	ldd	r25, Z+15	; 0x0f
    4902:	9a 83       	std	Y+2, r25	; 0x02
    4904:	89 83       	std	Y+1, r24	; 0x01
    4906:	ce 01       	movw	r24, r28
    4908:	01 96       	adiw	r24, 0x01	; 1
    490a:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <UList1::ToggleWaitTime() const>
    490e:	f8 01       	movw	r30, r16
    4910:	ed 57       	subi	r30, 0x7D	; 125
    4912:	ff 4f       	sbci	r31, 0xFF	; 255
    4914:	91 83       	std	Z+1, r25	; 0x01
    4916:	80 83       	st	Z, r24
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0E13configChangedEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:443
    4918:	0f 90       	pop	r0
    491a:	0f 90       	pop	r0
    491c:	df 91       	pop	r29
    491e:	cf 91       	pop	r28
    4920:	1f 91       	pop	r17
    4922:	0f 91       	pop	r16
    4924:	08 95       	ret
print():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:97
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    4926:	2a e0       	ldi	r18, 0x0A	; 10
    4928:	ab 01       	movw	r20, r22
    492a:	bc 01       	movw	r22, r24
    492c:	89 ed       	ldi	r24, 0xD9	; 217
    492e:	94 e0       	ldi	r25, 0x04	; 4
    4930:	0e 94 2e 22 	call	0x445c	; 0x445c <Print::printNumber(unsigned long, unsigned char)>
    4934:	c1 cf       	rjmp	.-126    	; 0x48b8 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::configChanged()+0x72>

00004936 <UType::configChanged()>:
_ZN5UType13configChangedEv():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:772
    MeasureChannel& measureChannel ()  {
      return channel1;
    }


    virtual void configChanged () {
    4936:	cf 93       	push	r28
    4938:	df 93       	push	r29
    493a:	ec 01       	movw	r28, r24
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:774
      DeviceType::configChanged();
      DPRINT(F("*Messintervall        : ")); DDECLN(this->getList0().Messintervall());
    493c:	82 eb       	ldi	r24, 0xB2	; 178
    493e:	94 e0       	ldi	r25, 0x04	; 4
    4940:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E8getList0Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:110
#endif
    return crc;
  }

  List0Type& getList0 () {
    return list0;
    4944:	ae 96       	adiw	r28, 0x2e	; 46
_ZN5UType13configChangedEv():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:774
    4946:	ce 01       	movw	r24, r28
    4948:	0e 94 0b 19 	call	0x3216	; 0x3216 <UList0::Messintervall() const>
    494c:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <void DDECLN<unsigned int>(unsigned int)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:775
      DPRINT(F("*Sendeintervall       : ")); DDECLN(this->getList0().Sendeintervall());
    4950:	89 e9       	ldi	r24, 0x99	; 153
    4952:	94 e0       	ldi	r25, 0x04	; 4
    4954:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
Sendeintervall():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:107

    bool Sendeintervall (uint8_t value) const {
      return this->writeRegister(0x21, value & 0xff);
    }
    uint8_t Sendeintervall () const {
      return this->readRegister(0x21, 0);
    4958:	40 e0       	ldi	r20, 0x00	; 0
    495a:	61 e2       	ldi	r22, 0x21	; 33
    495c:	ce 01       	movw	r24, r28
    495e:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <as::RegisterList<UReg0>::readRegister(unsigned char, unsigned char) const>
_ZN5UType13configChangedEv():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:775


    virtual void configChanged () {
      DeviceType::configChanged();
      DPRINT(F("*Messintervall        : ")); DDECLN(this->getList0().Messintervall());
      DPRINT(F("*Sendeintervall       : ")); DDECLN(this->getList0().Sendeintervall());
    4962:	0e 94 1d 24 	call	0x483a	; 0x483a <void DDECLN<unsigned char>(unsigned char)>
backOnTime():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:392
  bool localResetDisable () const { return this->readBit(DREG_LOCALRESETDISABLE,0,false); }

  uint8_t speedMultiplier() const { return this->readRegister(DREG_SPEEDMULTIPLIER, 0); }
  bool speedMultiplier(uint8_t value) const { return this->writeRegister(DREG_SPEEDMULTIPLIER, value); }
  
  uint8_t backOnTime () const { return this->readRegister(DREG_BACKONTIME,3); }
    4966:	43 e0       	ldi	r20, 0x03	; 3
    4968:	6e e0       	ldi	r22, 0x0E	; 14
    496a:	ce 01       	movw	r24, r28
    496c:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <as::RegisterList<UReg0>::readRegister(unsigned char, unsigned char) const>
    4970:	c8 2f       	mov	r28, r24
_ZN5UType13configChangedEv():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:778

      uint8_t bOn = this->getList0().backOnTime();
      DPRINT(F("*LCD Backlight Ontime : ")); DDECLN(bOn);
    4972:	80 e8       	ldi	r24, 0x80	; 128
    4974:	94 e0       	ldi	r25, 0x04	; 4
    4976:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    497a:	8c 2f       	mov	r24, r28
    497c:	0e 94 1d 24 	call	0x483a	; 0x483a <void DDECLN<unsigned char>(unsigned char)>
setBackLightOnTime():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:328
      DPRINT("LCD Display not found at 0x");DHEXLN((uint8_t)LCD_ADDRESS);
    }
  }

  void setBackLightOnTime(uint8_t t) {
    backlightOnTime = t;
    4980:	c0 93 99 07 	sts	0x0799, r28	; 0x800799 <lcd+0xc>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:329
    if (backlightOnTime == 0)
    4984:	c1 11       	cpse	r28, r1
    4986:	0a c0       	rjmp	.+20     	; 0x499c <UType::configChanged()+0x66>
backlight():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
	_backlightval=LCD_NOBACKLIGHT;
	expanderWrite(0);
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    4988:	88 e0       	ldi	r24, 0x08	; 8
    498a:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <lcd+0x20>
noBacklight():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:220
}

// Turn the (optional) backlight off/on
void LiquidCrystal_I2C::noBacklight(void) {
	_backlightval=LCD_NOBACKLIGHT;
	expanderWrite(0);
    498e:	60 e0       	ldi	r22, 0x00	; 0
    4990:	82 ea       	ldi	r24, 0xA2	; 162
    4992:	97 e0       	ldi	r25, 0x07	; 7
_ZN5UType13configChangedEv():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:780
      DPRINT(F("*Sendeintervall       : ")); DDECLN(this->getList0().Sendeintervall());

      uint8_t bOn = this->getList0().backOnTime();
      DPRINT(F("*LCD Backlight Ontime : ")); DDECLN(bOn);
      lcd.setBackLightOnTime(bOn);
    }
    4994:	df 91       	pop	r29
    4996:	cf 91       	pop	r28
noBacklight():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:220
    4998:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:219
	}
}

// Turn the (optional) backlight off/on
void LiquidCrystal_I2C::noBacklight(void) {
	_backlightval=LCD_NOBACKLIGHT;
    499c:	10 92 ad 07 	sts	0x07AD, r1	; 0x8007ad <lcd+0x20>
    49a0:	f6 cf       	rjmp	.-20     	; 0x498e <UType::configChanged()+0x58>

000049a2 <DHEX(unsigned long)>:
_Z4DHEXm():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:53
    if( b<0x10 ) DSERIAL.print(F("000")); 
    else if( b<0x100 ) DSERIAL.print(F("00"));
    else if( b<0x1000 ) DSERIAL.print(F("0"));
    DSERIAL.print(b,HEX);
  }
  inline void DHEX(uint32_t b) {
    49a2:	cf 92       	push	r12
    49a4:	df 92       	push	r13
    49a6:	ef 92       	push	r14
    49a8:	ff 92       	push	r15
    49aa:	6b 01       	movw	r12, r22
    49ac:	7c 01       	movw	r14, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:54
    if( b<0x10 ) DSERIAL.print(F("0000000"));
    49ae:	6b ef       	ldi	r22, 0xFB	; 251
    49b0:	71 e0       	ldi	r23, 0x01	; 1
    49b2:	80 e1       	ldi	r24, 0x10	; 16
    49b4:	c8 16       	cp	r12, r24
    49b6:	d1 04       	cpc	r13, r1
    49b8:	e1 04       	cpc	r14, r1
    49ba:	f1 04       	cpc	r15, r1
    49bc:	88 f1       	brcs	.+98     	; 0x4a20 <DHEX(unsigned long)+0x7e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:55
    else if( b<0x100 ) DSERIAL.print(F("000000"));
    49be:	64 ef       	ldi	r22, 0xF4	; 244
    49c0:	71 e0       	ldi	r23, 0x01	; 1
    49c2:	8f ef       	ldi	r24, 0xFF	; 255
    49c4:	c8 16       	cp	r12, r24
    49c6:	d1 04       	cpc	r13, r1
    49c8:	e1 04       	cpc	r14, r1
    49ca:	f1 04       	cpc	r15, r1
    49cc:	49 f1       	breq	.+82     	; 0x4a20 <DHEX(unsigned long)+0x7e>
    49ce:	40 f1       	brcs	.+80     	; 0x4a20 <DHEX(unsigned long)+0x7e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:56
    else if( b<0x1000 ) DSERIAL.print(F("00000"));
    49d0:	6e ee       	ldi	r22, 0xEE	; 238
    49d2:	71 e0       	ldi	r23, 0x01	; 1
    49d4:	c1 14       	cp	r12, r1
    49d6:	80 e1       	ldi	r24, 0x10	; 16
    49d8:	d8 06       	cpc	r13, r24
    49da:	e1 04       	cpc	r14, r1
    49dc:	f1 04       	cpc	r15, r1
    49de:	00 f1       	brcs	.+64     	; 0x4a20 <DHEX(unsigned long)+0x7e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:57
    else if( b<0x10000 ) DSERIAL.print(F("0000"));
    49e0:	69 ee       	ldi	r22, 0xE9	; 233
    49e2:	71 e0       	ldi	r23, 0x01	; 1
    49e4:	c1 14       	cp	r12, r1
    49e6:	d1 04       	cpc	r13, r1
    49e8:	81 e0       	ldi	r24, 0x01	; 1
    49ea:	e8 06       	cpc	r14, r24
    49ec:	f1 04       	cpc	r15, r1
    49ee:	c0 f0       	brcs	.+48     	; 0x4a20 <DHEX(unsigned long)+0x7e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:58
    else if( b<0x100000 ) DSERIAL.print(F("000"));
    49f0:	65 ee       	ldi	r22, 0xE5	; 229
    49f2:	71 e0       	ldi	r23, 0x01	; 1
    49f4:	c1 14       	cp	r12, r1
    49f6:	d1 04       	cpc	r13, r1
    49f8:	80 e1       	ldi	r24, 0x10	; 16
    49fa:	e8 06       	cpc	r14, r24
    49fc:	f1 04       	cpc	r15, r1
    49fe:	80 f0       	brcs	.+32     	; 0x4a20 <DHEX(unsigned long)+0x7e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:59
    else if( b<0x1000000 ) DSERIAL.print(F("00"));
    4a00:	62 ee       	ldi	r22, 0xE2	; 226
    4a02:	71 e0       	ldi	r23, 0x01	; 1
    4a04:	c1 14       	cp	r12, r1
    4a06:	d1 04       	cpc	r13, r1
    4a08:	e1 04       	cpc	r14, r1
    4a0a:	81 e0       	ldi	r24, 0x01	; 1
    4a0c:	f8 06       	cpc	r15, r24
    4a0e:	40 f0       	brcs	.+16     	; 0x4a20 <DHEX(unsigned long)+0x7e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:60
    else if( b<0x10000000 ) DSERIAL.print(F("0"));
    4a10:	c1 14       	cp	r12, r1
    4a12:	d1 04       	cpc	r13, r1
    4a14:	e1 04       	cpc	r14, r1
    4a16:	80 e1       	ldi	r24, 0x10	; 16
    4a18:	f8 06       	cpc	r15, r24
    4a1a:	30 f4       	brcc	.+12     	; 0x4a28 <DHEX(unsigned long)+0x86>
    4a1c:	60 ee       	ldi	r22, 0xE0	; 224
    4a1e:	71 e0       	ldi	r23, 0x01	; 1
    4a20:	89 ed       	ldi	r24, 0xD9	; 217
    4a22:	94 e0       	ldi	r25, 0x04	; 4
    4a24:	0e 94 d6 05 	call	0xbac	; 0xbac <Print::print(__FlashStringHelper const*)>
print():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    4a28:	20 e1       	ldi	r18, 0x10	; 16
    4a2a:	b7 01       	movw	r22, r14
    4a2c:	a6 01       	movw	r20, r12
    4a2e:	89 ed       	ldi	r24, 0xD9	; 217
    4a30:	94 e0       	ldi	r25, 0x04	; 4
_Z4DHEXm():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:62
    DSERIAL.print(b,HEX);
  }
    4a32:	ff 90       	pop	r15
    4a34:	ef 90       	pop	r14
    4a36:	df 90       	pop	r13
    4a38:	cf 90       	pop	r12
print():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:106
    4a3a:	0c 94 2e 22 	jmp	0x445c	; 0x445c <Print::printNumber(unsigned long, unsigned char)>

00004a3e <Print::print(char const*)>:
_ZN5Print5printEPKc():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:63
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    4a3e:	0c 94 1f 22 	jmp	0x443e	; 0x443e <Print::write(char const*) [clone .part.2]>

00004a42 <String::move(String&)>:
_ZN6String4moveERS_():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:195
  return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
    4a42:	0f 93       	push	r16
    4a44:	1f 93       	push	r17
    4a46:	cf 93       	push	r28
    4a48:	df 93       	push	r29
    4a4a:	8c 01       	movw	r16, r24
    4a4c:	eb 01       	movw	r28, r22
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:196
  if (buffer) {
    4a4e:	fc 01       	movw	r30, r24
    4a50:	80 81       	ld	r24, Z
    4a52:	91 81       	ldd	r25, Z+1	; 0x01
    4a54:	00 97       	sbiw	r24, 0x00	; 0
    4a56:	e1 f0       	breq	.+56     	; 0x4a90 <String::move(String&)+0x4e>
    4a58:	68 81       	ld	r22, Y
    4a5a:	79 81       	ldd	r23, Y+1	; 0x01
_ZNK6StringcvMS_KFvvEEv.isra.0():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.h:138
  friend StringSumHelper & operator + (const StringSumHelper &lhs, float num);
  friend StringSumHelper & operator + (const StringSumHelper &lhs, double num);
  friend StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs);

  // comparison (only works w/ Strings and "strings")
  operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
    4a5c:	61 15       	cp	r22, r1
    4a5e:	71 05       	cpc	r23, r1
    4a60:	a9 f0       	breq	.+42     	; 0x4a8c <String::move(String&)+0x4a>
_ZN6String4moveERS_():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:197
    if (rhs && capacity >= rhs.len) {
    4a62:	42 81       	ldd	r20, Z+2	; 0x02
    4a64:	53 81       	ldd	r21, Z+3	; 0x03
    4a66:	2c 81       	ldd	r18, Y+4	; 0x04
    4a68:	3d 81       	ldd	r19, Y+5	; 0x05
    4a6a:	42 17       	cp	r20, r18
    4a6c:	53 07       	cpc	r21, r19
    4a6e:	70 f0       	brcs	.+28     	; 0x4a8c <String::move(String&)+0x4a>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:198
      strcpy(buffer, rhs.buffer);
    4a70:	0e 94 45 53 	call	0xa68a	; 0xa68a <strcpy>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:199
      len = rhs.len;
    4a74:	8c 81       	ldd	r24, Y+4	; 0x04
    4a76:	9d 81       	ldd	r25, Y+5	; 0x05
    4a78:	f8 01       	movw	r30, r16
    4a7a:	95 83       	std	Z+5, r25	; 0x05
    4a7c:	84 83       	std	Z+4, r24	; 0x04
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:211
  buffer = rhs.buffer;
  capacity = rhs.capacity;
  len = rhs.len;
  rhs.buffer = NULL;
  rhs.capacity = 0;
  rhs.len = 0;
    4a7e:	1d 82       	std	Y+5, r1	; 0x05
    4a80:	1c 82       	std	Y+4, r1	; 0x04
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:212
}
    4a82:	df 91       	pop	r29
    4a84:	cf 91       	pop	r28
    4a86:	1f 91       	pop	r17
    4a88:	0f 91       	pop	r16
    4a8a:	08 95       	ret
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:203
      strcpy(buffer, rhs.buffer);
      len = rhs.len;
      rhs.len = 0;
      return;
    } else {
      free(buffer);
    4a8c:	0e 94 c5 51 	call	0xa38a	; 0xa38a <free>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:206
    }
  }
  buffer = rhs.buffer;
    4a90:	88 81       	ld	r24, Y
    4a92:	99 81       	ldd	r25, Y+1	; 0x01
    4a94:	f8 01       	movw	r30, r16
    4a96:	91 83       	std	Z+1, r25	; 0x01
    4a98:	80 83       	st	Z, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:207
  capacity = rhs.capacity;
    4a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a9c:	9b 81       	ldd	r25, Y+3	; 0x03
    4a9e:	93 83       	std	Z+3, r25	; 0x03
    4aa0:	82 83       	std	Z+2, r24	; 0x02
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:208
  len = rhs.len;
    4aa2:	8c 81       	ldd	r24, Y+4	; 0x04
    4aa4:	9d 81       	ldd	r25, Y+5	; 0x05
    4aa6:	95 83       	std	Z+5, r25	; 0x05
    4aa8:	84 83       	std	Z+4, r24	; 0x04
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:209
  rhs.buffer = NULL;
    4aaa:	19 82       	std	Y+1, r1	; 0x01
    4aac:	18 82       	st	Y, r1
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:210
  rhs.capacity = 0;
    4aae:	1b 82       	std	Y+3, r1	; 0x03
    4ab0:	1a 82       	std	Y+2, r1	; 0x02
    4ab2:	e5 cf       	rjmp	.-54     	; 0x4a7e <String::move(String&)+0x3c>

00004ab4 <String::invalidate()>:
_ZN6String10invalidateEv():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:140
  capacity = 0;
  len = 0;
}

void String::invalidate(void)
{
    4ab4:	cf 93       	push	r28
    4ab6:	df 93       	push	r29
    4ab8:	ec 01       	movw	r28, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:141
  if (buffer) free(buffer);
    4aba:	88 81       	ld	r24, Y
    4abc:	99 81       	ldd	r25, Y+1	; 0x01
    4abe:	00 97       	sbiw	r24, 0x00	; 0
    4ac0:	11 f0       	breq	.+4      	; 0x4ac6 <String::invalidate()+0x12>
    4ac2:	0e 94 c5 51 	call	0xa38a	; 0xa38a <free>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:142
  buffer = NULL;
    4ac6:	19 82       	std	Y+1, r1	; 0x01
    4ac8:	18 82       	st	Y, r1
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:143
  capacity = len = 0;
    4aca:	1d 82       	std	Y+5, r1	; 0x05
    4acc:	1c 82       	std	Y+4, r1	; 0x04
    4ace:	1b 82       	std	Y+3, r1	; 0x03
    4ad0:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:144
}
    4ad2:	df 91       	pop	r29
    4ad4:	cf 91       	pop	r28
    4ad6:	08 95       	ret

00004ad8 <String::~String()>:
_ZN6StringD2Ev():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  if(buffer)
    4ad8:	fc 01       	movw	r30, r24
    4ada:	80 81       	ld	r24, Z
    4adc:	91 81       	ldd	r25, Z+1	; 0x01
    4ade:	00 97       	sbiw	r24, 0x00	; 0
    4ae0:	11 f0       	breq	.+4      	; 0x4ae6 <String::~String()+0xe>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:125
    free(buffer);
    4ae2:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <free>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:126
}
    4ae6:	08 95       	ret

00004ae8 <as::InternalButton<UType, (unsigned char)1, (unsigned char)0, (unsigned char)2>::~InternalButton()>:
_ZN2as14InternalButtonI5UTypeLh1ELh0ELh2EED0Ev():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/new.cpp:88
void * operator new[](std::size_t size, void *place) noexcept {
  return operator new(size, place);
}

[[gnu::weak]] void operator delete(void * ptr) noexcept {
  free(ptr);
    4ae8:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <free>

00004aec <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::EventSender::~EventSender()>:
_ZN2as19StateGenericChannelINS_14OnePinPositionILj0EEENS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101ISA_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10EE11EventSenderD0Ev():
    4aec:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <free>

00004af0 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::~StateGenericChannel()>:
_ZN2as19StateGenericChannelINS_14OnePinPositionILj0EEENS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101ISA_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10EED0Ev():
    4af0:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <free>

00004af4 <as::ActorChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, 10, UList0, as::SwitchStateMachine, as::EmptyList>::~ActorChannel()>:
_ZN2as12ActorChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_11SwitchList1ENS_15SwitchList3TmplINS_8RegList3INS_10SwitchReg3EEEEELi10E6UList0NS_18SwitchStateMachineENS_9EmptyListEED0Ev():
    4af4:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <free>

00004af8 <as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>::~TwoStateChannel()>:
_ZN2as15TwoStateChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EED0Ev():
    4af8:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <free>

00004afc <as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>::~SwitchChannel()>:
_ZN2as13SwitchChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEELi10E6UList0S3_ED0Ev():
    4afc:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <free>

00004b00 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::~Device()>:
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0ED0Ev():
    4b00:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <free>

00004b04 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::~StateButton()>:
_ZN2as11StateButtonILh1ELh0ELh2ENS_18NoDoublePressAlarmEED0Ev():
    4b04:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <free>

00004b08 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, DummyChannel, UList0>::~VirtChannel()>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE12DummyChannel6UList0ED0Ev():
    4b08:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <free>

00004b0c <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, MeasureChannel, UList0>::~VirtChannel()>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0ED0Ev():
    4b0c:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <free>

00004b10 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::TwoStateChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10, 0u>, UList0>::~VirtChannel()>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15TwoStateChannelISD_6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10ELj0EEESF_ED0Ev():
    4b10:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <free>

00004b14 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::~VirtChannel()>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_ED0Ev():
    4b14:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <free>

00004b18 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::~ChannelDevice()>:
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_ED0Ev():
    4b18:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <free>

00004b1c <as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >::MinSendTimeout::~MinSendTimeout()>:
_ZN2as5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS2_Lh255EEEE14MinSendTimeoutD0Ev():
    4b1c:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <free>

00004b20 <as::Led<as::ArduinoPins>::~Led()>:
_ZN2as3LedINS_11ArduinoPinsEED0Ev():
    4b20:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <free>

00004b24 <CalibButton::~CalibButton()>:
_ZN11CalibButtonD0Ev():
    4b24:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <free>

00004b28 <UType::~UType()>:
_ZN5UTypeD0Ev():
    4b28:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <free>

00004b2c <MeasureChannel::~MeasureChannel()>:
_ZN14MeasureChannelD0Ev():
    4b2c:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <free>

00004b30 <MeasureChannel::ShowCalibAnalogValueAlarm::~ShowCalibAnalogValueAlarm()>:
_ZN14MeasureChannel25ShowCalibAnalogValueAlarmD0Ev():
    4b30:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <free>

00004b34 <LcdType::~LcdType()>:
_ZN7LcdTypeD0Ev():
    4b34:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <free>

00004b38 <LcdType::BacklightAlarm::~BacklightAlarm()>:
_ZN7LcdType14BacklightAlarmD0Ev():
    4b38:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <free>

00004b3c <as::SwitchStateMachine::~SwitchStateMachine()>:
_ZN2as18SwitchStateMachineD0Ev():
    4b3c:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <free>

00004b40 <as::Activity::~Activity()>:
_ZN2as8ActivityD0Ev():
    4b40:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <free>

00004b44 <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:147
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    4b44:	0f 93       	push	r16
    4b46:	1f 93       	push	r17
    4b48:	cf 93       	push	r28
    4b4a:	df 93       	push	r29
    4b4c:	ec 01       	movw	r28, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:148
  if (buffer && capacity >= size) return 1;
    4b4e:	88 81       	ld	r24, Y
    4b50:	99 81       	ldd	r25, Y+1	; 0x01
    4b52:	00 97       	sbiw	r24, 0x00	; 0
    4b54:	59 f0       	breq	.+22     	; 0x4b6c <String::reserve(unsigned int)+0x28>
    4b56:	2a 81       	ldd	r18, Y+2	; 0x02
    4b58:	3b 81       	ldd	r19, Y+3	; 0x03
    4b5a:	26 17       	cp	r18, r22
    4b5c:	37 07       	cpc	r19, r23
    4b5e:	30 f0       	brcs	.+12     	; 0x4b6c <String::reserve(unsigned int)+0x28>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:150
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    4b60:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:154
    return 1;
  }
  return 0;
}
    4b62:	df 91       	pop	r29
    4b64:	cf 91       	pop	r28
    4b66:	1f 91       	pop	r17
    4b68:	0f 91       	pop	r16
    4b6a:	08 95       	ret
    4b6c:	8b 01       	movw	r16, r22
changeBuffer():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:158

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    4b6e:	6f 5f       	subi	r22, 0xFF	; 255
    4b70:	7f 4f       	sbci	r23, 0xFF	; 255
    4b72:	0e 94 4e 52 	call	0xa49c	; 0xa49c <realloc>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:159
  if (newbuffer) {
    4b76:	00 97       	sbiw	r24, 0x00	; 0
    4b78:	59 f0       	breq	.+22     	; 0x4b90 <String::reserve(unsigned int)+0x4c>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:160
    buffer = newbuffer;
    4b7a:	99 83       	std	Y+1, r25	; 0x01
    4b7c:	88 83       	st	Y, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:161
    capacity = maxStrLen;
    4b7e:	1b 83       	std	Y+3, r17	; 0x03
    4b80:	0a 83       	std	Y+2, r16	; 0x02
_ZN6String7reserveEj():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:150

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    4b82:	2c 81       	ldd	r18, Y+4	; 0x04
    4b84:	3d 81       	ldd	r19, Y+5	; 0x05
    4b86:	23 2b       	or	r18, r19
    4b88:	59 f7       	brne	.-42     	; 0x4b60 <String::reserve(unsigned int)+0x1c>
    4b8a:	fc 01       	movw	r30, r24
    4b8c:	10 82       	st	Z, r1
    4b8e:	e8 cf       	rjmp	.-48     	; 0x4b60 <String::reserve(unsigned int)+0x1c>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
    4b90:	80 e0       	ldi	r24, 0x00	; 0
    4b92:	e7 cf       	rjmp	.-50     	; 0x4b62 <String::reserve(unsigned int)+0x1e>

00004b94 <operator+(StringSumHelper const&, String const&)>:
_ZplRK15StringSumHelperRK6String():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:355
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    4b94:	ef 92       	push	r14
    4b96:	ff 92       	push	r15
    4b98:	0f 93       	push	r16
    4b9a:	1f 93       	push	r17
    4b9c:	cf 93       	push	r28
    4b9e:	df 93       	push	r29
    4ba0:	ec 01       	movw	r28, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:357
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    4ba2:	fb 01       	movw	r30, r22
    4ba4:	e0 80       	ld	r14, Z
    4ba6:	f1 80       	ldd	r15, Z+1	; 0x01
concat():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:267
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
    4ba8:	e1 14       	cp	r14, r1
    4baa:	f1 04       	cpc	r15, r1
    4bac:	11 f1       	breq	.+68     	; 0x4bf2 <operator+(StringSumHelper const&, String const&)+0x5e>
_ZplRK15StringSumHelperRK6String():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:357
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    4bae:	04 81       	ldd	r16, Z+4	; 0x04
    4bb0:	15 81       	ldd	r17, Z+5	; 0x05
concat():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:268

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
  if (!cstr) return 0;
  if (length == 0) return 1;
    4bb2:	01 15       	cp	r16, r1
    4bb4:	11 05       	cpc	r17, r1
    4bb6:	a9 f0       	breq	.+42     	; 0x4be2 <operator+(StringSumHelper const&, String const&)+0x4e>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:266
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
    4bb8:	8c 81       	ldd	r24, Y+4	; 0x04
    4bba:	9d 81       	ldd	r25, Y+5	; 0x05
    4bbc:	08 0f       	add	r16, r24
    4bbe:	19 1f       	adc	r17, r25
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:269
  if (!cstr) return 0;
  if (length == 0) return 1;
  if (!reserve(newlen)) return 0;
    4bc0:	b8 01       	movw	r22, r16
    4bc2:	ce 01       	movw	r24, r28
    4bc4:	0e 94 a2 25 	call	0x4b44	; 0x4b44 <String::reserve(unsigned int)>
    4bc8:	88 23       	and	r24, r24
    4bca:	99 f0       	breq	.+38     	; 0x4bf2 <operator+(StringSumHelper const&, String const&)+0x5e>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:270
  strcpy(buffer + len, cstr);
    4bcc:	28 81       	ld	r18, Y
    4bce:	39 81       	ldd	r19, Y+1	; 0x01
    4bd0:	8c 81       	ldd	r24, Y+4	; 0x04
    4bd2:	9d 81       	ldd	r25, Y+5	; 0x05
    4bd4:	b7 01       	movw	r22, r14
    4bd6:	82 0f       	add	r24, r18
    4bd8:	93 1f       	adc	r25, r19
    4bda:	0e 94 45 53 	call	0xa68a	; 0xa68a <strcpy>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:271
  len = newlen;
    4bde:	1d 83       	std	Y+5, r17	; 0x05
    4be0:	0c 83       	std	Y+4, r16	; 0x04
_ZplRK15StringSumHelperRK6String():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:359
StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
  return a;
}
    4be2:	ce 01       	movw	r24, r28
    4be4:	df 91       	pop	r29
    4be6:	cf 91       	pop	r28
    4be8:	1f 91       	pop	r17
    4bea:	0f 91       	pop	r16
    4bec:	ff 90       	pop	r15
    4bee:	ef 90       	pop	r14
    4bf0:	08 95       	ret
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:357
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    4bf2:	ce 01       	movw	r24, r28
    4bf4:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <String::invalidate()>
    4bf8:	f4 cf       	rjmp	.-24     	; 0x4be2 <operator+(StringSumHelper const&, String const&)+0x4e>

00004bfa <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:172
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    4bfa:	ef 92       	push	r14
    4bfc:	ff 92       	push	r15
    4bfe:	0f 93       	push	r16
    4c00:	1f 93       	push	r17
    4c02:	cf 93       	push	r28
    4c04:	df 93       	push	r29
    4c06:	ec 01       	movw	r28, r24
    4c08:	7b 01       	movw	r14, r22
    4c0a:	8a 01       	movw	r16, r20
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:173
  if (!reserve(length)) {
    4c0c:	ba 01       	movw	r22, r20
    4c0e:	0e 94 a2 25 	call	0x4b44	; 0x4b44 <String::reserve(unsigned int)>
    4c12:	81 11       	cpse	r24, r1
    4c14:	0b c0       	rjmp	.+22     	; 0x4c2c <String::copy(char const*, unsigned int)+0x32>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:174
    invalidate();
    4c16:	ce 01       	movw	r24, r28
    4c18:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <String::invalidate()>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:180
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
  return *this;
}
    4c1c:	ce 01       	movw	r24, r28
    4c1e:	df 91       	pop	r29
    4c20:	cf 91       	pop	r28
    4c22:	1f 91       	pop	r17
    4c24:	0f 91       	pop	r16
    4c26:	ff 90       	pop	r15
    4c28:	ef 90       	pop	r14
    4c2a:	08 95       	ret
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:177
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
    4c2c:	1d 83       	std	Y+5, r17	; 0x05
    4c2e:	0c 83       	std	Y+4, r16	; 0x04
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:178
  strcpy(buffer, cstr);
    4c30:	b7 01       	movw	r22, r14
    4c32:	88 81       	ld	r24, Y
    4c34:	99 81       	ldd	r25, Y+1	; 0x01
    4c36:	0e 94 45 53 	call	0xa68a	; 0xa68a <strcpy>
    4c3a:	f0 cf       	rjmp	.-32     	; 0x4c1c <String::copy(char const*, unsigned int)+0x22>

00004c3c <String::operator=(char const*) [clone .part.3]>:
_ZN6StringaSEPKc.part.3():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:241
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
    4c3c:	fb 01       	movw	r30, r22
    4c3e:	01 90       	ld	r0, Z+
    4c40:	00 20       	and	r0, r0
    4c42:	e9 f7       	brne	.-6      	; 0x4c3e <String::operator=(char const*) [clone .part.3]+0x2>
    4c44:	31 97       	sbiw	r30, 0x01	; 1
    4c46:	af 01       	movw	r20, r30
    4c48:	46 1b       	sub	r20, r22
    4c4a:	57 0b       	sbc	r21, r23
    4c4c:	0c 94 fd 25 	jmp	0x4bfa	; 0x4bfa <String::copy(char const*, unsigned int)>

00004c50 <String::String(double, unsigned char) [clone .constprop.148]>:
_ZN6StringC2Edh.constprop.148():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:115
  init();
  char buf[33];
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::String(double value, unsigned char decimalPlaces)
    4c50:	ef 92       	push	r14
    4c52:	ff 92       	push	r15
    4c54:	0f 93       	push	r16
    4c56:	1f 93       	push	r17
    4c58:	cf 93       	push	r28
    4c5a:	df 93       	push	r29
    4c5c:	cd b7       	in	r28, 0x3d	; 61
    4c5e:	de b7       	in	r29, 0x3e	; 62
    4c60:	a1 97       	sbiw	r28, 0x21	; 33
    4c62:	0f b6       	in	r0, 0x3f	; 63
    4c64:	f8 94       	cli
    4c66:	de bf       	out	0x3e, r29	; 62
    4c68:	0f be       	out	0x3f, r0	; 63
    4c6a:	cd bf       	out	0x3d, r28	; 61
    4c6c:	7c 01       	movw	r14, r24
    4c6e:	cb 01       	movw	r24, r22
    4c70:	ba 01       	movw	r22, r20
_ZN6String4initEv():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:134
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    4c72:	f7 01       	movw	r30, r14
    4c74:	11 82       	std	Z+1, r1	; 0x01
    4c76:	10 82       	st	Z, r1
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:135
  capacity = 0;
    4c78:	13 82       	std	Z+3, r1	; 0x03
    4c7a:	12 82       	std	Z+2, r1	; 0x02
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:136
  len = 0;
    4c7c:	15 82       	std	Z+5, r1	; 0x05
    4c7e:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2Edh.constprop.148():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:119

String::String(double value, unsigned char decimalPlaces)
{
  init();
  char buf[33];
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
    4c80:	8e 01       	movw	r16, r28
    4c82:	0f 5f       	subi	r16, 0xFF	; 255
    4c84:	1f 4f       	sbci	r17, 0xFF	; 255
    4c86:	22 e0       	ldi	r18, 0x02	; 2
    4c88:	44 e0       	ldi	r20, 0x04	; 4
    4c8a:	0e 94 fa 4a 	call	0x95f4	; 0x95f4 <dtostrf>
operator=():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:241
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
    4c8e:	00 97       	sbiw	r24, 0x00	; 0
    4c90:	89 f0       	breq	.+34     	; 0x4cb4 <String::String(double, unsigned char) [clone .constprop.148]+0x64>
    4c92:	bc 01       	movw	r22, r24
    4c94:	c7 01       	movw	r24, r14
    4c96:	0e 94 1e 26 	call	0x4c3c	; 0x4c3c <String::operator=(char const*) [clone .part.3]>
_ZN6StringC2Edh.constprop.148():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:120
String::String(double value, unsigned char decimalPlaces)
{
  init();
  char buf[33];
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}
    4c9a:	a1 96       	adiw	r28, 0x21	; 33
    4c9c:	0f b6       	in	r0, 0x3f	; 63
    4c9e:	f8 94       	cli
    4ca0:	de bf       	out	0x3e, r29	; 62
    4ca2:	0f be       	out	0x3f, r0	; 63
    4ca4:	cd bf       	out	0x3d, r28	; 61
    4ca6:	df 91       	pop	r29
    4ca8:	cf 91       	pop	r28
    4caa:	1f 91       	pop	r17
    4cac:	0f 91       	pop	r16
    4cae:	ff 90       	pop	r15
    4cb0:	ef 90       	pop	r14
    4cb2:	08 95       	ret
operator=():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:242
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
  else invalidate();
    4cb4:	c7 01       	movw	r24, r14
    4cb6:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <String::invalidate()>
    4cba:	ef cf       	rjmp	.-34     	; 0x4c9a <String::String(double, unsigned char) [clone .constprop.148]+0x4a>

00004cbc <String::operator=(String const&)>:
_ZN6StringaSERKS_():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:216
  rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
    4cbc:	cf 93       	push	r28
    4cbe:	df 93       	push	r29
    4cc0:	ec 01       	movw	r28, r24
    4cc2:	fb 01       	movw	r30, r22
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:217
  if (this == &rhs) return *this;
    4cc4:	86 17       	cp	r24, r22
    4cc6:	97 07       	cpc	r25, r23
    4cc8:	49 f0       	breq	.+18     	; 0x4cdc <String::operator=(String const&)+0x20>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:219
  
  if (rhs.buffer) copy(rhs.buffer, rhs.len);
    4cca:	60 81       	ld	r22, Z
    4ccc:	71 81       	ldd	r23, Z+1	; 0x01
    4cce:	61 15       	cp	r22, r1
    4cd0:	71 05       	cpc	r23, r1
    4cd2:	41 f0       	breq	.+16     	; 0x4ce4 <String::operator=(String const&)+0x28>
    4cd4:	44 81       	ldd	r20, Z+4	; 0x04
    4cd6:	55 81       	ldd	r21, Z+5	; 0x05
    4cd8:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <String::copy(char const*, unsigned int)>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:223
  else invalidate();
  
  return *this;
}
    4cdc:	ce 01       	movw	r24, r28
    4cde:	df 91       	pop	r29
    4ce0:	cf 91       	pop	r28
    4ce2:	08 95       	ret
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:220
String & String::operator = (const String &rhs)
{
  if (this == &rhs) return *this;
  
  if (rhs.buffer) copy(rhs.buffer, rhs.len);
  else invalidate();
    4ce4:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <String::invalidate()>
    4ce8:	f9 cf       	rjmp	.-14     	; 0x4cdc <String::operator=(String const&)+0x20>

00004cea <String::String(char const*)>:
_ZN6String4initEv():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:134
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    4cea:	fc 01       	movw	r30, r24
    4cec:	11 82       	std	Z+1, r1	; 0x01
    4cee:	10 82       	st	Z, r1
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:135
  capacity = 0;
    4cf0:	13 82       	std	Z+3, r1	; 0x03
    4cf2:	12 82       	std	Z+2, r1	; 0x02
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:136
  len = 0;
    4cf4:	15 82       	std	Z+5, r1	; 0x05
    4cf6:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2EPKc():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
    4cf8:	fb 01       	movw	r30, r22
    4cfa:	01 90       	ld	r0, Z+
    4cfc:	00 20       	and	r0, r0
    4cfe:	e9 f7       	brne	.-6      	; 0x4cfa <String::String(char const*)+0x10>
    4d00:	31 97       	sbiw	r30, 0x01	; 1
    4d02:	af 01       	movw	r20, r30
    4d04:	46 1b       	sub	r20, r22
    4d06:	57 0b       	sbc	r21, r23
    4d08:	0c 94 fd 25 	jmp	0x4bfa	; 0x4bfa <String::copy(char const*, unsigned int)>

00004d0c <LcdType::tempToStr(int) [clone .isra.75]>:
_ZN7LcdType9tempToStrEi.isra.75():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:211
  }backlightalarm;
private:
  uint8_t backlightOnTime;
  byte degree[8] = { 0b00111, 0b00101, 0b00111, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000 };

  String tempToStr(int16_t t) {
    4d0c:	df 92       	push	r13
    4d0e:	ef 92       	push	r14
    4d10:	ff 92       	push	r15
    4d12:	0f 93       	push	r16
    4d14:	1f 93       	push	r17
    4d16:	cf 93       	push	r28
    4d18:	df 93       	push	r29
    4d1a:	00 d0       	rcall	.+0      	; 0x4d1c <LcdType::tempToStr(int) [clone .isra.75]+0x10>
    4d1c:	00 d0       	rcall	.+0      	; 0x4d1e <LcdType::tempToStr(int) [clone .isra.75]+0x12>
    4d1e:	00 d0       	rcall	.+0      	; 0x4d20 <LcdType::tempToStr(int) [clone .isra.75]+0x14>
    4d20:	cd b7       	in	r28, 0x3d	; 61
    4d22:	de b7       	in	r29, 0x3e	; 62
    4d24:	8c 01       	movw	r16, r24
    4d26:	7b 01       	movw	r14, r22
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:212
    String s_temp = "--.-";
    4d28:	69 e8       	ldi	r22, 0x89	; 137
    4d2a:	73 e0       	ldi	r23, 0x03	; 3
    4d2c:	0e 94 75 26 	call	0x4cea	; 0x4cea <String::String(char const*)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:213
    s_temp = (String)((float)t / 10.0);
    4d30:	b7 01       	movw	r22, r14
    4d32:	ff 0c       	add	r15, r15
    4d34:	88 0b       	sbc	r24, r24
    4d36:	99 0b       	sbc	r25, r25
    4d38:	0e 94 b1 4d 	call	0x9b62	; 0x9b62 <__floatsisf>
    4d3c:	20 e0       	ldi	r18, 0x00	; 0
    4d3e:	30 e0       	ldi	r19, 0x00	; 0
    4d40:	40 e2       	ldi	r20, 0x20	; 32
    4d42:	51 e4       	ldi	r21, 0x41	; 65
    4d44:	0e 94 7d 4f 	call	0x9efa	; 0x9efa <__divsf3>
    4d48:	ab 01       	movw	r20, r22
    4d4a:	bc 01       	movw	r22, r24
    4d4c:	ce 01       	movw	r24, r28
    4d4e:	01 96       	adiw	r24, 0x01	; 1
    4d50:	0e 94 28 26 	call	0x4c50	; 0x4c50 <String::String(double, unsigned char) [clone .constprop.148]>
operator=():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:228
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
  if (this != &rval) move(rval);
    4d54:	be 01       	movw	r22, r28
    4d56:	6f 5f       	subi	r22, 0xFF	; 255
    4d58:	7f 4f       	sbci	r23, 0xFF	; 255
    4d5a:	c8 01       	movw	r24, r16
    4d5c:	0e 94 21 25 	call	0x4a42	; 0x4a42 <String::move(String&)>
_ZN7LcdType9tempToStrEi.isra.75():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:213
    4d60:	ce 01       	movw	r24, r28
    4d62:	01 96       	adiw	r24, 0x01	; 1
    4d64:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <String::~String()>
    4d68:	d8 01       	movw	r26, r16
    4d6a:	14 96       	adiw	r26, 0x04	; 4
    4d6c:	ed 90       	ld	r14, X+
    4d6e:	fc 90       	ld	r15, X
substring():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:622
  if (left > right) {
    unsigned int temp = right;
    right = left;
    left = temp;
  }
  String out;
    4d70:	66 e4       	ldi	r22, 0x46	; 70
    4d72:	73 e0       	ldi	r23, 0x03	; 3
    4d74:	ce 01       	movw	r24, r28
    4d76:	01 96       	adiw	r24, 0x01	; 1
    4d78:	0e 94 75 26 	call	0x4cea	; 0x4cea <String::String(char const*)>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:623
  if (left >= len) return out;
    4d7c:	f8 01       	movw	r30, r16
    4d7e:	84 81       	ldd	r24, Z+4	; 0x04
    4d80:	95 81       	ldd	r25, Z+5	; 0x05
    4d82:	00 97       	sbiw	r24, 0x00	; 0
    4d84:	f9 f0       	breq	.+62     	; 0x4dc4 <LcdType::tempToStr(int) [clone .isra.75]+0xb8>
    4d86:	f1 e0       	ldi	r31, 0x01	; 1
    4d88:	ef 1a       	sub	r14, r31
    4d8a:	f1 08       	sbc	r15, r1
    4d8c:	8e 15       	cp	r24, r14
    4d8e:	9f 05       	cpc	r25, r15
    4d90:	08 f4       	brcc	.+2      	; 0x4d94 <LcdType::tempToStr(int) [clone .isra.75]+0x88>
    4d92:	7c 01       	movw	r14, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:625
  if (right > len) right = len;
  char temp = buffer[right];  // save the replaced character
    4d94:	d8 01       	movw	r26, r16
    4d96:	ed 91       	ld	r30, X+
    4d98:	fc 91       	ld	r31, X
    4d9a:	11 97       	sbiw	r26, 0x01	; 1
    4d9c:	ee 0d       	add	r30, r14
    4d9e:	ff 1d       	adc	r31, r15
    4da0:	d0 80       	ld	r13, Z
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:626
  buffer[right] = '\0'; 
    4da2:	10 82       	st	Z, r1
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:627
  out = buffer + left;  // pointer arithmetic
    4da4:	6d 91       	ld	r22, X+
    4da6:	7c 91       	ld	r23, X
operator=():
    4da8:	ce 01       	movw	r24, r28
    4daa:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:241
}
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
    4dac:	61 15       	cp	r22, r1
    4dae:	71 05       	cpc	r23, r1
    4db0:	11 f1       	breq	.+68     	; 0x4df6 <LcdType::tempToStr(int) [clone .isra.75]+0xea>
    4db2:	0e 94 1e 26 	call	0x4c3c	; 0x4c3c <String::operator=(char const*) [clone .part.3]>
substring():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:628
  if (left >= len) return out;
  if (right > len) right = len;
  char temp = buffer[right];  // save the replaced character
  buffer[right] = '\0'; 
  out = buffer + left;  // pointer arithmetic
  buffer[right] = temp;  //restore character
    4db6:	f8 01       	movw	r30, r16
    4db8:	80 81       	ld	r24, Z
    4dba:	91 81       	ldd	r25, Z+1	; 0x01
    4dbc:	e8 0e       	add	r14, r24
    4dbe:	f9 1e       	adc	r15, r25
    4dc0:	d7 01       	movw	r26, r14
    4dc2:	dc 92       	st	X, r13
operator=():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:228
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
  if (this != &rval) move(rval);
    4dc4:	be 01       	movw	r22, r28
    4dc6:	6f 5f       	subi	r22, 0xFF	; 255
    4dc8:	7f 4f       	sbci	r23, 0xFF	; 255
    4dca:	c8 01       	movw	r24, r16
    4dcc:	0e 94 21 25 	call	0x4a42	; 0x4a42 <String::move(String&)>
_ZN7LcdType9tempToStrEi.isra.75():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:214
    s_temp = s_temp.substring(0, s_temp.length() - 1);
    4dd0:	ce 01       	movw	r24, r28
    4dd2:	01 96       	adiw	r24, 0x01	; 1
    4dd4:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <String::~String()>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:217
    //if (t < 1000 && t >= 0) s_temp = " " + s_temp;
    return s_temp;
  }
    4dd8:	c8 01       	movw	r24, r16
    4dda:	26 96       	adiw	r28, 0x06	; 6
    4ddc:	0f b6       	in	r0, 0x3f	; 63
    4dde:	f8 94       	cli
    4de0:	de bf       	out	0x3e, r29	; 62
    4de2:	0f be       	out	0x3f, r0	; 63
    4de4:	cd bf       	out	0x3d, r28	; 61
    4de6:	df 91       	pop	r29
    4de8:	cf 91       	pop	r28
    4dea:	1f 91       	pop	r17
    4dec:	0f 91       	pop	r16
    4dee:	ff 90       	pop	r15
    4df0:	ef 90       	pop	r14
    4df2:	df 90       	pop	r13
    4df4:	08 95       	ret
operator=():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:242
#endif

String & String::operator = (const char *cstr)
{
  if (cstr) copy(cstr, strlen(cstr));
  else invalidate();
    4df6:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <String::invalidate()>
    4dfa:	dd cf       	rjmp	.-70     	; 0x4db6 <LcdType::tempToStr(int) [clone .isra.75]+0xaa>

00004dfc <LcdType::orpToStr(int) [clone .constprop.111]>:
_ZN7LcdType8orpToStrEi.constprop.111():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:226
    s_ph = (String)((float)p / 100.0);
    if (p < 1000) s_ph = " " + s_ph;
    return s_ph ;
  }

  String orpToStr(int16_t o) {
    4dfc:	ef 92       	push	r14
    4dfe:	ff 92       	push	r15
    4e00:	0f 93       	push	r16
    4e02:	1f 93       	push	r17
    4e04:	cf 93       	push	r28
    4e06:	df 93       	push	r29
    4e08:	cd b7       	in	r28, 0x3d	; 61
    4e0a:	de b7       	in	r29, 0x3e	; 62
    4e0c:	68 97       	sbiw	r28, 0x18	; 24
    4e0e:	0f b6       	in	r0, 0x3f	; 63
    4e10:	f8 94       	cli
    4e12:	de bf       	out	0x3e, r29	; 62
    4e14:	0f be       	out	0x3f, r0	; 63
    4e16:	cd bf       	out	0x3d, r28	; 61
    4e18:	8c 01       	movw	r16, r24
    4e1a:	7b 01       	movw	r14, r22
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:227
    String s_orp = "----";
    4e1c:	6e e3       	ldi	r22, 0x3E	; 62
    4e1e:	73 e0       	ldi	r23, 0x03	; 3
    4e20:	0e 94 75 26 	call	0x4cea	; 0x4cea <String::String(char const*)>
_ZN6String4initEv():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:134
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    4e24:	1c 8a       	std	Y+20, r1	; 0x14
    4e26:	1b 8a       	std	Y+19, r1	; 0x13
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:135
  capacity = 0;
    4e28:	1e 8a       	std	Y+22, r1	; 0x16
    4e2a:	1d 8a       	std	Y+21, r1	; 0x15
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:136
  len = 0;
    4e2c:	18 8e       	std	Y+24, r1	; 0x18
    4e2e:	1f 8a       	std	Y+23, r1	; 0x17
itoa():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    4e30:	4a e0       	ldi	r20, 0x0A	; 10
    4e32:	be 01       	movw	r22, r28
    4e34:	6f 5f       	subi	r22, 0xFF	; 255
    4e36:	7f 4f       	sbci	r23, 0xFF	; 255
    4e38:	c7 01       	movw	r24, r14
    4e3a:	0e 94 21 4b 	call	0x9642	; 0x9642 <__itoa_ncheck>
operator=():
    4e3e:	be 01       	movw	r22, r28
    4e40:	6f 5f       	subi	r22, 0xFF	; 255
    4e42:	7f 4f       	sbci	r23, 0xFF	; 255
    4e44:	ce 01       	movw	r24, r28
    4e46:	43 96       	adiw	r24, 0x13	; 19
    4e48:	0e 94 1e 26 	call	0x4c3c	; 0x4c3c <String::operator=(char const*) [clone .part.3]>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:228
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
  if (this != &rval) move(rval);
    4e4c:	be 01       	movw	r22, r28
    4e4e:	6d 5e       	subi	r22, 0xED	; 237
    4e50:	7f 4f       	sbci	r23, 0xFF	; 255
    4e52:	c8 01       	movw	r24, r16
    4e54:	0e 94 21 25 	call	0x4a42	; 0x4a42 <String::move(String&)>
_ZN7LcdType8orpToStrEi.constprop.111():
    s_orp = (String)o;
    4e58:	ce 01       	movw	r24, r28
    4e5a:	43 96       	adiw	r24, 0x13	; 19
    4e5c:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <String::~String()>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:229
    if (o >= 0) {
    4e60:	f7 fc       	sbrc	r15, 7
    4e62:	33 c0       	rjmp	.+102    	; 0x4eca <LcdType::orpToStr(int) [clone .constprop.111]+0xce>
_ZN15StringSumHelperC2EPKc():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.h:217

class StringSumHelper : public String
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
    4e64:	63 e4       	ldi	r22, 0x43	; 67
    4e66:	73 e0       	ldi	r23, 0x03	; 3
_ZN7LcdType8orpToStrEi.constprop.111():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:230
      if (o < 10)        s_orp = "   " + s_orp;
    4e68:	8a e0       	ldi	r24, 0x0A	; 10
    4e6a:	e8 16       	cp	r14, r24
    4e6c:	f1 04       	cpc	r15, r1
    4e6e:	74 f0       	brlt	.+28     	; 0x4e8c <LcdType::orpToStr(int) [clone .constprop.111]+0x90>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:231
      else if (o < 100)  s_orp = "  "  + s_orp;
    4e70:	84 e6       	ldi	r24, 0x64	; 100
    4e72:	e8 16       	cp	r14, r24
    4e74:	f1 04       	cpc	r15, r1
    4e76:	1c f4       	brge	.+6      	; 0x4e7e <LcdType::orpToStr(int) [clone .constprop.111]+0x82>
_ZN15StringSumHelperC2EPKc():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.h:217
    4e78:	64 e4       	ldi	r22, 0x44	; 68
    4e7a:	73 e0       	ldi	r23, 0x03	; 3
    4e7c:	07 c0       	rjmp	.+14     	; 0x4e8c <LcdType::orpToStr(int) [clone .constprop.111]+0x90>
_ZN7LcdType8orpToStrEi.constprop.111():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:232
      else if (o < 1000)   s_orp = " " + s_orp;
    4e7e:	88 ee       	ldi	r24, 0xE8	; 232
    4e80:	e8 16       	cp	r14, r24
    4e82:	83 e0       	ldi	r24, 0x03	; 3
    4e84:	f8 06       	cpc	r15, r24
    4e86:	9c f4       	brge	.+38     	; 0x4eae <LcdType::orpToStr(int) [clone .constprop.111]+0xb2>
_ZN15StringSumHelperC2EPKc():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.h:217
    4e88:	65 e4       	ldi	r22, 0x45	; 69
    4e8a:	73 e0       	ldi	r23, 0x03	; 3
    4e8c:	ce 01       	movw	r24, r28
    4e8e:	01 96       	adiw	r24, 0x01	; 1
    4e90:	0e 94 75 26 	call	0x4cea	; 0x4cea <String::String(char const*)>
_ZN7LcdType8orpToStrEi.constprop.111():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:235
    } else {
      if (o < -9) s_orp = " " + s_orp;
      else if (o < 0) s_orp = "  " + s_orp;
    4e94:	b8 01       	movw	r22, r16
    4e96:	ce 01       	movw	r24, r28
    4e98:	01 96       	adiw	r24, 0x01	; 1
    4e9a:	0e 94 ca 25 	call	0x4b94	; 0x4b94 <operator+(StringSumHelper const&, String const&)>
    4e9e:	bc 01       	movw	r22, r24
    4ea0:	c8 01       	movw	r24, r16
    4ea2:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <String::operator=(String const&)>
_ZN15StringSumHelperD2Ev():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.h:213
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
    4ea6:	ce 01       	movw	r24, r28
    4ea8:	01 96       	adiw	r24, 0x01	; 1
    4eaa:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <String::~String()>
_ZN7LcdType8orpToStrEi.constprop.111():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:238
    }
    return s_orp ;
  }
    4eae:	c8 01       	movw	r24, r16
    4eb0:	68 96       	adiw	r28, 0x18	; 24
    4eb2:	0f b6       	in	r0, 0x3f	; 63
    4eb4:	f8 94       	cli
    4eb6:	de bf       	out	0x3e, r29	; 62
    4eb8:	0f be       	out	0x3f, r0	; 63
    4eba:	cd bf       	out	0x3d, r28	; 61
    4ebc:	df 91       	pop	r29
    4ebe:	cf 91       	pop	r28
    4ec0:	1f 91       	pop	r17
    4ec2:	0f 91       	pop	r16
    4ec4:	ff 90       	pop	r15
    4ec6:	ef 90       	pop	r14
    4ec8:	08 95       	ret
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:234
    if (o >= 0) {
      if (o < 10)        s_orp = "   " + s_orp;
      else if (o < 100)  s_orp = "  "  + s_orp;
      else if (o < 1000)   s_orp = " " + s_orp;
    } else {
      if (o < -9) s_orp = " " + s_orp;
    4eca:	87 ef       	ldi	r24, 0xF7	; 247
    4ecc:	e8 16       	cp	r14, r24
    4ece:	8f ef       	ldi	r24, 0xFF	; 255
    4ed0:	f8 06       	cpc	r15, r24
    4ed2:	94 f6       	brge	.-92     	; 0x4e78 <LcdType::orpToStr(int) [clone .constprop.111]+0x7c>
    4ed4:	d9 cf       	rjmp	.-78     	; 0x4e88 <LcdType::orpToStr(int) [clone .constprop.111]+0x8c>

00004ed6 <as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >::read(as::Message&) [clone .part.147]>:
_ZN2as5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS2_Lh255EEEE4readERNS_7MessageE.part.147():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:962
#endif
    detachInterrupt(digitalPinToInterrupt(GDO0));
}

  // read the message form the internal buffer, if any
  uint8_t read (Message& msg) {
    4ed6:	af 92       	push	r10
    4ed8:	bf 92       	push	r11
    4eda:	cf 92       	push	r12
    4edc:	df 92       	push	r13
    4ede:	ef 92       	push	r14
    4ee0:	ff 92       	push	r15
    4ee2:	0f 93       	push	r16
    4ee4:	1f 93       	push	r17
    4ee6:	cf 93       	push	r28
    4ee8:	df 93       	push	r29
    4eea:	ec 01       	movw	r28, r24
    4eec:	7b 01       	movw	r14, r22
_ZN2as5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS2_Lh255EEEE10unsetStateENS5_6StatesE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:879
  volatile uint8_t state;
  Message buffer;

  bool isState(States s) { return (state & s)==s; }
  void setState(States s) { state |= s; }
  void unsetState(States s) { state &= ~s; }
    4eee:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ef0:	8b 7f       	andi	r24, 0xFB	; 251
    4ef2:	8b 87       	std	Y+11, r24	; 0x0b
_ZN2as7Message6bufferEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:86
	void clear () {
	  len = 0;
	}

	uint8_t* buffer () {
	  return &cnt;
    4ef4:	8e 01       	movw	r16, r28
    4ef6:	03 5f       	subi	r16, 0xF3	; 243
    4ef8:	1f 4f       	sbci	r17, 0xFF	; 255
rcvData():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:773
  uint8_t rcvData(uint8_t *buf, uint8_t size) {
  //DPRINTLN(" rcvData");

    uint8_t packetBytes = 0;
    uint8_t rxBytes = 0;
    uint8_t fifoBytes = spi.readReg(CC1101_RXBYTES, CC1101_STATUS);             // how many bytes are in the buffer
    4efa:	60 ec       	ldi	r22, 0xC0	; 192
    4efc:	8b e3       	ldi	r24, 0x3B	; 59
    4efe:	0e 94 13 12 	call	0x2426	; 0x2426 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::readReg(unsigned char, unsigned char) [clone .isra.135]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:776
    //DPRINT("  RX FIFO: ");DHEXLN(fifoBytes);
    // overflow detected - flush the FIFO
    if( fifoBytes > 0 && (fifoBytes & 0x80) != 0x80 ) {
    4f02:	18 16       	cp	r1, r24
    4f04:	0c f0       	brlt	.+2      	; 0x4f08 <as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >::read(as::Message&) [clone .part.147]+0x32>
    4f06:	43 c0       	rjmp	.+134    	; 0x4f8e <as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >::read(as::Message&) [clone .part.147]+0xb8>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:777
      packetBytes = spi.readReg(CC1101_RXFIFO, CC1101_CONFIG); // read packet length
    4f08:	60 e8       	ldi	r22, 0x80	; 128
    4f0a:	8f e3       	ldi	r24, 0x3F	; 63
    4f0c:	0e 94 13 12 	call	0x2426	; 0x2426 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::readReg(unsigned char, unsigned char) [clone .isra.135]>
    4f10:	d8 2e       	mov	r13, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:780
      //DPRINT("  Start Packet: ");DHEXLN(packetBytes);
      // check that packet fits into the buffer
      if (packetBytes <= size) {
    4f12:	4c e1       	ldi	r20, 0x1C	; 28
    4f14:	48 17       	cp	r20, r24
    4f16:	08 f4       	brcc	.+2      	; 0x4f1a <as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >::read(as::Message&) [clone .part.147]+0x44>
    4f18:	65 c0       	rjmp	.+202    	; 0x4fe4 <as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >::read(as::Message&) [clone .part.147]+0x10e>
_ZN2as6LibSPIILh4ELm2000000ELh1ELh0EE9readBurstEPhhh.isra.146():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:346
    SPI.endTransaction();
    return ret;
  }

  void readBurst(uint8_t * buf, uint8_t regAddr, uint8_t len) {
    SPI.beginTransaction(SPISettings(CLOCK,BITORDER,MODE));
    4f1a:	80 e5       	ldi	r24, 0x50	; 80
    4f1c:	90 e0       	ldi	r25, 0x00	; 0
    4f1e:	0e 94 6c 05 	call	0xad8	; 0xad8 <SPIClass::beginTransaction(SPISettings) [clone .constprop.139]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:347
    select();                                     // select CC1101
    4f22:	0e 94 15 0a 	call	0x142a	; 0x142a <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::select() [clone .isra.133]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:348
    SPI.transfer(regAddr | READ_BURST);           // send register address
    4f26:	8f ef       	ldi	r24, 0xFF	; 255
    4f28:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <SPIClass::transfer(unsigned char)>
    4f2c:	c0 2e       	mov	r12, r16
    4f2e:	58 01       	movw	r10, r16
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:349
    for(uint8_t i=0 ; i<len ; i++) {
    4f30:	8a 2d       	mov	r24, r10
    4f32:	8c 19       	sub	r24, r12
    4f34:	8d 15       	cp	r24, r13
    4f36:	38 f4       	brcc	.+14     	; 0x4f46 <as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >::read(as::Message&) [clone .part.147]+0x70>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:350
      buf[i] = SPI.transfer(0x00);                // read result byte by byte
    4f38:	80 e0       	ldi	r24, 0x00	; 0
    4f3a:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <SPIClass::transfer(unsigned char)>
    4f3e:	f5 01       	movw	r30, r10
    4f40:	81 93       	st	Z+, r24
    4f42:	5f 01       	movw	r10, r30
    4f44:	f5 cf       	rjmp	.-22     	; 0x4f30 <as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >::read(as::Message&) [clone .part.147]+0x5a>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:353
      //dbg << i << ":" << buf[i] << '\n';
    }
    deselect();                                   // deselect CC1101
    4f46:	0e 94 11 0a 	call	0x1422	; 0x1422 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::deselect() [clone .isra.134]>
rcvData():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:782
      packetBytes = spi.readReg(CC1101_RXFIFO, CC1101_CONFIG); // read packet length
      //DPRINT("  Start Packet: ");DHEXLN(packetBytes);
      // check that packet fits into the buffer
      if (packetBytes <= size) {
        spi.readBurst(buf, CC1101_RXFIFO, packetBytes);          // read data packet
        calculateRSSI(spi.readReg(CC1101_RXFIFO, CC1101_CONFIG)); // read RSSI from RXFIFO
    4f4a:	60 e8       	ldi	r22, 0x80	; 128
    4f4c:	8f e3       	ldi	r24, 0x3F	; 63
    4f4e:	0e 94 13 12 	call	0x2426	; 0x2426 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::readReg(unsigned char, unsigned char) [clone .isra.135]>
calculateRSSI():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:726
  }

protected:

  void calculateRSSI(uint8_t rsshex) {
    rss = -1 * ((((int16_t)rsshex-((int16_t)rsshex >= 128 ? 256 : 0))/2)-74);
    4f52:	28 2f       	mov	r18, r24
    4f54:	30 e0       	ldi	r19, 0x00	; 0
    4f56:	08 2e       	mov	r0, r24
    4f58:	00 0c       	add	r0, r0
    4f5a:	99 0b       	sbc	r25, r25
    4f5c:	88 27       	eor	r24, r24
    4f5e:	91 70       	andi	r25, 0x01	; 1
    4f60:	a9 01       	movw	r20, r18
    4f62:	48 1b       	sub	r20, r24
    4f64:	59 0b       	sbc	r21, r25
    4f66:	ca 01       	movw	r24, r20
    4f68:	57 fd       	sbrc	r21, 7
    4f6a:	01 96       	adiw	r24, 0x01	; 1
    4f6c:	95 95       	asr	r25
    4f6e:	87 95       	ror	r24
    4f70:	91 95       	neg	r25
    4f72:	81 95       	neg	r24
    4f74:	91 09       	sbc	r25, r1
    4f76:	86 5b       	subi	r24, 0xB6	; 182
    4f78:	89 83       	std	Y+1, r24	; 0x01
rcvData():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:783
      //DPRINT("  Start Packet: ");DHEXLN(packetBytes);
      // check that packet fits into the buffer
      if (packetBytes <= size) {
        spi.readBurst(buf, CC1101_RXFIFO, packetBytes);          // read data packet
        calculateRSSI(spi.readReg(CC1101_RXFIFO, CC1101_CONFIG)); // read RSSI from RXFIFO
        uint8_t val = spi.readReg(CC1101_RXFIFO, CC1101_CONFIG); // read LQI and CRC_OK
    4f7a:	60 e8       	ldi	r22, 0x80	; 128
    4f7c:	8f e3       	ldi	r24, 0x3F	; 63
    4f7e:	0e 94 13 12 	call	0x2426	; 0x2426 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::readReg(unsigned char, unsigned char) [clone .isra.135]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:785
        // lqi = val & 0x7F;
        if( (val & 0x80) == 0x80 ) { // check crc_ok
    4f82:	87 fd       	sbrc	r24, 7
    4f84:	05 c0       	rjmp	.+10     	; 0x4f90 <as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >::read(as::Message&) [clone .part.147]+0xba>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:790
          // DPRINTLN("CRC OK");
          rxBytes = packetBytes;
        }
        else {
          DPRINTLN(F("CRC Failed"));
    4f86:	8e e2       	ldi	r24, 0x2E	; 46
    4f88:	96 e0       	ldi	r25, 0x06	; 6
    4f8a:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <void DPRINTLN<__FlashStringHelper const*>(__FlashStringHelper const*)>
_ZN2as5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS2_Lh255EEEE4readERNS_7MessageE.part.147():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:772

  uint8_t rcvData(uint8_t *buf, uint8_t size) {
  //DPRINTLN(" rcvData");

    uint8_t packetBytes = 0;
    uint8_t rxBytes = 0;
    4f8e:	d1 2c       	mov	r13, r1
rcvData():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:799
        DPRINT(F("Packet too big: "));DDECLN(packetBytes);
      }
    }
    //DPRINT(F("-> "));
    //DHEXLN(buf,rxBytes);
    spi.strobe(CC1101_SFRX);
    4f90:	8a e3       	ldi	r24, 0x3A	; 58
    4f92:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::strobe(unsigned char) [clone .isra.136]>
_delay_us():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay.h:276
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4f96:	8b e7       	ldi	r24, 0x7B	; 123
    4f98:	91 e0       	ldi	r25, 0x01	; 1
    4f9a:	01 97       	sbiw	r24, 0x01	; 1
    4f9c:	f1 f7       	brne	.-4      	; 0x4f9a <as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >::read(as::Message&) [clone .part.147]+0xc4>
    4f9e:	00 c0       	rjmp	.+0      	; 0x4fa0 <as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >::read(as::Message&) [clone .part.147]+0xca>
    4fa0:	00 00       	nop
rcvData():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:801
    _delay_us(190);
    flushrx();
    4fa2:	0e 94 0a 12 	call	0x2414	; 0x2414 <as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255>::flushrx() [clone .isra.137]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:802
    spi.strobe(CC1101_SRX);
    4fa6:	84 e3       	ldi	r24, 0x34	; 52
    4fa8:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::strobe(unsigned char) [clone .isra.136]>
_ZN2as5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS2_Lh255EEEE4readERNS_7MessageE.part.147():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:968
    if( isState(READ) == false )
      return 0;

    unsetState(READ);
    uint8_t len = this->rcvData(buffer.buffer(),buffer.buffersize());
    if( len > 0 ) {
    4fac:	dd 20       	and	r13, r13
    4fae:	51 f1       	breq	.+84     	; 0x5004 <as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >::read(as::Message&) [clone .part.147]+0x12e>
_ZN2as7Message6lengthEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:162
    this->cnt = cnt;
    this->subcom = sub;
  }

  void length (uint8_t l) {
    len = l;
    4fb0:	dc 86       	std	Y+12, r13	; 0x0c
_ZN2as7Message6decodeEPhh.isra.32():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:242
  void decode () {
    decode(buffer(),length());
  }

  void decode(uint8_t *buf, uint8_t len) {
    uint8_t prev = buf[0];
    4fb2:	8d 85       	ldd	r24, Y+13	; 0x0d
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:243
    buf[0] = (~buf[0]) ^ 0x89;
    4fb4:	96 e7       	ldi	r25, 0x76	; 118
    4fb6:	98 27       	eor	r25, r24
    4fb8:	9d 87       	std	Y+13, r25	; 0x0d
_ZN2as5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS2_Lh255EEEE4readERNS_7MessageE.part.147():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:245
    uint8_t i, t;
    for (i=1; i<len-1; i++) {
    4fba:	21 e0       	ldi	r18, 0x01	; 1
_ZN2as7Message6decodeEPhh.isra.32():
    4fbc:	4d 2d       	mov	r20, r13
    4fbe:	50 e0       	ldi	r21, 0x00	; 0
    4fc0:	ba 01       	movw	r22, r20
    4fc2:	61 50       	subi	r22, 0x01	; 1
    4fc4:	71 09       	sbc	r23, r1
    4fc6:	a2 2f       	mov	r26, r18
    4fc8:	b0 e0       	ldi	r27, 0x00	; 0
    4fca:	f8 01       	movw	r30, r16
    4fcc:	ea 0f       	add	r30, r26
    4fce:	fb 1f       	adc	r31, r27
    4fd0:	90 81       	ld	r25, Z
    4fd2:	a6 17       	cp	r26, r22
    4fd4:	b7 07       	cpc	r27, r23
    4fd6:	74 f4       	brge	.+28     	; 0x4ff4 <as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >::read(as::Message&) [clone .part.147]+0x11e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:247
      t = buf[i];
      buf[i] = (prev + 0xdc) ^ buf[i];
    4fd8:	84 52       	subi	r24, 0x24	; 36
    4fda:	89 27       	eor	r24, r25
    4fdc:	80 83       	st	Z, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:245

  void decode(uint8_t *buf, uint8_t len) {
    uint8_t prev = buf[0];
    buf[0] = (~buf[0]) ^ 0x89;
    uint8_t i, t;
    for (i=1; i<len-1; i++) {
    4fde:	2f 5f       	subi	r18, 0xFF	; 255
    4fe0:	89 2f       	mov	r24, r25
    4fe2:	f1 cf       	rjmp	.-30     	; 0x4fc6 <as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >::read(as::Message&) [clone .part.147]+0xf0>
rcvData():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:794
        else {
          DPRINTLN(F("CRC Failed"));
        }
      }
      else {
        DPRINT(F("Packet too big: "));DDECLN(packetBytes);
    4fe4:	8d e1       	ldi	r24, 0x1D	; 29
    4fe6:	96 e0       	ldi	r25, 0x06	; 6
    4fe8:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    4fec:	8d 2d       	mov	r24, r13
    4fee:	0e 94 1d 24 	call	0x483a	; 0x483a <void DDECLN<unsigned char>(unsigned char)>
    4ff2:	cd cf       	rjmp	.-102    	; 0x4f8e <as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >::read(as::Message&) [clone .part.147]+0xb8>
_ZN2as7Message6decodeEPhh.isra.32():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:250
      t = buf[i];
      buf[i] = (prev + 0xdc) ^ buf[i];
      prev = t;
    }
    buf[i] ^= buf[1];
    4ff4:	8e 85       	ldd	r24, Y+14	; 0x0e
    4ff6:	89 27       	eor	r24, r25
    4ff8:	80 83       	st	Z, r24
_ZN2as5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS2_Lh255EEEE4readERNS_7MessageE.part.147():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:973
    if( len > 0 ) {
      buffer.length(len);
      // decode the message
      buffer.decode();
      // copy buffer to message
      memcpy(msg.buffer(),buffer.buffer(),len);
    4ffa:	b8 01       	movw	r22, r16
    4ffc:	c7 01       	movw	r24, r14
    4ffe:	01 96       	adiw	r24, 0x01	; 1
    5000:	0e 94 3c 53 	call	0xa678	; 0xa678 <memcpy>
_ZN2as7Message6lengthEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:162
    this->cnt = cnt;
    this->subcom = sub;
  }

  void length (uint8_t l) {
    len = l;
    5004:	f7 01       	movw	r30, r14
    5006:	d0 82       	st	Z, r13
_ZN2as7Message5clearEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:82

public:
	Message () : len(0), cnt(0), flag(0), typ(0), comm(0), subcom(0) {}

	void clear () {
	  len = 0;
    5008:	1c 86       	std	Y+12, r1	; 0x0c
_ZN2as5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS2_Lh255EEEE7isStateENS5_6StatesE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:877
private:
  enum States { IDLE=0x1, SENDING=0x2, READ=0x4, ALIVE=0x8, READ_ALIVE=0xc };
  volatile uint8_t state;
  Message buffer;

  bool isState(States s) { return (state & s)==s; }
    500a:	8b 85       	ldd	r24, Y+11	; 0x0b
wakeup():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:908
      setState(IDLE);
    }
  }

  void wakeup (bool flush=true) {
    if( isState(IDLE) == true ) {
    500c:	80 ff       	sbrs	r24, 0
    500e:	08 c0       	rjmp	.+16     	; 0x5020 <as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >::read(as::Message&) [clone .part.147]+0x14a>
_ZN2as6CC1101INS_6LibSPIILh4ELm2000000ELh1ELh0EEELh255EE6wakeupEb.isra.142():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:460
  void wakeup (bool flush) {
    if (PWRPIN < 0xff) {
      init();
    }

    spi.ping();
    5010:	0e 94 da 11 	call	0x23b4	; 0x23b4 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::ping() [clone .isra.141]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:469
#ifdef USE_WOR
    // ToDo: is this the right position?
    spi.writeReg(CC1101_PKTCTRL1, 0x0C);    // preamble quality estimator threshold=0
    spi.writeReg(CC1101_MCSM2, 0x07);       // RX_TIME_RSSI=0, RX_TIME_QUAL=0, RX_TIME=7
#endif
    spi.strobe(CC1101_SRX);
    5014:	84 e3       	ldi	r24, 0x34	; 52
    5016:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::strobe(unsigned char) [clone .isra.136]>
_ZN2as5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS2_Lh255EEEE10unsetStateENS5_6StatesE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:879
  volatile uint8_t state;
  Message buffer;

  bool isState(States s) { return (state & s)==s; }
  void setState(States s) { state |= s; }
  void unsetState(States s) { state &= ~s; }
    501a:	8b 85       	ldd	r24, Y+11	; 0x0b
    501c:	8e 7f       	andi	r24, 0xFE	; 254
    501e:	8b 87       	std	Y+11, r24	; 0x0b
_ZN2as5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS2_Lh255EEEE4readERNS_7MessageE.part.147():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:981
    msg.length(len);
    // reset buffer
    buffer.clear();
    wakeup(false);
    return msg.length();
  }
    5020:	f7 01       	movw	r30, r14
    5022:	80 81       	ld	r24, Z
    5024:	df 91       	pop	r29
    5026:	cf 91       	pop	r28
    5028:	1f 91       	pop	r17
    502a:	0f 91       	pop	r16
    502c:	ff 90       	pop	r15
    502e:	ef 90       	pop	r14
    5030:	df 90       	pop	r13
    5032:	cf 90       	pop	r12
    5034:	bf 90       	pop	r11
    5036:	af 90       	pop	r10
    5038:	08 95       	ret

0000503a <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)>:
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E4sendERNS_7MessageERKNS_4HMIDE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:381

  bool isBroadcastMsg(Message msg) {
    return (msg.to() == HMID::broadcast && msg.isPairSerial()) || ( msg.isBroadcast() && (msg.isRemoteEvent() || msg.isSensorEvent()) );
  }

  bool send(Message& msg,const HMID& to) {
    503a:	2f 92       	push	r2
    503c:	3f 92       	push	r3
    503e:	4f 92       	push	r4
    5040:	5f 92       	push	r5
    5042:	6f 92       	push	r6
    5044:	7f 92       	push	r7
    5046:	8f 92       	push	r8
    5048:	9f 92       	push	r9
    504a:	af 92       	push	r10
    504c:	bf 92       	push	r11
    504e:	cf 92       	push	r12
    5050:	df 92       	push	r13
    5052:	ef 92       	push	r14
    5054:	ff 92       	push	r15
    5056:	0f 93       	push	r16
    5058:	1f 93       	push	r17
    505a:	cf 93       	push	r28
    505c:	df 93       	push	r29
    505e:	cd b7       	in	r28, 0x3d	; 61
    5060:	de b7       	in	r29, 0x3e	; 62
    5062:	a3 97       	sbiw	r28, 0x23	; 35
    5064:	0f b6       	in	r0, 0x3f	; 63
    5066:	f8 94       	cli
    5068:	de bf       	out	0x3e, r29	; 62
    506a:	0f be       	out	0x3f, r0	; 63
    506c:	cd bf       	out	0x3d, r28	; 61
    506e:	6c 01       	movw	r12, r24
    5070:	7b 01       	movw	r14, r22
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:382
    msg.to(to);
    5072:	ba 01       	movw	r22, r20
    5074:	c7 01       	movw	r24, r14
    5076:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <as::Message::to(as::HMID const&)>
_ZN2as7Message4fromEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:186
  const HMID& from () const {
    return fromID;
  }

  HMID& from () {
    return fromID;
    507a:	b7 01       	movw	r22, r14
    507c:	6c 5f       	subi	r22, 0xFC	; 252
    507e:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E4sendERNS_7MessageERKNS_4HMIDE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:383
    getDeviceID(msg.from());
    5080:	f6 01       	movw	r30, r12
    5082:	82 a5       	ldd	r24, Z+42	; 0x2a
    5084:	93 a5       	ldd	r25, Z+43	; 0x2b
    5086:	0e 94 d5 12 	call	0x25aa	; 0x25aa <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::getDeviceID(as::HMID&) [clone .isra.97]>
_ZN2as7Message8setRptenEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:292
  void setRepeated () {
    flag |= RPTED;
  }

  void setRpten () {
    flag |= RPTEN;
    508a:	f7 01       	movw	r30, r14
    508c:	82 81       	ldd	r24, Z+2	; 0x02
    508e:	80 68       	ori	r24, 0x80	; 128
    5090:	82 83       	std	Z+2, r24	; 0x02
transmitDevTryMax():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:373
  
  uint8_t ledMode () const { return this->readRegister(DREG_LEDMODE,0x03,6,1); }
  bool ledMode (uint8_t value) const { return this->writeRegister(DREG_LEDMODE,0x03,6,value); }
  bool cycleInfoMsg () const { return this->readRegister(DREG_CYCLICINFOMSG,false); }
  bool cycleInfoMsg (bool value) const { return this->writeRegister(DREG_CYCLICINFOMSG,value); }
  uint8_t transmitDevTryMax () const { uint8_t v = this->readRegister(DREG_TRANSMITTRYMAX,6); return v == 0 ? 1 : v; }
    5092:	46 e0       	ldi	r20, 0x06	; 6
    5094:	64 e1       	ldi	r22, 0x14	; 20
    5096:	f6 01       	movw	r30, r12
    5098:	84 81       	ldd	r24, Z+4	; 0x04
    509a:	95 81       	ldd	r25, Z+5	; 0x05
    509c:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <as::RegisterList<UReg0>::readRegister(unsigned char, unsigned char) const>
    50a0:	78 2e       	mov	r7, r24
    50a2:	81 11       	cpse	r24, r1
    50a4:	02 c0       	rjmp	.+4      	; 0x50aa <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x70>
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E4sendERNS_7MessageERKNS_4HMIDE():
    50a6:	77 24       	eor	r7, r7
    50a8:	73 94       	inc	r7
send():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:392

  bool send(Message& msg) {
    hal->prepareSend(msg);
    bool result = false;
    uint8_t maxsend = list0.transmitDevTryMax();
    bool ledmode = list0.ledMode();
    50aa:	f6 01       	movw	r30, r12
    50ac:	04 81       	ldd	r16, Z+4	; 0x04
    50ae:	15 81       	ldd	r17, Z+5	; 0x05
readRegister():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:235
      value = getByte(offset);
    }
    return value;
  }
  uint8_t readRegister (uint8_t reg,uint8_t mask,uint8_t shift,uint8_t value=0) const {
    uint8_t offset = RegisterType::getOffset(reg);
    50b0:	85 e0       	ldi	r24, 0x05	; 5
    50b2:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <UReg0::getOffset(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:236
    if( offset != 0xff ) {
    50b6:	8f 3f       	cpi	r24, 0xFF	; 255
    50b8:	09 f4       	brne	.+2      	; 0x50bc <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x82>
    50ba:	50 c0       	rjmp	.+160    	; 0x515c <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x122>
_ZNK2as8BaseList7getByteEhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:29
  uint8_t getByte (uint8_t offset) const {
    return storage().getByte(addr + offset);
  }

  uint8_t getByte (uint8_t offset, uint8_t mask, uint8_t shift) const {
    return (getByte(offset) & mask) >> shift;
    50bc:	68 2f       	mov	r22, r24
    50be:	c8 01       	movw	r24, r16
    50c0:	0e 94 01 15 	call	0x2a02	; 0x2a02 <as::BaseList::getByte(unsigned char) const>
    50c4:	82 95       	swap	r24
    50c6:	86 95       	lsr	r24
    50c8:	86 95       	lsr	r24
    50ca:	83 70       	andi	r24, 0x03	; 3
    50cc:	88 a3       	std	Y+32, r24	; 0x20
send():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:393
    if( ledmode == 1 ) {
    50ce:	88 23       	and	r24, r24
    50d0:	41 f0       	breq	.+16     	; 0x50e2 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0xa8>
set():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:148

  void init () {  led1.init(LEDPIN1); }
  bool active () const { return led1.active(); }
  void ledOn (uint32_t ticks) { led1.ledOn(ticks); }
  void ledOn (uint32_t ticks,__attribute__((unused)) uint32_t tacks) { led1.ledOn(ticks); }
  void set(Mode stat) { led1.set(stat,single); }
    50d2:	f6 01       	movw	r30, r12
    50d4:	82 81       	ldd	r24, Z+2	; 0x02
    50d6:	93 81       	ldd	r25, Z+3	; 0x03
    50d8:	62 e0       	ldi	r22, 0x02	; 2
    50da:	70 e0       	ldi	r23, 0x00	; 0
    50dc:	02 96       	adiw	r24, 0x02	; 2
    50de:	0e 94 a6 12 	call	0x254c	; 0x254c <as::Led<as::ArduinoPins>::set(as::LedStates::Mode, as::LedStates::BlinkPattern const*) [clone .constprop.39]>
write():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:1000
    return num;
  }

  // simple send the message
  bool write (const Message& msg, uint8_t burst) {
    memcpy(buffer.buffer(),msg.buffer(),msg.length());
    50e2:	c7 01       	movw	r24, r14
    50e4:	01 96       	adiw	r24, 0x01	; 1
    50e6:	9b a3       	std	Y+35, r25	; 0x23
    50e8:	8a a3       	std	Y+34, r24	; 0x22
_ZN2as5Alarm3setEm():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:41
    50ea:	2a e0       	ldi	r18, 0x0A	; 10
    50ec:	42 2e       	mov	r4, r18
    50ee:	51 2c       	mov	r5, r1
    50f0:	61 2c       	mov	r6, r1
_ZN2as7Message2toEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:202
  const HMID& to () const {
    return toID;
  }

  HMID& to () {
    return toID;
    50f2:	47 01       	movw	r8, r14
    50f4:	97 e0       	ldi	r25, 0x07	; 7
    50f6:	89 0e       	add	r8, r25
    50f8:	91 1c       	adc	r9, r1
send():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:396
      led().set(LedStates::send);
    }
    while( result == false && maxsend > 0 ) {
    50fa:	77 20       	and	r7, r7
    50fc:	09 f4       	brne	.+2      	; 0x5100 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0xc6>
    50fe:	7a c1       	rjmp	.+756    	; 0x53f4 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x3ba>
    5100:	f6 01       	movw	r30, r12
    5102:	02 81       	ldd	r16, Z+2	; 0x02
    5104:	13 81       	ldd	r17, Z+3	; 0x03
    5106:	f7 01       	movw	r30, r14
    5108:	82 81       	ldd	r24, Z+2	; 0x02
    510a:	80 71       	andi	r24, 0x10	; 16
    510c:	8e 8f       	std	Y+30, r24	; 0x1e
_ZN2as7Message6bufferEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:86
	void clear () {
	  len = 0;
	}

	uint8_t* buffer () {
	  return &cnt;
    510e:	58 01       	movw	r10, r16
    5110:	fd e2       	ldi	r31, 0x2D	; 45
    5112:	af 0e       	add	r10, r31
    5114:	b1 1c       	adc	r11, r1
write():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:1000
    5116:	f7 01       	movw	r30, r14
    5118:	40 81       	ld	r20, Z
    511a:	50 e0       	ldi	r21, 0x00	; 0
    511c:	6a a1       	ldd	r22, Y+34	; 0x22
    511e:	7b a1       	ldd	r23, Y+35	; 0x23
    5120:	c5 01       	movw	r24, r10
    5122:	0e 94 3c 53 	call	0xa678	; 0xa678 <memcpy>
    5126:	f7 01       	movw	r30, r14
    5128:	20 81       	ld	r18, Z
_ZN2as7Message6lengthEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:162
    this->cnt = cnt;
    this->subcom = sub;
  }

  void length (uint8_t l) {
    len = l;
    512a:	f8 01       	movw	r30, r16
    512c:	24 a7       	std	Z+44, r18	; 0x2c
_ZN2as7Message6encodeEPhh.isra.33():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:258
  void encode () {
    encode(buffer(),length());
  }

  void encode(uint8_t *buf,uint8_t len) {
    buf[0] = (~buf[0]) ^ 0x89;
    512e:	85 a5       	ldd	r24, Z+45	; 0x2d
    5130:	f6 e7       	ldi	r31, 0x76	; 118
    5132:	8f 27       	eor	r24, r31
    5134:	f8 01       	movw	r30, r16
    5136:	85 a7       	std	Z+45, r24	; 0x2d
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:259
    uint8_t buf2 = buf[1];
    5138:	96 a5       	ldd	r25, Z+46	; 0x2e
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E4sendERNS_7MessageERKNS_4HMIDE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:262
    uint8_t prev = buf[0];
    uint8_t i;
    for (i=1; i<len-1; i++) {
    513a:	61 e0       	ldi	r22, 0x01	; 1
_ZN2as7Message6encodeEPhh.isra.33():
    513c:	21 50       	subi	r18, 0x01	; 1
    513e:	33 0b       	sbc	r19, r19
    5140:	46 2f       	mov	r20, r22
    5142:	50 e0       	ldi	r21, 0x00	; 0
    5144:	f5 01       	movw	r30, r10
    5146:	e4 0f       	add	r30, r20
    5148:	f5 1f       	adc	r31, r21
    514a:	70 81       	ld	r23, Z
    514c:	42 17       	cp	r20, r18
    514e:	53 07       	cpc	r21, r19
    5150:	44 f4       	brge	.+16     	; 0x5162 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x128>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:263
      prev = (prev + 0xdc) ^ buf[i];
    5152:	84 52       	subi	r24, 0x24	; 36
    5154:	87 27       	eor	r24, r23
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:264
      buf[i] = prev;
    5156:	80 83       	st	Z, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:262
  void encode(uint8_t *buf,uint8_t len) {
    buf[0] = (~buf[0]) ^ 0x89;
    uint8_t buf2 = buf[1];
    uint8_t prev = buf[0];
    uint8_t i;
    for (i=1; i<len-1; i++) {
    5158:	6f 5f       	subi	r22, 0xFF	; 255
    515a:	f2 cf       	rjmp	.-28     	; 0x5140 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x106>
readRegister():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:236
    515c:	f1 e0       	ldi	r31, 0x01	; 1
    515e:	f8 a3       	std	Y+32, r31	; 0x20
    5160:	b8 cf       	rjmp	.-144    	; 0x50d2 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x98>
_ZN2as7Message6encodeEPhh.isra.33():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:266
      prev = (prev + 0xdc) ^ buf[i];
      buf[i] = prev;
    }
    buf[i] ^= buf2;
    5162:	89 2f       	mov	r24, r25
    5164:	87 27       	eor	r24, r23
    5166:	80 83       	st	Z, r24
    5168:	f8 01       	movw	r30, r16
    516a:	f4 a5       	ldd	r31, Z+44	; 0x2c
    516c:	f9 a3       	std	Y+33, r31	; 0x21
sndData():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:1007
    buffer.encode();
    return sndData(buffer.buffer(),buffer.length(),burst);
  }

  uint8_t sndData(uint8_t *buf, uint8_t size, uint8_t burst) {
    timeout.waitTimeout();
    516e:	b8 01       	movw	r22, r16
    5170:	6e 5d       	subi	r22, 0xDE	; 222
    5172:	7f 4f       	sbci	r23, 0xFF	; 255
waitTimeout():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:824
  public:
    MinSendTimeout () : Alarm(0), wait(false) { async(true); }
    virtual ~MinSendTimeout () {}
    void waitTimeout () {
      // wait until time out over
      while( wait==true ) {
    5174:	f8 01       	movw	r30, r16
    5176:	32 a4       	ldd	r3, Z+42	; 0x2a
    5178:	33 20       	and	r3, r3
    517a:	39 f0       	breq	.+14     	; 0x518a <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x150>
_delay_ms():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay.h:187
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    517c:	8f ec       	ldi	r24, 0xCF	; 207
    517e:	97 e0       	ldi	r25, 0x07	; 7
    5180:	01 97       	sbiw	r24, 0x01	; 1
    5182:	f1 f7       	brne	.-4      	; 0x5180 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x146>
    5184:	00 c0       	rjmp	.+0      	; 0x5186 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x14c>
    5186:	00 00       	nop
    5188:	f5 cf       	rjmp	.-22     	; 0x5174 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x13a>
_ZN2as5Alarm3setEm():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:41
    518a:	47 a2       	std	Z+39, r4	; 0x27
    518c:	50 a6       	std	Z+40, r5	; 0x28
    518e:	61 a6       	std	Z+41, r6	; 0x29
waitTimeout():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:832
        // }
      }
      if( SENDDELAY > 0) {
        set(millis2ticks(SENDDELAY));
        // signal new wait cycle
        wait = true;
    5190:	21 e0       	ldi	r18, 0x01	; 1
    5192:	22 a7       	std	Z+42, r18	; 0x2a
_ZN2as8SysClock3addERNS_5AlarmE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:221
    5194:	87 e8       	ldi	r24, 0x87	; 135
    5196:	95 e0       	ldi	r25, 0x05	; 5
    5198:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <as::AlarmClock::add(as::Alarm&)>
_ZN2as5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS2_Lh255EEEE7isStateENS5_6StatesE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:877
private:
  enum States { IDLE=0x1, SENDING=0x2, READ=0x4, ALIVE=0x8, READ_ALIVE=0xc };
  volatile uint8_t state;
  Message buffer;

  bool isState(States s) { return (state & s)==s; }
    519c:	f8 01       	movw	r30, r16
    519e:	83 a5       	ldd	r24, Z+43	; 0x2b
wakeup():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:908
      setState(IDLE);
    }
  }

  void wakeup (bool flush=true) {
    if( isState(IDLE) == true ) {
    51a0:	80 ff       	sbrs	r24, 0
    51a2:	0b c0       	rjmp	.+22     	; 0x51ba <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x180>
_ZN2as6CC1101INS_6LibSPIILh4ELm2000000ELh1ELh0EEELh255EE6wakeupEb.isra.142():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:460
  void wakeup (bool flush) {
    if (PWRPIN < 0xff) {
      init();
    }

    spi.ping();
    51a4:	0e 94 da 11 	call	0x23b4	; 0x23b4 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::ping() [clone .isra.141]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:462
    if( flush==true ) {
      flushrx();
    51a8:	0e 94 0a 12 	call	0x2414	; 0x2414 <as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255>::flushrx() [clone .isra.137]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:469
#ifdef USE_WOR
    // ToDo: is this the right position?
    spi.writeReg(CC1101_PKTCTRL1, 0x0C);    // preamble quality estimator threshold=0
    spi.writeReg(CC1101_MCSM2, 0x07);       // RX_TIME_RSSI=0, RX_TIME_QUAL=0, RX_TIME=7
#endif
    spi.strobe(CC1101_SRX);
    51ac:	84 e3       	ldi	r24, 0x34	; 52
    51ae:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::strobe(unsigned char) [clone .isra.136]>
_ZN2as5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS2_Lh255EEEE10unsetStateENS5_6StatesE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:879
  volatile uint8_t state;
  Message buffer;

  bool isState(States s) { return (state & s)==s; }
  void setState(States s) { state |= s; }
  void unsetState(States s) { state &= ~s; }
    51b2:	f8 01       	movw	r30, r16
    51b4:	83 a5       	ldd	r24, Z+43	; 0x2b
    51b6:	8e 7f       	andi	r24, 0xFE	; 254
    51b8:	83 a7       	std	Z+43, r24	; 0x2b
_ZN2as5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS2_Lh255EEEE8setStateENS5_6StatesE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:878
  enum States { IDLE=0x1, SENDING=0x2, READ=0x4, ALIVE=0x8, READ_ALIVE=0xc };
  volatile uint8_t state;
  Message buffer;

  bool isState(States s) { return (state & s)==s; }
  void setState(States s) { state |= s; }
    51ba:	f8 01       	movw	r30, r16
    51bc:	83 a5       	ldd	r24, Z+43	; 0x2b
    51be:	82 60       	ori	r24, 0x02	; 2
    51c0:	83 a7       	std	Z+43, r24	; 0x2b
sndData():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:732
  }

  uint8_t sndData(uint8_t *buf, uint8_t size, uint8_t burst) {
    // Going from RX to TX does not work if there was a reception less than 0.5
    // sec ago. Due to CCA? Using IDLE helps to shorten this period(?)
    spi.strobe(CC1101_SIDLE);  // go to idle mode
    51c2:	86 e3       	ldi	r24, 0x36	; 54
    51c4:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::strobe(unsigned char) [clone .isra.136]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:733
    spi.strobe(CC1101_SFTX );  // flush TX buffer
    51c8:	8b e3       	ldi	r24, 0x3B	; 59
    51ca:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::strobe(unsigned char) [clone .isra.136]>
    51ce:	98 ec       	ldi	r25, 0xC8	; 200
    51d0:	29 2e       	mov	r2, r25
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:737

    uint8_t i=200;
    do {
      spi.strobe(CC1101_STX);
    51d2:	85 e3       	ldi	r24, 0x35	; 53
    51d4:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::strobe(unsigned char) [clone .isra.136]>
_delay_us():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay.h:276
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    51d8:	87 ec       	ldi	r24, 0xC7	; 199
    51da:	90 e0       	ldi	r25, 0x00	; 0
    51dc:	01 97       	sbiw	r24, 0x01	; 1
    51de:	f1 f7       	brne	.-4      	; 0x51dc <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x1a2>
    51e0:	00 c0       	rjmp	.+0      	; 0x51e2 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x1a8>
    51e2:	00 00       	nop
    51e4:	2a 94       	dec	r2
sndData():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:739
      _delay_us(100);
      if( --i == 0 ) {
    51e6:	21 10       	cpse	r2, r1
    51e8:	74 c0       	rjmp	.+232    	; 0x52d2 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x298>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:741
        // can not enter TX state - reset fifo
        spi.strobe(CC1101_SIDLE );
    51ea:	86 e3       	ldi	r24, 0x36	; 54
    51ec:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::strobe(unsigned char) [clone .isra.136]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:742
        spi.strobe(CC1101_SFTX  );
    51f0:	8b e3       	ldi	r24, 0x3B	; 59
    51f2:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::strobe(unsigned char) [clone .isra.136]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:743
        spi.strobe(CC1101_SNOP );
    51f6:	8d e3       	ldi	r24, 0x3D	; 61
    51f8:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::strobe(unsigned char) [clone .isra.136]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:745
        // back to RX mode
        do { spi.strobe(CC1101_SRX);
    51fc:	84 e3       	ldi	r24, 0x34	; 52
    51fe:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::strobe(unsigned char) [clone .isra.136]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:746
        } while (spi.readReg(CC1101_MARCSTATE, CC1101_STATUS) != MARCSTATE_RX);
    5202:	60 ec       	ldi	r22, 0xC0	; 192
    5204:	85 e3       	ldi	r24, 0x35	; 53
    5206:	0e 94 13 12 	call	0x2426	; 0x2426 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::readReg(unsigned char, unsigned char) [clone .isra.135]>
    520a:	8d 30       	cpi	r24, 0x0D	; 13
    520c:	b9 f7       	brne	.-18     	; 0x51fc <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x1c2>
    520e:	b1 2c       	mov	r11, r1
_ZN2as5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS2_Lh255EEEE10unsetStateENS5_6StatesE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:879
  volatile uint8_t state;
  Message buffer;

  bool isState(States s) { return (state & s)==s; }
  void setState(States s) { state |= s; }
  void unsetState(States s) { state &= ~s; }
    5210:	f8 01       	movw	r30, r16
    5212:	83 a5       	ldd	r24, Z+43	; 0x2b
    5214:	8d 7f       	andi	r24, 0xFD	; 253
    5216:	83 a7       	std	Z+43, r24	; 0x2b
send():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:398
      result = radio().write(msg,msg.burstRequired());
      DPRINT(F("<- "));
    5218:	82 e4       	ldi	r24, 0x42	; 66
    521a:	95 e0       	ldi	r25, 0x05	; 5
    521c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:399
      msg.dump();
    5220:	c7 01       	movw	r24, r14
    5222:	0e 94 1f 23 	call	0x463e	; 0x463e <as::Message::dump() const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:400
      maxsend--;
    5226:	7a 94       	dec	r7
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:401
      if( result == true && msg.ackRequired() == true && msg.to().valid() == true ) {
    5228:	bb 20       	and	r11, r11
    522a:	09 f4       	brne	.+2      	; 0x522e <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x1f4>
    522c:	66 cf       	rjmp	.-308    	; 0x50fa <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0xc0>
    522e:	f7 01       	movw	r30, r14
    5230:	82 81       	ldd	r24, Z+2	; 0x02
    5232:	85 ff       	sbrs	r24, 5
    5234:	27 c0       	rjmp	.+78     	; 0x5284 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x24a>
    5236:	c4 01       	movw	r24, r8
    5238:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <as::HMID::valid() const>
    523c:	88 23       	and	r24, r24
    523e:	11 f1       	breq	.+68     	; 0x5284 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x24a>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:402
        Message response;
    5240:	ce 01       	movw	r24, r28
    5242:	01 96       	adiw	r24, 0x01	; 1
    5244:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <as::Message::Message()>
    5248:	1c e3       	ldi	r17, 0x3C	; 60
    524a:	f6 01       	movw	r30, r12
    524c:	82 81       	ldd	r24, Z+2	; 0x02
    524e:	93 81       	ldd	r25, Z+3	; 0x03
_ZN2as5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS2_Lh255EEEE7isStateENS5_6StatesE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:877
private:
  enum States { IDLE=0x1, SENDING=0x2, READ=0x4, ALIVE=0x8, READ_ALIVE=0xc };
  volatile uint8_t state;
  Message buffer;

  bool isState(States s) { return (state & s)==s; }
    5250:	fc 01       	movw	r30, r24
    5252:	23 a5       	ldd	r18, Z+43	; 0x2b
read():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:963
    detachInterrupt(digitalPinToInterrupt(GDO0));
}

  // read the message form the internal buffer, if any
  uint8_t read (Message& msg) {
    if( isState(READ) == false )
    5254:	22 fd       	sbrc	r18, 2
    5256:	8a c0       	rjmp	.+276    	; 0x536c <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x332>
_delay_ms():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay.h:187
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5258:	8f e1       	ldi	r24, 0x1F	; 31
    525a:	9e e4       	ldi	r25, 0x4E	; 78
    525c:	01 97       	sbiw	r24, 0x01	; 1
    525e:	f1 f7       	brne	.-4      	; 0x525c <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x222>
    5260:	00 c0       	rjmp	.+0      	; 0x5262 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x228>
    5262:	00 00       	nop
    5264:	11 50       	subi	r17, 0x01	; 1
waitResponse():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:679
        }
      }
      _delay_ms(10); // wait 10ms
      timeout--;
    }
    while( timeout > 0 );
    5266:	89 f7       	brne	.-30     	; 0x524a <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x210>
send():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:424
            if( msg.isWakeMeUp() || response.isKeepAwake() ) {
              activity().stayAwake(millis2ticks(500));
            }
          }
        }
        DPRINT(F("waitAck: ")); DHEX((uint8_t)result); DPRINTLN(F(""));
    5268:	88 e3       	ldi	r24, 0x38	; 56
    526a:	95 e0       	ldi	r25, 0x05	; 5
    526c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    5270:	83 2d       	mov	r24, r3
    5272:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <DHEX(unsigned char)>
    5276:	87 e3       	ldi	r24, 0x37	; 55
    5278:	95 e0       	ldi	r25, 0x05	; 5
    527a:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <void DPRINTLN<__FlashStringHelper const*>(__FlashStringHelper const*)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:396
    uint8_t maxsend = list0.transmitDevTryMax();
    bool ledmode = list0.ledMode();
    if( ledmode == 1 ) {
      led().set(LedStates::send);
    }
    while( result == false && maxsend > 0 ) {
    527e:	33 20       	and	r3, r3
    5280:	09 f4       	brne	.+2      	; 0x5284 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x24a>
    5282:	3b cf       	rjmp	.-394    	; 0x50fa <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0xc0>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:427
          }
        }
        DPRINT(F("waitAck: ")); DHEX((uint8_t)result); DPRINTLN(F(""));
      }
    }
    if( ledmode == 1 ) {
    5284:	f8 a1       	ldd	r31, Y+32	; 0x20
    5286:	11 e0       	ldi	r17, 0x01	; 1
    5288:	ff 23       	and	r31, r31
    528a:	49 f0       	breq	.+18     	; 0x529e <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x264>
    528c:	f6 01       	movw	r30, r12
    528e:	82 81       	ldd	r24, Z+2	; 0x02
    5290:	93 81       	ldd	r25, Z+3	; 0x03
    5292:	11 e0       	ldi	r17, 0x01	; 1
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E4sendERNS_7MessageERKNS_4HMIDE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:428
      led().set( result == true ? LedStates::ack : LedStates::nack);
    5294:	63 e0       	ldi	r22, 0x03	; 3
    5296:	70 e0       	ldi	r23, 0x00	; 0
set():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:148
    5298:	02 96       	adiw	r24, 0x02	; 2
    529a:	0e 94 a6 12 	call	0x254c	; 0x254c <as::Led<as::ArduinoPins>::set(as::LedStates::Mode, as::LedStates::BlinkPattern const*) [clone .constprop.39]>
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E4sendERNS_7MessageERKNS_4HMIDE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:386
  bool send(Message& msg,const HMID& to) {
    msg.to(to);
    getDeviceID(msg.from());
    msg.setRpten(); // has to be set always
    return send(msg);
  }
    529e:	81 2f       	mov	r24, r17
    52a0:	a3 96       	adiw	r28, 0x23	; 35
    52a2:	0f b6       	in	r0, 0x3f	; 63
    52a4:	f8 94       	cli
    52a6:	de bf       	out	0x3e, r29	; 62
    52a8:	0f be       	out	0x3f, r0	; 63
    52aa:	cd bf       	out	0x3d, r28	; 61
    52ac:	df 91       	pop	r29
    52ae:	cf 91       	pop	r28
    52b0:	1f 91       	pop	r17
    52b2:	0f 91       	pop	r16
    52b4:	ff 90       	pop	r15
    52b6:	ef 90       	pop	r14
    52b8:	df 90       	pop	r13
    52ba:	cf 90       	pop	r12
    52bc:	bf 90       	pop	r11
    52be:	af 90       	pop	r10
    52c0:	9f 90       	pop	r9
    52c2:	8f 90       	pop	r8
    52c4:	7f 90       	pop	r7
    52c6:	6f 90       	pop	r6
    52c8:	5f 90       	pop	r5
    52ca:	4f 90       	pop	r4
    52cc:	3f 90       	pop	r3
    52ce:	2f 90       	pop	r2
    52d0:	08 95       	ret
sndData():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:750
        do { spi.strobe(CC1101_SRX);
        } while (spi.readReg(CC1101_MARCSTATE, CC1101_STATUS) != MARCSTATE_RX);
        return false;
      }
    }
    while(spi.readReg(CC1101_MARCSTATE, CC1101_STATUS) != MARCSTATE_TX);
    52d2:	60 ec       	ldi	r22, 0xC0	; 192
    52d4:	85 e3       	ldi	r24, 0x35	; 53
    52d6:	0e 94 13 12 	call	0x2426	; 0x2426 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::readReg(unsigned char, unsigned char) [clone .isra.135]>
    52da:	83 31       	cpi	r24, 0x13	; 19
    52dc:	09 f0       	breq	.+2      	; 0x52e0 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x2a6>
    52de:	79 cf       	rjmp	.-270    	; 0x51d2 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x198>
_delay_ms():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay.h:187
    52e0:	ef e1       	ldi	r30, 0x1F	; 31
    52e2:	fe e4       	ldi	r31, 0x4E	; 78
    52e4:	31 97       	sbiw	r30, 0x01	; 1
    52e6:	f1 f7       	brne	.-4      	; 0x52e4 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x2aa>
    52e8:	00 c0       	rjmp	.+0      	; 0x52ea <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x2b0>
    52ea:	00 00       	nop
sndData():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:753

    _delay_ms(10);
    if (burst) {         // BURST-bit set?
    52ec:	fe 8d       	ldd	r31, Y+30	; 0x1e
    52ee:	ff 23       	and	r31, r31
    52f0:	49 f0       	breq	.+18     	; 0x5304 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x2ca>
_delay_ms():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay.h:187
    52f2:	2f e7       	ldi	r18, 0x7F	; 127
    52f4:	8b e8       	ldi	r24, 0x8B	; 139
    52f6:	98 e0       	ldi	r25, 0x08	; 8
    52f8:	21 50       	subi	r18, 0x01	; 1
    52fa:	80 40       	sbci	r24, 0x00	; 0
    52fc:	90 40       	sbci	r25, 0x00	; 0
    52fe:	e1 f7       	brne	.-8      	; 0x52f8 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x2be>
    5300:	00 c0       	rjmp	.+0      	; 0x5302 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x2c8>
    5302:	00 00       	nop
sndData():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:757
      _delay_ms(350);    // according to ELV, devices get activated every 300ms, so send burst for 360ms
    }

    spi.writeReg(CC1101_TXFIFO, size);
    5304:	69 a1       	ldd	r22, Y+33	; 0x21
    5306:	8f e3       	ldi	r24, 0x3F	; 63
    5308:	0e 94 e5 11 	call	0x23ca	; 0x23ca <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::writeReg(unsigned char, unsigned char) [clone .isra.138]>
_ZN2as6LibSPIILh4ELm2000000ELh1ELh0EE10writeBurstEhPhh.isra.155():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:358
    deselect();                                   // deselect CC1101
    SPI.endTransaction();
  }

  void writeBurst(uint8_t regAddr, uint8_t* buf, uint8_t len) {
    SPI.beginTransaction(SPISettings(CLOCK,BITORDER,MODE));
    530c:	80 e5       	ldi	r24, 0x50	; 80
    530e:	90 e0       	ldi	r25, 0x00	; 0
    5310:	0e 94 6c 05 	call	0xad8	; 0xad8 <SPIClass::beginTransaction(SPISettings) [clone .constprop.139]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:359
    select();                                     // select CC1101
    5314:	0e 94 15 0a 	call	0x142a	; 0x142a <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::select() [clone .isra.133]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:360
    SPI.transfer(regAddr | WRITE_BURST);          // send register address
    5318:	8f e7       	ldi	r24, 0x7F	; 127
    531a:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <SPIClass::transfer(unsigned char)>
    531e:	2a 2c       	mov	r2, r10
    5320:	ae 8e       	std	Y+30, r10	; 0x1e
    5322:	bf 8e       	std	Y+31, r11	; 0x1f
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:361
    for(uint8_t i=0 ; i<len ; i++)
    5324:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5326:	82 19       	sub	r24, r2
    5328:	e9 a1       	ldd	r30, Y+33	; 0x21
    532a:	8e 17       	cp	r24, r30
    532c:	40 f4       	brcc	.+16     	; 0x533e <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x304>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:362
      SPI.transfer(buf[i]);                       // send value
    532e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5330:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5332:	81 91       	ld	r24, Z+
    5334:	ff 8f       	std	Y+31, r31	; 0x1f
    5336:	ee 8f       	std	Y+30, r30	; 0x1e
    5338:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <SPIClass::transfer(unsigned char)>
    533c:	f3 cf       	rjmp	.-26     	; 0x5324 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x2ea>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:363
    deselect();                                   // deselect CC1101
    533e:	0e 94 11 0a 	call	0x1422	; 0x1422 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::deselect() [clone .isra.134]>
    5342:	88 ec       	ldi	r24, 0xC8	; 200
    5344:	b8 2e       	mov	r11, r24
sndData():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:761

    spi.writeReg(CC1101_TXFIFO, size);
    spi.writeBurst(CC1101_TXFIFO, buf, size);           // write in TX FIFO

    for(uint8_t i = 0; i < 200; i++) {  // after sending out all bytes the chip should go automatically in RX mode
      if( spi.readReg(CC1101_MARCSTATE, CC1101_STATUS) == MARCSTATE_RX)
    5346:	60 ec       	ldi	r22, 0xC0	; 192
    5348:	85 e3       	ldi	r24, 0x35	; 53
    534a:	0e 94 13 12 	call	0x2426	; 0x2426 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::readReg(unsigned char, unsigned char) [clone .isra.135]>
    534e:	8d 30       	cpi	r24, 0x0D	; 13
    5350:	19 f4       	brne	.+6      	; 0x5358 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x31e>
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E4sendERNS_7MessageERKNS_4HMIDE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:765
        break;                                    //now in RX mode, good
      _delay_us(100);
    }
    return true;
    5352:	bb 24       	eor	r11, r11
    5354:	b3 94       	inc	r11
    5356:	5c cf       	rjmp	.-328    	; 0x5210 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x1d6>
_delay_us():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay.h:276
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5358:	87 ec       	ldi	r24, 0xC7	; 199
    535a:	90 e0       	ldi	r25, 0x00	; 0
    535c:	01 97       	sbiw	r24, 0x01	; 1
    535e:	f1 f7       	brne	.-4      	; 0x535c <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x322>
    5360:	00 c0       	rjmp	.+0      	; 0x5362 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x328>
    5362:	00 00       	nop
    5364:	ba 94       	dec	r11
sndData():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:760
    }

    spi.writeReg(CC1101_TXFIFO, size);
    spi.writeBurst(CC1101_TXFIFO, buf, size);           // write in TX FIFO

    for(uint8_t i = 0; i < 200; i++) {  // after sending out all bytes the chip should go automatically in RX mode
    5366:	b1 10       	cpse	r11, r1
    5368:	ee cf       	rjmp	.-36     	; 0x5346 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x30c>
    536a:	f3 cf       	rjmp	.-26     	; 0x5352 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x318>
read():
    536c:	be 01       	movw	r22, r28
    536e:	6f 5f       	subi	r22, 0xFF	; 255
    5370:	7f 4f       	sbci	r23, 0xFF	; 255
    5372:	80 96       	adiw	r24, 0x20	; 32
    5374:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >::read(as::Message&) [clone .part.147]>
waitResponse():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:669
  }
*/
  bool waitResponse(const Message& msg,Message& response,uint8_t timeout) {
    do {
      uint8_t num = radio().read(response);
      if( num > 0 ) {
    5378:	88 23       	and	r24, r24
    537a:	09 f4       	brne	.+2      	; 0x537e <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x344>
    537c:	6d cf       	rjmp	.-294    	; 0x5258 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x21e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:670
        DPRINT(F("-> ")); response.dump();
    537e:	83 e3       	ldi	r24, 0x33	; 51
    5380:	95 e0       	ldi	r25, 0x05	; 5
    5382:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    5386:	ce 01       	movw	r24, r28
    5388:	01 96       	adiw	r24, 0x01	; 1
    538a:	0e 94 1f 23 	call	0x463e	; 0x463e <as::Message::dump() const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:671
        if( msg.count() == response.count() &&
    538e:	f7 01       	movw	r30, r14
    5390:	91 81       	ldd	r25, Z+1	; 0x01
    5392:	8a 81       	ldd	r24, Y+2	; 0x02
    5394:	98 13       	cpse	r25, r24
    5396:	60 cf       	rjmp	.-320    	; 0x5258 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x21e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:672
            msg.to() == response.from() ) {
    5398:	be 01       	movw	r22, r28
    539a:	6b 5f       	subi	r22, 0xFB	; 251
    539c:	7f 4f       	sbci	r23, 0xFF	; 255
    539e:	c4 01       	movw	r24, r8
    53a0:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <as::HMID::operator==(as::HMID const&) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:671
  bool waitResponse(const Message& msg,Message& response,uint8_t timeout) {
    do {
      uint8_t num = radio().read(response);
      if( num > 0 ) {
        DPRINT(F("-> ")); response.dump();
        if( msg.count() == response.count() &&
    53a4:	88 23       	and	r24, r24
    53a6:	09 f4       	brne	.+2      	; 0x53aa <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x370>
    53a8:	57 cf       	rjmp	.-338    	; 0x5258 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x21e>
isAck():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:349
  bool isPairSerial () const {
    return typ==AS_MESSAGE_CONFIG && subcom==AS_CONFIG_PAIR_SERIAL;
  }

  bool isAck () const {
    return typ==AS_MESSAGE_RESPONSE && (comm & AS_RESPONSE_NACK) == AS_RESPONSE_ACK;
    53aa:	8c 81       	ldd	r24, Y+4	; 0x04
    53ac:	82 30       	cpi	r24, 0x02	; 2
    53ae:	49 f4       	brne	.+18     	; 0x53c2 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x388>
    53b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    53b2:	98 2f       	mov	r25, r24
    53b4:	90 95       	com	r25
    53b6:	39 2e       	mov	r3, r25
    53b8:	33 1c       	adc	r3, r3
    53ba:	33 24       	eor	r3, r3
    53bc:	33 1c       	adc	r3, r3
isNack():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:353
  }

  bool isNack () const {
    return typ==AS_MESSAGE_RESPONSE && (comm & AS_RESPONSE_NACK) == AS_RESPONSE_NACK;
    53be:	87 fd       	sbrc	r24, 7
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E4sendERNS_7MessageERKNS_4HMIDE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:415
  #endif
          {
            result = response.isAck();
            // if we got a Nack - we stop trying to send again
            if( response.isNack() ) {
              maxsend = 0;
    53c0:	71 2c       	mov	r7, r1
send():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:419
            }
            // we request wakeup
            // we got the flag to stay awake
            if( msg.isWakeMeUp() || response.isKeepAwake() ) {
    53c2:	f7 01       	movw	r30, r14
    53c4:	82 81       	ldd	r24, Z+2	; 0x02
    53c6:	81 fd       	sbrc	r24, 1
    53c8:	03 c0       	rjmp	.+6      	; 0x53d0 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x396>
    53ca:	8b 81       	ldd	r24, Y+3	; 0x03
    53cc:	80 ff       	sbrs	r24, 0
    53ce:	4c cf       	rjmp	.-360    	; 0x5268 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x22e>
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E8activityEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:203
  BatteryType& battery ()  { return hal->battery; }
  const BatteryType& battery () const { return hal->battery; }
  RadioType& radio () { return hal->radio; }
  BuzzerType& buzzer () { return hal->buzzer; }
  KeyStore& keystore () { return this->kstore; }
  Activity& activity () { return hal->activity; }
    53d0:	f6 01       	movw	r30, r12
    53d2:	82 81       	ldd	r24, Z+2	; 0x02
    53d4:	93 81       	ldd	r25, Z+3	; 0x03
send():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:420
              maxsend = 0;
            }
            // we request wakeup
            // we got the flag to stay awake
            if( msg.isWakeMeUp() || response.isKeepAwake() ) {
              activity().stayAwake(millis2ticks(500));
    53d6:	42 e3       	ldi	r20, 0x32	; 50
    53d8:	50 e0       	ldi	r21, 0x00	; 0
    53da:	60 e0       	ldi	r22, 0x00	; 0
    53dc:	70 e0       	ldi	r23, 0x00	; 0
    53de:	47 96       	adiw	r24, 0x17	; 23
    53e0:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <as::Activity::stayAwake(unsigned long)>
    53e4:	41 cf       	rjmp	.-382    	; 0x5268 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x22e>
    53e6:	f6 01       	movw	r30, r12
    53e8:	82 81       	ldd	r24, Z+2	; 0x02
    53ea:	93 81       	ldd	r25, Z+3	; 0x03
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:427
          }
        }
        DPRINT(F("waitAck: ")); DHEX((uint8_t)result); DPRINTLN(F(""));
      }
    }
    if( ledmode == 1 ) {
    53ec:	10 e0       	ldi	r17, 0x00	; 0
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E4sendERNS_7MessageERKNS_4HMIDE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:428
      led().set( result == true ? LedStates::ack : LedStates::nack);
    53ee:	64 e0       	ldi	r22, 0x04	; 4
    53f0:	70 e0       	ldi	r23, 0x00	; 0
    53f2:	52 cf       	rjmp	.-348    	; 0x5298 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x25e>
send():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:427
          }
        }
        DPRINT(F("waitAck: ")); DHEX((uint8_t)result); DPRINTLN(F(""));
      }
    }
    if( ledmode == 1 ) {
    53f4:	f8 a1       	ldd	r31, Y+32	; 0x20
    53f6:	f1 11       	cpse	r31, r1
    53f8:	f6 cf       	rjmp	.-20     	; 0x53e6 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x3ac>
    53fa:	10 e0       	ldi	r17, 0x00	; 0
    53fc:	50 cf       	rjmp	.-352    	; 0x529e <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)+0x264>

000053fe <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::EventSender::trigger(as::AlarmClock&)>:
_ZN2as19StateGenericChannelINS_14OnePinPositionILj0EEENS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101ISA_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10EE11EventSender7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:29
    StateGenericChannel& channel;
    uint8_t count, state;

    EventSender (StateGenericChannel& c) : Alarm(0), channel(c), count(0), state(255) {}
    virtual ~EventSender () {}
    virtual void trigger (__attribute__ ((unused)) AlarmClock& clock) {
    53fe:	3f 92       	push	r3
    5400:	4f 92       	push	r4
    5402:	5f 92       	push	r5
    5404:	6f 92       	push	r6
    5406:	7f 92       	push	r7
    5408:	8f 92       	push	r8
    540a:	9f 92       	push	r9
    540c:	af 92       	push	r10
    540e:	bf 92       	push	r11
    5410:	cf 92       	push	r12
    5412:	df 92       	push	r13
    5414:	ef 92       	push	r14
    5416:	ff 92       	push	r15
    5418:	0f 93       	push	r16
    541a:	1f 93       	push	r17
    541c:	cf 93       	push	r28
    541e:	df 93       	push	r29
    5420:	cd b7       	in	r28, 0x3d	; 61
    5422:	de b7       	in	r29, 0x3e	; 62
    5424:	28 97       	sbiw	r28, 0x08	; 8
    5426:	0f b6       	in	r0, 0x3f	; 63
    5428:	f8 94       	cli
    542a:	de bf       	out	0x3e, r29	; 62
    542c:	0f be       	out	0x3f, r0	; 63
    542e:	cd bf       	out	0x3d, r28	; 61
    5430:	fc 01       	movw	r30, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:30
      SensorEventMsg& msg = (SensorEventMsg&)channel.device().message();
    5432:	a0 85       	ldd	r26, Z+8	; 0x08
    5434:	b1 85       	ldd	r27, Z+9	; 0x09
    5436:	18 96       	adiw	r26, 0x08	; 8
    5438:	0d 91       	ld	r16, X+
    543a:	1c 91       	ld	r17, X
    543c:	19 97       	sbiw	r26, 0x09	; 9
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E7messageEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:205
  RadioType& radio () { return hal->radio; }
  BuzzerType& buzzer () { return hal->buzzer; }
  KeyStore& keystore () { return this->kstore; }
  Activity& activity () { return hal->activity; }

  Message& message () { return msg; }
    543e:	58 01       	movw	r10, r16
    5440:	8b e0       	ldi	r24, 0x0B	; 11
    5442:	a8 0e       	add	r10, r24
    5444:	b1 1c       	adc	r11, r1
_ZN2as19StateGenericChannelINS_14OnePinPositionILj0EEENS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101ISA_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10EE11EventSender7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:31
      msg.init(channel.device().nextcount(),channel.number(),count++,state,channel.device().battery().low());
    5446:	33 85       	ldd	r19, Z+11	; 0x0b
    5448:	22 85       	ldd	r18, Z+10	; 0x0a
    544a:	81 e0       	ldi	r24, 0x01	; 1
    544c:	82 0f       	add	r24, r18
    544e:	82 87       	std	Z+10, r24	; 0x0a
    5450:	1b 96       	adiw	r26, 0x0b	; 11
    5452:	9c 91       	ld	r25, X
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E9nextcountEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:370
    }
    return false;
  }

  uint8_t nextcount () {
    return ++msgcount;
    5454:	d8 01       	movw	r26, r16
    5456:	16 96       	adiw	r26, 0x06	; 6
    5458:	8c 91       	ld	r24, X
    545a:	16 97       	sbiw	r26, 0x06	; 6
    545c:	8f 5f       	subi	r24, 0xFF	; 255
    545e:	16 96       	adiw	r26, 0x06	; 6
    5460:	8c 93       	st	X, r24
    5462:	16 97       	sbiw	r26, 0x06	; 6
_ZN2as7Message13initWithCountEhhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:149
    *(ptr+3) = d4;
    len += 4;
  }

  void initWithCount(uint8_t length, uint8_t typ, uint8_t flags, uint8_t comm) {
    this->len = length;
    5464:	4c e0       	ldi	r20, 0x0C	; 12
    5466:	1b 96       	adiw	r26, 0x0b	; 11
    5468:	4c 93       	st	X, r20
    546a:	1b 97       	sbiw	r26, 0x0b	; 11
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:150
    this->typ = typ;
    546c:	41 e4       	ldi	r20, 0x41	; 65
    546e:	1e 96       	adiw	r26, 0x0e	; 14
    5470:	4c 93       	st	X, r20
    5472:	1e 97       	sbiw	r26, 0x0e	; 14
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:151
    this->flag = flags;
    5474:	42 e2       	ldi	r20, 0x22	; 34
    5476:	1d 96       	adiw	r26, 0x0d	; 13
    5478:	4c 93       	st	X, r20
    547a:	1d 97       	sbiw	r26, 0x0d	; 13
_ZN2as14SensorEventMsg4initEhhhhbb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:496
  void init(uint8_t msgcnt,uint8_t ch,uint8_t counter,uint8_t value,bool lg,bool lowbat) {
      uint8_t flags = lg ? 0x40 : 0x00;
      if( lowbat == true ) {
          flags |= 0x80; // low battery
      }
      Message::init(0xc,msgcnt,AS_MESSAGE_SENSOR_EVENT,BIDI|WKMEUP,(ch & 0x3f) | flags,counter);
    547c:	9f 73       	andi	r25, 0x3F	; 63
_ZN2as7Message13initWithCountEhhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:152

  void initWithCount(uint8_t length, uint8_t typ, uint8_t flags, uint8_t comm) {
    this->len = length;
    this->typ = typ;
    this->flag = flags;
    this->comm = comm;
    547e:	55 96       	adiw	r26, 0x15	; 21
    5480:	9c 93       	st	X, r25
    5482:	55 97       	sbiw	r26, 0x15	; 21
_ZN2as7Message4initEhhhhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:157
  }

  void init(uint8_t length, uint8_t cnt, uint8_t typ, uint8_t flags, uint8_t comm, uint8_t sub) {
    initWithCount(length,typ,flags,comm);
    this->cnt = cnt;
    5484:	1c 96       	adiw	r26, 0x0c	; 12
    5486:	8c 93       	st	X, r24
    5488:	1c 97       	sbiw	r26, 0x0c	; 12
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:158
    this->subcom = sub;
    548a:	56 96       	adiw	r26, 0x16	; 22
    548c:	2c 93       	st	X, r18
    548e:	56 97       	sbiw	r26, 0x16	; 22
_ZN2as14SensorEventMsg4initEhhhhbb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:497
      uint8_t flags = lg ? 0x40 : 0x00;
      if( lowbat == true ) {
          flags |= 0x80; // low battery
      }
      Message::init(0xc,msgcnt,AS_MESSAGE_SENSOR_EVENT,BIDI|WKMEUP,(ch & 0x3f) | flags,counter);
      *data() = value;
    5490:	57 96       	adiw	r26, 0x17	; 23
    5492:	3c 93       	st	X, r19
_ZN2as19StateGenericChannelINS_14OnePinPositionILj0EEENS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101ISA_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10EE11EventSender7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:36
#ifdef CONTACT_STATE_WITH_BATTERY
      msg.append(channel.device().battery().current());
      // msg.append(__gb_BatCount);
#endif
      channel.device().sendPeerEvent(msg,channel);
    5494:	00 84       	ldd	r0, Z+8	; 0x08
    5496:	f1 85       	ldd	r31, Z+9	; 0x09
    5498:	e0 2d       	mov	r30, r0
    549a:	e0 84       	ldd	r14, Z+8	; 0x08
    549c:	f1 84       	ldd	r15, Z+9	; 0x09
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:560
  }

  template <class ChannelType>
  void sendPeerEvent (Message& msg,const ChannelType& ch) {
    bool sendtopeer=false;
    for( int i=0; i<ch.peers(); ++i ){
    549e:	91 2c       	mov	r9, r1
    54a0:	81 2c       	mov	r8, r1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:559
    hal->sendPeer();
  }

  template <class ChannelType>
  void sendPeerEvent (Message& msg,const ChannelType& ch) {
    bool sendtopeer=false;
    54a2:	41 2c       	mov	r4, r1
sendPeerEvent():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:560
    for( int i=0; i<ch.peers(); ++i ){
    54a4:	6f 01       	movw	r12, r30
    54a6:	b8 e0       	ldi	r27, 0x08	; 8
    54a8:	cb 0e       	add	r12, r27
    54aa:	d1 1c       	adc	r13, r1
_ZN2as7Message4fromEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:186
  const HMID& from () const {
    return fromID;
  }

  HMID& from () {
    return fromID;
    54ac:	38 01       	movw	r6, r16
    54ae:	ef e0       	ldi	r30, 0x0F	; 15
    54b0:	6e 0e       	add	r6, r30
    54b2:	71 1c       	adc	r7, r1
sendPeerEvent():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:560
    54b4:	fa e0       	ldi	r31, 0x0A	; 10
    54b6:	8f 16       	cp	r8, r31
    54b8:	91 04       	cpc	r9, r1
    54ba:	09 f4       	brne	.+2      	; 0x54be <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::EventSender::trigger(as::AlarmClock&)+0xc0>
    54bc:	96 c0       	rjmp	.+300    	; 0x55ea <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::EventSender::trigger(as::AlarmClock&)+0x1ec>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:561
      Peer p = ch.peerat(i);
    54be:	48 2d       	mov	r20, r8
    54c0:	b6 01       	movw	r22, r12
    54c2:	ce 01       	movw	r24, r28
    54c4:	05 96       	adiw	r24, 0x05	; 5
    54c6:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::peerat(unsigned char) const>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:562
      if( p.valid() == true ) {
    54ca:	ce 01       	movw	r24, r28
    54cc:	05 96       	adiw	r24, 0x05	; 5
    54ce:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <as::HMID::valid() const>
    54d2:	38 2e       	mov	r3, r24
    54d4:	88 23       	and	r24, r24
    54d6:	09 f4       	brne	.+2      	; 0x54da <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::EventSender::trigger(as::AlarmClock&)+0xdc>
    54d8:	4e c0       	rjmp	.+156    	; 0x5576 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::EventSender::trigger(as::AlarmClock&)+0x178>
_ZN2as19StateGenericChannelINS_14OnePinPositionILj0EEENS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101ISA_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10EE11EventSender7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:82
    }
    return false;
  }

  uint8_t peerfor (const HMID& hmid) const {
    for( uint8_t i=0; i<peers(); ++i ) {
    54da:	51 2c       	mov	r5, r1
peerfor():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:83
      if( hmid == peerat(i) ) {
    54dc:	45 2d       	mov	r20, r5
    54de:	b6 01       	movw	r22, r12
    54e0:	ce 01       	movw	r24, r28
    54e2:	01 96       	adiw	r24, 0x01	; 1
    54e4:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::peerat(unsigned char) const>
    54e8:	be 01       	movw	r22, r28
    54ea:	6f 5f       	subi	r22, 0xFF	; 255
    54ec:	7f 4f       	sbci	r23, 0xFF	; 255
    54ee:	ce 01       	movw	r24, r28
    54f0:	05 96       	adiw	r24, 0x05	; 5
    54f2:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <as::HMID::operator==(as::HMID const&) const>
    54f6:	81 11       	cpse	r24, r1
    54f8:	06 c0       	rjmp	.+12     	; 0x5506 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::EventSender::trigger(as::AlarmClock&)+0x108>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:82
    }
    return false;
  }

  uint8_t peerfor (const HMID& hmid) const {
    for( uint8_t i=0; i<peers(); ++i ) {
    54fa:	53 94       	inc	r5
    54fc:	8a e0       	ldi	r24, 0x0A	; 10
    54fe:	58 12       	cpse	r5, r24
    5500:	ed cf       	rjmp	.-38     	; 0x54dc <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::EventSender::trigger(as::AlarmClock&)+0xde>
_ZN2as19StateGenericChannelINS_14OnePinPositionILj0EEENS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101ISA_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10EE11EventSender7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:87
      if( hmid == peerat(i) ) {
        return i;
      }
    }
    return 0xff;
    5502:	55 24       	eor	r5, r5
    5504:	5a 94       	dec	r5
sendPeerEvent():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:564
        // skip if this is not the first peer of that device
        if( ch.peerfor(p) < i ) {
    5506:	58 14       	cp	r5, r8
    5508:	19 04       	cpc	r1, r9
    550a:	ac f1       	brlt	.+106    	; 0x5576 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::EventSender::trigger(as::AlarmClock&)+0x178>
_ZN2as4HMIDC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:18

class HMID {
  uint8_t id[3];
public:
  HMID () {
    id[0]=id[1]=id[2]=0;
    550c:	1b 82       	std	Y+3, r1	; 0x03
    550e:	1a 82       	std	Y+2, r1	; 0x02
    5510:	19 82       	std	Y+1, r1	; 0x01
isDeviceID():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:329
    return memcmp(serial,tmp,10) == 0;
  }

  bool isDeviceID(const HMID& id) {
    HMID me;
    getDeviceID(me);
    5512:	be 01       	movw	r22, r28
    5514:	6f 5f       	subi	r22, 0xFF	; 255
    5516:	7f 4f       	sbci	r23, 0xFF	; 255
    5518:	d7 01       	movw	r26, r14
    551a:	9a 96       	adiw	r26, 0x2a	; 42
    551c:	8d 91       	ld	r24, X+
    551e:	9c 91       	ld	r25, X
    5520:	0e 94 d5 12 	call	0x25aa	; 0x25aa <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::getDeviceID(as::HMID&) [clone .isra.97]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:330
    return id == me;
    5524:	be 01       	movw	r22, r28
    5526:	6f 5f       	subi	r22, 0xFF	; 255
    5528:	7f 4f       	sbci	r23, 0xFF	; 255
    552a:	ce 01       	movw	r24, r28
    552c:	05 96       	adiw	r24, 0x05	; 5
    552e:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <as::HMID::operator==(as::HMID const&) const>
sendPeerEvent():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:567
      if( p.valid() == true ) {
        // skip if this is not the first peer of that device
        if( ch.peerfor(p) < i ) {
          continue;
        }
        if( isDeviceID(p) == true ) {
    5532:	88 23       	and	r24, r24
    5534:	71 f1       	breq	.+92     	; 0x5592 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::EventSender::trigger(as::AlarmClock&)+0x194>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:569
          // we send to ourself - no ack needed
          getDeviceID(msg.from());
    5536:	b3 01       	movw	r22, r6
    5538:	f7 01       	movw	r30, r14
    553a:	82 a5       	ldd	r24, Z+42	; 0x2a
    553c:	93 a5       	ldd	r25, Z+43	; 0x2b
    553e:	0e 94 d5 12 	call	0x25aa	; 0x25aa <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::getDeviceID(as::HMID&) [clone .isra.97]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:570
          msg.to(msg.from());
    5542:	b3 01       	movw	r22, r6
    5544:	c5 01       	movw	r24, r10
    5546:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <as::Message::to(as::HMID const&)>
    554a:	d8 01       	movw	r26, r16
    554c:	1d 96       	adiw	r26, 0x0d	; 13
    554e:	8c 91       	ld	r24, X
    5550:	1d 97       	sbiw	r26, 0x0d	; 13
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:571
          if( msg.ackRequired() == true ) {
    5552:	85 ff       	sbrs	r24, 5
    5554:	14 c0       	rjmp	.+40     	; 0x557e <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::EventSender::trigger(as::AlarmClock&)+0x180>
_ZN2as7Message8clearAckEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:300
  void setAck () {
    flag |= BIDI;
  }

  void clearAck () {
    flag &= ~BIDI;
    5556:	8f 7d       	andi	r24, 0xDF	; 223
    5558:	1d 96       	adiw	r26, 0x0d	; 13
    555a:	8c 93       	st	X, r24
sendPeerEvent():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:573
            msg.clearAck();
            this->process(msg);
    555c:	d7 01       	movw	r26, r14
    555e:	ed 91       	ld	r30, X+
    5560:	fc 91       	ld	r31, X
    5562:	06 80       	ldd	r0, Z+6	; 0x06
    5564:	f7 81       	ldd	r31, Z+7	; 0x07
    5566:	e0 2d       	mov	r30, r0
    5568:	b5 01       	movw	r22, r10
    556a:	c7 01       	movw	r24, r14
    556c:	09 95       	icall
_ZN2as7Message6setAckEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:296
  void setRpten () {
    flag |= RPTEN;
  }

  void setAck () {
    flag |= BIDI;
    556e:	f8 01       	movw	r30, r16
    5570:	85 85       	ldd	r24, Z+13	; 0x0d
    5572:	80 62       	ori	r24, 0x20	; 32
    5574:	85 87       	std	Z+13, r24	; 0x0d
sendPeerEvent():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:560
  }

  template <class ChannelType>
  void sendPeerEvent (Message& msg,const ChannelType& ch) {
    bool sendtopeer=false;
    for( int i=0; i<ch.peers(); ++i ){
    5576:	bf ef       	ldi	r27, 0xFF	; 255
    5578:	8b 1a       	sub	r8, r27
    557a:	9b 0a       	sbc	r9, r27
    557c:	9b cf       	rjmp	.-202    	; 0x54b4 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::EventSender::trigger(as::AlarmClock&)+0xb6>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:577
            msg.clearAck();
            this->process(msg);
            msg.setAck();
          }
          else {
            this->process(msg);
    557e:	d7 01       	movw	r26, r14
    5580:	ed 91       	ld	r30, X+
    5582:	fc 91       	ld	r31, X
    5584:	06 80       	ldd	r0, Z+6	; 0x06
    5586:	f7 81       	ldd	r31, Z+7	; 0x07
    5588:	e0 2d       	mov	r30, r0
    558a:	b5 01       	movw	r22, r10
    558c:	c7 01       	movw	r24, r14
    558e:	09 95       	icall
    5590:	f2 cf       	rjmp	.-28     	; 0x5576 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::EventSender::trigger(as::AlarmClock&)+0x178>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:582
          }
        }
        else {
          // check if burst needed for peer
          typename ChannelType::List4 l4 = ch.getList4(p);
    5592:	be 01       	movw	r22, r28
    5594:	6b 5f       	subi	r22, 0xFB	; 251
    5596:	7f 4f       	sbci	r23, 0xFF	; 255
    5598:	c6 01       	movw	r24, r12
    559a:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, SCList1, as::EmptyList, as::RegList4<as::DefaultRegisterList4>, 10, UList0, as::EmptyList>::getList4(as::Peer const&) const>
    559e:	9a 83       	std	Y+2, r25	; 0x02
    55a0:	89 83       	std	Y+1, r24	; 0x01
getOffset():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:901
typedef RegList0<DefaultRegisterList0> DefList0;

DEFREGISTER(DefaultRegisterList1,CREG_AES_ACTIVE)
typedef RegList1<DefaultRegisterList1> DefList1;

DEFREGISTER(DefaultRegisterList4,PREG_BURST_AES)
    55a2:	41 e0       	ldi	r20, 0x01	; 1
    55a4:	6f ed       	ldi	r22, 0xDF	; 223
    55a6:	75 e0       	ldi	r23, 0x05	; 5
    55a8:	81 e0       	ldi	r24, 0x01	; 1
    55aa:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <as::AskSinRegister::getOffset(unsigned char, unsigned char const*, unsigned char)>
readRegister():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:236
    }
    return value;
  }
  uint8_t readRegister (uint8_t reg,uint8_t mask,uint8_t shift,uint8_t value=0) const {
    uint8_t offset = RegisterType::getOffset(reg);
    if( offset != 0xff ) {
    55ae:	8f 3f       	cpi	r24, 0xFF	; 255
    55b0:	a1 f0       	breq	.+40     	; 0x55da <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::EventSender::trigger(as::AlarmClock&)+0x1dc>
_ZNK2as8BaseList7getByteEhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:29
    55b2:	68 2f       	mov	r22, r24
    55b4:	ce 01       	movw	r24, r28
    55b6:	01 96       	adiw	r24, 0x01	; 1
    55b8:	0e 94 01 15 	call	0x2a02	; 0x2a02 <as::BaseList::getByte(unsigned char) const>
_ZN2as7Message13burstRequiredEb.isra.44():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:336
  bool burstRequired () const {
    return (flag & BURST) == BURST;
  }

  void burstRequired (bool value) {
    if( value == true ) {
    55bc:	80 ff       	sbrs	r24, 0
    55be:	0d c0       	rjmp	.+26     	; 0x55da <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::EventSender::trigger(as::AlarmClock&)+0x1dc>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:337
      flag |= BURST;
    55c0:	f8 01       	movw	r30, r16
    55c2:	85 85       	ldd	r24, Z+13	; 0x0d
    55c4:	80 61       	ori	r24, 0x10	; 16
    55c6:	85 87       	std	Z+13, r24	; 0x0d
sendPeerEvent():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:584
          msg.burstRequired( l4.burst() );
          send(msg,p);
    55c8:	ae 01       	movw	r20, r28
    55ca:	4b 5f       	subi	r20, 0xFB	; 251
    55cc:	5f 4f       	sbci	r21, 0xFF	; 255
    55ce:	b5 01       	movw	r22, r10
    55d0:	c7 01       	movw	r24, r14
    55d2:	0e 94 1d 28 	call	0x503a	; 0x503a <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)>
_ZN2as19StateGenericChannelINS_14OnePinPositionILj0EEENS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101ISA_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10EE11EventSender7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:585
          sendtopeer = true;
    55d6:	43 2c       	mov	r4, r3
    55d8:	ce cf       	rjmp	.-100    	; 0x5576 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::EventSender::trigger(as::AlarmClock&)+0x178>
_ZN2as7Message13burstRequiredEb.isra.44():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:340
    }
    else {
      flag &= ~BURST;
    55da:	d8 01       	movw	r26, r16
    55dc:	1d 96       	adiw	r26, 0x0d	; 13
    55de:	8c 91       	ld	r24, X
    55e0:	1d 97       	sbiw	r26, 0x0d	; 13
    55e2:	8f 7e       	andi	r24, 0xEF	; 239
    55e4:	1d 96       	adiw	r26, 0x0d	; 13
    55e6:	8c 93       	st	X, r24
    55e8:	ef cf       	rjmp	.-34     	; 0x55c8 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::EventSender::trigger(as::AlarmClock&)+0x1ca>
sendPeerEvent():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:590
        }
      }
    }
    // if we have no peer - send to master/broadcast
    if( sendtopeer == false ) {
    55ea:	41 10       	cpse	r4, r1
    55ec:	0e c0       	rjmp	.+28     	; 0x560a <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::EventSender::trigger(as::AlarmClock&)+0x20c>
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E11getMasterIDEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:352
#endif
    memcpy_P(di+1,info.DeviceInfo,sizeof(info.DeviceInfo));
  }

  HMID getMasterID () {
    return list0.masterid();
    55ee:	f7 01       	movw	r30, r14
    55f0:	64 81       	ldd	r22, Z+4	; 0x04
    55f2:	75 81       	ldd	r23, Z+5	; 0x05
    55f4:	ce 01       	movw	r24, r28
    55f6:	01 96       	adiw	r24, 0x01	; 1
    55f8:	0e 94 e7 18 	call	0x31ce	; 0x31ce <as::RegList0<UReg0>::masterid() const>
sendPeerEvent():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:591
        }
      }
    }
    // if we have no peer - send to master/broadcast
    if( sendtopeer == false ) {
      send(msg,getMasterID());
    55fc:	ae 01       	movw	r20, r28
    55fe:	4f 5f       	subi	r20, 0xFF	; 255
    5600:	5f 4f       	sbci	r21, 0xFF	; 255
    5602:	b5 01       	movw	r22, r10
    5604:	c7 01       	movw	r24, r14
    5606:	0e 94 1d 28 	call	0x503a	; 0x503a <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)>
_ZN2as19StateGenericChannelINS_14OnePinPositionILj0EEENS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101ISA_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10EE11EventSender7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:37
    }
    560a:	28 96       	adiw	r28, 0x08	; 8
    560c:	0f b6       	in	r0, 0x3f	; 63
    560e:	f8 94       	cli
    5610:	de bf       	out	0x3e, r29	; 62
    5612:	0f be       	out	0x3f, r0	; 63
    5614:	cd bf       	out	0x3d, r28	; 61
    5616:	df 91       	pop	r29
    5618:	cf 91       	pop	r28
    561a:	1f 91       	pop	r17
    561c:	0f 91       	pop	r16
    561e:	ff 90       	pop	r15
    5620:	ef 90       	pop	r14
    5622:	df 90       	pop	r13
    5624:	cf 90       	pop	r12
    5626:	bf 90       	pop	r11
    5628:	af 90       	pop	r10
    562a:	9f 90       	pop	r9
    562c:	8f 90       	pop	r8
    562e:	7f 90       	pop	r7
    5630:	6f 90       	pop	r6
    5632:	5f 90       	pop	r5
    5634:	4f 90       	pop	r4
    5636:	3f 90       	pop	r3
    5638:	08 95       	ret

0000563a <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)>:
_ZN2as19StateGenericChannelINS_14OnePinPositionILj0EEENS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101ISA_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10EE7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:77
    uint8_t flags = sabotage ? 0x07 << 1 : 0x00;
    flags |= this->device().battery().low() ? 0x80 : 0x00;
    return flags;
  }

  void trigger (__attribute__ ((unused)) AlarmClock& clock)  {
    563a:	cf 92       	push	r12
    563c:	df 92       	push	r13
    563e:	ef 92       	push	r14
    5640:	ff 92       	push	r15
    5642:	0f 93       	push	r16
    5644:	1f 93       	push	r17
    5646:	cf 93       	push	r28
    5648:	df 93       	push	r29
    564a:	00 d0       	rcall	.+0      	; 0x564c <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0x12>
    564c:	cd b7       	in	r28, 0x3d	; 61
    564e:	de b7       	in	r29, 0x3e	; 62
    5650:	8c 01       	movw	r16, r24
    5652:	cb 01       	movw	r24, r22
_ZN2as5Alarm3setEm():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:41
    5654:	24 e6       	ldi	r18, 0x64	; 100
    5656:	30 e0       	ldi	r19, 0x00	; 0
    5658:	40 e0       	ldi	r20, 0x00	; 0
    565a:	d8 01       	movw	r26, r16
    565c:	15 96       	adiw	r26, 0x05	; 5
    565e:	2d 93       	st	X+, r18
    5660:	3d 93       	st	X+, r19
    5662:	4c 93       	st	X, r20
_ZN2as19StateGenericChannelINS_14OnePinPositionILj0EEENS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101ISA_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10EE7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:81
    // reactivate polling - if interval greater 0
    if( possens.interval() > 0) {
      set(possens.interval());
      clock.add(*this);
    5664:	b8 01       	movw	r22, r16
    5666:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <as::AlarmClock::add(as::Alarm&)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:83
    }
    uint8_t newstate = sender.state;
    566a:	f8 01       	movw	r30, r16
    566c:	e1 8c       	ldd	r14, Z+25	; 0x19
_ZN2as14OnePinPositionILj0EE7measureEb.isra.129():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/sensors/PinPosition.h:28
    en = enpin;
    if (en != 0) pinMode(en, OUTPUT);
  }

  void measure (__attribute__((unused)) bool async=false) {
    _position = ( AskSinBase::readPin(sens, en, WAITMILLIS_AFTER_ENABLE) == 0) ? State::PosA : State::PosB;
    566e:	60 a1       	ldd	r22, Z+32	; 0x20
    5670:	87 8d       	ldd	r24, Z+31	; 0x1f
    5672:	0e 94 2b 12 	call	0x2456	; 0x2456 <as::AskSinBase::readPin(unsigned char, unsigned char, unsigned char) [clone .constprop.126]>
    5676:	d8 01       	movw	r26, r16
    5678:	1c 96       	adiw	r26, 0x0c	; 12
    567a:	2d 91       	ld	r18, X+
    567c:	3c 91       	ld	r19, X
    567e:	1d 97       	sbiw	r26, 0x0d	; 13
    5680:	81 11       	cpse	r24, r1
    5682:	4f c0       	rjmp	.+158    	; 0x5722 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0xe8>
    5684:	81 e0       	ldi	r24, 0x01	; 1
    5686:	5e 96       	adiw	r26, 0x1e	; 30
    5688:	8c 93       	st	X, r24
_ZN2as19StateGenericChannelINS_14OnePinPositionILj0EEENS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101ISA_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10EE7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:88
    uint8_t msg = 0;
    possens.measure();
    switch( possens.position() ) {
    case Sensor::State::PosA:
      msg = this->getList1().msgForPosA();
    568a:	3a 83       	std	Y+2, r19	; 0x02
    568c:	29 83       	std	Y+1, r18	; 0x01
msgForPosA():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:439
  bool msgForPosC(uint8_t v) const { return this->writeRegister(CREG_MSGFORPOS,0x03,2,v); }
  uint8_t msgForPosC() const { return this->readRegister(CREG_MSGFORPOS,0x03,2,0); }
  bool msgForPosB(uint8_t v) const { return this->writeRegister(CREG_MSGFORPOS,0x03,4,v); }
  uint8_t msgForPosB() const { return this->readRegister(CREG_MSGFORPOS,0x03,4,0); }
  bool msgForPosA(uint8_t v) const { return this->writeRegister(CREG_MSGFORPOS,0x03,6,v); }
  uint8_t msgForPosA() const { return this->readRegister(CREG_MSGFORPOS,0x03,6,0); }
    568e:	26 e0       	ldi	r18, 0x06	; 6
msgForPosB():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:437
  bool aesActive() const { return this->readRegister(CREG_AES_ACTIVE,0x01,0,false); }

  bool msgForPosC(uint8_t v) const { return this->writeRegister(CREG_MSGFORPOS,0x03,2,v); }
  uint8_t msgForPosC() const { return this->readRegister(CREG_MSGFORPOS,0x03,2,0); }
  bool msgForPosB(uint8_t v) const { return this->writeRegister(CREG_MSGFORPOS,0x03,4,v); }
  uint8_t msgForPosB() const { return this->readRegister(CREG_MSGFORPOS,0x03,4,0); }
    5690:	43 e0       	ldi	r20, 0x03	; 3
    5692:	60 e2       	ldi	r22, 0x20	; 32
    5694:	ce 01       	movw	r24, r28
    5696:	01 96       	adiw	r24, 0x01	; 1
    5698:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <as::RegisterList<Reg1>::readRegister(unsigned char, unsigned char, unsigned char, unsigned char) const [clone .constprop.17]>
_ZN2as19StateGenericChannelINS_14OnePinPositionILj0EEENS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101ISA_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10EE7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:100
      break;
    default:
      break;
    }

    if( msg == 1) newstate = 0;
    569c:	81 30       	cpi	r24, 0x01	; 1
    569e:	09 f4       	brne	.+2      	; 0x56a2 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0x68>
    56a0:	47 c0       	rjmp	.+142    	; 0x5730 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0xf6>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:101
    else if( msg == 2) newstate = 200;
    56a2:	82 30       	cpi	r24, 0x02	; 2
    56a4:	09 f4       	brne	.+2      	; 0x56a8 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0x6e>
    56a6:	46 c0       	rjmp	.+140    	; 0x5734 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0xfa>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:102
    else if( msg == 3) newstate = 100;
    56a8:	83 30       	cpi	r24, 0x03	; 3
    56aa:	11 f4       	brne	.+4      	; 0x56b0 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0x76>
    56ac:	24 e6       	ldi	r18, 0x64	; 100
    56ae:	e2 2e       	mov	r14, r18
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:107

    // lets the position sensor remap the new state
    newstate = possens.remap(newstate);

    if( sender.state == 255 ) {
    56b0:	d8 01       	movw	r26, r16
    56b2:	59 96       	adiw	r26, 0x19	; 25
    56b4:	8c 91       	ld	r24, X
    56b6:	59 97       	sbiw	r26, 0x19	; 25
    56b8:	8f 3f       	cpi	r24, 0xFF	; 255
    56ba:	09 f0       	breq	.+2      	; 0x56be <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0x84>
    56bc:	3e c0       	rjmp	.+124    	; 0x573a <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0x100>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:109
      // we are in the init stage - store state only
      sender.state = newstate;
    56be:	59 96       	adiw	r26, 0x19	; 25
    56c0:	ec 92       	st	X, r14
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:127
      uint16_t ledtime = (uint16_t)this->getList1().ledOntime() * 5;
      if( ledtime > 0 ) {
        this->device().led().ledOn(millis2ticks(ledtime),0);
      }
    }
    if( sabpin != 0 ) {
    56c2:	d8 01       	movw	r26, r16
    56c4:	5a 96       	adiw	r26, 0x1a	; 26
    56c6:	8c 91       	ld	r24, X
    56c8:	88 23       	and	r24, r24
    56ca:	01 f1       	breq	.+64     	; 0x570c <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0xd2>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:128
      bool sabstate = (possens.interval()==0 ? digitalRead(sabpin) : AskSinBase::readPin(sabpin) == SABOTAGE_ACTIVE_STATE);
    56cc:	60 e0       	ldi	r22, 0x00	; 0
    56ce:	0e 94 2b 12 	call	0x2456	; 0x2456 <as::AskSinBase::readPin(unsigned char, unsigned char, unsigned char) [clone .constprop.126]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:134
      if( sabotage != sabstate && this->device().getList0().sabotageMsg() == true ) {
        sabotage = sabstate;
        this->changed(true); // trigger StatusInfoMessage to central
      }
    }
  }
    56d2:	ff 24       	eor	r15, r15
    56d4:	f3 94       	inc	r15
    56d6:	81 11       	cpse	r24, r1
    56d8:	f1 2c       	mov	r15, r1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:129
        this->device().led().ledOn(millis2ticks(ledtime),0);
      }
    }
    if( sabpin != 0 ) {
      bool sabstate = (possens.interval()==0 ? digitalRead(sabpin) : AskSinBase::readPin(sabpin) == SABOTAGE_ACTIVE_STATE);
      if( sabotage != sabstate && this->device().getList0().sabotageMsg() == true ) {
    56da:	f8 01       	movw	r30, r16
    56dc:	83 8d       	ldd	r24, Z+27	; 0x1b
    56de:	f8 16       	cp	r15, r24
    56e0:	a9 f0       	breq	.+42     	; 0x570c <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0xd2>
sabotageMsg():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:375
  bool ledMode (uint8_t value) const { return this->writeRegister(DREG_LEDMODE,0x03,6,value); }
  bool cycleInfoMsg () const { return this->readRegister(DREG_CYCLICINFOMSG,false); }
  bool cycleInfoMsg (bool value) const { return this->writeRegister(DREG_CYCLICINFOMSG,value); }
  uint8_t transmitDevTryMax () const { uint8_t v = this->readRegister(DREG_TRANSMITTRYMAX,6); return v == 0 ? 1 : v; }
  bool transmitDevTryMax (uint8_t value) const { return this->writeRegister(DREG_TRANSMITTRYMAX,value); }
  bool sabotageMsg () const { return this->readRegister(DREG_SABOTAGEMSG,true); }
    56e2:	00 84       	ldd	r0, Z+8	; 0x08
    56e4:	f1 85       	ldd	r31, Z+9	; 0x09
    56e6:	e0 2d       	mov	r30, r0
    56e8:	41 e0       	ldi	r20, 0x01	; 1
    56ea:	60 e1       	ldi	r22, 0x10	; 16
    56ec:	84 81       	ldd	r24, Z+4	; 0x04
    56ee:	95 81       	ldd	r25, Z+5	; 0x05
    56f0:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <as::RegisterList<UReg0>::readRegister(unsigned char, unsigned char) const>
_ZN2as19StateGenericChannelINS_14OnePinPositionILj0EEENS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101ISA_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10EE7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:129
    56f4:	88 23       	and	r24, r24
    56f6:	51 f0       	breq	.+20     	; 0x570c <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0xd2>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:130
        sabotage = sabstate;
    56f8:	d8 01       	movw	r26, r16
    56fa:	5b 96       	adiw	r26, 0x1b	; 27
    56fc:	fc 92       	st	X, r15
    56fe:	5b 97       	sbiw	r26, 0x1b	; 27
_ZN2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE7SCList1NS_9EmptyListENS_8RegList4INS_20DefaultRegisterList4EEELi10E6UList0SF_E7changedEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:50

  uint8_t peers () const { return PeerCount; }

  bool changed () const { return change; }

  void changed (bool c) { change = c; }
    5700:	1a 96       	adiw	r26, 0x0a	; 10
    5702:	8c 91       	ld	r24, X
    5704:	1a 97       	sbiw	r26, 0x0a	; 10
    5706:	81 60       	ori	r24, 0x01	; 1
    5708:	1a 96       	adiw	r26, 0x0a	; 10
    570a:	8c 93       	st	X, r24
_ZN2as19StateGenericChannelINS_14OnePinPositionILj0EEENS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101ISA_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10EE7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:134
        this->changed(true); // trigger StatusInfoMessage to central
      }
    }
  }
    570c:	0f 90       	pop	r0
    570e:	0f 90       	pop	r0
    5710:	df 91       	pop	r29
    5712:	cf 91       	pop	r28
    5714:	1f 91       	pop	r17
    5716:	0f 91       	pop	r16
    5718:	ff 90       	pop	r15
    571a:	ef 90       	pop	r14
    571c:	df 90       	pop	r13
    571e:	cf 90       	pop	r12
    5720:	08 95       	ret
_ZN2as14OnePinPositionILj0EE7measureEb.isra.129():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/sensors/PinPosition.h:28
    5722:	82 e0       	ldi	r24, 0x02	; 2
    5724:	f8 01       	movw	r30, r16
    5726:	86 8f       	std	Z+30, r24	; 0x1e
_ZN2as19StateGenericChannelINS_14OnePinPositionILj0EEENS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101ISA_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10EE7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:91
    switch( possens.position() ) {
    case Sensor::State::PosA:
      msg = this->getList1().msgForPosA();
      break;
    case Sensor::State::PosB:
      msg = this->getList1().msgForPosB();
    5728:	3a 83       	std	Y+2, r19	; 0x02
    572a:	29 83       	std	Y+1, r18	; 0x01
msgForPosB():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:437
  bool aesActive() const { return this->readRegister(CREG_AES_ACTIVE,0x01,0,false); }

  bool msgForPosC(uint8_t v) const { return this->writeRegister(CREG_MSGFORPOS,0x03,2,v); }
  uint8_t msgForPosC() const { return this->readRegister(CREG_MSGFORPOS,0x03,2,0); }
  bool msgForPosB(uint8_t v) const { return this->writeRegister(CREG_MSGFORPOS,0x03,4,v); }
  uint8_t msgForPosB() const { return this->readRegister(CREG_MSGFORPOS,0x03,4,0); }
    572c:	24 e0       	ldi	r18, 0x04	; 4
    572e:	b0 cf       	rjmp	.-160    	; 0x5690 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0x56>
_ZN2as19StateGenericChannelINS_14OnePinPositionILj0EEENS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101ISA_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10EE7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:100
      break;
    default:
      break;
    }

    if( msg == 1) newstate = 0;
    5730:	e1 2c       	mov	r14, r1
    5732:	be cf       	rjmp	.-132    	; 0x56b0 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0x76>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:101
    else if( msg == 2) newstate = 200;
    5734:	98 ec       	ldi	r25, 0xC8	; 200
    5736:	e9 2e       	mov	r14, r25
    5738:	bb cf       	rjmp	.-138    	; 0x56b0 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0x76>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:111

    if( sender.state == 255 ) {
      // we are in the init stage - store state only
      sender.state = newstate;
    }
    else if( newstate != sender.state ) {
    573a:	8e 15       	cp	r24, r14
    573c:	11 f2       	breq	.-124    	; 0x56c2 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0x88>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:112
      uint8_t delay = this->getList1().eventDelaytime();
    573e:	f8 01       	movw	r30, r16
    5740:	84 85       	ldd	r24, Z+12	; 0x0c
    5742:	95 85       	ldd	r25, Z+13	; 0x0d
    5744:	9a 83       	std	Y+2, r25	; 0x02
    5746:	89 83       	std	Y+1, r24	; 0x01
readRegister():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:228
    }
    return false;
  }

  uint8_t readRegister (uint8_t reg,uint8_t value=0) const {
    uint8_t offset = RegisterType::getOffset(reg);
    5748:	81 e2       	ldi	r24, 0x21	; 33
    574a:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <Reg1::getOffset(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:229
    if( offset != 0xff ) {
    574e:	f1 2c       	mov	r15, r1
    5750:	8f 3f       	cpi	r24, 0xFF	; 255
    5752:	31 f0       	breq	.+12     	; 0x5760 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0x126>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:230
      value = getByte(offset);
    5754:	68 2f       	mov	r22, r24
    5756:	ce 01       	movw	r24, r28
    5758:	01 96       	adiw	r24, 0x01	; 1
    575a:	0e 94 01 15 	call	0x2a02	; 0x2a02 <as::BaseList::getByte(unsigned char) const>
    575e:	f8 2e       	mov	r15, r24
_ZN2as19StateGenericChannelINS_14OnePinPositionILj0EEENS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101ISA_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10EE7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:113
      sender.state = newstate;
    5760:	d8 01       	movw	r26, r16
    5762:	59 96       	adiw	r26, 0x19	; 25
    5764:	ec 92       	st	X, r14
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:114
      sysclock.cancel(sender);
    5766:	68 01       	movw	r12, r16
    5768:	be e0       	ldi	r27, 0x0E	; 14
    576a:	cb 0e       	add	r12, r27
    576c:	d1 1c       	adc	r13, r1
    576e:	c6 01       	movw	r24, r12
    5770:	0e 94 22 10 	call	0x2044	; 0x2044 <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:115
      if( delay == 0 ) {
    5774:	f1 10       	cpse	r15, r1
    5776:	5b c0       	rjmp	.+182    	; 0x582e <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0x1f4>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:116
        sender.trigger(sysclock);
    5778:	67 e8       	ldi	r22, 0x87	; 135
    577a:	75 e0       	ldi	r23, 0x05	; 5
    577c:	c6 01       	movw	r24, r12
    577e:	0e 94 ff 29 	call	0x53fe	; 0x53fe <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::EventSender::trigger(as::AlarmClock&)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:122
      }
      else {
        sender.set(AskSinBase::byteTimeCvtSeconds(delay));
        sysclock.add(sender);
      }
      uint16_t ledtime = (uint16_t)this->getList1().ledOntime() * 5;
    5782:	f8 01       	movw	r30, r16
    5784:	84 85       	ldd	r24, Z+12	; 0x0c
    5786:	95 85       	ldd	r25, Z+13	; 0x0d
    5788:	9a 83       	std	Y+2, r25	; 0x02
    578a:	89 83       	std	Y+1, r24	; 0x01
readRegister():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:228
    }
    return false;
  }

  uint8_t readRegister (uint8_t reg,uint8_t value=0) const {
    uint8_t offset = RegisterType::getOffset(reg);
    578c:	82 e2       	ldi	r24, 0x22	; 34
    578e:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <Reg1::getOffset(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:229
    if( offset != 0xff ) {
    5792:	8f 3f       	cpi	r24, 0xFF	; 255
    5794:	09 f4       	brne	.+2      	; 0x5798 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0x15e>
    5796:	73 c0       	rjmp	.+230    	; 0x587e <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0x244>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:230
      value = getByte(offset);
    5798:	68 2f       	mov	r22, r24
    579a:	ce 01       	movw	r24, r28
    579c:	01 96       	adiw	r24, 0x01	; 1
    579e:	0e 94 01 15 	call	0x2a02	; 0x2a02 <as::BaseList::getByte(unsigned char) const>
_ZN2as19StateGenericChannelINS_14OnePinPositionILj0EEENS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101ISA_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10EE7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:122
    57a2:	f5 e0       	ldi	r31, 0x05	; 5
    57a4:	8f 9f       	mul	r24, r31
    57a6:	90 01       	movw	r18, r0
    57a8:	11 24       	eor	r1, r1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:123
      if( ledtime > 0 ) {
    57aa:	21 15       	cp	r18, r1
    57ac:	31 05       	cpc	r19, r1
    57ae:	09 f4       	brne	.+2      	; 0x57b2 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0x178>
    57b0:	88 cf       	rjmp	.-240    	; 0x56c2 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0x88>
    57b2:	d8 01       	movw	r26, r16
    57b4:	18 96       	adiw	r26, 0x08	; 8
    57b6:	ed 91       	ld	r30, X+
    57b8:	fc 91       	ld	r31, X
    57ba:	e2 80       	ldd	r14, Z+2	; 0x02
    57bc:	f3 80       	ldd	r15, Z+3	; 0x03
ledOn():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:100
      PINTYPE::setHigh(pin);
    }
  }

  void ledOn (uint32_t ticks) {
    if( active() == false && ticks > 0 ) {
    57be:	f7 01       	movw	r30, r14
    57c0:	82 85       	ldd	r24, Z+10	; 0x0a
    57c2:	81 11       	cpse	r24, r1
    57c4:	7e cf       	rjmp	.-260    	; 0x56c2 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0x88>
_ZN2as19StateGenericChannelINS_14OnePinPositionILj0EEENS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101ISA_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10EE7triggerERNS_10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:124
        this->device().led().ledOn(millis2ticks(ledtime),0);
    57c6:	a4 e6       	ldi	r26, 0x64	; 100
    57c8:	b0 e0       	ldi	r27, 0x00	; 0
    57ca:	0e 94 01 4f 	call	0x9e02	; 0x9e02 <__umulhisi3>
    57ce:	28 ee       	ldi	r18, 0xE8	; 232
    57d0:	33 e0       	ldi	r19, 0x03	; 3
    57d2:	40 e0       	ldi	r20, 0x00	; 0
    57d4:	50 e0       	ldi	r21, 0x00	; 0
    57d6:	0e 94 d8 50 	call	0xa1b0	; 0xa1b0 <__udivmodsi4>
ledOn():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:100
    57da:	21 15       	cp	r18, r1
    57dc:	31 05       	cpc	r19, r1
    57de:	41 05       	cpc	r20, r1
    57e0:	51 05       	cpc	r21, r1
    57e2:	09 f4       	brne	.+2      	; 0x57e6 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0x1ac>
    57e4:	6e cf       	rjmp	.-292    	; 0x56c2 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0x88>
_ZN2as9StatusLedILh0ENS_11ArduinoPinsEE5ledOnEmm():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:147
  StatusLed () {}

  void init () {  led1.init(LEDPIN1); }
  bool active () const { return led1.active(); }
  void ledOn (uint32_t ticks) { led1.ledOn(ticks); }
  void ledOn (uint32_t ticks,__attribute__((unused)) uint32_t tacks) { led1.ledOn(ticks); }
    57e6:	67 01       	movw	r12, r14
    57e8:	f2 e0       	ldi	r31, 0x02	; 2
    57ea:	cf 0e       	add	r12, r31
    57ec:	d1 1c       	adc	r13, r1
ledOn():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:101
    }
  }

  void ledOn (uint32_t ticks) {
    if( active() == false && ticks > 0 ) {
      current.length = 2;
    57ee:	82 e0       	ldi	r24, 0x02	; 2
    57f0:	d7 01       	movw	r26, r14
    57f2:	1a 96       	adiw	r26, 0x0a	; 10
    57f4:	8c 93       	st	X, r24
    57f6:	1a 97       	sbiw	r26, 0x0a	; 10
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:102
      current.duration = 1;
    57f8:	81 e0       	ldi	r24, 0x01	; 1
    57fa:	1b 96       	adiw	r26, 0x0b	; 11
    57fc:	8c 93       	st	X, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:103
      current.pattern[0] = ticks2decis(ticks);
    57fe:	aa e0       	ldi	r26, 0x0A	; 10
    5800:	b0 e0       	ldi	r27, 0x00	; 0
    5802:	0e 94 f6 4e 	call	0x9dec	; 0x9dec <__muluhisi3>
    5806:	24 e6       	ldi	r18, 0x64	; 100
    5808:	30 e0       	ldi	r19, 0x00	; 0
    580a:	40 e0       	ldi	r20, 0x00	; 0
    580c:	50 e0       	ldi	r21, 0x00	; 0
    580e:	0e 94 d8 50 	call	0xa1b0	; 0xa1b0 <__udivmodsi4>
    5812:	f7 01       	movw	r30, r14
    5814:	24 87       	std	Z+12, r18	; 0x0c
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:104
      current.pattern[1] = 0;
    5816:	15 86       	std	Z+13, r1	; 0x0d
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:106
      // start the pattern
      step = repeat = 0;
    5818:	13 8a       	std	Z+19, r1	; 0x13
    581a:	12 8a       	std	Z+18, r1	; 0x12
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:107
      next(sysclock);
    581c:	67 e8       	ldi	r22, 0x87	; 135
    581e:	75 e0       	ldi	r23, 0x05	; 5
    5820:	c6 01       	movw	r24, r12
    5822:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <as::Led<as::ArduinoPins>::next(as::AlarmClock&)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:108
      ledOn();
    5826:	c6 01       	movw	r24, r12
    5828:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <as::Led<as::ArduinoPins>::ledOn()>
    582c:	4a cf       	rjmp	.-364    	; 0x56c2 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0x88>
byteTimeCvtSeconds():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:159
    const uint16_t c[8] = {1,10,50,100,600,3000,6000,36000};
    return decis2ticks( (uint32_t)(tTime & 0x1F) * c[tTime >> 5] );
  }

  static uint32_t byteTimeCvtSeconds (uint8_t tTime) {
    const uint8_t c[2] = {1,60};
    582e:	81 e0       	ldi	r24, 0x01	; 1
    5830:	89 83       	std	Y+1, r24	; 0x01
    5832:	8c e3       	ldi	r24, 0x3C	; 60
    5834:	8a 83       	std	Y+2, r24	; 0x02
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:160
    return seconds2ticks( (uint32_t)(tTime & 0x7F) * c[tTime >> 7] );
    5836:	2f 2d       	mov	r18, r15
    5838:	2f 77       	andi	r18, 0x7F	; 127
    583a:	30 e0       	ldi	r19, 0x00	; 0
    583c:	a4 e6       	ldi	r26, 0x64	; 100
    583e:	b0 e0       	ldi	r27, 0x00	; 0
    5840:	0e 94 01 4f 	call	0x9e02	; 0x9e02 <__umulhisi3>
    5844:	9b 01       	movw	r18, r22
    5846:	ac 01       	movw	r20, r24
    5848:	ef 2d       	mov	r30, r15
    584a:	f0 e0       	ldi	r31, 0x00	; 0
    584c:	ee 0f       	add	r30, r30
    584e:	ef 2f       	mov	r30, r31
    5850:	ee 1f       	adc	r30, r30
    5852:	ff 0b       	sbc	r31, r31
    5854:	81 e0       	ldi	r24, 0x01	; 1
    5856:	90 e0       	ldi	r25, 0x00	; 0
    5858:	8c 0f       	add	r24, r28
    585a:	9d 1f       	adc	r25, r29
    585c:	e8 0f       	add	r30, r24
    585e:	f9 1f       	adc	r31, r25
    5860:	a0 81       	ld	r26, Z
    5862:	b0 e0       	ldi	r27, 0x00	; 0
    5864:	0e 94 f6 4e 	call	0x9dec	; 0x9dec <__muluhisi3>
_ZN2as5Alarm3setEm():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:41
    5868:	d8 01       	movw	r26, r16
    586a:	53 96       	adiw	r26, 0x13	; 19
    586c:	6d 93       	st	X+, r22
    586e:	7d 93       	st	X+, r23
    5870:	8c 93       	st	X, r24
_ZN2as8SysClock3addERNS_5AlarmE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:221
    5872:	b6 01       	movw	r22, r12
    5874:	87 e8       	ldi	r24, 0x87	; 135
    5876:	95 e0       	ldi	r25, 0x05	; 5
    5878:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <as::AlarmClock::add(as::Alarm&)>
    587c:	82 cf       	rjmp	.-252    	; 0x5782 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0x148>
readRegister():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:229
    return false;
  }

  uint8_t readRegister (uint8_t reg,uint8_t value=0) const {
    uint8_t offset = RegisterType::getOffset(reg);
    if( offset != 0xff ) {
    587e:	84 e6       	ldi	r24, 0x64	; 100
    5880:	90 cf       	rjmp	.-224    	; 0x57a2 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)+0x168>

00005882 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::sendDeviceInfo(as::HMID const&, unsigned char)>:
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E14sendDeviceInfoERKNS_4HMIDEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:464

  void sendDeviceInfo () {
    sendDeviceInfo(getMasterID(),nextcount());
  }

  void sendDeviceInfo (const HMID& to,uint8_t count) {
    5882:	0f 93       	push	r16
    5884:	1f 93       	push	r17
    5886:	cf 93       	push	r28
    5888:	df 93       	push	r29
    588a:	ec 01       	movw	r28, r24
    588c:	8b 01       	movw	r16, r22
_ZN2as7Message13initWithCountEhhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:149
    *(ptr+3) = d4;
    len += 4;
  }

  void initWithCount(uint8_t length, uint8_t typ, uint8_t flags, uint8_t comm) {
    this->len = length;
    588e:	8a e1       	ldi	r24, 0x1A	; 26
    5890:	8b 87       	std	Y+11, r24	; 0x0b
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:150
    this->typ = typ;
    5892:	1e 86       	std	Y+14, r1	; 0x0e
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:151
    this->flag = flags;
    5894:	1d 86       	std	Y+13, r1	; 0x0d
_ZN2as7Message4initEhhhhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:157
    this->comm = comm;
  }

  void init(uint8_t length, uint8_t cnt, uint8_t typ, uint8_t flags, uint8_t comm, uint8_t sub) {
    initWithCount(length,typ,flags,comm);
    this->cnt = cnt;
    5896:	4c 87       	std	Y+12, r20	; 0x0c
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:158
    this->subcom = sub;
    5898:	1e 8a       	std	Y+22, r1	; 0x16
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E14sendDeviceInfoERKNS_4HMIDEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:467
    DeviceInfoMsg& pm = msg.deviceInfo();
    pm.init(to,count);
    pm.fill(pgm_read_byte(&info.Firmware),pgm_read_byte(&info.DeviceType));
    589a:	6a a5       	ldd	r22, Y+42	; 0x2a
    589c:	7b a5       	ldd	r23, Y+43	; 0x2b
    589e:	fb 01       	movw	r30, r22
    58a0:	71 96       	adiw	r30, 0x11	; 17
    58a2:	84 91       	lpm	r24, Z
    58a4:	31 97       	sbiw	r30, 0x01	; 1
    58a6:	e4 91       	lpm	r30, Z
_ZN2as13DeviceInfoMsg4fillEhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:710
    *(buf+13) = subtype;
    memcpy(buf+14,devinfo,3);
  }
  void fill(uint8_t firmversion,uint8_t subtype) {
    uint8_t* buf = data();
    *buf = firmversion;
    58a8:	ed 8b       	std	Y+21, r30	; 0x15
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:711
    *(buf+13) = subtype;
    58aa:	8a a3       	std	Y+34, r24	; 0x22
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E14getDeviceModelEPh.isra.123():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:337

  void getDeviceModel (uint8_t* model) {
#ifdef USE_OTA_BOOTLOADER
    HalType::pgm_read(model,OTA_MODEL_START,2);
#else
    memcpy_P(model,info.DeviceModel,sizeof(info.DeviceModel));
    58ac:	62 5f       	subi	r22, 0xF2	; 242
    58ae:	7f 4f       	sbci	r23, 0xFF	; 255
    58b0:	42 e0       	ldi	r20, 0x02	; 2
    58b2:	50 e0       	ldi	r21, 0x00	; 0
    58b4:	ce 01       	movw	r24, r28
    58b6:	46 96       	adiw	r24, 0x16	; 22
    58b8:	0e 94 18 4b 	call	0x9630	; 0x9630 <memcpy_P>
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E15getDeviceSerialEPh.isra.98():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:317
    for (uint8_t i = 3; i < 10; i++) {
      serial[i] = (boot_signature_byte_get(i + 14) % 10) + 48; // Char 0-9
    }
  #endif
#else
    memcpy_P(serial,info.Serial,10);
    58bc:	6a a5       	ldd	r22, Y+42	; 0x2a
    58be:	7b a5       	ldd	r23, Y+43	; 0x2b
    58c0:	6d 5f       	subi	r22, 0xFD	; 253
    58c2:	7f 4f       	sbci	r23, 0xFF	; 255
    58c4:	4a e0       	ldi	r20, 0x0A	; 10
    58c6:	50 e0       	ldi	r21, 0x00	; 0
    58c8:	ce 01       	movw	r24, r28
    58ca:	48 96       	adiw	r24, 0x18	; 24
    58cc:	0e 94 18 4b 	call	0x9630	; 0x9630 <memcpy_P>
getDeviceInfo():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:346
  void getDeviceInfo (uint8_t* di) {
    // first byte is number of channels
#ifdef DEVICE_CHANNEL_COUNT
    *di = DEVICE_CHANNEL_COUNT;
#else
    *di = this->channels();
    58d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    58d2:	8b a3       	std	Y+35, r24	; 0x23
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:348
#endif
    memcpy_P(di+1,info.DeviceInfo,sizeof(info.DeviceInfo));
    58d4:	6a a5       	ldd	r22, Y+42	; 0x2a
    58d6:	7b a5       	ldd	r23, Y+43	; 0x2b
    58d8:	6e 5e       	subi	r22, 0xEE	; 238
    58da:	7f 4f       	sbci	r23, 0xFF	; 255
    58dc:	42 e0       	ldi	r20, 0x02	; 2
    58de:	50 e0       	ldi	r21, 0x00	; 0
    58e0:	ce 01       	movw	r24, r28
    58e2:	84 96       	adiw	r24, 0x24	; 36
    58e4:	0e 94 18 4b 	call	0x9630	; 0x9630 <memcpy_P>
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E14sendDeviceInfoERKNS_4HMIDEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:465
  void sendDeviceInfo () {
    sendDeviceInfo(getMasterID(),nextcount());
  }

  void sendDeviceInfo (const HMID& to,uint8_t count) {
    DeviceInfoMsg& pm = msg.deviceInfo();
    58e8:	be 01       	movw	r22, r28
    58ea:	65 5f       	subi	r22, 0xF5	; 245
    58ec:	7f 4f       	sbci	r23, 0xFF	; 255
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:471
    pm.init(to,count);
    pm.fill(pgm_read_byte(&info.Firmware),pgm_read_byte(&info.DeviceType));
    getDeviceModel(pm.model());
    getDeviceSerial(pm.serial());
    getDeviceInfo(pm.info());
    send(msg,to);
    58ee:	a8 01       	movw	r20, r16
    58f0:	ce 01       	movw	r24, r28
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:472
  }
    58f2:	df 91       	pop	r29
    58f4:	cf 91       	pop	r28
    58f6:	1f 91       	pop	r17
    58f8:	0f 91       	pop	r16
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:471
    pm.init(to,count);
    pm.fill(pgm_read_byte(&info.Firmware),pgm_read_byte(&info.DeviceType));
    getDeviceModel(pm.model());
    getDeviceSerial(pm.serial());
    getDeviceInfo(pm.info());
    send(msg,to);
    58fa:	0c 94 1d 28 	jmp	0x503a	; 0x503a <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)>

000058fe <void as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::sendInfoActuatorStatus<as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0> >(as::HMID const&, unsigned char, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>&, bool)>:
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E22sendInfoActuatorStatusINS_15VirtBaseChannelISD_SE_EEEEvRKNS_4HMIDEhRT_b():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:482
    getDeviceSerial(pm.serial());
    send(msg,to);
  }

  template <class ChannelType>
  void sendInfoActuatorStatus (const HMID& to,uint8_t count,ChannelType& ch,bool ack=true) {
    58fe:	9f 92       	push	r9
    5900:	af 92       	push	r10
    5902:	bf 92       	push	r11
    5904:	cf 92       	push	r12
    5906:	df 92       	push	r13
    5908:	ef 92       	push	r14
    590a:	ff 92       	push	r15
    590c:	0f 93       	push	r16
    590e:	1f 93       	push	r17
    5910:	cf 93       	push	r28
    5912:	df 93       	push	r29
    5914:	ec 01       	movw	r28, r24
    5916:	5b 01       	movw	r10, r22
    5918:	94 2e       	mov	r9, r20
    591a:	79 01       	movw	r14, r18
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:483
    InfoActuatorStatusMsg& pm = msg.infoActuatorStatus();
    591c:	6c 01       	movw	r12, r24
    591e:	8b e0       	ldi	r24, 0x0B	; 11
    5920:	c8 0e       	add	r12, r24
    5922:	d1 1c       	adc	r13, r1
    5924:	ea 81       	ldd	r30, Y+2	; 0x02
    5926:	fb 81       	ldd	r31, Y+3	; 0x03
    5928:	11 a1       	ldd	r17, Z+33	; 0x21
init():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:665

class InfoActuatorStatusMsg : public Message {
public:
  template <class ChannelType>
  void init (uint8_t count,ChannelType& ch,uint8_t rssi) {
    Message::init(0x0e,count,AS_MESSAGE_INFO,BIDI|WKMEUP,AS_INFO_ACTUATOR_STATUS,ch.number());
    592a:	d9 01       	movw	r26, r18
    592c:	ed 91       	ld	r30, X+
    592e:	fc 91       	ld	r31, X
    5930:	00 84       	ldd	r0, Z+8	; 0x08
    5932:	f1 85       	ldd	r31, Z+9	; 0x09
    5934:	e0 2d       	mov	r30, r0
    5936:	c9 01       	movw	r24, r18
    5938:	09 95       	icall
_ZN2as7Message13initWithCountEhhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:149
    *(ptr+3) = d4;
    len += 4;
  }

  void initWithCount(uint8_t length, uint8_t typ, uint8_t flags, uint8_t comm) {
    this->len = length;
    593a:	9e e0       	ldi	r25, 0x0E	; 14
    593c:	9b 87       	std	Y+11, r25	; 0x0b
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:150
    this->typ = typ;
    593e:	90 e1       	ldi	r25, 0x10	; 16
    5940:	9e 87       	std	Y+14, r25	; 0x0e
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:151
    this->flag = flags;
    5942:	92 e2       	ldi	r25, 0x22	; 34
    5944:	9d 87       	std	Y+13, r25	; 0x0d
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:152
    this->comm = comm;
    5946:	96 e0       	ldi	r25, 0x06	; 6
    5948:	9d 8b       	std	Y+21, r25	; 0x15
_ZN2as7Message4initEhhhhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:157
  }

  void init(uint8_t length, uint8_t cnt, uint8_t typ, uint8_t flags, uint8_t comm, uint8_t sub) {
    initWithCount(length,typ,flags,comm);
    this->cnt = cnt;
    594a:	9c 86       	std	Y+12, r9	; 0x0c
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:158
    this->subcom = sub;
    594c:	8e 8b       	std	Y+22, r24	; 0x16
init():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:666
class InfoActuatorStatusMsg : public Message {
public:
  template <class ChannelType>
  void init (uint8_t count,ChannelType& ch,uint8_t rssi) {
    Message::init(0x0e,count,AS_MESSAGE_INFO,BIDI|WKMEUP,AS_INFO_ACTUATOR_STATUS,ch.number());
    pload[0] = ch.status();
    594e:	d7 01       	movw	r26, r14
    5950:	ed 91       	ld	r30, X+
    5952:	fc 91       	ld	r31, X
    5954:	06 a4       	ldd	r0, Z+46	; 0x2e
    5956:	f7 a5       	ldd	r31, Z+47	; 0x2f
    5958:	e0 2d       	mov	r30, r0
    595a:	c7 01       	movw	r24, r14
    595c:	09 95       	icall
    595e:	8f 8b       	std	Y+23, r24	; 0x17
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:667
    pload[1] = ch.flags();
    5960:	d7 01       	movw	r26, r14
    5962:	ed 91       	ld	r30, X+
    5964:	fc 91       	ld	r31, X
    5966:	00 a8       	ldd	r0, Z+48	; 0x30
    5968:	f1 a9       	ldd	r31, Z+49	; 0x31
    596a:	e0 2d       	mov	r30, r0
    596c:	c7 01       	movw	r24, r14
    596e:	09 95       	icall
    5970:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:668
    pload[2] = rssi;
    5972:	19 8f       	std	Y+25, r17	; 0x19
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E22sendInfoActuatorStatusINS_15VirtBaseChannelISD_SE_EEEEvRKNS_4HMIDEhRT_b():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:485
    pm.init(count,ch,radio().rssi());
    if( ack == false ) {
    5974:	01 11       	cpse	r16, r1
    5976:	03 c0       	rjmp	.+6      	; 0x597e <void as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::sendInfoActuatorStatus<as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0> >(as::HMID const&, unsigned char, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>&, bool)+0x80>
_ZN2as7Message8clearAckEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:300
  void setAck () {
    flag |= BIDI;
  }

  void clearAck () {
    flag &= ~BIDI;
    5978:	8d 85       	ldd	r24, Y+13	; 0x0d
    597a:	8f 7d       	andi	r24, 0xDF	; 223
    597c:	8d 87       	std	Y+13, r24	; 0x0d
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E22sendInfoActuatorStatusINS_15VirtBaseChannelISD_SE_EEEEvRKNS_4HMIDEhRT_b():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:488
      pm.clearAck();
    }
    ch.patchStatus(msg);
    597e:	d7 01       	movw	r26, r14
    5980:	ed 91       	ld	r30, X+
    5982:	fc 91       	ld	r31, X
    5984:	02 a8       	ldd	r0, Z+50	; 0x32
    5986:	f3 a9       	ldd	r31, Z+51	; 0x33
    5988:	e0 2d       	mov	r30, r0
    598a:	b6 01       	movw	r22, r12
    598c:	c7 01       	movw	r24, r14
    598e:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:489
    send(msg,to);
    5990:	a5 01       	movw	r20, r10
    5992:	b6 01       	movw	r22, r12
    5994:	ce 01       	movw	r24, r28
    5996:	0e 94 1d 28 	call	0x503a	; 0x503a <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:490
    ch.changed(false);
    599a:	d7 01       	movw	r26, r14
    599c:	ed 91       	ld	r30, X+
    599e:	fc 91       	ld	r31, X
    59a0:	00 88       	ldd	r0, Z+16	; 0x10
    59a2:	f1 89       	ldd	r31, Z+17	; 0x11
    59a4:	e0 2d       	mov	r30, r0
    59a6:	60 e0       	ldi	r22, 0x00	; 0
    59a8:	c7 01       	movw	r24, r14
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:491
  }
    59aa:	df 91       	pop	r29
    59ac:	cf 91       	pop	r28
    59ae:	1f 91       	pop	r17
    59b0:	0f 91       	pop	r16
    59b2:	ff 90       	pop	r15
    59b4:	ef 90       	pop	r14
    59b6:	df 90       	pop	r13
    59b8:	cf 90       	pop	r12
    59ba:	bf 90       	pop	r11
    59bc:	af 90       	pop	r10
    59be:	9f 90       	pop	r9
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:490
    if( ack == false ) {
      pm.clearAck();
    }
    ch.patchStatus(msg);
    send(msg,to);
    ch.changed(false);
    59c0:	09 94       	ijmp

000059c2 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)>:
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:227
    }
#endif
    return true;
  }

   bool process(Message& msg) {
    59c2:	2f 92       	push	r2
    59c4:	3f 92       	push	r3
    59c6:	4f 92       	push	r4
    59c8:	5f 92       	push	r5
    59ca:	6f 92       	push	r6
    59cc:	7f 92       	push	r7
    59ce:	8f 92       	push	r8
    59d0:	9f 92       	push	r9
    59d2:	af 92       	push	r10
    59d4:	bf 92       	push	r11
    59d6:	cf 92       	push	r12
    59d8:	df 92       	push	r13
    59da:	ef 92       	push	r14
    59dc:	ff 92       	push	r15
    59de:	0f 93       	push	r16
    59e0:	1f 93       	push	r17
    59e2:	cf 93       	push	r28
    59e4:	df 93       	push	r29
    59e6:	cd b7       	in	r28, 0x3d	; 61
    59e8:	de b7       	in	r29, 0x3e	; 62
    59ea:	a3 97       	sbiw	r28, 0x23	; 35
    59ec:	0f b6       	in	r0, 0x3f	; 63
    59ee:	f8 94       	cli
    59f0:	de bf       	out	0x3e, r29	; 62
    59f2:	0f be       	out	0x3f, r0	; 63
    59f4:	cd bf       	out	0x3d, r28	; 61
    59f6:	6c 01       	movw	r12, r24
    59f8:	7b 01       	movw	r14, r22
_ZN2as4HMIDC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:18
    59fa:	1b a2       	std	Y+35, r1	; 0x23
    59fc:	1a a2       	std	Y+34, r1	; 0x22
    59fe:	19 a2       	std	Y+33, r1	; 0x21
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:231
     uint8_t answer = REPLAY_NO;
     ChannelType* ch = 0;
     HMID devid;
     this->getDeviceID(devid);
    5a00:	be 01       	movw	r22, r28
    5a02:	6f 5d       	subi	r22, 0xDF	; 223
    5a04:	7f 4f       	sbci	r23, 0xFF	; 255
    5a06:	dc 01       	movw	r26, r24
    5a08:	9a 96       	adiw	r26, 0x2a	; 42
    5a0a:	8d 91       	ld	r24, X+
    5a0c:	9c 91       	ld	r25, X
    5a0e:	0e 94 d5 12 	call	0x25aa	; 0x25aa <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::getDeviceID(as::HMID&) [clone .isra.97]>
_ZN2as7Message2toEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:202
  const HMID& to () const {
    return toID;
  }

  HMID& to () {
    return toID;
    5a12:	37 01       	movw	r6, r14
    5a14:	b7 e0       	ldi	r27, 0x07	; 7
    5a16:	6b 0e       	add	r6, r27
    5a18:	71 1c       	adc	r7, r1
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:232
     if( msg.to() == devid || this->isBroadcastMsg(msg) ) {
    5a1a:	be 01       	movw	r22, r28
    5a1c:	6f 5d       	subi	r22, 0xDF	; 223
    5a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    5a20:	c3 01       	movw	r24, r6
    5a22:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <as::HMID::operator==(as::HMID const&) const>
    5a26:	08 2f       	mov	r16, r24
    5a28:	88 23       	and	r24, r24
    5a2a:	09 f4       	brne	.+2      	; 0x5a2e <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x6c>
    5a2c:	61 c0       	rjmp	.+194    	; 0x5af0 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x12e>
    5a2e:	f6 01       	movw	r30, r12
    5a30:	02 81       	ldd	r16, Z+2	; 0x02
    5a32:	13 81       	ldd	r17, Z+3	; 0x03
_ZN2as5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS2_Lh255EEEE14setSendTimeoutEj():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:860
  } timeout;

public:
  //  this will delay next send by given millis
  void setSendTimeout(uint16_t millis=SENDDELAY) {
    timeout.setTimeout(millis);
    5a34:	58 01       	movw	r10, r16
    5a36:	f2 e2       	ldi	r31, 0x22	; 34
    5a38:	af 0e       	add	r10, r31
    5a3a:	b1 1c       	adc	r11, r1
setTimeout():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:841
    }

    void setTimeout (uint16_t millis=SENDDELAY) {
      if( millis > 0 ) {
        // cancel possible old timeout
        sysclock.cancel(*this);
    5a3c:	c5 01       	movw	r24, r10
    5a3e:	0e 94 22 10 	call	0x2044	; 0x2044 <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]>
_ZN2as5Alarm3setEm():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:41
    5a42:	8a e0       	ldi	r24, 0x0A	; 10
    5a44:	90 e0       	ldi	r25, 0x00	; 0
    5a46:	a0 e0       	ldi	r26, 0x00	; 0
    5a48:	f8 01       	movw	r30, r16
    5a4a:	87 a3       	std	Z+39, r24	; 0x27
    5a4c:	90 a7       	std	Z+40, r25	; 0x28
    5a4e:	a1 a7       	std	Z+41, r26	; 0x29
setTimeout():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:845
        // set to 100ms
        set(millis2ticks(millis));
        // signal new wait cycle
        wait = true;
    5a50:	81 e0       	ldi	r24, 0x01	; 1
    5a52:	82 a7       	std	Z+42, r24	; 0x2a
_ZN2as8SysClock3addERNS_5AlarmE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:221
    5a54:	b5 01       	movw	r22, r10
    5a56:	87 e8       	ldi	r24, 0x87	; 135
    5a58:	95 e0       	ldi	r25, 0x05	; 5
    5a5a:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <as::AlarmClock::add(as::Alarm&)>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:235
       // we got a message - we do not answer before 100ms
       this->radio().setSendTimeout(); // use default value from radio
       DPRINT(F("-> "));
    5a5e:	8b e5       	ldi	r24, 0x5B	; 91
    5a60:	95 e0       	ldi	r25, 0x05	; 5
    5a62:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:236
       msg.dump();
    5a66:	c7 01       	movw	r24, r14
    5a68:	0e 94 1f 23 	call	0x463e	; 0x463e <as::Message::dump() const>
isRepeat():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:231
    return number != 0 && number <= channels();
  }


  bool isRepeat(const Message& m) {
    if( m.isRepeated() && lastdev == m.from() && lastmsg == m.count() ) {
    5a6c:	d7 01       	movw	r26, r14
    5a6e:	12 96       	adiw	r26, 0x02	; 2
    5a70:	8c 91       	ld	r24, X
    5a72:	86 fd       	sbrc	r24, 6
    5a74:	8c c0       	rjmp	.+280    	; 0x5b8e <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x1cc>
_ZN2as4HMIDaSERKS0_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:36
    id[0]=other.id[0];
    id[1]=other.id[1];
    id[2]=other.id[2];
  }
  HMID& operator = (const HMID& other) {
    id[0]=other.id[0];
    5a76:	d7 01       	movw	r26, r14
    5a78:	14 96       	adiw	r26, 0x04	; 4
    5a7a:	8c 91       	ld	r24, X
    5a7c:	14 97       	sbiw	r26, 0x04	; 4
    5a7e:	f6 01       	movw	r30, r12
    5a80:	87 83       	std	Z+7, r24	; 0x07
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:37
    id[1]=other.id[1];
    5a82:	15 96       	adiw	r26, 0x05	; 5
    5a84:	8c 91       	ld	r24, X
    5a86:	15 97       	sbiw	r26, 0x05	; 5
    5a88:	80 87       	std	Z+8, r24	; 0x08
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:38
    id[2]=other.id[2];
    5a8a:	16 96       	adiw	r26, 0x06	; 6
    5a8c:	8c 91       	ld	r24, X
    5a8e:	16 97       	sbiw	r26, 0x06	; 6
    5a90:	81 87       	std	Z+9, r24	; 0x09
    5a92:	11 96       	adiw	r26, 0x01	; 1
    5a94:	8c 91       	ld	r24, X
    5a96:	11 97       	sbiw	r26, 0x01	; 1
isRepeat():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:236
      return true;
    }
    // store last message data
    lastdev = m.from();
    lastmsg = m.count();
    5a98:	82 87       	std	Z+10, r24	; 0x0a
    5a9a:	13 96       	adiw	r26, 0x03	; 3
    5a9c:	5c 90       	ld	r5, X
    5a9e:	13 97       	sbiw	r26, 0x03	; 3
    5aa0:	1a 96       	adiw	r26, 0x0a	; 10
    5aa2:	bc 90       	ld	r11, X
    5aa4:	1a 97       	sbiw	r26, 0x0a	; 10
    5aa6:	1b 96       	adiw	r26, 0x0b	; 11
    5aa8:	9c 90       	ld	r9, X
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:245
       }
       // start processing the message
       uint8_t mtype = msg.type();
       uint8_t mcomm = msg.command();
       uint8_t msubc = msg.subcommand();
       if( mtype == AS_MESSAGE_CONFIG ) {
    5aaa:	f1 e0       	ldi	r31, 0x01	; 1
    5aac:	5f 12       	cpse	r5, r31
    5aae:	98 c3       	rjmp	.+1840   	; 0x61e0 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x81e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:247
         // PAIR_SERIAL
         if( msubc == AS_CONFIG_PAIR_SERIAL && this->isDeviceSerial(msg.data())==true ) {
    5ab0:	8a e0       	ldi	r24, 0x0A	; 10
    5ab2:	98 12       	cpse	r9, r24
    5ab4:	7f c0       	rjmp	.+254    	; 0x5bb4 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x1f2>
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E15getDeviceSerialEPh.isra.98():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:317
    for (uint8_t i = 3; i < 10; i++) {
      serial[i] = (boot_signature_byte_get(i + 14) % 10) + 48; // Char 0-9
    }
  #endif
#else
    memcpy_P(serial,info.Serial,10);
    5ab6:	d6 01       	movw	r26, r12
    5ab8:	9a 96       	adiw	r26, 0x2a	; 42
    5aba:	6d 91       	ld	r22, X+
    5abc:	7c 91       	ld	r23, X
    5abe:	6d 5f       	subi	r22, 0xFD	; 253
    5ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    5ac2:	4a e0       	ldi	r20, 0x0A	; 10
    5ac4:	50 e0       	ldi	r21, 0x00	; 0
    5ac6:	ce 01       	movw	r24, r28
    5ac8:	01 96       	adiw	r24, 0x01	; 1
    5aca:	0e 94 18 4b 	call	0x9630	; 0x9630 <memcpy_P>
isDeviceSerial():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:324
  }

  bool isDeviceSerial (const uint8_t* serial) {
    uint8_t tmp[10];
    getDeviceSerial(tmp);
    return memcmp(serial,tmp,10) == 0;
    5ace:	4a e0       	ldi	r20, 0x0A	; 10
    5ad0:	50 e0       	ldi	r21, 0x00	; 0
    5ad2:	be 01       	movw	r22, r28
    5ad4:	6f 5f       	subi	r22, 0xFF	; 255
    5ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    5ad8:	c7 01       	movw	r24, r14
    5ada:	0c 96       	adiw	r24, 0x0c	; 12
    5adc:	0e 94 2f 53 	call	0xa65e	; 0xa65e <memcmp>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:247
    5ae0:	89 2b       	or	r24, r25
    5ae2:	09 f4       	brne	.+2      	; 0x5ae6 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x124>
    5ae4:	02 c1       	rjmp	.+516    	; 0x5cea <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x328>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:229
    return true;
  }

   bool process(Message& msg) {
     uint8_t answer = REPLAY_NO;
     ChannelType* ch = 0;
    5ae6:	10 e0       	ldi	r17, 0x00	; 0
    5ae8:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:409
                   answer = ch->process(msg.actionSet()) ? REPLAY_ACK : REPLAY_NACK;
                 }
                 break;
               case AS_ACTION_COMMAND:
                 if( ch->inhibit() == false ) {
                   answer = ch->process(msg.actionCommand()) ? REPLAY_ACK : REPLAY_NACK;
    5aea:	82 e0       	ldi	r24, 0x02	; 2
    5aec:	98 2e       	mov	r9, r24
    5aee:	96 c0       	rjmp	.+300    	; 0x5c1c <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x25a>
__base_ctor ():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:54
class ActionSetMsg;
class ActionCommandMsg;

class ValuesMsg;

class Message {
    5af0:	f7 01       	movw	r30, r14
    5af2:	80 81       	ld	r24, Z
    5af4:	89 83       	std	Y+1, r24	; 0x01
    5af6:	81 81       	ldd	r24, Z+1	; 0x01
    5af8:	8a 83       	std	Y+2, r24	; 0x02
    5afa:	b2 80       	ldd	r11, Z+2	; 0x02
    5afc:	bb 82       	std	Y+3, r11	; 0x03
    5afe:	13 81       	ldd	r17, Z+3	; 0x03
    5b00:	1c 83       	std	Y+4, r17	; 0x04
_ZN2as4HMIDC2ERKS0_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:31
    id[0]=*ptr;
    id[1]=*(ptr+1);
    id[2]=*(ptr+2);
  }
  HMID (const HMID& other) {
    id[0]=other.id[0];
    5b02:	84 81       	ldd	r24, Z+4	; 0x04
    5b04:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:32
    id[1]=other.id[1];
    5b06:	85 81       	ldd	r24, Z+5	; 0x05
    5b08:	8e 83       	std	Y+6, r24	; 0x06
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:33
    id[2]=other.id[2];
    5b0a:	86 81       	ldd	r24, Z+6	; 0x06
    5b0c:	8f 83       	std	Y+7, r24	; 0x07
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:31
    id[0]=*ptr;
    id[1]=*(ptr+1);
    id[2]=*(ptr+2);
  }
  HMID (const HMID& other) {
    id[0]=other.id[0];
    5b0e:	87 81       	ldd	r24, Z+7	; 0x07
    5b10:	88 87       	std	Y+8, r24	; 0x08
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:32
    id[1]=other.id[1];
    5b12:	80 85       	ldd	r24, Z+8	; 0x08
    5b14:	89 87       	std	Y+9, r24	; 0x09
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:33
    id[2]=other.id[2];
    5b16:	81 85       	ldd	r24, Z+9	; 0x09
    5b18:	8a 87       	std	Y+10, r24	; 0x0a
__base_ctor ():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:54
    5b1a:	82 85       	ldd	r24, Z+10	; 0x0a
    5b1c:	8b 87       	std	Y+11, r24	; 0x0b
    5b1e:	a3 84       	ldd	r10, Z+11	; 0x0b
    5b20:	ac 86       	std	Y+12, r10	; 0x0c
    5b22:	81 e1       	ldi	r24, 0x11	; 17
    5b24:	3c 96       	adiw	r30, 0x0c	; 12
    5b26:	de 01       	movw	r26, r28
    5b28:	1d 96       	adiw	r26, 0x0d	; 13
    5b2a:	01 90       	ld	r0, Z+
    5b2c:	0d 92       	st	X+, r0
    5b2e:	8a 95       	dec	r24
    5b30:	e1 f7       	brne	.-8      	; 0x5b2a <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x168>
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E14isBroadcastMsgENS_7MessageE.isra.161():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:378
  virtual void configChanged () {}

  virtual bool process(__attribute__((unused)) Message& msg) { return false; }

  bool isBroadcastMsg(Message msg) {
    return (msg.to() == HMID::broadcast && msg.isPairSerial()) || ( msg.isBroadcast() && (msg.isRemoteEvent() || msg.isSensorEvent()) );
    5b32:	6f e7       	ldi	r22, 0x7F	; 127
    5b34:	75 e0       	ldi	r23, 0x05	; 5
    5b36:	ce 01       	movw	r24, r28
    5b38:	08 96       	adiw	r24, 0x08	; 8
    5b3a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <as::HMID::operator==(as::HMID const&) const>
    5b3e:	88 23       	and	r24, r24
    5b40:	31 f0       	breq	.+12     	; 0x5b4e <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x18c>
isPairSerial():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:345
      flag &= ~BURST;
    }
  }

  bool isPairSerial () const {
    return typ==AS_MESSAGE_CONFIG && subcom==AS_CONFIG_PAIR_SERIAL;
    5b42:	11 30       	cpi	r17, 0x01	; 1
    5b44:	21 f4       	brne	.+8      	; 0x5b4e <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x18c>
    5b46:	fa e0       	ldi	r31, 0x0A	; 10
    5b48:	af 16       	cp	r10, r31
    5b4a:	09 f4       	brne	.+2      	; 0x5b4e <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x18c>
    5b4c:	70 cf       	rjmp	.-288    	; 0x5a2e <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x6c>
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E14isBroadcastMsgENS_7MessageE.isra.161():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:378
    5b4e:	b2 fe       	sbrs	r11, 2
    5b50:	04 c0       	rjmp	.+8      	; 0x5b5a <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x198>
    5b52:	10 54       	subi	r17, 0x40	; 64
    5b54:	12 30       	cpi	r17, 0x02	; 2
    5b56:	08 f4       	brcc	.+2      	; 0x5b5a <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x198>
    5b58:	6a cf       	rjmp	.-300    	; 0x5a2e <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x6c>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:497
       }
     }
     // we always stay awake after valid communication
     this->activity().stayAwake(millis2ticks(500));
     return true;
   }
    5b5a:	80 2f       	mov	r24, r16
    5b5c:	a3 96       	adiw	r28, 0x23	; 35
    5b5e:	0f b6       	in	r0, 0x3f	; 63
    5b60:	f8 94       	cli
    5b62:	de bf       	out	0x3e, r29	; 62
    5b64:	0f be       	out	0x3f, r0	; 63
    5b66:	cd bf       	out	0x3d, r28	; 61
    5b68:	df 91       	pop	r29
    5b6a:	cf 91       	pop	r28
    5b6c:	1f 91       	pop	r17
    5b6e:	0f 91       	pop	r16
    5b70:	ff 90       	pop	r15
    5b72:	ef 90       	pop	r14
    5b74:	df 90       	pop	r13
    5b76:	cf 90       	pop	r12
    5b78:	bf 90       	pop	r11
    5b7a:	af 90       	pop	r10
    5b7c:	9f 90       	pop	r9
    5b7e:	8f 90       	pop	r8
    5b80:	7f 90       	pop	r7
    5b82:	6f 90       	pop	r6
    5b84:	5f 90       	pop	r5
    5b86:	4f 90       	pop	r4
    5b88:	3f 90       	pop	r3
    5b8a:	2f 90       	pop	r2
    5b8c:	08 95       	ret
_ZNK2as7Message4fromEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:182
  void from(const HMID& hmid) {
    fromID = hmid;
  }

  const HMID& from () const {
    return fromID;
    5b8e:	b7 01       	movw	r22, r14
    5b90:	6c 5f       	subi	r22, 0xFC	; 252
    5b92:	7f 4f       	sbci	r23, 0xFF	; 255
isRepeat():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:231
    return number != 0 && number <= channels();
  }


  bool isRepeat(const Message& m) {
    if( m.isRepeated() && lastdev == m.from() && lastmsg == m.count() ) {
    5b94:	c6 01       	movw	r24, r12
    5b96:	07 96       	adiw	r24, 0x07	; 7
    5b98:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <as::HMID::operator==(as::HMID const&) const>
    5b9c:	88 23       	and	r24, r24
    5b9e:	09 f4       	brne	.+2      	; 0x5ba2 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x1e0>
    5ba0:	6a cf       	rjmp	.-300    	; 0x5a76 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0xb4>
    5ba2:	d6 01       	movw	r26, r12
    5ba4:	1a 96       	adiw	r26, 0x0a	; 10
    5ba6:	9c 91       	ld	r25, X
    5ba8:	f7 01       	movw	r30, r14
    5baa:	81 81       	ldd	r24, Z+1	; 0x01
    5bac:	98 13       	cpse	r25, r24
    5bae:	63 cf       	rjmp	.-314    	; 0x5a76 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0xb4>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:239
       this->radio().setSendTimeout(); // use default value from radio
       DPRINT(F("-> "));
       msg.dump();
       // ignore repeated messages
       if( this->isRepeat(msg) == true ) {
         return false;
    5bb0:	00 e0       	ldi	r16, 0x00	; 0
    5bb2:	d3 cf       	rjmp	.-90     	; 0x5b5a <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x198>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:253
           this->led().set(LedStates::pairing);
           this->activity().stayAwake( seconds2ticks(20) ); // 20 seconds
           this->sendDeviceInfo(msg.from(),msg.length());
         }
         // CONFIG_PEER_ADD
         else if ( msubc == AS_CONFIG_PEER_ADD ) {
    5bb4:	b1 e0       	ldi	r27, 0x01	; 1
    5bb6:	9b 12       	cpse	r9, r27
    5bb8:	d0 c0       	rjmp	.+416    	; 0x5d5a <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x398>
hasChannel():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:226
  uint8_t channels () const {
    return numChannels;
  }

  bool hasChannel (uint8_t number) const {
    return number != 0 && number <= channels();
    5bba:	bb 20       	and	r11, r11
    5bbc:	09 f4       	brne	.+2      	; 0x5bc0 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x1fe>
    5bbe:	93 cf       	rjmp	.-218    	; 0x5ae6 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x124>
    5bc0:	d6 01       	movw	r26, r12
    5bc2:	9d 96       	adiw	r26, 0x2d	; 45
    5bc4:	8c 91       	ld	r24, X
    5bc6:	8b 15       	cp	r24, r11
    5bc8:	08 f4       	brcc	.+2      	; 0x5bcc <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x20a>
    5bca:	8d cf       	rjmp	.-230    	; 0x5ae6 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x124>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7channelEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:182
    this->led().set(LedStates::pairing);
    this->activity().stayAwake( seconds2ticks(20) ); // 20 seconds
  }

  ChannelType& channel(uint8_t ch) {
    return *devchannels[ch-1];
    5bcc:	eb 2d       	mov	r30, r11
    5bce:	f0 e0       	ldi	r31, 0x00	; 0
    5bd0:	77 96       	adiw	r30, 0x17	; 23
    5bd2:	ee 0f       	add	r30, r30
    5bd4:	ff 1f       	adc	r31, r31
    5bd6:	ec 0d       	add	r30, r12
    5bd8:	fd 1d       	adc	r31, r13
    5bda:	00 81       	ld	r16, Z
    5bdc:	11 81       	ldd	r17, Z+1	; 0x01
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:259
           const ConfigPeerAddMsg& pm = msg.configPeerAdd();
           bool success = false;
           if( this->hasChannel(pm.channel()) == true ) {
             if( validSignature(pm.channel(),msg) == true ) {
               ch = &channel(pm.channel());
               if( pm.peers() == 1 ) {
    5bde:	c7 01       	movw	r24, r14
    5be0:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <as::ConfigPeerAddMsg::peers() const>
    5be4:	b7 01       	movw	r22, r14
    5be6:	64 5f       	subi	r22, 0xF4	; 244
    5be8:	7f 4f       	sbci	r23, 0xFF	; 255
    5bea:	d8 01       	movw	r26, r16
    5bec:	ed 91       	ld	r30, X+
    5bee:	fc 91       	ld	r31, X
    5bf0:	81 30       	cpi	r24, 0x01	; 1
    5bf2:	09 f0       	breq	.+2      	; 0x5bf6 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x234>
    5bf4:	99 c0       	rjmp	.+306    	; 0x5d28 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x366>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:260
                 success = ch->peer(pm.peer1());
    5bf6:	04 8c       	ldd	r0, Z+28	; 0x1c
    5bf8:	f5 8d       	ldd	r31, Z+29	; 0x1d
    5bfa:	e0 2d       	mov	r30, r0
    5bfc:	c8 01       	movw	r24, r16
    5bfe:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:267
               else {
                 success = ch->peer(pm.peer1(),pm.peer2());
               }
             }
           }
           if( success == true ) {
    5c00:	88 23       	and	r24, r24
    5c02:	09 f4       	brne	.+2      	; 0x5c06 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x244>
    5c04:	72 cf       	rjmp	.-284    	; 0x5aea <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x128>
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E16hasConfigChangedEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:214
    cfgChanged = false;
    return value;
  }

  void hasConfigChanged(bool c) {
    cfgChanged = c;
    5c06:	81 e0       	ldi	r24, 0x01	; 1
    5c08:	f6 01       	movw	r30, r12
    5c0a:	84 a7       	std	Z+44, r24	; 0x2c
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:269
             this->hasConfigChanged(true);
             ch->configChanged();
    5c0c:	d8 01       	movw	r26, r16
    5c0e:	ed 91       	ld	r30, X+
    5c10:	fc 91       	ld	r31, X
    5c12:	04 a8       	ldd	r0, Z+52	; 0x34
    5c14:	f5 a9       	ldd	r31, Z+53	; 0x35
    5c16:	e0 2d       	mov	r30, r0
    5c18:	c8 01       	movw	r24, r16
    5c1a:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:485
       msg.dump();
#endif
       return false;
     }
     // send ack/nack
     if( msg.ackRequired() == true && msg.to() == devid ) {
    5c1c:	d7 01       	movw	r26, r14
    5c1e:	12 96       	adiw	r26, 0x02	; 2
    5c20:	8c 91       	ld	r24, X
    5c22:	85 ff       	sbrs	r24, 5
    5c24:	56 c0       	rjmp	.+172    	; 0x5cd2 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x310>
    5c26:	be 01       	movw	r22, r28
    5c28:	6f 5d       	subi	r22, 0xDF	; 223
    5c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    5c2c:	c3 01       	movw	r24, r6
    5c2e:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <as::HMID::operator==(as::HMID const&) const>
    5c32:	88 23       	and	r24, r24
    5c34:	09 f4       	brne	.+2      	; 0x5c38 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x276>
    5c36:	4d c0       	rjmp	.+154    	; 0x5cd2 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x310>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:486
       if( answer == REPLAY_ACK ) {
    5c38:	b1 e0       	ldi	r27, 0x01	; 1
    5c3a:	9b 12       	cpse	r9, r27
    5c3c:	69 c4       	rjmp	.+2258   	; 0x6510 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0xb4e>
    5c3e:	57 01       	movw	r10, r14
    5c40:	e4 e0       	ldi	r30, 0x04	; 4
    5c42:	ae 0e       	add	r10, r30
    5c44:	b1 1c       	adc	r11, r1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:487
         if( ch != 0 ) this->sendAck(msg, *ch);
    5c46:	01 15       	cp	r16, r1
    5c48:	11 05       	cpc	r17, r1
    5c4a:	09 f4       	brne	.+2      	; 0x5c4e <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x28c>
    5c4c:	54 c4       	rjmp	.+2216   	; 0x64f6 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0xb34>
    5c4e:	d6 01       	movw	r26, r12
    5c50:	12 96       	adiw	r26, 0x02	; 2
    5c52:	ed 91       	ld	r30, X+
    5c54:	fc 91       	ld	r31, X
    5c56:	81 a0       	ldd	r8, Z+33	; 0x21
_ZN2as7Message13initWithCountEhhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:149
    *(ptr+3) = d4;
    len += 4;
  }

  void initWithCount(uint8_t length, uint8_t typ, uint8_t flags, uint8_t comm) {
    this->len = length;
    5c58:	8e e0       	ldi	r24, 0x0E	; 14
    5c5a:	f7 01       	movw	r30, r14
    5c5c:	80 83       	st	Z, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:150
    this->typ = typ;
    5c5e:	82 e0       	ldi	r24, 0x02	; 2
    5c60:	83 83       	std	Z+3, r24	; 0x03
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:151
    this->flag = flags;
    5c62:	12 82       	std	Z+2, r1	; 0x02
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:152
    this->comm = comm;
    5c64:	92 86       	std	Z+10, r9	; 0x0a
init():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:596
class AckStatusMsg : public Message {
public:
  template <class ChannelType>
  void init(ChannelType& ch,uint8_t rssi) {
    initWithCount(0x0e,AS_MESSAGE_RESPONSE,0x00,AS_RESPONSE_ACK_STATUS);
    subcom = ch.number();
    5c66:	d8 01       	movw	r26, r16
    5c68:	ed 91       	ld	r30, X+
    5c6a:	fc 91       	ld	r31, X
    5c6c:	00 84       	ldd	r0, Z+8	; 0x08
    5c6e:	f1 85       	ldd	r31, Z+9	; 0x09
    5c70:	e0 2d       	mov	r30, r0
    5c72:	c8 01       	movw	r24, r16
    5c74:	09 95       	icall
    5c76:	f7 01       	movw	r30, r14
    5c78:	83 87       	std	Z+11, r24	; 0x0b
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:597
    pload[0] = ch.status();
    5c7a:	d8 01       	movw	r26, r16
    5c7c:	ed 91       	ld	r30, X+
    5c7e:	fc 91       	ld	r31, X
    5c80:	06 a4       	ldd	r0, Z+46	; 0x2e
    5c82:	f7 a5       	ldd	r31, Z+47	; 0x2f
    5c84:	e0 2d       	mov	r30, r0
    5c86:	c8 01       	movw	r24, r16
    5c88:	09 95       	icall
    5c8a:	f7 01       	movw	r30, r14
    5c8c:	84 87       	std	Z+12, r24	; 0x0c
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:598
    pload[1] = ch.flags();
    5c8e:	d8 01       	movw	r26, r16
    5c90:	ed 91       	ld	r30, X+
    5c92:	fc 91       	ld	r31, X
    5c94:	00 a8       	ldd	r0, Z+48	; 0x30
    5c96:	f1 a9       	ldd	r31, Z+49	; 0x31
    5c98:	e0 2d       	mov	r30, r0
    5c9a:	c8 01       	movw	r24, r16
    5c9c:	09 95       	icall
    5c9e:	f7 01       	movw	r30, r14
    5ca0:	85 87       	std	Z+13, r24	; 0x0d
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:599
    pload[2] = rssi;
    5ca2:	86 86       	std	Z+14, r8	; 0x0e
sendAck():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:454
  }

  template <class ChannelType>
  void sendAck (Message& msg,ChannelType& ch) {
    msg.ackStatus().init(ch,radio().rssi());
    ch.patchStatus(msg);
    5ca4:	d8 01       	movw	r26, r16
    5ca6:	ed 91       	ld	r30, X+
    5ca8:	fc 91       	ld	r31, X
    5caa:	02 a8       	ldd	r0, Z+50	; 0x32
    5cac:	f3 a9       	ldd	r31, Z+51	; 0x33
    5cae:	e0 2d       	mov	r30, r0
    5cb0:	b7 01       	movw	r22, r14
    5cb2:	c8 01       	movw	r24, r16
    5cb4:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:456
    kstore.addAuth(msg);
    send(msg,msg.from());
    5cb6:	a5 01       	movw	r20, r10
    5cb8:	b7 01       	movw	r22, r14
    5cba:	c6 01       	movw	r24, r12
    5cbc:	0e 94 1d 28 	call	0x503a	; 0x503a <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:457
    ch.changed(false);
    5cc0:	d8 01       	movw	r26, r16
    5cc2:	ed 91       	ld	r30, X+
    5cc4:	fc 91       	ld	r31, X
    5cc6:	00 88       	ldd	r0, Z+16	; 0x10
    5cc8:	f1 89       	ldd	r31, Z+17	; 0x11
    5cca:	e0 2d       	mov	r30, r0
    5ccc:	60 e0       	ldi	r22, 0x00	; 0
    5cce:	c8 01       	movw	r24, r16
    5cd0:	09 95       	icall
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E8activityEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:203
  BatteryType& battery ()  { return hal->battery; }
  const BatteryType& battery () const { return hal->battery; }
  RadioType& radio () { return hal->radio; }
  BuzzerType& buzzer () { return hal->buzzer; }
  KeyStore& keystore () { return this->kstore; }
  Activity& activity () { return hal->activity; }
    5cd2:	f6 01       	movw	r30, r12
    5cd4:	82 81       	ldd	r24, Z+2	; 0x02
    5cd6:	93 81       	ldd	r25, Z+3	; 0x03
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:495
       else if( answer == REPLAY_NACK ) {
         this->sendNack(msg);
       }
     }
     // we always stay awake after valid communication
     this->activity().stayAwake(millis2ticks(500));
    5cd8:	42 e3       	ldi	r20, 0x32	; 50
    5cda:	50 e0       	ldi	r21, 0x00	; 0
    5cdc:	60 e0       	ldi	r22, 0x00	; 0
    5cde:	70 e0       	ldi	r23, 0x00	; 0
    5ce0:	47 96       	adiw	r24, 0x17	; 23
    5ce2:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <as::Activity::stayAwake(unsigned long)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:496
     return true;
    5ce6:	01 e0       	ldi	r16, 0x01	; 1
    5ce8:	38 cf       	rjmp	.-400    	; 0x5b5a <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x198>
set():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:148

  void init () {  led1.init(LEDPIN1); }
  bool active () const { return led1.active(); }
  void ledOn (uint32_t ticks) { led1.ledOn(ticks); }
  void ledOn (uint32_t ticks,__attribute__((unused)) uint32_t tacks) { led1.ledOn(ticks); }
  void set(Mode stat) { led1.set(stat,single); }
    5cea:	f6 01       	movw	r30, r12
    5cec:	82 81       	ldd	r24, Z+2	; 0x02
    5cee:	93 81       	ldd	r25, Z+3	; 0x03
    5cf0:	61 e0       	ldi	r22, 0x01	; 1
    5cf2:	70 e0       	ldi	r23, 0x00	; 0
    5cf4:	02 96       	adiw	r24, 0x02	; 2
    5cf6:	0e 94 a6 12 	call	0x254c	; 0x254c <as::Led<as::ArduinoPins>::set(as::LedStates::Mode, as::LedStates::BlinkPattern const*) [clone .constprop.39]>
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E8activityEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:203
    5cfa:	d6 01       	movw	r26, r12
    5cfc:	12 96       	adiw	r26, 0x02	; 2
    5cfe:	8d 91       	ld	r24, X+
    5d00:	9c 91       	ld	r25, X
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:249
       uint8_t msubc = msg.subcommand();
       if( mtype == AS_MESSAGE_CONFIG ) {
         // PAIR_SERIAL
         if( msubc == AS_CONFIG_PAIR_SERIAL && this->isDeviceSerial(msg.data())==true ) {
           this->led().set(LedStates::pairing);
           this->activity().stayAwake( seconds2ticks(20) ); // 20 seconds
    5d02:	40 ed       	ldi	r20, 0xD0	; 208
    5d04:	57 e0       	ldi	r21, 0x07	; 7
    5d06:	60 e0       	ldi	r22, 0x00	; 0
    5d08:	70 e0       	ldi	r23, 0x00	; 0
    5d0a:	47 96       	adiw	r24, 0x17	; 23
    5d0c:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <as::Activity::stayAwake(unsigned long)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:250
           this->sendDeviceInfo(msg.from(),msg.length());
    5d10:	f7 01       	movw	r30, r14
    5d12:	40 81       	ld	r20, Z
    5d14:	b7 01       	movw	r22, r14
    5d16:	6c 5f       	subi	r22, 0xFC	; 252
    5d18:	7f 4f       	sbci	r23, 0xFF	; 255
    5d1a:	c6 01       	movw	r24, r12
    5d1c:	0e 94 41 2c 	call	0x5882	; 0x5882 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::sendDeviceInfo(as::HMID const&, unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:229
    return true;
  }

   bool process(Message& msg) {
     uint8_t answer = REPLAY_NO;
     ChannelType* ch = 0;
    5d20:	10 e0       	ldi	r17, 0x00	; 0
    5d22:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:228
#endif
    return true;
  }

   bool process(Message& msg) {
     uint8_t answer = REPLAY_NO;
    5d24:	91 2c       	mov	r9, r1
    5d26:	7a cf       	rjmp	.-268    	; 0x5c1c <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x25a>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:263
               ch = &channel(pm.channel());
               if( pm.peers() == 1 ) {
                 success = ch->peer(pm.peer1());
               }
               else {
                 success = ch->peer(pm.peer1(),pm.peer2());
    5d28:	06 8c       	ldd	r0, Z+30	; 0x1e
    5d2a:	f7 8d       	ldd	r31, Z+31	; 0x1f
    5d2c:	e0 2d       	mov	r30, r0
_ZNK2as16ConfigPeerAddMsg5peer2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:425
class ConfigPeerAddMsg : public ConfigMsg {
protected:
  ConfigPeerAddMsg () {}
public:
  const Peer& peer1 () const { return *((const Peer*)data()); }
  Peer peer2 () const { return Peer(peer1(),*(data()+sizeof(Peer))); }
    5d2e:	d7 01       	movw	r26, r14
    5d30:	50 96       	adiw	r26, 0x10	; 16
    5d32:	8c 91       	ld	r24, X
    5d34:	50 97       	sbiw	r26, 0x10	; 16
_ZN2as4HMIDC2ERKS0_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:31
    id[0]=*ptr;
    id[1]=*(ptr+1);
    id[2]=*(ptr+2);
  }
  HMID (const HMID& other) {
    id[0]=other.id[0];
    5d36:	1c 96       	adiw	r26, 0x0c	; 12
    5d38:	9c 91       	ld	r25, X
    5d3a:	1c 97       	sbiw	r26, 0x0c	; 12
    5d3c:	99 83       	std	Y+1, r25	; 0x01
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:32
    id[1]=other.id[1];
    5d3e:	1d 96       	adiw	r26, 0x0d	; 13
    5d40:	9c 91       	ld	r25, X
    5d42:	1d 97       	sbiw	r26, 0x0d	; 13
    5d44:	9a 83       	std	Y+2, r25	; 0x02
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:33
    id[2]=other.id[2];
    5d46:	1e 96       	adiw	r26, 0x0e	; 14
    5d48:	9c 91       	ld	r25, X
    5d4a:	9b 83       	std	Y+3, r25	; 0x03
_ZN2as4PeerC2ERKNS_4HMIDEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Peer.h:18
  Peer (const HMID& id,uint8_t ch) : HMID(id), chan(ch) {}
    5d4c:	8c 83       	std	Y+4, r24	; 0x04
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:263
    5d4e:	ae 01       	movw	r20, r28
    5d50:	4f 5f       	subi	r20, 0xFF	; 255
    5d52:	5f 4f       	sbci	r21, 0xFF	; 255
    5d54:	c8 01       	movw	r24, r16
    5d56:	09 95       	icall
    5d58:	53 cf       	rjmp	.-346    	; 0x5c00 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x23e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:278
           else {
             answer = REPLAY_NACK;
           }
         }
         // CONFIG_PEER_REMOVE
         else if ( msubc == AS_CONFIG_PEER_REMOVE ) {
    5d5a:	b2 e0       	ldi	r27, 0x02	; 2
    5d5c:	9b 12       	cpse	r9, r27
    5d5e:	4d c0       	rjmp	.+154    	; 0x5dfa <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x438>
hasChannel():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:226
  uint8_t channels () const {
    return numChannels;
  }

  bool hasChannel (uint8_t number) const {
    return number != 0 && number <= channels();
    5d60:	bb 20       	and	r11, r11
    5d62:	09 f4       	brne	.+2      	; 0x5d66 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x3a4>
    5d64:	c0 ce       	rjmp	.-640    	; 0x5ae6 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x124>
    5d66:	f6 01       	movw	r30, r12
    5d68:	85 a5       	ldd	r24, Z+45	; 0x2d
    5d6a:	8b 15       	cp	r24, r11
    5d6c:	08 f4       	brcc	.+2      	; 0x5d70 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x3ae>
    5d6e:	bb ce       	rjmp	.-650    	; 0x5ae6 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x124>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7channelEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:182
    this->led().set(LedStates::pairing);
    this->activity().stayAwake( seconds2ticks(20) ); // 20 seconds
  }

  ChannelType& channel(uint8_t ch) {
    return *devchannels[ch-1];
    5d70:	eb 2d       	mov	r30, r11
    5d72:	f0 e0       	ldi	r31, 0x00	; 0
    5d74:	77 96       	adiw	r30, 0x17	; 23
    5d76:	ee 0f       	add	r30, r30
    5d78:	ff 1f       	adc	r31, r31
    5d7a:	ec 0d       	add	r30, r12
    5d7c:	fd 1d       	adc	r31, r13
    5d7e:	00 81       	ld	r16, Z
    5d80:	11 81       	ldd	r17, Z+1	; 0x01
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:284
           const ConfigPeerRemoveMsg& pm = msg.configPeerRemove();
           bool success = false;
           if( this->hasChannel(pm.channel()) == true ) {
             if( validSignature(pm.channel(),msg) == true ) {
               ch = &channel(pm.channel());
               success = ch->deletepeer(pm.peer1());
    5d82:	d8 01       	movw	r26, r16
    5d84:	ed 91       	ld	r30, X+
    5d86:	fc 91       	ld	r31, X
    5d88:	00 a0       	ldd	r0, Z+32	; 0x20
    5d8a:	f1 a1       	ldd	r31, Z+33	; 0x21
    5d8c:	e0 2d       	mov	r30, r0
    5d8e:	b7 01       	movw	r22, r14
    5d90:	64 5f       	subi	r22, 0xF4	; 244
    5d92:	7f 4f       	sbci	r23, 0xFF	; 255
    5d94:	c8 01       	movw	r24, r16
    5d96:	09 95       	icall
    5d98:	b8 2e       	mov	r11, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:285
               if( pm.peers() == 2 ) {
    5d9a:	c7 01       	movw	r24, r14
    5d9c:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <as::ConfigPeerAddMsg::peers() const>
    5da0:	82 30       	cpi	r24, 0x02	; 2
    5da2:	e1 f4       	brne	.+56     	; 0x5ddc <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x41a>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:286
                 success &= ch->deletepeer(pm.peer2());
    5da4:	d8 01       	movw	r26, r16
    5da6:	ed 91       	ld	r30, X+
    5da8:	fc 91       	ld	r31, X
    5daa:	00 a0       	ldd	r0, Z+32	; 0x20
    5dac:	f1 a1       	ldd	r31, Z+33	; 0x21
    5dae:	e0 2d       	mov	r30, r0
_ZNK2as16ConfigPeerAddMsg5peer2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:425
    5db0:	d7 01       	movw	r26, r14
    5db2:	50 96       	adiw	r26, 0x10	; 16
    5db4:	8c 91       	ld	r24, X
    5db6:	50 97       	sbiw	r26, 0x10	; 16
_ZN2as4HMIDC2ERKS0_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:31
    id[0]=*ptr;
    id[1]=*(ptr+1);
    id[2]=*(ptr+2);
  }
  HMID (const HMID& other) {
    id[0]=other.id[0];
    5db8:	1c 96       	adiw	r26, 0x0c	; 12
    5dba:	9c 91       	ld	r25, X
    5dbc:	1c 97       	sbiw	r26, 0x0c	; 12
    5dbe:	99 83       	std	Y+1, r25	; 0x01
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:32
    id[1]=other.id[1];
    5dc0:	1d 96       	adiw	r26, 0x0d	; 13
    5dc2:	9c 91       	ld	r25, X
    5dc4:	1d 97       	sbiw	r26, 0x0d	; 13
    5dc6:	9a 83       	std	Y+2, r25	; 0x02
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:33
    id[2]=other.id[2];
    5dc8:	1e 96       	adiw	r26, 0x0e	; 14
    5dca:	9c 91       	ld	r25, X
    5dcc:	9b 83       	std	Y+3, r25	; 0x03
_ZN2as4PeerC2ERKNS_4HMIDEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Peer.h:18
    5dce:	8c 83       	std	Y+4, r24	; 0x04
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:286
    5dd0:	be 01       	movw	r22, r28
    5dd2:	6f 5f       	subi	r22, 0xFF	; 255
    5dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    5dd6:	c8 01       	movw	r24, r16
    5dd8:	09 95       	icall
    5dda:	b8 22       	and	r11, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:290
               }
             }
           }
           if( success == true ) {
    5ddc:	bb 20       	and	r11, r11
    5dde:	09 f4       	brne	.+2      	; 0x5de2 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x420>
    5de0:	1d cf       	rjmp	.-454    	; 0x5c1c <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x25a>
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E16hasConfigChangedEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:214
    cfgChanged = false;
    return value;
  }

  void hasConfigChanged(bool c) {
    cfgChanged = c;
    5de2:	81 e0       	ldi	r24, 0x01	; 1
    5de4:	f6 01       	movw	r30, r12
    5de6:	84 a7       	std	Z+44, r24	; 0x2c
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:292
             this->hasConfigChanged(true);
             ch->configChanged();
    5de8:	d8 01       	movw	r26, r16
    5dea:	ed 91       	ld	r30, X+
    5dec:	fc 91       	ld	r31, X
    5dee:	04 a8       	ldd	r0, Z+52	; 0x34
    5df0:	f5 a9       	ldd	r31, Z+53	; 0x35
    5df2:	e0 2d       	mov	r30, r0
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:399
               case AS_ACTION_INHIBIT_ON:
                 ch->inhibit(true);
                 answer = REPLAY_ACK;
                 break;
               case AS_ACTION_STOP_CHANGE:
                 ch->stop();
    5df4:	c8 01       	movw	r24, r16
    5df6:	09 95       	icall
    5df8:	68 c2       	rjmp	.+1232   	; 0x62ca <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x908>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:301
           else {
             answer = REPLAY_NACK;
           }
         }
         // CONFIG_PEER_LIST_REQ
         else if( msubc == AS_CONFIG_PEER_LIST_REQ ) {
    5dfa:	b3 e0       	ldi	r27, 0x03	; 3
    5dfc:	9b 12       	cpse	r9, r27
    5dfe:	85 c0       	rjmp	.+266    	; 0x5f0a <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x548>
hasChannel():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:226
  uint8_t channels () const {
    return numChannels;
  }

  bool hasChannel (uint8_t number) const {
    return number != 0 && number <= channels();
    5e00:	bb 20       	and	r11, r11
    5e02:	09 f4       	brne	.+2      	; 0x5e06 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x444>
    5e04:	ff c0       	rjmp	.+510    	; 0x6004 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x642>
    5e06:	f6 01       	movw	r30, r12
    5e08:	85 a5       	ldd	r24, Z+45	; 0x2d
    5e0a:	8b 15       	cp	r24, r11
    5e0c:	08 f4       	brcc	.+2      	; 0x5e10 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x44e>
    5e0e:	88 cf       	rjmp	.-240    	; 0x5d20 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x35e>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7channelEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:182
    this->led().set(LedStates::pairing);
    this->activity().stayAwake( seconds2ticks(20) ); // 20 seconds
  }

  ChannelType& channel(uint8_t ch) {
    return *devchannels[ch-1];
    5e10:	eb 2d       	mov	r30, r11
    5e12:	f0 e0       	ldi	r31, 0x00	; 0
    5e14:	77 96       	adiw	r30, 0x17	; 23
    5e16:	ee 0f       	add	r30, r30
    5e18:	ff 1f       	adc	r31, r31
    5e1a:	ec 0d       	add	r30, r12
    5e1c:	fd 1d       	adc	r31, r13
    5e1e:	80 80       	ld	r8, Z
    5e20:	91 80       	ldd	r9, Z+1	; 0x01
    5e22:	d7 01       	movw	r26, r14
    5e24:	11 96       	adiw	r26, 0x01	; 1
    5e26:	8c 91       	ld	r24, X
    5e28:	11 97       	sbiw	r26, 0x01	; 1
_ZN2as4HMIDC2ERKS0_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:31
    id[0]=*ptr;
    id[1]=*(ptr+1);
    id[2]=*(ptr+2);
  }
  HMID (const HMID& other) {
    id[0]=other.id[0];
    5e2a:	14 96       	adiw	r26, 0x04	; 4
    5e2c:	9c 91       	ld	r25, X
    5e2e:	14 97       	sbiw	r26, 0x04	; 4
    5e30:	9e 8f       	std	Y+30, r25	; 0x1e
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:32
    id[1]=other.id[1];
    5e32:	15 96       	adiw	r26, 0x05	; 5
    5e34:	9c 91       	ld	r25, X
    5e36:	15 97       	sbiw	r26, 0x05	; 5
    5e38:	9f 8f       	std	Y+31, r25	; 0x1f
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:33
    id[2]=other.id[2];
    5e3a:	16 96       	adiw	r26, 0x06	; 6
    5e3c:	9c 91       	ld	r25, X
    5e3e:	98 a3       	std	Y+32, r25	; 0x20
sendInfoPeerList():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:523
    send(msg,to);
  }

  template <class ChannelType>
  void sendInfoPeerList (HMID to,uint8_t count,const ChannelType& channel) {
    InfoPeerListMsg& pm = msg.infoPeerList();
    5e40:	56 01       	movw	r10, r12
    5e42:	bb e0       	ldi	r27, 0x0B	; 11
    5e44:	ab 0e       	add	r10, r27
    5e46:	b1 1c       	adc	r11, r1
_ZN2as7Message13initWithCountEhhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:149
    *(ptr+3) = d4;
    len += 4;
  }

  void initWithCount(uint8_t length, uint8_t typ, uint8_t flags, uint8_t comm) {
    this->len = length;
    5e48:	9a e1       	ldi	r25, 0x1A	; 26
    5e4a:	f6 01       	movw	r30, r12
    5e4c:	93 87       	std	Z+11, r25	; 0x0b
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:150
    this->typ = typ;
    5e4e:	90 e1       	ldi	r25, 0x10	; 16
    5e50:	96 87       	std	Z+14, r25	; 0x0e
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:151
    this->flag = flags;
    5e52:	90 e2       	ldi	r25, 0x20	; 32
    5e54:	95 87       	std	Z+13, r25	; 0x0d
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:152
    this->comm = comm;
    5e56:	55 8a       	std	Z+21, r5	; 0x15
_ZN2as15InfoPeerListMsg4initEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:688

class InfoPeerListMsg : public Message {
public:
  void init (uint8_t count) {
    initWithCount(0x0b-1+(4*sizeof(Peer)),AS_MESSAGE_INFO,Message::BIDI,AS_INFO_PEER_LIST);
    cnt = count;
    5e58:	84 87       	std	Z+12, r24	; 0x0c
_ZN2as15InfoPeerListMsg4dataEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:690
  }
  uint8_t* data() { return Message::data()-1; }
    5e5a:	26 01       	movw	r4, r12
    5e5c:	f6 e1       	ldi	r31, 0x16	; 22
    5e5e:	4f 0e       	add	r4, r31
    5e60:	51 1c       	adc	r5, r1
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:527
    // setup message for maximal size
    pm.init(count);
    uint8_t  current=0;
    uint8_t* buf=pm.data();
    5e62:	82 01       	movw	r16, r4
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:528
    for( uint8_t i=0; i<channel.peers(); ++i ) {
    5e64:	21 2c       	mov	r2, r1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:526
  template <class ChannelType>
  void sendInfoPeerList (HMID to,uint8_t count,const ChannelType& channel) {
    InfoPeerListMsg& pm = msg.infoPeerList();
    // setup message for maximal size
    pm.init(count);
    uint8_t  current=0;
    5e66:	31 2c       	mov	r3, r1
sendInfoPeerList():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:528
    uint8_t* buf=pm.data();
    for( uint8_t i=0; i<channel.peers(); ++i ) {
    5e68:	d4 01       	movw	r26, r8
    5e6a:	ed 91       	ld	r30, X+
    5e6c:	fc 91       	ld	r31, X
    5e6e:	04 84       	ldd	r0, Z+12	; 0x0c
    5e70:	f5 85       	ldd	r31, Z+13	; 0x0d
    5e72:	e0 2d       	mov	r30, r0
    5e74:	c4 01       	movw	r24, r8
    5e76:	09 95       	icall
    5e78:	28 16       	cp	r2, r24
    5e7a:	60 f5       	brcc	.+88     	; 0x5ed4 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x512>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:529
      Peer p = channel.peerat(i);
    5e7c:	d4 01       	movw	r26, r8
    5e7e:	ed 91       	ld	r30, X+
    5e80:	fc 91       	ld	r31, X
    5e82:	02 8c       	ldd	r0, Z+26	; 0x1a
    5e84:	f3 8d       	ldd	r31, Z+27	; 0x1b
    5e86:	e0 2d       	mov	r30, r0
    5e88:	42 2d       	mov	r20, r2
    5e8a:	b4 01       	movw	r22, r8
    5e8c:	ce 01       	movw	r24, r28
    5e8e:	01 96       	adiw	r24, 0x01	; 1
    5e90:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:530
      if( p.valid() == true ) {
    5e92:	ce 01       	movw	r24, r28
    5e94:	01 96       	adiw	r24, 0x01	; 1
    5e96:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <as::HMID::valid() const>
    5e9a:	88 23       	and	r24, r24
    5e9c:	c9 f0       	breq	.+50     	; 0x5ed0 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x50e>
    5e9e:	33 94       	inc	r3
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:531
        memcpy(buf,&p,sizeof(Peer));
    5ea0:	84 e0       	ldi	r24, 0x04	; 4
    5ea2:	fe 01       	movw	r30, r28
    5ea4:	31 96       	adiw	r30, 0x01	; 1
    5ea6:	d8 01       	movw	r26, r16
    5ea8:	01 90       	ld	r0, Z+
    5eaa:	0d 92       	st	X+, r0
    5eac:	8a 95       	dec	r24
    5eae:	e1 f7       	brne	.-8      	; 0x5ea8 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x4e6>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:532
        buf+=sizeof(Peer);
    5eb0:	0c 5f       	subi	r16, 0xFC	; 252
    5eb2:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:534
        current++;
        if( current == 4 ) {
    5eb4:	b4 e0       	ldi	r27, 0x04	; 4
    5eb6:	3b 12       	cpse	r3, r27
    5eb8:	0b c0       	rjmp	.+22     	; 0x5ed0 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x50e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:538
          // reset to zero
          current=0;
          buf=pm.data();
          if( send(msg,to) == false ) {
    5eba:	ae 01       	movw	r20, r28
    5ebc:	42 5e       	subi	r20, 0xE2	; 226
    5ebe:	5f 4f       	sbci	r21, 0xFF	; 255
    5ec0:	b5 01       	movw	r22, r10
    5ec2:	c6 01       	movw	r24, r12
    5ec4:	0e 94 1d 28 	call	0x503a	; 0x503a <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:537
        buf+=sizeof(Peer);
        current++;
        if( current == 4 ) {
          // reset to zero
          current=0;
          buf=pm.data();
    5ec8:	82 01       	movw	r16, r4
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:536
        memcpy(buf,&p,sizeof(Peer));
        buf+=sizeof(Peer);
        current++;
        if( current == 4 ) {
          // reset to zero
          current=0;
    5eca:	31 2c       	mov	r3, r1
sendInfoPeerList():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:538
          buf=pm.data();
          if( send(msg,to) == false ) {
    5ecc:	88 23       	and	r24, r24
    5ece:	11 f0       	breq	.+4      	; 0x5ed4 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x512>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:528
    InfoPeerListMsg& pm = msg.infoPeerList();
    // setup message for maximal size
    pm.init(count);
    uint8_t  current=0;
    uint8_t* buf=pm.data();
    for( uint8_t i=0; i<channel.peers(); ++i ) {
    5ed0:	23 94       	inc	r2
    5ed2:	ca cf       	rjmp	.-108    	; 0x5e68 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x4a6>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:545
            break;
          }
        }
      }
    }
    memset(buf,0,sizeof(Peer));
    5ed4:	84 e0       	ldi	r24, 0x04	; 4
    5ed6:	f8 01       	movw	r30, r16
    5ed8:	11 92       	st	Z+, r1
    5eda:	8a 95       	dec	r24
    5edc:	e9 f7       	brne	.-6      	; 0x5ed8 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x516>
_ZN2as15InfoPeerListMsg7entriesEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:691
  void entries (uint8_t num) { length(0x0b-1+(num*sizeof(Peer))); };
    5ede:	83 2d       	mov	r24, r3
    5ee0:	88 0f       	add	r24, r24
    5ee2:	88 0f       	add	r24, r24
    5ee4:	82 5f       	subi	r24, 0xF2	; 242
_ZN2as7Message6lengthEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:162
    this->cnt = cnt;
    this->subcom = sub;
  }

  void length (uint8_t l) {
    len = l;
    5ee6:	d6 01       	movw	r26, r12
    5ee8:	1b 96       	adiw	r26, 0x0b	; 11
    5eea:	8c 93       	st	X, r24
    5eec:	1b 97       	sbiw	r26, 0x0b	; 11
_ZN2as7Message8clearAckEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:300
  void setAck () {
    flag |= BIDI;
  }

  void clearAck () {
    flag &= ~BIDI;
    5eee:	1d 96       	adiw	r26, 0x0d	; 13
    5ef0:	8c 91       	ld	r24, X
    5ef2:	1d 97       	sbiw	r26, 0x0d	; 13
    5ef4:	8f 7d       	andi	r24, 0xDF	; 223
    5ef6:	1d 96       	adiw	r26, 0x0d	; 13
    5ef8:	8c 93       	st	X, r24
sendInfoPeerList():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:549
    current++;
    pm.entries(current);
    pm.clearAck();
    send(msg,to);
    5efa:	ae 01       	movw	r20, r28
    5efc:	42 5e       	subi	r20, 0xE2	; 226
    5efe:	5f 4f       	sbci	r21, 0xFF	; 255
    5f00:	b5 01       	movw	r22, r10
    5f02:	c6 01       	movw	r24, r12
    5f04:	0e 94 1d 28 	call	0x503a	; 0x503a <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)>
    5f08:	0b cf       	rjmp	.-490    	; 0x5d20 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x35e>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:308
           if( this->hasChannel(pm.channel()) == true ) {
             this->sendInfoPeerList(msg.from(),msg.count(),channel(pm.channel()));
           }
         }
         // CONFIG_PARAM_REQ
         else if (msubc == AS_CONFIG_PARAM_REQ ) {
    5f0a:	b4 e0       	ldi	r27, 0x04	; 4
    5f0c:	9b 12       	cpse	r9, r27
    5f0e:	7c c0       	rjmp	.+248    	; 0x6008 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x646>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:310
           const ConfigParamReqMsg& pm = msg.configParamReq();
           GenericList gl = findList(pm.channel(),pm.peer(),pm.list());
    5f10:	f7 01       	movw	r30, r14
    5f12:	20 89       	ldd	r18, Z+16	; 0x10
    5f14:	a7 01       	movw	r20, r14
    5f16:	44 5f       	subi	r20, 0xF4	; 244
    5f18:	5f 4f       	sbci	r21, 0xFF	; 255
    5f1a:	6b 2d       	mov	r22, r11
    5f1c:	c6 01       	movw	r24, r12
    5f1e:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::findList(unsigned char, as::Peer const&, unsigned char)>
    5f22:	29 83       	std	Y+1, r18	; 0x01
    5f24:	3a 83       	std	Y+2, r19	; 0x02
    5f26:	4b 83       	std	Y+3, r20	; 0x03
    5f28:	5c 83       	std	Y+4, r21	; 0x04
    5f2a:	6d 83       	std	Y+5, r22	; 0x05
    5f2c:	7e 83       	std	Y+6, r23	; 0x06
    5f2e:	8f 83       	std	Y+7, r24	; 0x07
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:311
           if( gl.valid() == true ) {
    5f30:	89 81       	ldd	r24, Y+1	; 0x01
    5f32:	9a 81       	ldd	r25, Y+2	; 0x02
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:315
             this->sendInfoParamResponsePairs(msg.from(),msg.count(),gl);
           }
           else {
             answer = REPLAY_NACK;
    5f34:	e2 e0       	ldi	r30, 0x02	; 2
    5f36:	9e 2e       	mov	r9, r30
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:311
         }
         // CONFIG_PARAM_REQ
         else if (msubc == AS_CONFIG_PARAM_REQ ) {
           const ConfigParamReqMsg& pm = msg.configParamReq();
           GenericList gl = findList(pm.channel(),pm.peer(),pm.list());
           if( gl.valid() == true ) {
    5f38:	89 2b       	or	r24, r25
    5f3a:	09 f4       	brne	.+2      	; 0x5f3e <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x57c>
    5f3c:	a4 c0       	rjmp	.+328    	; 0x6086 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x6c4>
    5f3e:	d7 01       	movw	r26, r14
    5f40:	11 96       	adiw	r26, 0x01	; 1
    5f42:	8c 91       	ld	r24, X
    5f44:	11 97       	sbiw	r26, 0x01	; 1
_ZN2as4HMIDC2ERKS0_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:31
    id[0]=*ptr;
    id[1]=*(ptr+1);
    id[2]=*(ptr+2);
  }
  HMID (const HMID& other) {
    id[0]=other.id[0];
    5f46:	14 96       	adiw	r26, 0x04	; 4
    5f48:	9c 91       	ld	r25, X
    5f4a:	14 97       	sbiw	r26, 0x04	; 4
    5f4c:	9e 8f       	std	Y+30, r25	; 0x1e
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:32
    id[1]=other.id[1];
    5f4e:	15 96       	adiw	r26, 0x05	; 5
    5f50:	9c 91       	ld	r25, X
    5f52:	15 97       	sbiw	r26, 0x05	; 5
    5f54:	9f 8f       	std	Y+31, r25	; 0x1f
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:33
    id[2]=other.id[2];
    5f56:	16 96       	adiw	r26, 0x06	; 6
    5f58:	9c 91       	ld	r25, X
    5f5a:	98 a3       	std	Y+32, r25	; 0x20
sendInfoParamResponsePairs():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:494
    send(msg,to);
    ch.changed(false);
  }

  void sendInfoParamResponsePairs(HMID to,uint8_t count,const GenericList& list) {
    InfoParamResponsePairsMsg& pm = msg.infoParamResponsePairs();
    5f5c:	46 01       	movw	r8, r12
    5f5e:	bb e0       	ldi	r27, 0x0B	; 11
    5f60:	8b 0e       	add	r8, r27
    5f62:	91 1c       	adc	r9, r1
_ZN2as7Message13initWithCountEhhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:149
    *(ptr+3) = d4;
    len += 4;
  }

  void initWithCount(uint8_t length, uint8_t typ, uint8_t flags, uint8_t comm) {
    this->len = length;
    5f64:	9a e1       	ldi	r25, 0x1A	; 26
    5f66:	f6 01       	movw	r30, r12
    5f68:	93 87       	std	Z+11, r25	; 0x0b
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:150
    this->typ = typ;
    5f6a:	90 e1       	ldi	r25, 0x10	; 16
    5f6c:	96 87       	std	Z+14, r25	; 0x0e
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:151
    this->flag = flags;
    5f6e:	90 e2       	ldi	r25, 0x20	; 32
    5f70:	95 87       	std	Z+13, r25	; 0x0d
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:152
    this->comm = comm;
    5f72:	92 e0       	ldi	r25, 0x02	; 2
    5f74:	95 8b       	std	Z+21, r25	; 0x15
_ZN2as25InfoParamResponsePairsMsg4initEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:678

class InfoParamResponsePairsMsg : public Message {
public:
  void init (uint8_t count) {
    initWithCount(0x0b-1+(8*2),AS_MESSAGE_INFO,BIDI,AS_INFO_PARAM_RESPONSE_PAIRS);
    cnt = count;
    5f76:	84 87       	std	Z+12, r24	; 0x0c
_ZN2as25InfoParamResponsePairsMsg4dataEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:680
  }
  uint8_t* data() { return Message::data()-1; }
    5f78:	26 01       	movw	r4, r12
    5f7a:	f6 e1       	ldi	r31, 0x16	; 22
    5f7c:	4f 0e       	add	r4, r31
    5f7e:	51 1c       	adc	r5, r1
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:498
    // setup message for maximal size
    pm.init(count);
    uint8_t  current=0;
    uint8_t* buf=pm.data();
    5f80:	82 01       	movw	r16, r4
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:499
    for( int i=0; i<list.getSize(); ++i ) {
    5f82:	b1 2c       	mov	r11, r1
    5f84:	a1 2c       	mov	r10, r1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:497

  void sendInfoParamResponsePairs(HMID to,uint8_t count,const GenericList& list) {
    InfoParamResponsePairsMsg& pm = msg.infoParamResponsePairs();
    // setup message for maximal size
    pm.init(count);
    uint8_t  current=0;
    5f86:	31 2c       	mov	r3, r1
sendInfoParamResponsePairs():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:499
    uint8_t* buf=pm.data();
    for( int i=0; i<list.getSize(); ++i ) {
    5f88:	8b 81       	ldd	r24, Y+3	; 0x03
    5f8a:	8a 15       	cp	r24, r10
    5f8c:	1b 04       	cpc	r1, r11
    5f8e:	39 f1       	breq	.+78     	; 0x5fde <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x61c>
    5f90:	34 f1       	brlt	.+76     	; 0x5fde <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x61c>
_ZNK2as11GenericList9getOffsetEh.isra.54():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:81
public:
  GenericList () : BaseList(0), size(0), getregister(0), getoffset(0) {}
  GenericList (uint16_t a,uint8_t s,uint8_t (*getreg) (uint8_t off), uint8_t (*getoff) (uint8_t reg)) : BaseList(a), size(s), getregister(getreg), getoffset(getoff) {}

  uint8_t getOffset (uint8_t reg) const {
    return getoffset(reg);
    5f92:	ec 81       	ldd	r30, Y+4	; 0x04
    5f94:	fd 81       	ldd	r31, Y+5	; 0x05
    5f96:	8a 2d       	mov	r24, r10
    5f98:	09 95       	icall
sendInfoParamResponsePairs():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:500
      *buf++ = list.getRegister(i);
    5f9a:	d8 01       	movw	r26, r16
    5f9c:	8c 93       	st	X, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:501
      *buf++ = list.getByte(i);
    5f9e:	6a 2d       	mov	r22, r10
    5fa0:	ce 01       	movw	r24, r28
    5fa2:	01 96       	adiw	r24, 0x01	; 1
    5fa4:	0e 94 01 15 	call	0x2a02	; 0x2a02 <as::BaseList::getByte(unsigned char) const>
    5fa8:	98 01       	movw	r18, r16
    5faa:	2e 5f       	subi	r18, 0xFE	; 254
    5fac:	3f 4f       	sbci	r19, 0xFF	; 255
    5fae:	f8 01       	movw	r30, r16
    5fb0:	81 83       	std	Z+1, r24	; 0x01
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:502
      current++;
    5fb2:	33 94       	inc	r3
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:503
      if( current == 8 ) {
    5fb4:	f8 e0       	ldi	r31, 0x08	; 8
    5fb6:	3f 12       	cpse	r3, r31
    5fb8:	0b c0       	rjmp	.+22     	; 0x5fd0 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x60e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:507
        // reset to zero
        current=0;
        buf=pm.data();
        if( send(msg,to) == false ) {
    5fba:	ae 01       	movw	r20, r28
    5fbc:	42 5e       	subi	r20, 0xE2	; 226
    5fbe:	5f 4f       	sbci	r21, 0xFF	; 255
    5fc0:	b4 01       	movw	r22, r8
    5fc2:	c6 01       	movw	r24, r12
    5fc4:	0e 94 1d 28 	call	0x503a	; 0x503a <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)>
    5fc8:	88 23       	and	r24, r24
    5fca:	39 f0       	breq	.+14     	; 0x5fda <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x618>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:506
      *buf++ = list.getByte(i);
      current++;
      if( current == 8 ) {
        // reset to zero
        current=0;
        buf=pm.data();
    5fcc:	92 01       	movw	r18, r4
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:505
      *buf++ = list.getRegister(i);
      *buf++ = list.getByte(i);
      current++;
      if( current == 8 ) {
        // reset to zero
        current=0;
    5fce:	31 2c       	mov	r3, r1
sendInfoParamResponsePairs():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:499
    InfoParamResponsePairsMsg& pm = msg.infoParamResponsePairs();
    // setup message for maximal size
    pm.init(count);
    uint8_t  current=0;
    uint8_t* buf=pm.data();
    for( int i=0; i<list.getSize(); ++i ) {
    5fd0:	8f ef       	ldi	r24, 0xFF	; 255
    5fd2:	a8 1a       	sub	r10, r24
    5fd4:	b8 0a       	sbc	r11, r24
    5fd6:	89 01       	movw	r16, r18
    5fd8:	d7 cf       	rjmp	.-82     	; 0x5f88 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x5c6>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:506
      *buf++ = list.getByte(i);
      current++;
      if( current == 8 ) {
        // reset to zero
        current=0;
        buf=pm.data();
    5fda:	82 01       	movw	r16, r4
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:505
      *buf++ = list.getRegister(i);
      *buf++ = list.getByte(i);
      current++;
      if( current == 8 ) {
        // reset to zero
        current=0;
    5fdc:	31 2c       	mov	r3, r1
sendInfoParamResponsePairs():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:513
          // exit loop in case of error
          break;
        }
      }
    }
    *buf++ = 0;
    5fde:	d8 01       	movw	r26, r16
    5fe0:	1c 92       	st	X, r1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:514
    *buf++ = 0;
    5fe2:	11 96       	adiw	r26, 0x01	; 1
    5fe4:	1c 92       	st	X, r1
_ZN2as25InfoParamResponsePairsMsg7entriesEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:681
  void entries (uint8_t num) { length(0x0b-1+(num*2)); };
    5fe6:	b6 e0       	ldi	r27, 0x06	; 6
    5fe8:	3b 0e       	add	r3, r27
    5fea:	33 0c       	add	r3, r3
_ZN2as7Message6lengthEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:162
    this->cnt = cnt;
    this->subcom = sub;
  }

  void length (uint8_t l) {
    len = l;
    5fec:	f6 01       	movw	r30, r12
    5fee:	33 86       	std	Z+11, r3	; 0x0b
_ZN2as7Message8clearAckEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:300
  void setAck () {
    flag |= BIDI;
  }

  void clearAck () {
    flag &= ~BIDI;
    5ff0:	85 85       	ldd	r24, Z+13	; 0x0d
    5ff2:	8f 7d       	andi	r24, 0xDF	; 223
    5ff4:	85 87       	std	Z+13, r24	; 0x0d
sendInfoParamResponsePairs():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:518
    current++;
    pm.entries(current);
    pm.clearAck();
    send(msg,to);
    5ff6:	ae 01       	movw	r20, r28
    5ff8:	42 5e       	subi	r20, 0xE2	; 226
    5ffa:	5f 4f       	sbci	r21, 0xFF	; 255
    5ffc:	b4 01       	movw	r22, r8
    5ffe:	c6 01       	movw	r24, r12
    6000:	0e 94 1d 28 	call	0x503a	; 0x503a <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:228
#endif
    return true;
  }

   bool process(Message& msg) {
     uint8_t answer = REPLAY_NO;
    6004:	91 2c       	mov	r9, r1
    6006:	3f c0       	rjmp	.+126    	; 0x6086 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x6c4>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:319
           else {
             answer = REPLAY_NACK;
           }
         }
         // CONFIG_STATUS_REQUEST
         else if (msubc == AS_CONFIG_STATUS_REQUEST ) {
    6008:	fe e0       	ldi	r31, 0x0E	; 14
    600a:	9f 12       	cpse	r9, r31
    600c:	14 c0       	rjmp	.+40     	; 0x6036 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x674>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7channelEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:182
    this->led().set(LedStates::pairing);
    this->activity().stayAwake( seconds2ticks(20) ); // 20 seconds
  }

  ChannelType& channel(uint8_t ch) {
    return *devchannels[ch-1];
    600e:	eb 2d       	mov	r30, r11
    6010:	f0 e0       	ldi	r31, 0x00	; 0
    6012:	77 96       	adiw	r30, 0x17	; 23
    6014:	ee 0f       	add	r30, r30
    6016:	ff 1f       	adc	r31, r31
    6018:	ec 0d       	add	r30, r12
    601a:	fd 1d       	adc	r31, r13
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:321
           }
         }
         // CONFIG_STATUS_REQUEST
         else if (msubc == AS_CONFIG_STATUS_REQUEST ) {
           // this is an answer to a request - so we need no ack
           this->sendInfoActuatorStatus(msg.from(),msg.count(),channel(msg.command()),false);
    601c:	20 81       	ld	r18, Z
    601e:	31 81       	ldd	r19, Z+1	; 0x01
    6020:	00 e0       	ldi	r16, 0x00	; 0
    6022:	d7 01       	movw	r26, r14
    6024:	11 96       	adiw	r26, 0x01	; 1
    6026:	4c 91       	ld	r20, X
    6028:	b7 01       	movw	r22, r14
    602a:	6c 5f       	subi	r22, 0xFC	; 252
    602c:	7f 4f       	sbci	r23, 0xFF	; 255
    602e:	c6 01       	movw	r24, r12
    6030:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <void as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::sendInfoActuatorStatus<as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0> >(as::HMID const&, unsigned char, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>&, bool)>
    6034:	75 ce       	rjmp	.-790    	; 0x5d20 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x35e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:324
         }
         // CONFIG_START
         else if( msubc == AS_CONFIG_START ) {
    6036:	b5 e0       	ldi	r27, 0x05	; 5
    6038:	9b 12       	cpse	r9, r27
    603a:	28 c0       	rjmp	.+80     	; 0x608c <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x6ca>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:327
           const ConfigStartMsg& pm = msg.configStart();
           if( validSignature(pm.channel(),msg) == true ) {
             cfgChannel = pm.channel();
    603c:	f6 01       	movw	r30, r12
    603e:	e0 5c       	subi	r30, 0xC0	; 192
    6040:	ff 4f       	sbci	r31, 0xFF	; 255
    6042:	b0 82       	st	Z, r11
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:328
             cfgList = findList(cfgChannel,pm.peer(),pm.list());
    6044:	86 01       	movw	r16, r12
    6046:	0f 5b       	subi	r16, 0xBF	; 191
    6048:	1f 4f       	sbci	r17, 0xFF	; 255
    604a:	f7 01       	movw	r30, r14
    604c:	20 89       	ldd	r18, Z+16	; 0x10
    604e:	a7 01       	movw	r20, r14
    6050:	44 5f       	subi	r20, 0xF4	; 244
    6052:	5f 4f       	sbci	r21, 0xFF	; 255
    6054:	6b 2d       	mov	r22, r11
    6056:	c6 01       	movw	r24, r12
    6058:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::findList(unsigned char, as::Peer const&, unsigned char)>
    605c:	d8 01       	movw	r26, r16
    605e:	2c 93       	st	X, r18
    6060:	11 96       	adiw	r26, 0x01	; 1
    6062:	3c 93       	st	X, r19
    6064:	11 97       	sbiw	r26, 0x01	; 1
    6066:	12 96       	adiw	r26, 0x02	; 2
    6068:	4c 93       	st	X, r20
    606a:	12 97       	sbiw	r26, 0x02	; 2
    606c:	13 96       	adiw	r26, 0x03	; 3
    606e:	5c 93       	st	X, r21
    6070:	13 97       	sbiw	r26, 0x03	; 3
    6072:	14 96       	adiw	r26, 0x04	; 4
    6074:	6c 93       	st	X, r22
    6076:	14 97       	sbiw	r26, 0x04	; 4
    6078:	15 96       	adiw	r26, 0x05	; 5
    607a:	7c 93       	st	X, r23
    607c:	15 97       	sbiw	r26, 0x05	; 5
    607e:	16 96       	adiw	r26, 0x06	; 6
    6080:	8c 93       	st	X, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:330
             // TODO setup alarm to disable after 2000ms
             answer = REPLAY_ACK;
    6082:	99 24       	eor	r9, r9
    6084:	93 94       	inc	r9
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:460
           }
         }
         if( processed > 1 ) {
           // we had more than one channel processed
           // clear channel, so we only send an ACK
           ch = 0;
    6086:	10 e0       	ldi	r17, 0x00	; 0
    6088:	00 e0       	ldi	r16, 0x00	; 0
    608a:	c8 cd       	rjmp	.-1136   	; 0x5c1c <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x25a>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:337
           else {
             answer = REPLAY_NACK;
           }
         }
         // CONFIG_END
         else if( msubc == AS_CONFIG_END ) {
    608c:	b6 e0       	ldi	r27, 0x06	; 6
    608e:	9b 12       	cpse	r9, r27
    6090:	46 c0       	rjmp	.+140    	; 0x611e <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x75c>
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E16hasConfigChangedEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:214
    cfgChanged = false;
    return value;
  }

  void hasConfigChanged(bool c) {
    cfgChanged = c;
    6092:	f6 01       	movw	r30, r12
    6094:	54 a6       	std	Z+44, r5	; 0x2c
_ZNK2as8BaseList7addressEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:20
  uint16_t  addr;

public:
  BaseList (uint16_t a) : addr(a) {}

  uint16_t address () const { return addr; }
    6096:	ef 5b       	subi	r30, 0xBF	; 191
    6098:	ff 4f       	sbci	r31, 0xFF	; 255
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:339
           this->hasConfigChanged(true);
           if( cfgList.address() == list0.address() ) {
    609a:	20 81       	ld	r18, Z
    609c:	31 81       	ldd	r19, Z+1	; 0x01
    609e:	d6 01       	movw	r26, r12
    60a0:	9e 96       	adiw	r26, 0x2e	; 46
    60a2:	8d 91       	ld	r24, X+
    60a4:	9c 91       	ld	r25, X
    60a6:	9f 97       	sbiw	r26, 0x2f	; 47
    60a8:	86 01       	movw	r16, r12
    60aa:	00 5c       	subi	r16, 0xC0	; 192
    60ac:	1f 4f       	sbci	r17, 0xFF	; 255
    60ae:	28 17       	cp	r18, r24
    60b0:	39 07       	cpc	r19, r25
    60b2:	21 f5       	brne	.+72     	; 0x60fc <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x73a>
set():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:148
    60b4:	12 96       	adiw	r26, 0x02	; 2
    60b6:	8d 91       	ld	r24, X+
    60b8:	9c 91       	ld	r25, X
    60ba:	70 e0       	ldi	r23, 0x00	; 0
    60bc:	60 e0       	ldi	r22, 0x00	; 0
    60be:	02 96       	adiw	r24, 0x02	; 2
    60c0:	0e 94 a6 12 	call	0x254c	; 0x254c <as::Led<as::ArduinoPins>::set(as::LedStates::Mode, as::LedStates::BlinkPattern const*) [clone .constprop.39]>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:341
             this->led().set(LedStates::nothing);
             this->configChanged();
    60c4:	d6 01       	movw	r26, r12
    60c6:	ed 91       	ld	r30, X+
    60c8:	fc 91       	ld	r31, X
    60ca:	04 80       	ldd	r0, Z+4	; 0x04
    60cc:	f5 81       	ldd	r31, Z+5	; 0x05
    60ce:	e0 2d       	mov	r30, r0
    60d0:	c6 01       	movw	r24, r12
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:345
           }
           else {
             // signal list update to channel
             channel(cfgChannel).configChanged();
    60d2:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:347
           }
           cfgChannel = 0xff;
    60d4:	8f ef       	ldi	r24, 0xFF	; 255
    60d6:	f8 01       	movw	r30, r16
    60d8:	80 83       	st	Z, r24
_ZN2as7Message13initWithCountEhhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:149
    *(ptr+3) = d4;
    len += 4;
  }

  void initWithCount(uint8_t length, uint8_t typ, uint8_t flags, uint8_t comm) {
    this->len = length;
    60da:	8a e0       	ldi	r24, 0x0A	; 10
    60dc:	d7 01       	movw	r26, r14
    60de:	8c 93       	st	X, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:150
    this->typ = typ;
    60e0:	82 e0       	ldi	r24, 0x02	; 2
    60e2:	13 96       	adiw	r26, 0x03	; 3
    60e4:	8c 93       	st	X, r24
    60e6:	13 97       	sbiw	r26, 0x03	; 3
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:151
    this->flag = flags;
    60e8:	12 96       	adiw	r26, 0x02	; 2
    60ea:	8c 93       	st	X, r24
    60ec:	12 97       	sbiw	r26, 0x02	; 2
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:152
    this->comm = comm;
    60ee:	1a 96       	adiw	r26, 0x0a	; 10
    60f0:	1c 92       	st	X, r1
_ZN2as7Message4fromEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:186
  const HMID& from () const {
    return fromID;
  }

  HMID& from () {
    return fromID;
    60f2:	a7 01       	movw	r20, r14
    60f4:	4c 5f       	subi	r20, 0xFC	; 252
    60f6:	5f 4f       	sbci	r21, 0xFF	; 255
sendAck():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:437


  void sendAck (Message& msg,uint8_t flag=0x00) {
    msg.ack().init(flag);
    kstore.addAuth(msg);
    send(msg,msg.from());
    60f8:	b7 01       	movw	r22, r14
    60fa:	03 cf       	rjmp	.-506    	; 0x5f02 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x540>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7channelEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:182
    this->led().set(LedStates::pairing);
    this->activity().stayAwake( seconds2ticks(20) ); // 20 seconds
  }

  ChannelType& channel(uint8_t ch) {
    return *devchannels[ch-1];
    60fc:	d8 01       	movw	r26, r16
    60fe:	ec 91       	ld	r30, X
    6100:	f0 e0       	ldi	r31, 0x00	; 0
    6102:	77 96       	adiw	r30, 0x17	; 23
    6104:	ee 0f       	add	r30, r30
    6106:	ff 1f       	adc	r31, r31
    6108:	ec 0d       	add	r30, r12
    610a:	fd 1d       	adc	r31, r13
    610c:	80 81       	ld	r24, Z
    610e:	91 81       	ldd	r25, Z+1	; 0x01
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:345
             this->led().set(LedStates::nothing);
             this->configChanged();
           }
           else {
             // signal list update to channel
             channel(cfgChannel).configChanged();
    6110:	dc 01       	movw	r26, r24
    6112:	ed 91       	ld	r30, X+
    6114:	fc 91       	ld	r31, X
    6116:	04 a8       	ldd	r0, Z+52	; 0x34
    6118:	f5 a9       	ldd	r31, Z+53	; 0x35
    611a:	e0 2d       	mov	r30, r0
    611c:	da cf       	rjmp	.-76     	; 0x60d2 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x710>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:352
           cfgChannel = 0xff;
           storage().store();
           // TODO cancel alarm
           this->sendAck(msg,Message::WKMEUP);
         }
         else if( msubc == AS_CONFIG_WRITE_INDEX ) {
    611e:	b8 e0       	ldi	r27, 0x08	; 8
    6120:	9b 12       	cpse	r9, r27
    6122:	3e c0       	rjmp	.+124    	; 0x61a0 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x7de>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:355
           const ConfigWriteIndexMsg& pm = msg.configWriteIndex();
           if( validSignature(pm.channel(),msg)==true ) {
             if( cfgChannel == pm.channel() && cfgList.valid() == true ) {
    6124:	f6 01       	movw	r30, r12
    6126:	e0 5c       	subi	r30, 0xC0	; 192
    6128:	ff 4f       	sbci	r31, 0xFF	; 255
    612a:	80 81       	ld	r24, Z
    612c:	8b 15       	cp	r24, r11
    612e:	19 f0       	breq	.+6      	; 0x6136 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x774>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:229
    return true;
  }

   bool process(Message& msg) {
     uint8_t answer = REPLAY_NO;
     ChannelType* ch = 0;
    6130:	10 e0       	ldi	r17, 0x00	; 0
    6132:	00 e0       	ldi	r16, 0x00	; 0
    6134:	ca c0       	rjmp	.+404    	; 0x62ca <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x908>
_ZNK2as8BaseList5validEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:22

  bool valid () const { return addr != 0; }
    6136:	46 01       	movw	r8, r12
    6138:	e1 e4       	ldi	r30, 0x41	; 65
    613a:	8e 0e       	add	r8, r30
    613c:	91 1c       	adc	r9, r1
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:355
           this->sendAck(msg,Message::WKMEUP);
         }
         else if( msubc == AS_CONFIG_WRITE_INDEX ) {
           const ConfigWriteIndexMsg& pm = msg.configWriteIndex();
           if( validSignature(pm.channel(),msg)==true ) {
             if( cfgChannel == pm.channel() && cfgList.valid() == true ) {
    613e:	d4 01       	movw	r26, r8
    6140:	8d 91       	ld	r24, X+
    6142:	9c 91       	ld	r25, X
    6144:	89 2b       	or	r24, r25
    6146:	a1 f3       	breq	.-24     	; 0x6130 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x76e>
_ZNK2as7Message8datasizeEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:106
  const uint8_t* data () const {
    return pload;
  }

	uint8_t datasize () const {
	  return len >= 11 ? len - 11 : 0;
    6148:	f7 01       	movw	r30, r14
    614a:	80 81       	ld	r24, Z
    614c:	8b 30       	cpi	r24, 0x0B	; 11
    614e:	08 f4       	brcc	.+2      	; 0x6152 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x790>
    6150:	8b e0       	ldi	r24, 0x0B	; 11
    6152:	55 ef       	ldi	r21, 0xF5	; 245
    6154:	35 2e       	mov	r3, r21
    6156:	38 0e       	add	r3, r24
_ZNK2as7Message4dataEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:102
	uint8_t* data () {
	  return pload;
	}

  const uint8_t* data () const {
    return pload;
    6158:	57 01       	movw	r10, r14
    615a:	fc e0       	ldi	r31, 0x0C	; 12
    615c:	af 0e       	add	r10, r31
    615e:	b1 1c       	adc	r11, r1
    6160:	85 01       	movw	r16, r10
_ZNK2as11GenericList9getOffsetEh.isra.54():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:81
public:
  GenericList () : BaseList(0), size(0), getregister(0), getoffset(0) {}
  GenericList (uint16_t a,uint8_t s,uint8_t (*getreg) (uint8_t off), uint8_t (*getoff) (uint8_t reg)) : BaseList(a), size(s), getregister(getreg), getoffset(getoff) {}

  uint8_t getOffset (uint8_t reg) const {
    return getoffset(reg);
    6162:	26 01       	movw	r4, r12
    6164:	86 e4       	ldi	r24, 0x46	; 70
    6166:	48 0e       	add	r4, r24
    6168:	51 1c       	adc	r5, r1
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E9writeListERKNS_11GenericListEPKhh.isra.163():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:649
    send(msg,HMID::broadcast);
    hal->sendPeer();
  }

  void writeList (const GenericList& list,const uint8_t* data,uint8_t length) {
    for( uint8_t i=0; i<length; i+=2, data+=2 ) {
    616a:	80 2f       	mov	r24, r16
    616c:	8a 19       	sub	r24, r10
    616e:	83 15       	cp	r24, r3
    6170:	f8 f6       	brcc	.-66     	; 0x6130 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x76e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:650
      list.writeRegister(*data,*(data+1));
    6172:	d8 01       	movw	r26, r16
    6174:	11 96       	adiw	r26, 0x01	; 1
    6176:	2c 90       	ld	r2, X
_ZNK2as11GenericList9getOffsetEh.isra.54():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:81
    6178:	d2 01       	movw	r26, r4
    617a:	ed 91       	ld	r30, X+
    617c:	fc 91       	ld	r31, X
    617e:	d8 01       	movw	r26, r16
    6180:	8c 91       	ld	r24, X
    6182:	09 95       	icall
writeRegister():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:91
  }

  bool writeRegister (uint8_t reg, uint8_t value) const {
    bool result = false;
    uint8_t offset = getOffset(reg);
    if( offset != 0xff ) {
    6184:	8f 3f       	cpi	r24, 0xFF	; 255
    6186:	49 f0       	breq	.+18     	; 0x619a <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x7d8>
setByte():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:33
  uint8_t getByte (uint8_t offset, uint8_t mask, uint8_t shift) const {
    return (getByte(offset) & mask) >> shift;
  }

  bool setByte (uint8_t offset, uint8_t data) const {
    return storage().setByte(addr + offset, data);
    6188:	f4 01       	movw	r30, r8
    618a:	20 81       	ld	r18, Z
    618c:	31 81       	ldd	r19, Z+1	; 0x01
    618e:	62 2d       	mov	r22, r2
    6190:	82 0f       	add	r24, r18
    6192:	93 2f       	mov	r25, r19
    6194:	91 1d       	adc	r25, r1
    6196:	0e 94 a5 13 	call	0x274a	; 0x274a <as::InternalEprom::setByte(unsigned int, unsigned char) [clone .isra.5]>
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E9writeListERKNS_11GenericListEPKhh.isra.163():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:649
    send(msg,HMID::broadcast);
    hal->sendPeer();
  }

  void writeList (const GenericList& list,const uint8_t* data,uint8_t length) {
    for( uint8_t i=0; i<length; i+=2, data+=2 ) {
    619a:	0e 5f       	subi	r16, 0xFE	; 254
    619c:	1f 4f       	sbci	r17, 0xFF	; 255
    619e:	e5 cf       	rjmp	.-54     	; 0x616a <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x7a8>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:364
           }
           else {
             answer = REPLAY_NACK;
           }
         }
         else if( msubc == AS_CONFIG_SERIAL_REQ ) {
    61a0:	f9 e0       	ldi	r31, 0x09	; 9
    61a2:	9f 12       	cpse	r9, r31
    61a4:	a0 cc       	rjmp	.-1728   	; 0x5ae6 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x124>
    61a6:	d7 01       	movw	r26, r14
    61a8:	11 96       	adiw	r26, 0x01	; 1
    61aa:	8c 91       	ld	r24, X
_ZN2as7Message13initWithCountEhhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:149
    *(ptr+3) = d4;
    len += 4;
  }

  void initWithCount(uint8_t length, uint8_t typ, uint8_t flags, uint8_t comm) {
    this->len = length;
    61ac:	94 e1       	ldi	r25, 0x14	; 20
    61ae:	f6 01       	movw	r30, r12
    61b0:	93 87       	std	Z+11, r25	; 0x0b
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:150
    this->typ = typ;
    61b2:	90 e1       	ldi	r25, 0x10	; 16
    61b4:	96 87       	std	Z+14, r25	; 0x0e
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:151
    this->flag = flags;
    61b6:	15 86       	std	Z+13, r1	; 0x0d
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:152
    this->comm = comm;
    61b8:	15 8a       	std	Z+21, r1	; 0x15
_ZN2as7Message4initEhhhhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:157
  }

  void init(uint8_t length, uint8_t cnt, uint8_t typ, uint8_t flags, uint8_t comm, uint8_t sub) {
    initWithCount(length,typ,flags,comm);
    this->cnt = cnt;
    61ba:	84 87       	std	Z+12, r24	; 0x0c
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:158
    this->subcom = sub;
    61bc:	16 8a       	std	Z+22, r1	; 0x16
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E15getDeviceSerialEPh.isra.98():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:317
    for (uint8_t i = 3; i < 10; i++) {
      serial[i] = (boot_signature_byte_get(i + 14) % 10) + 48; // Char 0-9
    }
  #endif
#else
    memcpy_P(serial,info.Serial,10);
    61be:	62 a5       	ldd	r22, Z+42	; 0x2a
    61c0:	73 a5       	ldd	r23, Z+43	; 0x2b
    61c2:	6d 5f       	subi	r22, 0xFD	; 253
    61c4:	7f 4f       	sbci	r23, 0xFF	; 255
    61c6:	4a e0       	ldi	r20, 0x0A	; 10
    61c8:	50 e0       	ldi	r21, 0x00	; 0
    61ca:	c6 01       	movw	r24, r12
    61cc:	46 96       	adiw	r24, 0x16	; 22
    61ce:	0e 94 18 4b 	call	0x9630	; 0x9630 <memcpy_P>
sendSerialInfo():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:478

  void sendSerialInfo (const HMID& to,uint8_t count) {
    SerialInfoMsg& pm = msg.serialInfo();
    pm.init(to,count);
    getDeviceSerial(pm.serial());
    send(msg,to);
    61d2:	a7 01       	movw	r20, r14
    61d4:	4c 5f       	subi	r20, 0xFC	; 252
    61d6:	5f 4f       	sbci	r21, 0xFF	; 255
    61d8:	b6 01       	movw	r22, r12
    61da:	65 5f       	subi	r22, 0xF5	; 245
    61dc:	7f 4f       	sbci	r23, 0xFF	; 255
    61de:	91 ce       	rjmp	.-734    	; 0x5f02 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x540>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:371
         }
         else {
           answer = REPLAY_NACK;
         }
       }
       else if( mtype == AS_MESSAGE_ACTION ) {
    61e0:	f1 e1       	ldi	r31, 0x11	; 17
    61e2:	5f 12       	cpse	r5, r31
    61e4:	93 c0       	rjmp	.+294    	; 0x630c <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x94a>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:372
         if ( mcomm == AS_ACTION_RESET || mcomm == AS_ACTION_ENTER_BOOTLOADER ) {
    61e6:	84 e0       	ldi	r24, 0x04	; 4
    61e8:	b8 16       	cp	r11, r24
    61ea:	19 f0       	breq	.+6      	; 0x61f2 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x830>
    61ec:	9a ec       	ldi	r25, 0xCA	; 202
    61ee:	b9 12       	cpse	r11, r25
    61f0:	29 c0       	rjmp	.+82     	; 0x6244 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x882>
_ZN2as7Message13initWithCountEhhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:149
    *(ptr+3) = d4;
    len += 4;
  }

  void initWithCount(uint8_t length, uint8_t typ, uint8_t flags, uint8_t comm) {
    this->len = length;
    61f2:	8a e0       	ldi	r24, 0x0A	; 10
    61f4:	d7 01       	movw	r26, r14
    61f6:	8c 93       	st	X, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:150
    this->typ = typ;
    61f8:	82 e0       	ldi	r24, 0x02	; 2
    61fa:	13 96       	adiw	r26, 0x03	; 3
    61fc:	8c 93       	st	X, r24
    61fe:	13 97       	sbiw	r26, 0x03	; 3
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:151
    this->flag = flags;
    6200:	12 96       	adiw	r26, 0x02	; 2
    6202:	1c 92       	st	X, r1
    6204:	12 97       	sbiw	r26, 0x02	; 2
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:152
    this->comm = comm;
    6206:	1a 96       	adiw	r26, 0x0a	; 10
    6208:	1c 92       	st	X, r1
_ZN2as7Message4fromEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:186
  const HMID& from () const {
    return fromID;
  }

  HMID& from () {
    return fromID;
    620a:	a7 01       	movw	r20, r14
    620c:	4c 5f       	subi	r20, 0xFC	; 252
    620e:	5f 4f       	sbci	r21, 0xFF	; 255
sendAck():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:437


  void sendAck (Message& msg,uint8_t flag=0x00) {
    msg.ack().init(flag);
    kstore.addAuth(msg);
    send(msg,msg.from());
    6210:	b7 01       	movw	r22, r14
    6212:	c6 01       	movw	r24, r12
    6214:	0e 94 1d 28 	call	0x503a	; 0x503a <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:375
           if( validSignature(msg) == true ) {
             this->sendAck(msg);
             if( mcomm == AS_ACTION_ENTER_BOOTLOADER ) {
    6218:	ba ec       	ldi	r27, 0xCA	; 202
    621a:	bb 12       	cpse	r11, r27
    621c:	0f c0       	rjmp	.+30     	; 0x623c <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x87a>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E10bootloaderEv.isra.165():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:168
  #endif
    }
  }

  void bootloader () {
    DPRINTLN(F("BOOTLOADER"));
    621e:	86 e4       	ldi	r24, 0x46	; 70
    6220:	95 e0       	ldi	r25, 0x05	; 5
    6222:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <void DPRINTLN<__FlashStringHelper const*>(__FlashStringHelper const*)>
wdt_enable():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\avr/wdt.h:486
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    6226:	88 e1       	ldi	r24, 0x18	; 24
    6228:	9c e0       	ldi	r25, 0x0C	; 12
    622a:	0f b6       	in	r0, 0x3f	; 63
    622c:	f8 94       	cli
    622e:	a8 95       	wdr
    6230:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    6234:	0f be       	out	0x3f, r0	; 63
    6236:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    623a:	ff cf       	rjmp	.-2      	; 0x623a <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x878>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:379
             this->sendAck(msg);
             if( mcomm == AS_ACTION_ENTER_BOOTLOADER ) {
               bootloader();
             }
             else {
               reset();
    623c:	c6 01       	movw	r24, r12
    623e:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::reset()>
    6242:	6e cd       	rjmp	.-1316   	; 0x5d20 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x35e>
hasChannel():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:226
  uint8_t channels () const {
    return numChannels;
  }

  bool hasChannel (uint8_t number) const {
    return number != 0 && number <= channels();
    6244:	99 20       	and	r9, r9
    6246:	09 f4       	brne	.+2      	; 0x624a <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x888>
    6248:	1e cf       	rjmp	.-452    	; 0x6086 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x6c4>
    624a:	f6 01       	movw	r30, r12
    624c:	85 a5       	ldd	r24, Z+45	; 0x2d
    624e:	89 15       	cp	r24, r9
    6250:	08 f4       	brcc	.+2      	; 0x6254 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x892>
    6252:	66 cd       	rjmp	.-1332   	; 0x5d20 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x35e>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7channelEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:182
    this->led().set(LedStates::pairing);
    this->activity().stayAwake( seconds2ticks(20) ); // 20 seconds
  }

  ChannelType& channel(uint8_t ch) {
    return *devchannels[ch-1];
    6254:	e9 2d       	mov	r30, r9
    6256:	f0 e0       	ldi	r31, 0x00	; 0
    6258:	77 96       	adiw	r30, 0x17	; 23
    625a:	ee 0f       	add	r30, r30
    625c:	ff 1f       	adc	r31, r31
    625e:	ec 0d       	add	r30, r12
    6260:	fd 1d       	adc	r31, r13
    6262:	00 81       	ld	r16, Z
    6264:	11 81       	ldd	r17, Z+1	; 0x01
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:389
         else {
           const ActionMsg& pm = msg.action();
           if( this->hasChannel(pm.channel())==true ) {
             ch = &channel(pm.channel());
             if( validSignature(pm.channel(),msg)==true ) {
               switch( mcomm ) {
    6266:	f2 e0       	ldi	r31, 0x02	; 2
    6268:	bf 16       	cp	r11, r31
    626a:	c9 f1       	breq	.+114    	; 0x62de <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x91c>
    626c:	fb 15       	cp	r31, r11
    626e:	68 f0       	brcs	.+26     	; 0x628a <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x8c8>
    6270:	bb 20       	and	r11, r11
    6272:	11 f1       	breq	.+68     	; 0x62b8 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x8f6>
    6274:	81 e0       	ldi	r24, 0x01	; 1
    6276:	b8 12       	cpse	r11, r24
    6278:	55 cd       	rjmp	.-1366   	; 0x5d24 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x362>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:395
               case AS_ACTION_INHIBIT_OFF:
                 ch->inhibit(false);
                 answer = REPLAY_ACK;
                 break;
               case AS_ACTION_INHIBIT_ON:
                 ch->inhibit(true);
    627a:	d8 01       	movw	r26, r16
    627c:	ed 91       	ld	r30, X+
    627e:	fc 91       	ld	r31, X
    6280:	02 88       	ldd	r0, Z+18	; 0x12
    6282:	f3 89       	ldd	r31, Z+19	; 0x13
    6284:	e0 2d       	mov	r30, r0
    6286:	61 e0       	ldi	r22, 0x01	; 1
    6288:	1e c0       	rjmp	.+60     	; 0x62c6 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x904>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:389
         else {
           const ActionMsg& pm = msg.action();
           if( this->hasChannel(pm.channel())==true ) {
             ch = &channel(pm.channel());
             if( validSignature(pm.channel(),msg)==true ) {
               switch( mcomm ) {
    628a:	93 e0       	ldi	r25, 0x03	; 3
    628c:	b9 16       	cp	r11, r25
    628e:	01 f1       	breq	.+64     	; 0x62d0 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x90e>
    6290:	a0 e8       	ldi	r26, 0x80	; 128
    6292:	ba 12       	cpse	r11, r26
    6294:	47 cd       	rjmp	.-1394   	; 0x5d24 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x362>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:408
                 if( ch->inhibit() == false ) {
                   answer = ch->process(msg.actionSet()) ? REPLAY_ACK : REPLAY_NACK;
                 }
                 break;
               case AS_ACTION_COMMAND:
                 if( ch->inhibit() == false ) {
    6296:	d8 01       	movw	r26, r16
    6298:	ed 91       	ld	r30, X+
    629a:	fc 91       	ld	r31, X
    629c:	04 88       	ldd	r0, Z+20	; 0x14
    629e:	f5 89       	ldd	r31, Z+21	; 0x15
    62a0:	e0 2d       	mov	r30, r0
    62a2:	c8 01       	movw	r24, r16
    62a4:	09 95       	icall
    62a6:	81 11       	cpse	r24, r1
    62a8:	3d cd       	rjmp	.-1414   	; 0x5d24 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x362>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:409
                   answer = ch->process(msg.actionCommand()) ? REPLAY_ACK : REPLAY_NACK;
    62aa:	d8 01       	movw	r26, r16
    62ac:	ed 91       	ld	r30, X+
    62ae:	fc 91       	ld	r31, X
    62b0:	00 a4       	ldd	r0, Z+40	; 0x28
    62b2:	f1 a5       	ldd	r31, Z+41	; 0x29
    62b4:	e0 2d       	mov	r30, r0
    62b6:	23 c0       	rjmp	.+70     	; 0x62fe <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x93c>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:391
           if( this->hasChannel(pm.channel())==true ) {
             ch = &channel(pm.channel());
             if( validSignature(pm.channel(),msg)==true ) {
               switch( mcomm ) {
               case AS_ACTION_INHIBIT_OFF:
                 ch->inhibit(false);
    62b8:	d8 01       	movw	r26, r16
    62ba:	ed 91       	ld	r30, X+
    62bc:	fc 91       	ld	r31, X
    62be:	02 88       	ldd	r0, Z+18	; 0x12
    62c0:	f3 89       	ldd	r31, Z+19	; 0x13
    62c2:	e0 2d       	mov	r30, r0
    62c4:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:395
                 answer = REPLAY_ACK;
                 break;
               case AS_ACTION_INHIBIT_ON:
                 ch->inhibit(true);
    62c6:	c8 01       	movw	r24, r16
    62c8:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:420
         }
#endif
       }
       else if( mtype == AS_MESSAGE_HAVE_DATA ) {
         DPRINTLN(F("HAVE DATA"));
         answer = REPLAY_ACK;
    62ca:	99 24       	eor	r9, r9
    62cc:	93 94       	inc	r9
    62ce:	a6 cc       	rjmp	.-1716   	; 0x5c1c <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x25a>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:399
               case AS_ACTION_INHIBIT_ON:
                 ch->inhibit(true);
                 answer = REPLAY_ACK;
                 break;
               case AS_ACTION_STOP_CHANGE:
                 ch->stop();
    62d0:	d8 01       	movw	r26, r16
    62d2:	ed 91       	ld	r30, X+
    62d4:	fc 91       	ld	r31, X
    62d6:	04 a0       	ldd	r0, Z+36	; 0x24
    62d8:	f5 a1       	ldd	r31, Z+37	; 0x25
    62da:	e0 2d       	mov	r30, r0
    62dc:	8b cd       	rjmp	.-1258   	; 0x5df4 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x432>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:403
                 answer = REPLAY_ACK;
                 break;
               case AS_ACTION_SET:
                 if( ch->inhibit() == false ) {
    62de:	d8 01       	movw	r26, r16
    62e0:	ed 91       	ld	r30, X+
    62e2:	fc 91       	ld	r31, X
    62e4:	04 88       	ldd	r0, Z+20	; 0x14
    62e6:	f5 89       	ldd	r31, Z+21	; 0x15
    62e8:	e0 2d       	mov	r30, r0
    62ea:	c8 01       	movw	r24, r16
    62ec:	09 95       	icall
    62ee:	81 11       	cpse	r24, r1
    62f0:	19 cd       	rjmp	.-1486   	; 0x5d24 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x362>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:404
                   answer = ch->process(msg.actionSet()) ? REPLAY_ACK : REPLAY_NACK;
    62f2:	d8 01       	movw	r26, r16
    62f4:	ed 91       	ld	r30, X+
    62f6:	fc 91       	ld	r31, X
    62f8:	06 a0       	ldd	r0, Z+38	; 0x26
    62fa:	f7 a1       	ldd	r31, Z+39	; 0x27
    62fc:	e0 2d       	mov	r30, r0
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:409
                 }
                 break;
               case AS_ACTION_COMMAND:
                 if( ch->inhibit() == false ) {
                   answer = ch->process(msg.actionCommand()) ? REPLAY_ACK : REPLAY_NACK;
    62fe:	b7 01       	movw	r22, r14
    6300:	c8 01       	movw	r24, r16
    6302:	09 95       	icall
    6304:	88 23       	and	r24, r24
    6306:	09 f4       	brne	.+2      	; 0x630a <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x948>
    6308:	f0 cb       	rjmp	.-2080   	; 0x5aea <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x128>
    630a:	df cf       	rjmp	.-66     	; 0x62ca <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x908>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:418
             }
           }
         }
#endif
       }
       else if( mtype == AS_MESSAGE_HAVE_DATA ) {
    630c:	b2 e1       	ldi	r27, 0x12	; 18
    630e:	5b 12       	cpse	r5, r27
    6310:	05 c0       	rjmp	.+10     	; 0x631c <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x95a>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:419
         DPRINTLN(F("HAVE DATA"));
    6312:	81 e5       	ldi	r24, 0x51	; 81
    6314:	95 e0       	ldi	r25, 0x05	; 5
    6316:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <void DPRINTLN<__FlashStringHelper const*>(__FlashStringHelper const*)>
    631a:	0a cf       	rjmp	.-492    	; 0x6130 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x76e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:423
         answer = REPLAY_ACK;
       }
#ifndef SENSOR_ONLY
       else if (mtype == AS_MESSAGE_SWITCH_EVENT) {
    631c:	ee e3       	ldi	r30, 0x3E	; 62
    631e:	5e 12       	cpse	r5, r30
    6320:	8b c0       	rjmp	.+278    	; 0x6438 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0xa76>
toEventMsg():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:522
  //Peer peer() const { return Peer(fromSim(), buffer()[13] & 0x3f); }
  //uint8_t counter() const { return buffer()[14]; }
  uint8_t msg_type() const { return buffer()[12]; }

  RemoteEventMsg& toEventMsg() {
    RemoteEventMsg& pm = *((RemoteEventMsg*)(data()+(MaxDataLen-10))); // use last 10 byte for simulated message
    6322:	87 01       	movw	r16, r14
    6324:	0d 5e       	subi	r16, 0xED	; 237
    6326:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN2as7Message6lengthEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:162
    this->cnt = cnt;
    this->subcom = sub;
  }

  void length (uint8_t l) {
    len = l;
    6328:	89 e0       	ldi	r24, 0x09	; 9
    632a:	d7 01       	movw	r26, r14
    632c:	53 96       	adiw	r26, 0x13	; 19
    632e:	8c 93       	st	X, r24
    6330:	53 97       	sbiw	r26, 0x13	; 19
_ZN2as7Message5countEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:170
  uint8_t length () const {
    return len;
  }

  void count (uint8_t c) {
    cnt = c;
    6332:	11 96       	adiw	r26, 0x01	; 1
    6334:	8c 91       	ld	r24, X
    6336:	11 97       	sbiw	r26, 0x01	; 1
    6338:	54 96       	adiw	r26, 0x14	; 20
    633a:	8c 93       	st	X, r24
    633c:	54 97       	sbiw	r26, 0x14	; 20
_ZN2as7Message5flagsEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:214
  uint8_t type () const {
    return typ;
  }

  void flags (uint8_t f) {
    flag = f;
    633e:	84 e0       	ldi	r24, 0x04	; 4
    6340:	55 96       	adiw	r26, 0x15	; 21
    6342:	8c 93       	st	X, r24
    6344:	55 97       	sbiw	r26, 0x15	; 21
_ZN2as7Message4typeEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:206
  HMID& to () {
    return toID;
  }

  void type (uint8_t t) {
    typ=t;
    6346:	1d 96       	adiw	r26, 0x0d	; 13
    6348:	8c 91       	ld	r24, X
    634a:	1d 97       	sbiw	r26, 0x0d	; 13
    634c:	56 96       	adiw	r26, 0x16	; 22
    634e:	8c 93       	st	X, r24
    6350:	56 97       	sbiw	r26, 0x16	; 22
_ZN2as4HMIDC2EPh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:28
    id[2]=i3;
  }
  HMID (uint8_t* ptr) {
    id[0]=*ptr;
    id[1]=*(ptr+1);
    id[2]=*(ptr+2);
    6352:	1c 96       	adiw	r26, 0x0c	; 12
    6354:	8c 91       	ld	r24, X
    6356:	1c 97       	sbiw	r26, 0x0c	; 12
_ZN2as4HMIDaSERKS0_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:36
    id[0]=other.id[0];
    id[1]=other.id[1];
    id[2]=other.id[2];
  }
  HMID& operator = (const HMID& other) {
    id[0]=other.id[0];
    6358:	57 96       	adiw	r26, 0x17	; 23
    635a:	bc 92       	st	X, r11
    635c:	57 97       	sbiw	r26, 0x17	; 23
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:37
    id[1]=other.id[1];
    635e:	58 96       	adiw	r26, 0x18	; 24
    6360:	9c 92       	st	X, r9
    6362:	58 97       	sbiw	r26, 0x18	; 24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:38
    id[2]=other.id[2];
    6364:	59 96       	adiw	r26, 0x19	; 25
    6366:	8c 93       	st	X, r24
    6368:	59 97       	sbiw	r26, 0x19	; 25
_ZN2as4HMIDC2EPh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:26
    id[0]=i1;
    id[1]=i2;
    id[2]=i3;
  }
  HMID (uint8_t* ptr) {
    id[0]=*ptr;
    636a:	17 96       	adiw	r26, 0x07	; 7
    636c:	8c 91       	ld	r24, X
    636e:	17 97       	sbiw	r26, 0x07	; 7
    6370:	89 83       	std	Y+1, r24	; 0x01
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:27
    id[1]=*(ptr+1);
    6372:	18 96       	adiw	r26, 0x08	; 8
    6374:	8c 91       	ld	r24, X
    6376:	18 97       	sbiw	r26, 0x08	; 8
    6378:	8a 83       	std	Y+2, r24	; 0x02
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:28
    id[2]=*(ptr+2);
    637a:	19 96       	adiw	r26, 0x09	; 9
    637c:	8c 91       	ld	r24, X
    637e:	8b 83       	std	Y+3, r24	; 0x03
toEventMsg():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:528
    pm.length(9);
    pm.count(count());
    pm.flags(Message::BCAST);
    pm.type(msg_type());
    pm.from((uint8_t*)buffer()+9);
    pm.to((uint8_t*)buffer() + 6);
    6380:	be 01       	movw	r22, r28
    6382:	6f 5f       	subi	r22, 0xFF	; 255
    6384:	7f 4f       	sbci	r23, 0xFF	; 255
    6386:	c8 01       	movw	r24, r16
    6388:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <as::Message::to(as::HMID const&)>
append():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:127
    append((uint16_t)(data >> 16));
    append((uint16_t)(data & 0xffff));
  }

  void append (void* data,uint8_t l) {
    memcpy(buffer()+len,data,l);
    638c:	d7 01       	movw	r26, r14
    638e:	53 96       	adiw	r26, 0x13	; 19
    6390:	ec 91       	ld	r30, X
    6392:	53 97       	sbiw	r26, 0x13	; 19
    6394:	ee 0d       	add	r30, r14
    6396:	ff 2d       	mov	r31, r15
    6398:	f1 1d       	adc	r31, r1
    639a:	1e 96       	adiw	r26, 0x0e	; 14
    639c:	8d 91       	ld	r24, X+
    639e:	9c 91       	ld	r25, X
    63a0:	1f 97       	sbiw	r26, 0x0f	; 15
    63a2:	95 8b       	std	Z+21, r25	; 0x15
    63a4:	84 8b       	std	Z+20, r24	; 0x14
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:128
    len += l;
    63a6:	53 96       	adiw	r26, 0x13	; 19
    63a8:	8c 91       	ld	r24, X
    63aa:	53 97       	sbiw	r26, 0x13	; 19
    63ac:	8e 5f       	subi	r24, 0xFE	; 254
    63ae:	53 96       	adiw	r26, 0x13	; 19
    63b0:	8c 93       	st	X, r24
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:427
         RemoteEventMsg& pm = msg.switchSim().toEventMsg();
         //DPRINT(F("X> ")); pm.dump();

         for (uint8_t cdx = 1; cdx <= this->channels(); ++cdx) {
    63b2:	99 24       	eor	r9, r9
    63b4:	93 94       	inc	r9
    63b6:	f6 01       	movw	r30, r12
    63b8:	85 a5       	ldd	r24, Z+45	; 0x2d
    63ba:	89 15       	cp	r24, r9
    63bc:	08 f4       	brcc	.+2      	; 0x63c0 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x9fe>
    63be:	b8 ce       	rjmp	.-656    	; 0x6130 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x76e>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7channelEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:182
    this->led().set(LedStates::pairing);
    this->activity().stayAwake( seconds2ticks(20) ); // 20 seconds
  }

  ChannelType& channel(uint8_t ch) {
    return *devchannels[ch-1];
    63c0:	e9 2d       	mov	r30, r9
    63c2:	f0 e0       	ldi	r31, 0x00	; 0
    63c4:	77 96       	adiw	r30, 0x17	; 23
    63c6:	ee 0f       	add	r30, r30
    63c8:	ff 1f       	adc	r31, r31
    63ca:	ec 0d       	add	r30, r12
    63cc:	fd 1d       	adc	r31, r13
    63ce:	a0 80       	ld	r10, Z
    63d0:	b1 80       	ldd	r11, Z+1	; 0x01
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:429
         RemoteEventMsg& pm = msg.switchSim().toEventMsg();
         //DPRINT(F("X> ")); pm.dump();

         for (uint8_t cdx = 1; cdx <= this->channels(); ++cdx) {
           ChannelType* c = &channel(cdx);
           if (c->inhibit() == false && c->has(pm.peer()) == true) {
    63d2:	d5 01       	movw	r26, r10
    63d4:	ed 91       	ld	r30, X+
    63d6:	fc 91       	ld	r31, X
    63d8:	04 88       	ldd	r0, Z+20	; 0x14
    63da:	f5 89       	ldd	r31, Z+21	; 0x15
    63dc:	e0 2d       	mov	r30, r0
    63de:	c5 01       	movw	r24, r10
    63e0:	09 95       	icall
    63e2:	81 11       	cpse	r24, r1
    63e4:	27 c0       	rjmp	.+78     	; 0x6434 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0xa72>
    63e6:	d5 01       	movw	r26, r10
    63e8:	ed 91       	ld	r30, X+
    63ea:	fc 91       	ld	r31, X
    63ec:	00 8c       	ldd	r0, Z+24	; 0x18
    63ee:	f1 8d       	ldd	r31, Z+25	; 0x19
    63f0:	e0 2d       	mov	r30, r0
peer():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:479
      flags |= 0x80; // low battery
    }
    Message::init(0xb,msgcnt,AS_MESSAGE_REMOTE_EVENT,BIDI|WKMEUP,(ch & 0x3f) | flags,counter);
  }

  Peer peer () const { return Peer(from(),command() & 0x3f); }
    63f2:	d7 01       	movw	r26, r14
    63f4:	5d 96       	adiw	r26, 0x1d	; 29
    63f6:	8c 91       	ld	r24, X
    63f8:	5d 97       	sbiw	r26, 0x1d	; 29
    63fa:	8f 73       	andi	r24, 0x3F	; 63
_ZN2as4HMIDC2ERKS0_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:31
  }
  HMID (const HMID& other) {
    id[0]=other.id[0];
    63fc:	57 96       	adiw	r26, 0x17	; 23
    63fe:	9c 91       	ld	r25, X
    6400:	57 97       	sbiw	r26, 0x17	; 23
    6402:	99 83       	std	Y+1, r25	; 0x01
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:32
    id[1]=other.id[1];
    6404:	58 96       	adiw	r26, 0x18	; 24
    6406:	9c 91       	ld	r25, X
    6408:	58 97       	sbiw	r26, 0x18	; 24
    640a:	9a 83       	std	Y+2, r25	; 0x02
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:33
    id[2]=other.id[2];
    640c:	59 96       	adiw	r26, 0x19	; 25
    640e:	9c 91       	ld	r25, X
    6410:	9b 83       	std	Y+3, r25	; 0x03
_ZN2as4PeerC2ERKNS_4HMIDEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Peer.h:18
    6412:	8c 83       	std	Y+4, r24	; 0x04
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:429
    6414:	be 01       	movw	r22, r28
    6416:	6f 5f       	subi	r22, 0xFF	; 255
    6418:	7f 4f       	sbci	r23, 0xFF	; 255
    641a:	c5 01       	movw	r24, r10
    641c:	09 95       	icall
    641e:	88 23       	and	r24, r24
    6420:	49 f0       	breq	.+18     	; 0x6434 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0xa72>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:430
             c->process(pm);
    6422:	d5 01       	movw	r26, r10
    6424:	ed 91       	ld	r30, X+
    6426:	fc 91       	ld	r31, X
    6428:	02 a4       	ldd	r0, Z+42	; 0x2a
    642a:	f3 a5       	ldd	r31, Z+43	; 0x2b
    642c:	e0 2d       	mov	r30, r0
    642e:	b8 01       	movw	r22, r16
    6430:	c5 01       	movw	r24, r10
    6432:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:427
#ifndef SENSOR_ONLY
       else if (mtype == AS_MESSAGE_SWITCH_EVENT) {
         RemoteEventMsg& pm = msg.switchSim().toEventMsg();
         //DPRINT(F("X> ")); pm.dump();

         for (uint8_t cdx = 1; cdx <= this->channels(); ++cdx) {
    6434:	93 94       	inc	r9
    6436:	bf cf       	rjmp	.-130    	; 0x63b6 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x9f4>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:435
             c->process(pm);
           }
         }
         answer = REPLAY_ACK;
       }
       else if (mtype == AS_MESSAGE_REMOTE_EVENT || mtype == AS_MESSAGE_SENSOR_EVENT) {
    6438:	80 ec       	ldi	r24, 0xC0	; 192
    643a:	85 0d       	add	r24, r5
    643c:	82 30       	cpi	r24, 0x02	; 2
    643e:	08 f0       	brcs	.+2      	; 0x6442 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0xa80>
    6440:	52 cb       	rjmp	.-2396   	; 0x5ae6 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x124>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:439
         answer = REPLAY_NACK;
         const RemoteEventMsg& pm = msg.remoteEvent();
         uint8_t processed = 0;
         for( uint8_t cdx=1; cdx<=this->channels(); ++cdx ) {
    6442:	88 24       	eor	r8, r8
    6444:	83 94       	inc	r8
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:438
         answer = REPLAY_ACK;
       }
       else if (mtype == AS_MESSAGE_REMOTE_EVENT || mtype == AS_MESSAGE_SENSOR_EVENT) {
         answer = REPLAY_NACK;
         const RemoteEventMsg& pm = msg.remoteEvent();
         uint8_t processed = 0;
    6446:	41 2c       	mov	r4, r1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:229
    return true;
  }

   bool process(Message& msg) {
     uint8_t answer = REPLAY_NO;
     ChannelType* ch = 0;
    6448:	10 e0       	ldi	r17, 0x00	; 0
    644a:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:436
           }
         }
         answer = REPLAY_ACK;
       }
       else if (mtype == AS_MESSAGE_REMOTE_EVENT || mtype == AS_MESSAGE_SENSOR_EVENT) {
         answer = REPLAY_NACK;
    644c:	22 e0       	ldi	r18, 0x02	; 2
    644e:	92 2e       	mov	r9, r18
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:439
         const RemoteEventMsg& pm = msg.remoteEvent();
         uint8_t processed = 0;
         for( uint8_t cdx=1; cdx<=this->channels(); ++cdx ) {
    6450:	f6 01       	movw	r30, r12
    6452:	85 a5       	ldd	r24, Z+45	; 0x2d
    6454:	88 15       	cp	r24, r8
    6456:	08 f4       	brcc	.+2      	; 0x645a <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0xa98>
    6458:	49 c0       	rjmp	.+146    	; 0x64ec <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0xb2a>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7channelEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:182
    this->led().set(LedStates::pairing);
    this->activity().stayAwake( seconds2ticks(20) ); // 20 seconds
  }

  ChannelType& channel(uint8_t ch) {
    return *devchannels[ch-1];
    645a:	e8 2d       	mov	r30, r8
    645c:	f0 e0       	ldi	r31, 0x00	; 0
    645e:	77 96       	adiw	r30, 0x17	; 23
    6460:	ee 0f       	add	r30, r30
    6462:	ff 1f       	adc	r31, r31
    6464:	ec 0d       	add	r30, r12
    6466:	fd 1d       	adc	r31, r13
    6468:	a0 80       	ld	r10, Z
    646a:	b1 80       	ldd	r11, Z+1	; 0x01
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:441
         answer = REPLAY_NACK;
         const RemoteEventMsg& pm = msg.remoteEvent();
         uint8_t processed = 0;
         for( uint8_t cdx=1; cdx<=this->channels(); ++cdx ) {
           ChannelType* c = &channel(cdx);
           if( c->inhibit() == false && c->has(pm.peer()) == true ) {
    646c:	d5 01       	movw	r26, r10
    646e:	ed 91       	ld	r30, X+
    6470:	fc 91       	ld	r31, X
    6472:	04 88       	ldd	r0, Z+20	; 0x14
    6474:	f5 89       	ldd	r31, Z+21	; 0x15
    6476:	e0 2d       	mov	r30, r0
    6478:	c5 01       	movw	r24, r10
    647a:	09 95       	icall
    647c:	88 23       	and	r24, r24
    647e:	21 f0       	breq	.+8      	; 0x6488 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0xac6>
    6480:	58 01       	movw	r10, r16
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:439
       }
       else if (mtype == AS_MESSAGE_REMOTE_EVENT || mtype == AS_MESSAGE_SENSOR_EVENT) {
         answer = REPLAY_NACK;
         const RemoteEventMsg& pm = msg.remoteEvent();
         uint8_t processed = 0;
         for( uint8_t cdx=1; cdx<=this->channels(); ++cdx ) {
    6482:	83 94       	inc	r8
    6484:	85 01       	movw	r16, r10
    6486:	e4 cf       	rjmp	.-56     	; 0x6450 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0xa8e>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:441
           ChannelType* c = &channel(cdx);
           if( c->inhibit() == false && c->has(pm.peer()) == true ) {
    6488:	d5 01       	movw	r26, r10
    648a:	ed 91       	ld	r30, X+
    648c:	fc 91       	ld	r31, X
    648e:	00 8c       	ldd	r0, Z+24	; 0x18
    6490:	f1 8d       	ldd	r31, Z+25	; 0x19
    6492:	e0 2d       	mov	r30, r0
peer():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:479
    6494:	d7 01       	movw	r26, r14
    6496:	1a 96       	adiw	r26, 0x0a	; 10
    6498:	8c 91       	ld	r24, X
    649a:	1a 97       	sbiw	r26, 0x0a	; 10
    649c:	8f 73       	andi	r24, 0x3F	; 63
_ZN2as4HMIDC2ERKS0_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:31
    id[0]=*ptr;
    id[1]=*(ptr+1);
    id[2]=*(ptr+2);
  }
  HMID (const HMID& other) {
    id[0]=other.id[0];
    649e:	14 96       	adiw	r26, 0x04	; 4
    64a0:	9c 91       	ld	r25, X
    64a2:	14 97       	sbiw	r26, 0x04	; 4
    64a4:	99 83       	std	Y+1, r25	; 0x01
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:32
    id[1]=other.id[1];
    64a6:	15 96       	adiw	r26, 0x05	; 5
    64a8:	9c 91       	ld	r25, X
    64aa:	15 97       	sbiw	r26, 0x05	; 5
    64ac:	9a 83       	std	Y+2, r25	; 0x02
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:33
    id[2]=other.id[2];
    64ae:	16 96       	adiw	r26, 0x06	; 6
    64b0:	9c 91       	ld	r25, X
    64b2:	9b 83       	std	Y+3, r25	; 0x03
_ZN2as4PeerC2ERKNS_4HMIDEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Peer.h:18
    64b4:	8c 83       	std	Y+4, r24	; 0x04
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:441
    64b6:	be 01       	movw	r22, r28
    64b8:	6f 5f       	subi	r22, 0xFF	; 255
    64ba:	7f 4f       	sbci	r23, 0xFF	; 255
    64bc:	c5 01       	movw	r24, r10
    64be:	09 95       	icall
    64c0:	88 23       	and	r24, r24
    64c2:	f1 f2       	breq	.-68     	; 0x6480 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0xabe>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:443
             if( processed > 0 || validSignature(cdx,msg) == true ) {
               ++processed;
    64c4:	43 94       	inc	r4
    64c6:	d5 01       	movw	r26, r10
    64c8:	ed 91       	ld	r30, X+
    64ca:	fc 91       	ld	r31, X
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:445
               ch = c;
               switch( mtype ) {
    64cc:	b1 e4       	ldi	r27, 0x41	; 65
    64ce:	5b 16       	cp	r5, r27
    64d0:	49 f0       	breq	.+18     	; 0x64e4 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0xb22>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:447
               case AS_MESSAGE_REMOTE_EVENT:
                 ch->process(pm);
    64d2:	02 a4       	ldd	r0, Z+42	; 0x2a
    64d4:	f3 a5       	ldd	r31, Z+43	; 0x2b
    64d6:	e0 2d       	mov	r30, r0
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:450
                 break;
               case AS_MESSAGE_SENSOR_EVENT:
                 ch->process(msg.sensorEvent());
    64d8:	b7 01       	movw	r22, r14
    64da:	c5 01       	movw	r24, r10
    64dc:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:453
                 break;
               }
               answer = REPLAY_ACK;
    64de:	99 24       	eor	r9, r9
    64e0:	93 94       	inc	r9
    64e2:	cf cf       	rjmp	.-98     	; 0x6482 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0xac0>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:450
               switch( mtype ) {
               case AS_MESSAGE_REMOTE_EVENT:
                 ch->process(pm);
                 break;
               case AS_MESSAGE_SENSOR_EVENT:
                 ch->process(msg.sensorEvent());
    64e4:	04 a4       	ldd	r0, Z+44	; 0x2c
    64e6:	f5 a5       	ldd	r31, Z+45	; 0x2d
    64e8:	e0 2d       	mov	r30, r0
    64ea:	f6 cf       	rjmp	.-20     	; 0x64d8 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0xb16>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:457
               }
               answer = REPLAY_ACK;
             }
           }
         }
         if( processed > 1 ) {
    64ec:	e1 e0       	ldi	r30, 0x01	; 1
    64ee:	e4 15       	cp	r30, r4
    64f0:	08 f4       	brcc	.+2      	; 0x64f4 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0xb32>
    64f2:	c9 cd       	rjmp	.-1134   	; 0x6086 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x6c4>
    64f4:	93 cb       	rjmp	.-2266   	; 0x5c1c <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x25a>
_ZN2as7Message13initWithCountEhhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:149
    *(ptr+3) = d4;
    len += 4;
  }

  void initWithCount(uint8_t length, uint8_t typ, uint8_t flags, uint8_t comm) {
    this->len = length;
    64f6:	8a e0       	ldi	r24, 0x0A	; 10
    64f8:	f7 01       	movw	r30, r14
    64fa:	80 83       	st	Z, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:150
    this->typ = typ;
    64fc:	82 e0       	ldi	r24, 0x02	; 2
    64fe:	83 83       	std	Z+3, r24	; 0x03
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:151
    this->flag = flags;
    6500:	12 82       	std	Z+2, r1	; 0x02
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:152
    this->comm = comm;
    6502:	12 86       	std	Z+10, r1	; 0x0a
sendAck():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:437


  void sendAck (Message& msg,uint8_t flag=0x00) {
    msg.ack().init(flag);
    kstore.addAuth(msg);
    send(msg,msg.from());
    6504:	a5 01       	movw	r20, r10
sendNack():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:448
    send(msg,msg.from());
  }

  void sendNack (Message& msg) {
    msg.nack().init();
    send(msg,msg.from());
    6506:	b7 01       	movw	r22, r14
    6508:	c6 01       	movw	r24, r12
    650a:	0e 94 1d 28 	call	0x503a	; 0x503a <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)>
    650e:	e1 cb       	rjmp	.-2110   	; 0x5cd2 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x310>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7processERNS_7MessageE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:490
     if( msg.ackRequired() == true && msg.to() == devid ) {
       if( answer == REPLAY_ACK ) {
         if( ch != 0 ) this->sendAck(msg, *ch);
         else this->sendAck(msg);
       }
       else if( answer == REPLAY_NACK ) {
    6510:	f2 e0       	ldi	r31, 0x02	; 2
    6512:	9f 12       	cpse	r9, r31
    6514:	de cb       	rjmp	.-2116   	; 0x5cd2 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0x310>
_ZN2as7Message13initWithCountEhhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:149
    *(ptr+3) = d4;
    len += 4;
  }

  void initWithCount(uint8_t length, uint8_t typ, uint8_t flags, uint8_t comm) {
    this->len = length;
    6516:	8a e0       	ldi	r24, 0x0A	; 10
    6518:	d7 01       	movw	r26, r14
    651a:	8c 93       	st	X, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:150
    this->typ = typ;
    651c:	13 96       	adiw	r26, 0x03	; 3
    651e:	9c 92       	st	X, r9
    6520:	13 97       	sbiw	r26, 0x03	; 3
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:151
    this->flag = flags;
    6522:	12 96       	adiw	r26, 0x02	; 2
    6524:	1c 92       	st	X, r1
    6526:	12 97       	sbiw	r26, 0x02	; 2
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:152
    this->comm = comm;
    6528:	80 e8       	ldi	r24, 0x80	; 128
    652a:	1a 96       	adiw	r26, 0x0a	; 10
    652c:	8c 93       	st	X, r24
_ZN2as7Message4fromEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:186
  const HMID& from () const {
    return fromID;
  }

  HMID& from () {
    return fromID;
    652e:	a7 01       	movw	r20, r14
    6530:	4c 5f       	subi	r20, 0xFC	; 252
    6532:	5f 4f       	sbci	r21, 0xFF	; 255
    6534:	e8 cf       	rjmp	.-48     	; 0x6506 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)+0xb44>

00006536 <MeasureChannel::readTemperature1()>:
_ZN14MeasureChannel16readTemperature1Ev():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:402
    uint16_t          toggleWaitTime;
  public:
    MeasureChannel () : Channel(), Alarm(seconds2ticks(3)), showCalibAnalogValueAlarm(lcd, *this), us(0), pcf8583(PCF8583_ADDRESS), phcalibrationMode(false), first(true), calib_valid(false), currentTemperature1(0), currentTemperature2(0), calib_Temperature(0), phcalibrationStep(0), ph(0), pressure(0), orp(0), calib_neutralVoltage(0), calib_acidVoltage(0), measureCount(0), ph_cumulated(0), pressure_cumulated(0), orp_cumulated(0), temperature1_cumulated(0), temperature2_cumulated(0), flowrate(0), flowrate_cumulated(0), toggleWaitTime(200) {}
    virtual ~MeasureChannel () {}

    int16_t readTemperature1() {
    6536:	4f 92       	push	r4
    6538:	5f 92       	push	r5
    653a:	6f 92       	push	r6
    653c:	7f 92       	push	r7
    653e:	af 92       	push	r10
    6540:	bf 92       	push	r11
    6542:	cf 92       	push	r12
    6544:	df 92       	push	r13
    6546:	ef 92       	push	r14
    6548:	ff 92       	push	r15
    654a:	0f 93       	push	r16
    654c:	1f 93       	push	r17
    654e:	cf 93       	push	r28
    6550:	df 93       	push	r29
    6552:	00 d0       	rcall	.+0      	; 0x6554 <MeasureChannel::readTemperature1()+0x1e>
    6554:	00 d0       	rcall	.+0      	; 0x6556 <MeasureChannel::readTemperature1()+0x20>
    6556:	00 d0       	rcall	.+0      	; 0x6558 <MeasureChannel::readTemperature1()+0x22>
    6558:	cd b7       	in	r28, 0x3d	; 61
    655a:	de b7       	in	r29, 0x3e	; 62
    655c:	5c 01       	movw	r10, r24
    655e:	00 e0       	ldi	r16, 0x00	; 0
    6560:	11 e0       	ldi	r17, 0x01	; 1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/sensors/Ntc.h:37
  }

  bool measure (__attribute__((unused)) bool async=false) {
    uint32_t vo = 0;
    6562:	c1 2c       	mov	r12, r1
    6564:	d1 2c       	mov	r13, r1
    6566:	76 01       	movw	r14, r12
_ZN2as3NtcILh24ELm10000ELj3950ELh0ELa25ELh4EE7measureEb.isra.87():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/sensors/Ntc.h:45
      pinMode(ACTIVATEPIN, OUTPUT);
      digitalWrite(ACTIVATEPIN, HIGH);
    }

    for (uint16_t i = 0; i < 1 << (OVERSAMPLING * 2); i++) {
      vo += analogRead(SENSEPIN);
    6568:	88 e1       	ldi	r24, 0x18	; 24
    656a:	0e 94 1a 08 	call	0x1034	; 0x1034 <analogRead>
    656e:	09 2e       	mov	r0, r25
    6570:	00 0c       	add	r0, r0
    6572:	aa 0b       	sbc	r26, r26
    6574:	bb 0b       	sbc	r27, r27
    6576:	c8 0e       	add	r12, r24
    6578:	d9 1e       	adc	r13, r25
    657a:	ea 1e       	adc	r14, r26
    657c:	fb 1e       	adc	r15, r27
    657e:	01 50       	subi	r16, 0x01	; 1
    6580:	11 09       	sbc	r17, r1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/sensors/Ntc.h:44
    if (ACTIVATEPIN) {
      pinMode(ACTIVATEPIN, OUTPUT);
      digitalWrite(ACTIVATEPIN, HIGH);
    }

    for (uint16_t i = 0; i < 1 << (OVERSAMPLING * 2); i++) {
    6582:	91 f7       	brne	.-28     	; 0x6568 <MeasureChannel::readTemperature1()+0x32>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/sensors/Ntc.h:53
    if (ACTIVATEPIN) {
      digitalWrite(ACTIVATEPIN, LOW);
    }

    if (OVERSAMPLING) {
      vo = vo >> OVERSAMPLING;
    6584:	84 e0       	ldi	r24, 0x04	; 4
    6586:	f6 94       	lsr	r15
    6588:	e7 94       	ror	r14
    658a:	d7 94       	ror	r13
    658c:	c7 94       	ror	r12
    658e:	8a 95       	dec	r24
    6590:	d1 f7       	brne	.-12     	; 0x6586 <MeasureChannel::readTemperature1()+0x50>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/sensors/Ntc.h:59
    }

    vo = _max_ref - vo;

    float rNtc = vo / (float)(_max_ref - vo);
    _temperature = 10 * B * _t0Abs / (10 * B + (int16_t)(log(rNtc) * _t0Abs)) - 2732;
    6592:	f5 01       	movw	r30, r10
    6594:	fd 96       	adiw	r30, 0x3d	; 61
    6596:	40 80       	ld	r4, Z
    6598:	51 80       	ldd	r5, Z+1	; 0x01
    659a:	62 80       	ldd	r6, Z+2	; 0x02
    659c:	73 80       	ldd	r7, Z+3	; 0x03
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/sensors/Ntc.h:56

    if (OVERSAMPLING) {
      vo = vo >> OVERSAMPLING;
    }

    vo = _max_ref - vo;
    659e:	34 96       	adiw	r30, 0x04	; 4
    65a0:	60 81       	ld	r22, Z
    65a2:	71 81       	ldd	r23, Z+1	; 0x01
    65a4:	82 81       	ldd	r24, Z+2	; 0x02
    65a6:	93 81       	ldd	r25, Z+3	; 0x03
    65a8:	6c 19       	sub	r22, r12
    65aa:	7d 09       	sbc	r23, r13
    65ac:	8e 09       	sbc	r24, r14
    65ae:	9f 09       	sbc	r25, r15
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/sensors/Ntc.h:58

    float rNtc = vo / (float)(_max_ref - vo);
    65b0:	0e 94 af 4d 	call	0x9b5e	; 0x9b5e <__floatunsisf>
    65b4:	6b 83       	std	Y+3, r22	; 0x03
    65b6:	7c 83       	std	Y+4, r23	; 0x04
    65b8:	8d 83       	std	Y+5, r24	; 0x05
    65ba:	9e 83       	std	Y+6, r25	; 0x06
    65bc:	c7 01       	movw	r24, r14
    65be:	b6 01       	movw	r22, r12
    65c0:	0e 94 af 4d 	call	0x9b5e	; 0x9b5e <__floatunsisf>
    65c4:	9b 01       	movw	r18, r22
    65c6:	ac 01       	movw	r20, r24
    65c8:	6b 81       	ldd	r22, Y+3	; 0x03
    65ca:	7c 81       	ldd	r23, Y+4	; 0x04
    65cc:	8d 81       	ldd	r24, Y+5	; 0x05
    65ce:	9e 81       	ldd	r25, Y+6	; 0x06
    65d0:	0e 94 7d 4f 	call	0x9efa	; 0x9efa <__divsf3>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/sensors/Ntc.h:59
    _temperature = 10 * B * _t0Abs / (10 * B + (int16_t)(log(rNtc) * _t0Abs)) - 2732;
    65d4:	0e 94 32 50 	call	0xa064	; 0xa064 <log>
    65d8:	6b 83       	std	Y+3, r22	; 0x03
    65da:	7c 83       	std	Y+4, r23	; 0x04
    65dc:	8d 83       	std	Y+5, r24	; 0x05
    65de:	9e 83       	std	Y+6, r25	; 0x06
    65e0:	ac e4       	ldi	r26, 0x4C	; 76
    65e2:	ba e9       	ldi	r27, 0x9A	; 154
    65e4:	a3 01       	movw	r20, r6
    65e6:	92 01       	movw	r18, r4
    65e8:	0e 94 f6 4e 	call	0x9dec	; 0x9dec <__muluhisi3>
    65ec:	6b 01       	movw	r12, r22
    65ee:	7c 01       	movw	r14, r24
    65f0:	c3 01       	movw	r24, r6
    65f2:	b2 01       	movw	r22, r4
    65f4:	0e 94 b1 4d 	call	0x9b62	; 0x9b62 <__floatsisf>
    65f8:	2b 81       	ldd	r18, Y+3	; 0x03
    65fa:	3c 81       	ldd	r19, Y+4	; 0x04
    65fc:	4d 81       	ldd	r20, Y+5	; 0x05
    65fe:	5e 81       	ldd	r21, Y+6	; 0x06
    6600:	0e 94 10 4e 	call	0x9c20	; 0x9c20 <__mulsf3>
    6604:	0e 94 ef 4f 	call	0x9fde	; 0x9fde <__fixsfsi>
    6608:	64 5b       	subi	r22, 0xB4	; 180
    660a:	75 46       	sbci	r23, 0x65	; 101
    660c:	9b 01       	movw	r18, r22
    660e:	50 e0       	ldi	r21, 0x00	; 0
    6610:	40 e0       	ldi	r20, 0x00	; 0
    6612:	c7 01       	movw	r24, r14
    6614:	b6 01       	movw	r22, r12
    6616:	0e 94 fa 50 	call	0xa1f4	; 0xa1f4 <__divmodsi4>
    661a:	79 01       	movw	r14, r18
    661c:	8c ea       	ldi	r24, 0xAC	; 172
    661e:	e8 1a       	sub	r14, r24
    6620:	8a e0       	ldi	r24, 0x0A	; 10
    6622:	f8 0a       	sbc	r15, r24
    6624:	f5 01       	movw	r30, r10
    6626:	f4 ae       	std	Z+60, r15	; 0x3c
    6628:	e3 ae       	std	Z+59, r14	; 0x3b
_ZN14MeasureChannel16readTemperature1Ev():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:404
      ntc1.measure();
      int16_t t = ntc1.temperature() + (-14+2*this->getList1().TemperatureOffsetIndex1());
    662a:	84 85       	ldd	r24, Z+12	; 0x0c
    662c:	95 85       	ldd	r25, Z+13	; 0x0d
    662e:	9a 83       	std	Y+2, r25	; 0x02
    6630:	89 83       	std	Y+1, r24	; 0x01
TemperatureOffsetIndex1():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:133
class UList1 : public RegList1<UReg1> {
  public:
    UList1 (uint16_t addr) : RegList1<UReg1>(addr) {}

    bool TemperatureOffsetIndex1 (uint8_t value) const { return this->writeRegister(0x05, value & 0xff); }
    uint8_t TemperatureOffsetIndex1 () const { return this->readRegister(0x05, 0); }
    6632:	65 e0       	ldi	r22, 0x05	; 5
    6634:	ce 01       	movw	r24, r28
    6636:	01 96       	adiw	r24, 0x01	; 1
    6638:	0e 94 08 15 	call	0x2a10	; 0x2a10 <as::RegisterList<UReg1>::readRegister(unsigned char, unsigned char) const [clone .constprop.90]>
_ZN14MeasureChannel16readTemperature1Ev():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:404
    MeasureChannel () : Channel(), Alarm(seconds2ticks(3)), showCalibAnalogValueAlarm(lcd, *this), us(0), pcf8583(PCF8583_ADDRESS), phcalibrationMode(false), first(true), calib_valid(false), currentTemperature1(0), currentTemperature2(0), calib_Temperature(0), phcalibrationStep(0), ph(0), pressure(0), orp(0), calib_neutralVoltage(0), calib_acidVoltage(0), measureCount(0), ph_cumulated(0), pressure_cumulated(0), orp_cumulated(0), temperature1_cumulated(0), temperature2_cumulated(0), flowrate(0), flowrate_cumulated(0), toggleWaitTime(200) {}
    virtual ~MeasureChannel () {}

    int16_t readTemperature1() {
      ntc1.measure();
      int16_t t = ntc1.temperature() + (-14+2*this->getList1().TemperatureOffsetIndex1());
    663c:	28 2f       	mov	r18, r24
    663e:	27 50       	subi	r18, 0x07	; 7
    6640:	33 0b       	sbc	r19, r19
    6642:	89 01       	movw	r16, r18
    6644:	00 0f       	add	r16, r16
    6646:	11 1f       	adc	r17, r17
    6648:	0e 0d       	add	r16, r14
    664a:	1f 1d       	adc	r17, r15
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:405
      DPRINT(F("1. Temperatur     : "));DDECLN(t);
    664c:	8e e1       	ldi	r24, 0x1E	; 30
    664e:	92 e0       	ldi	r25, 0x02	; 2
    6650:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    6654:	c8 01       	movw	r24, r16
    6656:	0e 94 00 23 	call	0x4600	; 0x4600 <void DDECLN<int>(int)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:407
      return t;
    }
    665a:	c8 01       	movw	r24, r16
    665c:	26 96       	adiw	r28, 0x06	; 6
    665e:	0f b6       	in	r0, 0x3f	; 63
    6660:	f8 94       	cli
    6662:	de bf       	out	0x3e, r29	; 62
    6664:	0f be       	out	0x3f, r0	; 63
    6666:	cd bf       	out	0x3d, r28	; 61
    6668:	df 91       	pop	r29
    666a:	cf 91       	pop	r28
    666c:	1f 91       	pop	r17
    666e:	0f 91       	pop	r16
    6670:	ff 90       	pop	r15
    6672:	ef 90       	pop	r14
    6674:	df 90       	pop	r13
    6676:	cf 90       	pop	r12
    6678:	bf 90       	pop	r11
    667a:	af 90       	pop	r10
    667c:	7f 90       	pop	r7
    667e:	6f 90       	pop	r6
    6680:	5f 90       	pop	r5
    6682:	4f 90       	pop	r4
    6684:	08 95       	ret

00006686 <MeasureChannel::trigger(as::AlarmClock&)>:
_ZN14MeasureChannel7triggerERN2as10AlarmClockE():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:674
        flowrate_cumulated = 0;
      }
      sysclock.add(*this);
    }

    virtual void trigger (__attribute__ ((unused)) AlarmClock& clock) {
    6686:	2f 92       	push	r2
    6688:	3f 92       	push	r3
    668a:	4f 92       	push	r4
    668c:	5f 92       	push	r5
    668e:	6f 92       	push	r6
    6690:	7f 92       	push	r7
    6692:	8f 92       	push	r8
    6694:	9f 92       	push	r9
    6696:	af 92       	push	r10
    6698:	bf 92       	push	r11
    669a:	cf 92       	push	r12
    669c:	df 92       	push	r13
    669e:	ef 92       	push	r14
    66a0:	ff 92       	push	r15
    66a2:	0f 93       	push	r16
    66a4:	1f 93       	push	r17
    66a6:	cf 93       	push	r28
    66a8:	df 93       	push	r29
    66aa:	cd b7       	in	r28, 0x3d	; 61
    66ac:	de b7       	in	r29, 0x3e	; 62
    66ae:	a1 97       	sbiw	r28, 0x21	; 33
    66b0:	0f b6       	in	r0, 0x3f	; 63
    66b2:	f8 94       	cli
    66b4:	de bf       	out	0x3e, r29	; 62
    66b6:	0f be       	out	0x3f, r0	; 63
    66b8:	cd bf       	out	0x3d, r28	; 61
    66ba:	1c 01       	movw	r2, r24
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:675
      if (phcalibrationMode == false) {
    66bc:	fc 01       	movw	r30, r24
    66be:	ec 5a       	subi	r30, 0xAC	; 172
    66c0:	ff 4f       	sbci	r31, 0xFF	; 255
    66c2:	40 80       	ld	r4, Z
    66c4:	4d 86       	std	Y+13, r4	; 0x0d
    66c6:	41 10       	cpse	r4, r1
    66c8:	65 c7       	rjmp	.+3786   	; 0x7594 <MeasureChannel::trigger(as::AlarmClock&)+0xf0e>
run():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:622
      millis_lastread = millis();
      return lmin;
    }

    void run() {
      measureCount++;
    66ca:	9c 01       	movw	r18, r24
    66cc:	28 59       	subi	r18, 0x98	; 152
    66ce:	3f 4f       	sbci	r19, 0xFF	; 255
    66d0:	38 8f       	std	Y+24, r19	; 0x18
    66d2:	2f 8b       	std	Y+23, r18	; 0x17
    66d4:	d9 01       	movw	r26, r18
    66d6:	8d 91       	ld	r24, X+
    66d8:	9c 91       	ld	r25, X
    66da:	11 97       	sbiw	r26, 0x01	; 1
    66dc:	01 96       	adiw	r24, 0x01	; 1
    66de:	8d 93       	st	X+, r24
    66e0:	9c 93       	st	X, r25
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:624

      DPRINT(F("Messung #"));DDECLN(measureCount);
    66e2:	86 e7       	ldi	r24, 0x76	; 118
    66e4:	94 e0       	ldi	r25, 0x04	; 4
    66e6:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    66ea:	ef 89       	ldd	r30, Y+23	; 0x17
    66ec:	f8 8d       	ldd	r31, Y+24	; 0x18
    66ee:	80 81       	ld	r24, Z
    66f0:	91 81       	ldd	r25, Z+1	; 0x01
    66f2:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <void DDECLN<unsigned int>(unsigned int)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:626

      set(seconds2ticks(max((uint16_t)5,(uint16_t)device().getList0().Messintervall())));
    66f6:	d1 01       	movw	r26, r2
    66f8:	18 96       	adiw	r26, 0x08	; 8
    66fa:	ed 91       	ld	r30, X+
    66fc:	fc 91       	ld	r31, X
    66fe:	84 81       	ldd	r24, Z+4	; 0x04
    6700:	95 81       	ldd	r25, Z+5	; 0x05
    6702:	0e 94 0b 19 	call	0x3216	; 0x3216 <UList0::Messintervall() const>
    6706:	85 30       	cpi	r24, 0x05	; 5
    6708:	91 05       	cpc	r25, r1
    670a:	10 f4       	brcc	.+4      	; 0x6710 <MeasureChannel::trigger(as::AlarmClock&)+0x8a>
    670c:	85 e0       	ldi	r24, 0x05	; 5
    670e:	90 e0       	ldi	r25, 0x00	; 0
    6710:	9c 01       	movw	r18, r24
    6712:	a4 e6       	ldi	r26, 0x64	; 100
    6714:	b0 e0       	ldi	r27, 0x00	; 0
    6716:	0e 94 01 4f 	call	0x9e02	; 0x9e02 <__umulhisi3>
_ZN2as5Alarm3setEm():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:41
    671a:	f1 01       	movw	r30, r2
    671c:	65 83       	std	Z+5, r22	; 0x05
    671e:	76 83       	std	Z+6, r23	; 0x06
    6720:	87 83       	std	Z+7, r24	; 0x07
    6722:	71 01       	movw	r14, r2
    6724:	f3 e5       	ldi	r31, 0x53	; 83
    6726:	ef 0e       	add	r14, r31
    6728:	f1 1c       	adc	r15, r1
readFlowrate():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:607
    }

    uint8_t readFlowrate() {
      uint8_t lmin = 0;
      static unsigned long millis_lastread = 0;
      if (millis_lastread == 0) {
    672a:	40 91 e2 03 	lds	r20, 0x03E2	; 0x8003e2 <MeasureChannel::readFlowrate()::millis_lastread>
    672e:	50 91 e3 03 	lds	r21, 0x03E3	; 0x8003e3 <MeasureChannel::readFlowrate()::millis_lastread+0x1>
    6732:	60 91 e4 03 	lds	r22, 0x03E4	; 0x8003e4 <MeasureChannel::readFlowrate()::millis_lastread+0x2>
    6736:	70 91 e5 03 	lds	r23, 0x03E5	; 0x8003e5 <MeasureChannel::readFlowrate()::millis_lastread+0x3>
    673a:	d7 01       	movw	r26, r14
    673c:	8c 91       	ld	r24, X
beginTransmission():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    673e:	91 e0       	ldi	r25, 0x01	; 1
    6740:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <TwoWire::transmitting>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
    6744:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <TwoWire::txAddress>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    6748:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <TwoWire::txBufferIndex>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:201
  txBufferLength = 0;
    674c:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <TwoWire::txBufferLength>
readFlowrate():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:607
    6750:	45 2b       	or	r20, r21
    6752:	46 2b       	or	r20, r22
    6754:	47 2b       	or	r20, r23
    6756:	09 f0       	breq	.+2      	; 0x675a <MeasureChannel::trigger(as::AlarmClock&)+0xd4>
    6758:	5b c1       	rjmp	.+694    	; 0x6a10 <MeasureChannel::trigger(as::AlarmClock&)+0x38a>
reset():
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:31
}

void PCF8583::reset() {

    Wire.beginTransmission(_address);
    Wire.write(LOCATION_CONTROL);
    675a:	90 e0       	ldi	r25, 0x00	; 0
    675c:	80 e0       	ldi	r24, 0x00	; 0
    675e:	0e 94 45 09 	call	0x128a	; 0x128a <TwoWire::write(int) [clone .constprop.151]>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:33

    Wire.write((byte)0x04);    // 00 control/status (alarm enabled by default)
    6762:	64 e0       	ldi	r22, 0x04	; 4
    6764:	8b e8       	ldi	r24, 0x8B	; 139
    6766:	95 e0       	ldi	r25, 0x05	; 5
    6768:	0e 94 16 09 	call	0x122c	; 0x122c <TwoWire::write(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:34
    Wire.write((byte)0x00);    // 01 set hundreds-of-seconds
    676c:	60 e0       	ldi	r22, 0x00	; 0
    676e:	8b e8       	ldi	r24, 0x8B	; 139
    6770:	95 e0       	ldi	r25, 0x05	; 5
    6772:	0e 94 16 09 	call	0x122c	; 0x122c <TwoWire::write(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:35
    Wire.write((byte)0x00);    // 02 set second
    6776:	60 e0       	ldi	r22, 0x00	; 0
    6778:	8b e8       	ldi	r24, 0x8B	; 139
    677a:	95 e0       	ldi	r25, 0x05	; 5
    677c:	0e 94 16 09 	call	0x122c	; 0x122c <TwoWire::write(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:36
    Wire.write((byte)0x00);    // 03 set minute
    6780:	60 e0       	ldi	r22, 0x00	; 0
    6782:	8b e8       	ldi	r24, 0x8B	; 139
    6784:	95 e0       	ldi	r25, 0x05	; 5
    6786:	0e 94 16 09 	call	0x122c	; 0x122c <TwoWire::write(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:37
    Wire.write((byte)0x00);    // 04 set hour (24h format)
    678a:	60 e0       	ldi	r22, 0x00	; 0
    678c:	8b e8       	ldi	r24, 0x8B	; 139
    678e:	95 e0       	ldi	r25, 0x05	; 5
    6790:	0e 94 16 09 	call	0x122c	; 0x122c <TwoWire::write(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:38
    Wire.write((byte)0x01);    // 05 set day
    6794:	61 e0       	ldi	r22, 0x01	; 1
    6796:	8b e8       	ldi	r24, 0x8B	; 139
    6798:	95 e0       	ldi	r25, 0x05	; 5
    679a:	0e 94 16 09 	call	0x122c	; 0x122c <TwoWire::write(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:39
    Wire.write((byte)0x01);    // 06 set month
    679e:	61 e0       	ldi	r22, 0x01	; 1
    67a0:	8b e8       	ldi	r24, 0x8B	; 139
    67a2:	95 e0       	ldi	r25, 0x05	; 5
    67a4:	0e 94 16 09 	call	0x122c	; 0x122c <TwoWire::write(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:40
    Wire.write((byte)0x00);    // 07 set timer
    67a8:	60 e0       	ldi	r22, 0x00	; 0
    67aa:	8b e8       	ldi	r24, 0x8B	; 139
    67ac:	95 e0       	ldi	r25, 0x05	; 5
    67ae:	0e 94 16 09 	call	0x122c	; 0x122c <TwoWire::write(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:41
    Wire.write((byte)0x00);    // 08 set alarm control
    67b2:	60 e0       	ldi	r22, 0x00	; 0
    67b4:	8b e8       	ldi	r24, 0x8B	; 139
    67b6:	95 e0       	ldi	r25, 0x05	; 5
    67b8:	0e 94 16 09 	call	0x122c	; 0x122c <TwoWire::write(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:42
    Wire.write((byte)0x00);    // 09 set alarm hundreds-of-seconds
    67bc:	60 e0       	ldi	r22, 0x00	; 0
    67be:	8b e8       	ldi	r24, 0x8B	; 139
    67c0:	95 e0       	ldi	r25, 0x05	; 5
    67c2:	0e 94 16 09 	call	0x122c	; 0x122c <TwoWire::write(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:43
    Wire.write((byte)0x00);    // 0A set alarm second
    67c6:	60 e0       	ldi	r22, 0x00	; 0
    67c8:	8b e8       	ldi	r24, 0x8B	; 139
    67ca:	95 e0       	ldi	r25, 0x05	; 5
    67cc:	0e 94 16 09 	call	0x122c	; 0x122c <TwoWire::write(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:44
    Wire.write((byte)0x00);    // 0B set alarm minute
    67d0:	60 e0       	ldi	r22, 0x00	; 0
    67d2:	8b e8       	ldi	r24, 0x8B	; 139
    67d4:	95 e0       	ldi	r25, 0x05	; 5
    67d6:	0e 94 16 09 	call	0x122c	; 0x122c <TwoWire::write(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:45
    Wire.write((byte)0x00);    // 0C set alarm hour
    67da:	60 e0       	ldi	r22, 0x00	; 0
    67dc:	8b e8       	ldi	r24, 0x8B	; 139
    67de:	95 e0       	ldi	r25, 0x05	; 5
    67e0:	0e 94 16 09 	call	0x122c	; 0x122c <TwoWire::write(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:46
    Wire.write((byte)0x01);    // 0D set alarm day
    67e4:	61 e0       	ldi	r22, 0x01	; 1
    67e6:	8b e8       	ldi	r24, 0x8B	; 139
    67e8:	95 e0       	ldi	r25, 0x05	; 5
    67ea:	0e 94 16 09 	call	0x122c	; 0x122c <TwoWire::write(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:47
    Wire.write((byte)0x01);    // 0E set alarm month
    67ee:	61 e0       	ldi	r22, 0x01	; 1
    67f0:	8b e8       	ldi	r24, 0x8B	; 139
    67f2:	95 e0       	ldi	r25, 0x05	; 5
    67f4:	0e 94 16 09 	call	0x122c	; 0x122c <TwoWire::write(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:48
    Wire.write((byte)0x00);    // 0F set alarm timer
    67f8:	60 e0       	ldi	r22, 0x00	; 0
    67fa:	8b e8       	ldi	r24, 0x8B	; 139
    67fc:	95 e0       	ldi	r25, 0x05	; 5
    67fe:	0e 94 16 09 	call	0x122c	; 0x122c <TwoWire::write(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:49
    Wire.write((byte)0x00);    // 10 set year offset to 0
    6802:	60 e0       	ldi	r22, 0x00	; 0
    6804:	8b e8       	ldi	r24, 0x8B	; 139
    6806:	95 e0       	ldi	r25, 0x05	; 5
    6808:	0e 94 16 09 	call	0x122c	; 0x122c <TwoWire::write(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:50
    Wire.write((byte)0x00);    // 11 set last read value for year to 0
    680c:	60 e0       	ldi	r22, 0x00	; 0
    680e:	8b e8       	ldi	r24, 0x8B	; 139
    6810:	95 e0       	ldi	r25, 0x05	; 5
    6812:	0e 94 16 09 	call	0x122c	; 0x122c <TwoWire::write(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:52

    Wire.endTransmission();
    6816:	0e 94 4c 04 	call	0x898	; 0x898 <TwoWire::endTransmission() [clone .constprop.152]>
setMode():
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:61
void PCF8583::reset(uint8_t mode) {
    // TODO
}

void PCF8583::setMode(uint8_t mode) {
    uint8_t control = getRegister(LOCATION_CONTROL);
    681a:	c7 01       	movw	r24, r14
    681c:	0e 94 50 12 	call	0x24a0	; 0x24a0 <PCF8583::getRegister(unsigned char) [clone .constprop.83]>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:62
    control = (control & ~MODE_TEST) | (mode & MODE_TEST);
    6820:	8f 7c       	andi	r24, 0xCF	; 207
    6822:	68 2f       	mov	r22, r24
    6824:	60 62       	ori	r22, 0x20	; 32
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:63
    setRegister(LOCATION_CONTROL, control);
    6826:	c7 01       	movw	r24, r14
    6828:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <PCF8583::setRegister(unsigned char, unsigned char) [clone .constprop.89]>
readFlowrate():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:610
        pcf8583.reset();
        pcf8583.setMode(MODE_EVENT_COUNTER);
        pcf8583.setCount(0);
    682c:	c7 01       	movw	r24, r14
    682e:	0e 94 73 12 	call	0x24e6	; 0x24e6 <PCF8583::setCount(unsigned long) [clone .constprop.82]>
_ZN14MeasureChannel7triggerERN2as10AlarmClockE():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:605
      DPRINT(F("+Pressure  (#")); DDEC(number()); DPRINT(F(")       mBar: ")); DDECLN(_p * 10);
      return _p > 0 ? (uint16_t)_p : 0;
    }

    uint8_t readFlowrate() {
      uint8_t lmin = 0;
    6832:	10 e0       	ldi	r17, 0x00	; 0
millis():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    6834:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    6836:	f8 94       	cli
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    6838:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <timer0_millis>
    683c:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <timer0_millis+0x1>
    6840:	a0 91 2f 04 	lds	r26, 0x042F	; 0x80042f <timer0_millis+0x2>
    6844:	b0 91 30 04 	lds	r27, 0x0430	; 0x800430 <timer0_millis+0x3>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    6848:	2f bf       	out	0x3f, r18	; 63
readFlowrate():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:617
        uint32_t cnt = pcf8583.getCount();
        uint32_t hz = (cnt * 1000) / (millis() - millis_lastread);
        lmin = hz* 10 / this->getList1().FlowRateQFactor();
        pcf8583.setCount(0);
      }
      millis_lastread = millis();
    684a:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <MeasureChannel::readFlowrate()::millis_lastread>
    684e:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <MeasureChannel::readFlowrate()::millis_lastread+0x1>
    6852:	a0 93 e4 03 	sts	0x03E4, r26	; 0x8003e4 <MeasureChannel::readFlowrate()::millis_lastread+0x2>
    6856:	b0 93 e5 03 	sts	0x03E5, r27	; 0x8003e5 <MeasureChannel::readFlowrate()::millis_lastread+0x3>
run():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:628

      DPRINT(F("Messung #"));DDECLN(measureCount);

      set(seconds2ticks(max((uint16_t)5,(uint16_t)device().getList0().Messintervall())));

      flowrate = readFlowrate();
    685a:	f1 01       	movw	r30, r2
    685c:	e2 58       	subi	r30, 0x82	; 130
    685e:	ff 4f       	sbci	r31, 0xFF	; 255
    6860:	10 83       	st	Z, r17
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:629
      currentTemperature1 = readTemperature1();
    6862:	c1 01       	movw	r24, r2
    6864:	0e 94 9b 32 	call	0x6536	; 0x6536 <MeasureChannel::readTemperature1()>
    6868:	f1 01       	movw	r30, r2
    686a:	e9 5a       	subi	r30, 0xA9	; 169
    686c:	ff 4f       	sbci	r31, 0xFF	; 255
    686e:	91 83       	std	Z+1, r25	; 0x01
    6870:	80 83       	st	Z, r24
    6872:	e0 e0       	ldi	r30, 0x00	; 0
    6874:	f1 e0       	ldi	r31, 0x01	; 1
    6876:	fa 8b       	std	Y+18, r31	; 0x12
    6878:	e9 8b       	std	Y+17, r30	; 0x11
_ZN14MeasureChannel7triggerERN2as10AlarmClockE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/sensors/Ntc.h:37
  void init () {
    pinMode(SENSEPIN, INPUT);
  }

  bool measure (__attribute__((unused)) bool async=false) {
    uint32_t vo = 0;
    687a:	c1 2c       	mov	r12, r1
    687c:	d1 2c       	mov	r13, r1
    687e:	76 01       	movw	r14, r12
_ZN2as3NtcILh25ELm10000ELj3950ELh0ELa25ELh4EE7measureEb.isra.88():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/sensors/Ntc.h:45
      pinMode(ACTIVATEPIN, OUTPUT);
      digitalWrite(ACTIVATEPIN, HIGH);
    }

    for (uint16_t i = 0; i < 1 << (OVERSAMPLING * 2); i++) {
      vo += analogRead(SENSEPIN);
    6880:	89 e1       	ldi	r24, 0x19	; 25
    6882:	0e 94 1a 08 	call	0x1034	; 0x1034 <analogRead>
    6886:	09 2e       	mov	r0, r25
    6888:	00 0c       	add	r0, r0
    688a:	aa 0b       	sbc	r26, r26
    688c:	bb 0b       	sbc	r27, r27
    688e:	c8 0e       	add	r12, r24
    6890:	d9 1e       	adc	r13, r25
    6892:	ea 1e       	adc	r14, r26
    6894:	fb 1e       	adc	r15, r27
    6896:	29 89       	ldd	r18, Y+17	; 0x11
    6898:	3a 89       	ldd	r19, Y+18	; 0x12
    689a:	21 50       	subi	r18, 0x01	; 1
    689c:	31 09       	sbc	r19, r1
    689e:	3a 8b       	std	Y+18, r19	; 0x12
    68a0:	29 8b       	std	Y+17, r18	; 0x11
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/sensors/Ntc.h:44
    if (ACTIVATEPIN) {
      pinMode(ACTIVATEPIN, OUTPUT);
      digitalWrite(ACTIVATEPIN, HIGH);
    }

    for (uint16_t i = 0; i < 1 << (OVERSAMPLING * 2); i++) {
    68a2:	23 2b       	or	r18, r19
    68a4:	69 f7       	brne	.-38     	; 0x6880 <MeasureChannel::trigger(as::AlarmClock&)+0x1fa>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/sensors/Ntc.h:53
    if (ACTIVATEPIN) {
      digitalWrite(ACTIVATEPIN, LOW);
    }

    if (OVERSAMPLING) {
      vo = vo >> OVERSAMPLING;
    68a6:	64 e0       	ldi	r22, 0x04	; 4
    68a8:	f6 94       	lsr	r15
    68aa:	e7 94       	ror	r14
    68ac:	d7 94       	ror	r13
    68ae:	c7 94       	ror	r12
    68b0:	6a 95       	dec	r22
    68b2:	d1 f7       	brne	.-12     	; 0x68a8 <MeasureChannel::trigger(as::AlarmClock&)+0x222>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/sensors/Ntc.h:59
    }

    vo = _max_ref - vo;

    float rNtc = vo / (float)(_max_ref - vo);
    _temperature = 10 * B * _t0Abs / (10 * B + (int16_t)(log(rNtc) * _t0Abs)) - 2732;
    68b4:	81 01       	movw	r16, r2
    68b6:	0a 5b       	subi	r16, 0xBA	; 186
    68b8:	1f 4f       	sbci	r17, 0xFF	; 255
    68ba:	d8 01       	movw	r26, r16
    68bc:	14 96       	adiw	r26, 0x04	; 4
    68be:	4d 90       	ld	r4, X+
    68c0:	5d 90       	ld	r5, X+
    68c2:	6d 90       	ld	r6, X+
    68c4:	7c 90       	ld	r7, X
    68c6:	17 97       	sbiw	r26, 0x07	; 7
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/sensors/Ntc.h:56

    if (OVERSAMPLING) {
      vo = vo >> OVERSAMPLING;
    }

    vo = _max_ref - vo;
    68c8:	18 96       	adiw	r26, 0x08	; 8
    68ca:	6d 91       	ld	r22, X+
    68cc:	7d 91       	ld	r23, X+
    68ce:	8d 91       	ld	r24, X+
    68d0:	9c 91       	ld	r25, X
    68d2:	1b 97       	sbiw	r26, 0x0b	; 11
    68d4:	6c 19       	sub	r22, r12
    68d6:	7d 09       	sbc	r23, r13
    68d8:	8e 09       	sbc	r24, r14
    68da:	9f 09       	sbc	r25, r15
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/sensors/Ntc.h:58

    float rNtc = vo / (float)(_max_ref - vo);
    68dc:	0e 94 af 4d 	call	0x9b5e	; 0x9b5e <__floatunsisf>
    68e0:	4b 01       	movw	r8, r22
    68e2:	5c 01       	movw	r10, r24
    68e4:	c7 01       	movw	r24, r14
    68e6:	b6 01       	movw	r22, r12
    68e8:	0e 94 af 4d 	call	0x9b5e	; 0x9b5e <__floatunsisf>
    68ec:	9b 01       	movw	r18, r22
    68ee:	ac 01       	movw	r20, r24
    68f0:	c5 01       	movw	r24, r10
    68f2:	b4 01       	movw	r22, r8
    68f4:	0e 94 7d 4f 	call	0x9efa	; 0x9efa <__divsf3>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/sensors/Ntc.h:59
    _temperature = 10 * B * _t0Abs / (10 * B + (int16_t)(log(rNtc) * _t0Abs)) - 2732;
    68f8:	0e 94 32 50 	call	0xa064	; 0xa064 <log>
    68fc:	4b 01       	movw	r8, r22
    68fe:	5c 01       	movw	r10, r24
    6900:	ac e4       	ldi	r26, 0x4C	; 76
    6902:	ba e9       	ldi	r27, 0x9A	; 154
    6904:	a3 01       	movw	r20, r6
    6906:	92 01       	movw	r18, r4
    6908:	0e 94 f6 4e 	call	0x9dec	; 0x9dec <__muluhisi3>
    690c:	6b 01       	movw	r12, r22
    690e:	7c 01       	movw	r14, r24
    6910:	c3 01       	movw	r24, r6
    6912:	b2 01       	movw	r22, r4
    6914:	0e 94 b1 4d 	call	0x9b62	; 0x9b62 <__floatsisf>
    6918:	a5 01       	movw	r20, r10
    691a:	94 01       	movw	r18, r8
    691c:	0e 94 10 4e 	call	0x9c20	; 0x9c20 <__mulsf3>
    6920:	0e 94 ef 4f 	call	0x9fde	; 0x9fde <__fixsfsi>
    6924:	64 5b       	subi	r22, 0xB4	; 180
    6926:	75 46       	sbci	r23, 0x65	; 101
    6928:	9b 01       	movw	r18, r22
    692a:	50 e0       	ldi	r21, 0x00	; 0
    692c:	40 e0       	ldi	r20, 0x00	; 0
    692e:	c7 01       	movw	r24, r14
    6930:	b6 01       	movw	r22, r12
    6932:	0e 94 fa 50 	call	0xa1f4	; 0xa1f4 <__divmodsi4>
    6936:	79 01       	movw	r14, r18
    6938:	bc ea       	ldi	r27, 0xAC	; 172
    693a:	eb 1a       	sub	r14, r27
    693c:	ba e0       	ldi	r27, 0x0A	; 10
    693e:	fb 0a       	sbc	r15, r27
    6940:	f8 01       	movw	r30, r16
    6942:	f3 82       	std	Z+3, r15	; 0x03
    6944:	e2 82       	std	Z+2, r14	; 0x02
readTemperature2():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:411
      return t;
    }

    int16_t readTemperature2() {
      ntc2.measure();
      int16_t t = ntc2.temperature() + (-14+2*this->getList1().TemperatureOffsetIndex2());
    6946:	d1 01       	movw	r26, r2
    6948:	1c 96       	adiw	r26, 0x0c	; 12
    694a:	8d 91       	ld	r24, X+
    694c:	9c 91       	ld	r25, X
    694e:	9a 83       	std	Y+2, r25	; 0x02
    6950:	89 83       	std	Y+1, r24	; 0x01
TemperatureOffsetIndex2():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:136

    bool TemperatureOffsetIndex1 (uint8_t value) const { return this->writeRegister(0x05, value & 0xff); }
    uint8_t TemperatureOffsetIndex1 () const { return this->readRegister(0x05, 0); }

    bool TemperatureOffsetIndex2 (uint8_t value) const { return this->writeRegister(0x06, value & 0xff); }
    uint8_t TemperatureOffsetIndex2 () const { return this->readRegister(0x06, 0); }
    6952:	66 e0       	ldi	r22, 0x06	; 6
    6954:	ce 01       	movw	r24, r28
    6956:	01 96       	adiw	r24, 0x01	; 1
    6958:	0e 94 08 15 	call	0x2a10	; 0x2a10 <as::RegisterList<UReg1>::readRegister(unsigned char, unsigned char) const [clone .constprop.90]>
readTemperature2():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:411
      return t;
    }

    int16_t readTemperature2() {
      ntc2.measure();
      int16_t t = ntc2.temperature() + (-14+2*this->getList1().TemperatureOffsetIndex2());
    695c:	e8 2f       	mov	r30, r24
    695e:	e7 50       	subi	r30, 0x07	; 7
    6960:	ff 0b       	sbc	r31, r31
    6962:	8f 01       	movw	r16, r30
    6964:	00 0f       	add	r16, r16
    6966:	11 1f       	adc	r17, r17
    6968:	0e 0d       	add	r16, r14
    696a:	1f 1d       	adc	r17, r15
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:412
      DPRINT(F("2. Temperatur     : "));DDECLN(t);
    696c:	88 e9       	ldi	r24, 0x98	; 152
    696e:	93 e0       	ldi	r25, 0x03	; 3
    6970:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    6974:	c8 01       	movw	r24, r16
    6976:	0e 94 00 23 	call	0x4600	; 0x4600 <void DDECLN<int>(int)>
run():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:630

      set(seconds2ticks(max((uint16_t)5,(uint16_t)device().getList0().Messintervall())));

      flowrate = readFlowrate();
      currentTemperature1 = readTemperature1();
      currentTemperature2 = readTemperature2();
    697a:	f1 01       	movw	r30, r2
    697c:	e7 5a       	subi	r30, 0xA7	; 167
    697e:	ff 4f       	sbci	r31, 0xFF	; 255
    6980:	11 83       	std	Z+1, r17	; 0x01
    6982:	00 83       	st	Z, r16
readORP():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:580
      return _ph;
    }

    int16_t readORP() {
      //Erfassen der ORP-Sensor Spannung
      int32_t measuredVoltage = readVoltage();
    6984:	0e 94 91 23 	call	0x4722	; 0x4722 <MeasureChannel::readVoltage() [clone .isra.83]>
    6988:	6b 01       	movw	r12, r22
    698a:	7c 01       	movw	r14, r24
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:583
      int16_t orpValue=((30L * REF_VOLTAGE) -(75*(measuredVoltage/10L)))/75;

      orpValue += this->getList1().OrpOffset();
    698c:	d1 01       	movw	r26, r2
    698e:	1c 96       	adiw	r26, 0x0c	; 12
    6990:	8d 91       	ld	r24, X+
    6992:	9c 91       	ld	r25, X
    6994:	9a 83       	std	Y+2, r25	; 0x02
    6996:	89 83       	std	Y+1, r24	; 0x01
    6998:	ce 01       	movw	r24, r28
    699a:	01 96       	adiw	r24, 0x01	; 1
    699c:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <UList1::OrpOffset() const>
    69a0:	2b 01       	movw	r4, r22
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:581
    }

    int16_t readORP() {
      //Erfassen der ORP-Sensor Spannung
      int32_t measuredVoltage = readVoltage();
      int16_t orpValue=((30L * REF_VOLTAGE) -(75*(measuredVoltage/10L)))/75;
    69a2:	c7 01       	movw	r24, r14
    69a4:	b6 01       	movw	r22, r12
    69a6:	26 ef       	ldi	r18, 0xF6	; 246
    69a8:	3f ef       	ldi	r19, 0xFF	; 255
    69aa:	4f ef       	ldi	r20, 0xFF	; 255
    69ac:	5f ef       	ldi	r21, 0xFF	; 255
    69ae:	0e 94 fa 50 	call	0xa1f4	; 0xa1f4 <__divmodsi4>
    69b2:	ab e4       	ldi	r26, 0x4B	; 75
    69b4:	b0 e0       	ldi	r27, 0x00	; 0
    69b6:	0e 94 f6 4e 	call	0x9dec	; 0x9dec <__muluhisi3>
    69ba:	68 54       	subi	r22, 0x48	; 72
    69bc:	7d 47       	sbci	r23, 0x7D	; 125
    69be:	8e 4f       	sbci	r24, 0xFE	; 254
    69c0:	9f 4f       	sbci	r25, 0xFF	; 255
    69c2:	2b e4       	ldi	r18, 0x4B	; 75
    69c4:	30 e0       	ldi	r19, 0x00	; 0
    69c6:	40 e0       	ldi	r20, 0x00	; 0
    69c8:	50 e0       	ldi	r21, 0x00	; 0
    69ca:	0e 94 fa 50 	call	0xa1f4	; 0xa1f4 <__divmodsi4>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:583

      orpValue += this->getList1().OrpOffset();
    69ce:	42 0e       	add	r4, r18
    69d0:	53 1e       	adc	r5, r19
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:585

      DPRINT(F("        ORP       : "));DDECLN(orpValue);
    69d2:	8d ea       	ldi	r24, 0xAD	; 173
    69d4:	93 e0       	ldi	r25, 0x03	; 3
    69d6:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    69da:	c2 01       	movw	r24, r4
    69dc:	0e 94 00 23 	call	0x4600	; 0x4600 <void DDECLN<int>(int)>
run():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:632

      flowrate = readFlowrate();
      currentTemperature1 = readTemperature1();
      currentTemperature2 = readTemperature2();

      orp = readORP();
    69e0:	f1 01       	movw	r30, r2
    69e2:	ee 59       	subi	r30, 0x9E	; 158
    69e4:	ff 4f       	sbci	r31, 0xFF	; 255
    69e6:	51 82       	std	Z+1, r5	; 0x01
    69e8:	40 82       	st	Z, r4
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:634

      digitalWrite(SENSOR_SWITCH_PIN, ON);
    69ea:	61 e0       	ldi	r22, 0x01	; 1
    69ec:	8f e0       	ldi	r24, 0x0F	; 15
    69ee:	0e 94 7e 07 	call	0xefc	; 0xefc <digitalWrite>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:635
      uint16_t ms = toggleWaitTime;
    69f2:	f1 01       	movw	r30, r2
    69f4:	ef 57       	subi	r30, 0x7F	; 127
    69f6:	ff 4f       	sbci	r31, 0xFF	; 255
    69f8:	80 81       	ld	r24, Z
    69fa:	91 81       	ldd	r25, Z+1	; 0x01
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:636
      while (ms-- > 0) _delay_ms(1);
    69fc:	01 97       	sbiw	r24, 0x01	; 1
    69fe:	08 f4       	brcc	.+2      	; 0x6a02 <MeasureChannel::trigger(as::AlarmClock&)+0x37c>
    6a00:	a7 c0       	rjmp	.+334    	; 0x6b50 <MeasureChannel::trigger(as::AlarmClock&)+0x4ca>
_delay_ms():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay.h:187
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    6a02:	ef ec       	ldi	r30, 0xCF	; 207
    6a04:	f7 e0       	ldi	r31, 0x07	; 7
    6a06:	31 97       	sbiw	r30, 0x01	; 1
    6a08:	f1 f7       	brne	.-4      	; 0x6a06 <MeasureChannel::trigger(as::AlarmClock&)+0x380>
    6a0a:	00 c0       	rjmp	.+0      	; 0x6a0c <MeasureChannel::trigger(as::AlarmClock&)+0x386>
    6a0c:	00 00       	nop
    6a0e:	f6 cf       	rjmp	.-20     	; 0x69fc <MeasureChannel::trigger(as::AlarmClock&)+0x376>
getCount():
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:254
}

unsigned long PCF8583::getCount() {

    Wire.beginTransmission(_address);
    Wire.write(LOCATION_COUNTER);
    6a10:	81 e0       	ldi	r24, 0x01	; 1
    6a12:	90 e0       	ldi	r25, 0x00	; 0
    6a14:	0e 94 45 09 	call	0x128a	; 0x128a <TwoWire::write(int) [clone .constprop.151]>
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:255
    Wire.endTransmission();
    6a18:	0e 94 4c 04 	call	0x898	; 0x898 <TwoWire::endTransmission() [clone .constprop.152]>
twi_readFrom():
    6a1c:	63 e0       	ldi	r22, 0x03	; 3
    6a1e:	f7 01       	movw	r30, r14
    6a20:	80 81       	ld	r24, Z
    6a22:	0e 94 71 05 	call	0xae2	; 0xae2 <twi_readFrom.part.0.constprop.88>
requestFrom():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:120
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    6a26:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <TwoWire::rxBufferIndex>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:121
  rxBufferLength = read;
    6a2a:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <TwoWire::rxBufferLength>
getCount():
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:259
    Wire.requestFrom(_address, (uint8_t) 3);

    unsigned long count = 0;
    count = bcd2byte(Wire.read());
    6a2e:	8b e8       	ldi	r24, 0x8B	; 139
    6a30:	95 e0       	ldi	r25, 0x05	; 5
    6a32:	0e 94 cf 08 	call	0x119e	; 0x119e <TwoWire::read()>
bcd2byte():
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:297
    Wire.requestFrom(_address, (uint8_t) 1);
    return Wire.read();
}

uint8_t PCF8583::bcd2byte(uint8_t value){
    return ((value >> 4) * 10) + (value & 0x0f);
    6a36:	9c 01       	movw	r18, r24
    6a38:	e4 e0       	ldi	r30, 0x04	; 4
    6a3a:	35 95       	asr	r19
    6a3c:	27 95       	ror	r18
    6a3e:	ea 95       	dec	r30
    6a40:	e1 f7       	brne	.-8      	; 0x6a3a <MeasureChannel::trigger(as::AlarmClock&)+0x3b4>
    6a42:	2f 70       	andi	r18, 0x0F	; 15
    6a44:	33 27       	eor	r19, r19
    6a46:	fa e0       	ldi	r31, 0x0A	; 10
    6a48:	df 2e       	mov	r13, r31
    6a4a:	8f 70       	andi	r24, 0x0F	; 15
    6a4c:	d2 9e       	mul	r13, r18
    6a4e:	80 0d       	add	r24, r0
    6a50:	11 24       	eor	r1, r1
getCount():
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:259
    Wire.write(LOCATION_COUNTER);
    Wire.endTransmission();
    Wire.requestFrom(_address, (uint8_t) 3);

    unsigned long count = 0;
    count = bcd2byte(Wire.read());
    6a52:	48 2e       	mov	r4, r24
    6a54:	51 2c       	mov	r5, r1
    6a56:	71 2c       	mov	r7, r1
    6a58:	61 2c       	mov	r6, r1
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:260
    count = count + bcd2byte(Wire.read()) * 100L;
    6a5a:	8b e8       	ldi	r24, 0x8B	; 139
    6a5c:	95 e0       	ldi	r25, 0x05	; 5
    6a5e:	0e 94 cf 08 	call	0x119e	; 0x119e <TwoWire::read()>
    6a62:	8c 01       	movw	r16, r24
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:261
    count = count + bcd2byte(Wire.read()) * 10000L;
    6a64:	8b e8       	ldi	r24, 0x8B	; 139
    6a66:	95 e0       	ldi	r25, 0x05	; 5
    6a68:	0e 94 cf 08 	call	0x119e	; 0x119e <TwoWire::read()>
    6a6c:	ac 01       	movw	r20, r24
millis():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    6a6e:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    6a70:	f8 94       	cli
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    6a72:	80 90 2d 04 	lds	r8, 0x042D	; 0x80042d <timer0_millis>
    6a76:	90 90 2e 04 	lds	r9, 0x042E	; 0x80042e <timer0_millis+0x1>
    6a7a:	a0 90 2f 04 	lds	r10, 0x042F	; 0x80042f <timer0_millis+0x2>
    6a7e:	b0 90 30 04 	lds	r11, 0x0430	; 0x800430 <timer0_millis+0x3>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    6a82:	8f bf       	out	0x3f, r24	; 63
bcd2byte():
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:297
    Wire.requestFrom(_address, (uint8_t) 1);
    return Wire.read();
}

uint8_t PCF8583::bcd2byte(uint8_t value){
    return ((value >> 4) * 10) + (value & 0x0f);
    6a84:	c8 01       	movw	r24, r16
    6a86:	a4 e0       	ldi	r26, 0x04	; 4
    6a88:	95 95       	asr	r25
    6a8a:	87 95       	ror	r24
    6a8c:	aa 95       	dec	r26
    6a8e:	e1 f7       	brne	.-8      	; 0x6a88 <MeasureChannel::trigger(as::AlarmClock&)+0x402>
    6a90:	8f 70       	andi	r24, 0x0F	; 15
    6a92:	99 27       	eor	r25, r25
    6a94:	0f 70       	andi	r16, 0x0F	; 15
    6a96:	d8 9e       	mul	r13, r24
    6a98:	00 0d       	add	r16, r0
    6a9a:	11 24       	eor	r1, r1
getCount():
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:260
    Wire.endTransmission();
    Wire.requestFrom(_address, (uint8_t) 3);

    unsigned long count = 0;
    count = bcd2byte(Wire.read());
    count = count + bcd2byte(Wire.read()) * 100L;
    6a9c:	20 2f       	mov	r18, r16
    6a9e:	30 e0       	ldi	r19, 0x00	; 0
    6aa0:	a4 e6       	ldi	r26, 0x64	; 100
    6aa2:	b0 e0       	ldi	r27, 0x00	; 0
    6aa4:	0e 94 01 4f 	call	0x9e02	; 0x9e02 <__umulhisi3>
    6aa8:	69 8b       	std	Y+17, r22	; 0x11
    6aaa:	7a 8b       	std	Y+18, r23	; 0x12
    6aac:	8b 8b       	std	Y+19, r24	; 0x13
    6aae:	9c 8b       	std	Y+20, r25	; 0x14
bcd2byte():
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:297
    Wire.requestFrom(_address, (uint8_t) 1);
    return Wire.read();
}

uint8_t PCF8583::bcd2byte(uint8_t value){
    return ((value >> 4) * 10) + (value & 0x0f);
    6ab0:	ca 01       	movw	r24, r20
    6ab2:	b4 e0       	ldi	r27, 0x04	; 4
    6ab4:	95 95       	asr	r25
    6ab6:	87 95       	ror	r24
    6ab8:	ba 95       	dec	r27
    6aba:	e1 f7       	brne	.-8      	; 0x6ab4 <MeasureChannel::trigger(as::AlarmClock&)+0x42e>
    6abc:	8f 70       	andi	r24, 0x0F	; 15
    6abe:	99 27       	eor	r25, r25
    6ac0:	4f 70       	andi	r20, 0x0F	; 15
    6ac2:	d8 9e       	mul	r13, r24
    6ac4:	40 0d       	add	r20, r0
    6ac6:	11 24       	eor	r1, r1
getCount():
C:\Users\Mister\Documents\Arduino\libraries\PCF8583\src/PCF8583.cpp:261
    Wire.requestFrom(_address, (uint8_t) 3);

    unsigned long count = 0;
    count = bcd2byte(Wire.read());
    count = count + bcd2byte(Wire.read()) * 100L;
    count = count + bcd2byte(Wire.read()) * 10000L;
    6ac8:	24 2f       	mov	r18, r20
    6aca:	30 e0       	ldi	r19, 0x00	; 0
    6acc:	a0 e1       	ldi	r26, 0x10	; 16
    6ace:	b7 e2       	ldi	r27, 0x27	; 39
    6ad0:	0e 94 01 4f 	call	0x9e02	; 0x9e02 <__umulhisi3>
    6ad4:	29 89       	ldd	r18, Y+17	; 0x11
    6ad6:	3a 89       	ldd	r19, Y+18	; 0x12
    6ad8:	4b 89       	ldd	r20, Y+19	; 0x13
    6ada:	5c 89       	ldd	r21, Y+20	; 0x14
    6adc:	26 0f       	add	r18, r22
    6ade:	37 1f       	adc	r19, r23
    6ae0:	48 1f       	adc	r20, r24
    6ae2:	59 1f       	adc	r21, r25
    6ae4:	24 0d       	add	r18, r4
    6ae6:	35 1d       	adc	r19, r5
    6ae8:	46 1d       	adc	r20, r6
    6aea:	57 1d       	adc	r21, r7
readFlowrate():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:613
        pcf8583.reset();
        pcf8583.setMode(MODE_EVENT_COUNTER);
        pcf8583.setCount(0);
      } else {
        uint32_t cnt = pcf8583.getCount();
        uint32_t hz = (cnt * 1000) / (millis() - millis_lastread);
    6aec:	a8 ee       	ldi	r26, 0xE8	; 232
    6aee:	b3 e0       	ldi	r27, 0x03	; 3
    6af0:	0e 94 f6 4e 	call	0x9dec	; 0x9dec <__muluhisi3>
    6af4:	00 91 e2 03 	lds	r16, 0x03E2	; 0x8003e2 <MeasureChannel::readFlowrate()::millis_lastread>
    6af8:	10 91 e3 03 	lds	r17, 0x03E3	; 0x8003e3 <MeasureChannel::readFlowrate()::millis_lastread+0x1>
    6afc:	20 91 e4 03 	lds	r18, 0x03E4	; 0x8003e4 <MeasureChannel::readFlowrate()::millis_lastread+0x2>
    6b00:	30 91 e5 03 	lds	r19, 0x03E5	; 0x8003e5 <MeasureChannel::readFlowrate()::millis_lastread+0x3>
    6b04:	24 01       	movw	r4, r8
    6b06:	35 01       	movw	r6, r10
    6b08:	40 1a       	sub	r4, r16
    6b0a:	51 0a       	sbc	r5, r17
    6b0c:	62 0a       	sbc	r6, r18
    6b0e:	73 0a       	sbc	r7, r19
    6b10:	a3 01       	movw	r20, r6
    6b12:	92 01       	movw	r18, r4
    6b14:	0e 94 d8 50 	call	0xa1b0	; 0xa1b0 <__udivmodsi4>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:614
        lmin = hz* 10 / this->getList1().FlowRateQFactor();
    6b18:	aa e0       	ldi	r26, 0x0A	; 10
    6b1a:	b0 e0       	ldi	r27, 0x00	; 0
    6b1c:	0e 94 f6 4e 	call	0x9dec	; 0x9dec <__muluhisi3>
    6b20:	2b 01       	movw	r4, r22
    6b22:	3c 01       	movw	r6, r24
    6b24:	d1 01       	movw	r26, r2
    6b26:	1c 96       	adiw	r26, 0x0c	; 12
    6b28:	8d 91       	ld	r24, X+
    6b2a:	9c 91       	ld	r25, X
    6b2c:	9a 83       	std	Y+2, r25	; 0x02
    6b2e:	89 83       	std	Y+1, r24	; 0x01
    6b30:	ce 01       	movw	r24, r28
    6b32:	01 96       	adiw	r24, 0x01	; 1
    6b34:	0e 94 34 15 	call	0x2a68	; 0x2a68 <UList1::FlowRateQFactor() const>
    6b38:	9c 01       	movw	r18, r24
    6b3a:	50 e0       	ldi	r21, 0x00	; 0
    6b3c:	40 e0       	ldi	r20, 0x00	; 0
    6b3e:	c3 01       	movw	r24, r6
    6b40:	b2 01       	movw	r22, r4
    6b42:	0e 94 d8 50 	call	0xa1b0	; 0xa1b0 <__udivmodsi4>
    6b46:	12 2f       	mov	r17, r18
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:615
        pcf8583.setCount(0);
    6b48:	c7 01       	movw	r24, r14
    6b4a:	0e 94 73 12 	call	0x24e6	; 0x24e6 <PCF8583::setCount(unsigned long) [clone .constprop.82]>
    6b4e:	72 ce       	rjmp	.-796    	; 0x6834 <MeasureChannel::trigger(as::AlarmClock&)+0x1ae>
readPH():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:553
        phcalibrationStep = 0;
      }
    }

    uint16_t readPH() {
      if (first) {
    6b50:	61 01       	movw	r12, r2
    6b52:	f5 e5       	ldi	r31, 0x55	; 85
    6b54:	cf 0e       	add	r12, r31
    6b56:	d1 1c       	adc	r13, r1
    6b58:	d6 01       	movw	r26, r12
    6b5a:	8c 91       	ld	r24, X
    6b5c:	81 01       	movw	r16, r2
    6b5e:	0c 59       	subi	r16, 0x9C	; 156
    6b60:	1f 4f       	sbci	r17, 0xFF	; 255
    6b62:	88 23       	and	r24, r24
    6b64:	09 f4       	brne	.+2      	; 0x6b68 <MeasureChannel::trigger(as::AlarmClock&)+0x4e2>
    6b66:	a5 c0       	rjmp	.+330    	; 0x6cb2 <MeasureChannel::trigger(as::AlarmClock&)+0x62c>
getByte():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:615
  void clear () {
    storage().clearData(getAddress(),getSize());
  }

  uint8_t getByte (uint16_t offset) const {
    return storage().getByte(getAddress()+offset);
    6b68:	f1 01       	movw	r30, r2
    6b6a:	87 a9       	ldd	r24, Z+55	; 0x37
    6b6c:	90 ad       	ldd	r25, Z+56	; 0x38
    6b6e:	01 96       	adiw	r24, 0x01	; 1
    6b70:	0e 94 bd 14 	call	0x297a	; 0x297a <as::InternalEprom::getByte(unsigned int) [clone .isra.4]>
    6b74:	f8 2e       	mov	r15, r24
    6b76:	d1 01       	movw	r26, r2
    6b78:	d7 96       	adiw	r26, 0x37	; 55
    6b7a:	8d 91       	ld	r24, X+
    6b7c:	9c 91       	ld	r25, X
    6b7e:	02 96       	adiw	r24, 0x02	; 2
    6b80:	0e 94 bd 14 	call	0x297a	; 0x297a <as::InternalEprom::getByte(unsigned int) [clone .isra.4]>
restorePHCalibrationValues():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:445

      DPRINT("Calibration is ");DPRINTLN(calib_valid == true ? "valid":"INVALID");
    }

    void restorePHCalibrationValues() {
      calib_neutralVoltage = ((uint16_t)(us.getByte(1)) << 8) + ((uint16_t)(us.getByte(2)));
    6b84:	2f 2d       	mov	r18, r15
    6b86:	30 e0       	ldi	r19, 0x00	; 0
    6b88:	32 2f       	mov	r19, r18
    6b8a:	22 27       	eor	r18, r18
    6b8c:	82 0f       	add	r24, r18
    6b8e:	93 2f       	mov	r25, r19
    6b90:	91 1d       	adc	r25, r1
    6b92:	f8 01       	movw	r30, r16
    6b94:	91 83       	std	Z+1, r25	; 0x01
    6b96:	80 83       	st	Z, r24
getByte():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:615
    6b98:	d1 01       	movw	r26, r2
    6b9a:	d7 96       	adiw	r26, 0x37	; 55
    6b9c:	8d 91       	ld	r24, X+
    6b9e:	9c 91       	ld	r25, X
    6ba0:	03 96       	adiw	r24, 0x03	; 3
    6ba2:	0e 94 bd 14 	call	0x297a	; 0x297a <as::InternalEprom::getByte(unsigned int) [clone .isra.4]>
    6ba6:	a8 2e       	mov	r10, r24
    6ba8:	f1 01       	movw	r30, r2
    6baa:	87 a9       	ldd	r24, Z+55	; 0x37
    6bac:	90 ad       	ldd	r25, Z+56	; 0x38
    6bae:	04 96       	adiw	r24, 0x04	; 4
    6bb0:	0e 94 bd 14 	call	0x297a	; 0x297a <as::InternalEprom::getByte(unsigned int) [clone .isra.4]>
restorePHCalibrationValues():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:446
      calib_acidVoltage    = ((uint16_t)(us.getByte(3)) << 8) + ((uint16_t)(us.getByte(4)));
    6bb4:	71 01       	movw	r14, r2
    6bb6:	f6 e6       	ldi	r31, 0x66	; 102
    6bb8:	ef 0e       	add	r14, r31
    6bba:	f1 1c       	adc	r15, r1
    6bbc:	2a 2d       	mov	r18, r10
    6bbe:	30 e0       	ldi	r19, 0x00	; 0
    6bc0:	32 2f       	mov	r19, r18
    6bc2:	22 27       	eor	r18, r18
    6bc4:	82 0f       	add	r24, r18
    6bc6:	93 2f       	mov	r25, r19
    6bc8:	91 1d       	adc	r25, r1
    6bca:	d7 01       	movw	r26, r14
    6bcc:	8d 93       	st	X+, r24
    6bce:	9c 93       	st	X, r25
getByte():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:615
    6bd0:	f1 01       	movw	r30, r2
    6bd2:	87 a9       	ldd	r24, Z+55	; 0x37
    6bd4:	90 ad       	ldd	r25, Z+56	; 0x38
    6bd6:	05 96       	adiw	r24, 0x05	; 5
    6bd8:	0e 94 bd 14 	call	0x297a	; 0x297a <as::InternalEprom::getByte(unsigned int) [clone .isra.4]>
    6bdc:	a8 2e       	mov	r10, r24
    6bde:	d1 01       	movw	r26, r2
    6be0:	d7 96       	adiw	r26, 0x37	; 55
    6be2:	8d 91       	ld	r24, X+
    6be4:	9c 91       	ld	r25, X
    6be6:	06 96       	adiw	r24, 0x06	; 6
    6be8:	0e 94 bd 14 	call	0x297a	; 0x297a <as::InternalEprom::getByte(unsigned int) [clone .isra.4]>
restorePHCalibrationValues():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:447
      calib_Temperature    = ((uint16_t)(us.getByte(5)) << 8) + ((uint16_t)(us.getByte(6)));
    6bec:	41 01       	movw	r8, r2
    6bee:	bb e5       	ldi	r27, 0x5B	; 91
    6bf0:	8b 0e       	add	r8, r27
    6bf2:	91 1c       	adc	r9, r1
    6bf4:	2a 2d       	mov	r18, r10
    6bf6:	30 e0       	ldi	r19, 0x00	; 0
    6bf8:	32 2f       	mov	r19, r18
    6bfa:	22 27       	eor	r18, r18
    6bfc:	82 0f       	add	r24, r18
    6bfe:	93 2f       	mov	r25, r19
    6c00:	91 1d       	adc	r25, r1
    6c02:	f4 01       	movw	r30, r8
    6c04:	91 83       	std	Z+1, r25	; 0x01
    6c06:	80 83       	st	Z, r24
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:449

      DPRINTLN(F("Restored Calibration Values:"));
    6c08:	87 e0       	ldi	r24, 0x07	; 7
    6c0a:	94 e0       	ldi	r25, 0x04	; 4
    6c0c:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <void DPRINTLN<__FlashStringHelper const*>(__FlashStringHelper const*)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:450
      DPRINT(F("-CAL neutralVoltage: "));DDECLN(calib_neutralVoltage);
    6c10:	81 ef       	ldi	r24, 0xF1	; 241
    6c12:	93 e0       	ldi	r25, 0x03	; 3
    6c14:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    6c18:	d8 01       	movw	r26, r16
    6c1a:	8d 91       	ld	r24, X+
    6c1c:	9c 91       	ld	r25, X
    6c1e:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <void DDECLN<unsigned int>(unsigned int)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:451
      DPRINT(F("-CAL acidVoltage   : "));DDECLN(calib_acidVoltage);
    6c22:	8b ed       	ldi	r24, 0xDB	; 219
    6c24:	93 e0       	ldi	r25, 0x03	; 3
    6c26:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    6c2a:	f7 01       	movw	r30, r14
    6c2c:	80 81       	ld	r24, Z
    6c2e:	91 81       	ldd	r25, Z+1	; 0x01
    6c30:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <void DDECLN<unsigned int>(unsigned int)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:452
      DPRINT(F("-CAL temperature   : "));DDECLN(calib_Temperature);
    6c34:	85 ec       	ldi	r24, 0xC5	; 197
    6c36:	93 e0       	ldi	r25, 0x03	; 3
    6c38:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    6c3c:	d4 01       	movw	r26, r8
    6c3e:	8d 91       	ld	r24, X+
    6c40:	9c 91       	ld	r25, X
    6c42:	0e 94 00 23 	call	0x4600	; 0x4600 <void DDECLN<int>(int)>
validatePHCalibrationValues():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:437
      return voltage;
    }

    void validatePHCalibrationValues() {
      calib_valid =
          (calib_neutralVoltage > 13220 && calib_neutralVoltage < 16780)
    6c46:	f8 01       	movw	r30, r16
    6c48:	80 81       	ld	r24, Z
    6c4a:	91 81       	ldd	r25, Z+1	; 0x01
    6c4c:	85 5a       	subi	r24, 0xA5	; 165
    6c4e:	93 43       	sbci	r25, 0x33	; 51
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:438
          &&
    6c50:	87 3e       	cpi	r24, 0xE7	; 231
    6c52:	9d 40       	sbci	r25, 0x0D	; 13
    6c54:	58 f4       	brcc	.+22     	; 0x6c6c <MeasureChannel::trigger(as::AlarmClock&)+0x5e6>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:439
          (calib_acidVoltage    > 18540 && calib_acidVoltage    < 22100) ;
    6c56:	d7 01       	movw	r26, r14
    6c58:	8d 91       	ld	r24, X+
    6c5a:	9c 91       	ld	r25, X
    6c5c:	8d 56       	subi	r24, 0x6D	; 109
    6c5e:	98 44       	sbci	r25, 0x48	; 72
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:438
    }

    void validatePHCalibrationValues() {
      calib_valid =
          (calib_neutralVoltage > 13220 && calib_neutralVoltage < 16780)
          &&
    6c60:	b1 e0       	ldi	r27, 0x01	; 1
    6c62:	bd 87       	std	Y+13, r27	; 0x0d
    6c64:	87 3e       	cpi	r24, 0xE7	; 231
    6c66:	9d 40       	sbci	r25, 0x0D	; 13
    6c68:	08 f0       	brcs	.+2      	; 0x6c6c <MeasureChannel::trigger(as::AlarmClock&)+0x5e6>
    6c6a:	1d 86       	std	Y+13, r1	; 0x0d
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:436

      return voltage;
    }

    void validatePHCalibrationValues() {
      calib_valid =
    6c6c:	71 01       	movw	r14, r2
    6c6e:	f6 e5       	ldi	r31, 0x56	; 86
    6c70:	ef 0e       	add	r14, r31
    6c72:	f1 1c       	adc	r15, r1
    6c74:	4d 84       	ldd	r4, Y+13	; 0x0d
    6c76:	d7 01       	movw	r26, r14
    6c78:	4c 92       	st	X, r4
DPRINT():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:40
#ifndef DSERIAL
  #define DSERIAL Serial
#endif

  template <class T>
  inline void DPRINT(T str) { DSERIAL.print(str); }
    6c7a:	65 e5       	ldi	r22, 0x55	; 85
    6c7c:	73 e0       	ldi	r23, 0x03	; 3
    6c7e:	89 ed       	ldi	r24, 0xD9	; 217
    6c80:	94 e0       	ldi	r25, 0x04	; 4
    6c82:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <Print::print(char const*)>
validatePHCalibrationValues():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:441
          (calib_neutralVoltage > 13220 && calib_neutralVoltage < 16780)
          &&
          (calib_acidVoltage    > 18540 && calib_acidVoltage    < 22100) ;

      DPRINT("Calibration is ");DPRINTLN(calib_valid == true ? "valid":"INVALID");
    6c86:	d7 01       	movw	r26, r14
    6c88:	8c 91       	ld	r24, X
_ZN14MeasureChannel7triggerERN2as10AlarmClockE():
    6c8a:	67 e4       	ldi	r22, 0x47	; 71
    6c8c:	73 e0       	ldi	r23, 0x03	; 3
validatePHCalibrationValues():
    6c8e:	81 11       	cpse	r24, r1
    6c90:	02 c0       	rjmp	.+4      	; 0x6c96 <MeasureChannel::trigger(as::AlarmClock&)+0x610>
_ZN14MeasureChannel7triggerERN2as10AlarmClockE():
    6c92:	6d e4       	ldi	r22, 0x4D	; 77
    6c94:	73 e0       	ldi	r23, 0x03	; 3
DPRINT():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:40
    6c96:	89 ed       	ldi	r24, 0xD9	; 217
    6c98:	94 e0       	ldi	r25, 0x04	; 4
    6c9a:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <Print::print(char const*)>
DPRINTLN():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:42
  template <class T>
  inline void DPRINTLN(T str) { DPRINT(str); DPRINT(F("\r\n")); }
    6c9e:	82 ec       	ldi	r24, 0xC2	; 194
    6ca0:	93 e0       	ldi	r25, 0x03	; 3
    6ca2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
_ZN2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_5List4ELi6E6UList0SF_E7changedEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:50
    6ca6:	f1 01       	movw	r30, r2
    6ca8:	82 85       	ldd	r24, Z+10	; 0x0a
    6caa:	81 60       	ori	r24, 0x01	; 1
    6cac:	82 87       	std	Z+10, r24	; 0x0a
readPH():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:555
    }

    uint16_t readPH() {
      if (first) {
        restorePHCalibrationValues();
        first = false;
    6cae:	d6 01       	movw	r26, r12
    6cb0:	1c 92       	st	X, r1
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:558
      }
      //Erfassen der PH-Sensor Spannung
      uint32_t measuredVoltage = readVoltage();
    6cb2:	0e 94 91 23 	call	0x4722	; 0x4722 <MeasureChannel::readVoltage() [clone .isra.83]>
    6cb6:	6d 87       	std	Y+13, r22	; 0x0d
    6cb8:	7e 87       	std	Y+14, r23	; 0x0e
    6cba:	8f 87       	std	Y+15, r24	; 0x0f
    6cbc:	98 8b       	std	Y+16, r25	; 0x10
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:562

      //PH-Berechnung:
      //1.) slope
      float slope = (7.0-4.0)/((((float)calib_neutralVoltage/10.0)-1500.0)/3.0 - (((float)calib_acidVoltage / 10.0)-1500.0)/3.0);
    6cbe:	f8 01       	movw	r30, r16
    6cc0:	60 81       	ld	r22, Z
    6cc2:	71 81       	ldd	r23, Z+1	; 0x01
    6cc4:	90 e0       	ldi	r25, 0x00	; 0
    6cc6:	80 e0       	ldi	r24, 0x00	; 0
    6cc8:	0e 94 af 4d 	call	0x9b5e	; 0x9b5e <__floatunsisf>
    6ccc:	20 e0       	ldi	r18, 0x00	; 0
    6cce:	30 e0       	ldi	r19, 0x00	; 0
    6cd0:	40 e2       	ldi	r20, 0x20	; 32
    6cd2:	51 e4       	ldi	r21, 0x41	; 65
    6cd4:	0e 94 7d 4f 	call	0x9efa	; 0x9efa <__divsf3>
    6cd8:	20 e0       	ldi	r18, 0x00	; 0
    6cda:	30 e8       	ldi	r19, 0x80	; 128
    6cdc:	4b eb       	ldi	r20, 0xBB	; 187
    6cde:	54 e4       	ldi	r21, 0x44	; 68
    6ce0:	0e 94 10 4f 	call	0x9e20	; 0x9e20 <__subsf3>
    6ce4:	6b 01       	movw	r12, r22
    6ce6:	7c 01       	movw	r14, r24
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:566
      //DPRINT(F("         SLOPE    : "));DDECLN(slope);

      //1a.) slope temperature compensation
      float slope_corrected = slope * ( ( ((float)currentTemperature1 / 10.0) +273.15) / ( ((float)calib_Temperature / 10.0)  + 273.15) );
    6ce8:	91 01       	movw	r18, r2
    6cea:	29 5a       	subi	r18, 0xA9	; 169
    6cec:	3f 4f       	sbci	r19, 0xFF	; 255
    6cee:	3e 8b       	std	Y+22, r19	; 0x16
    6cf0:	2d 8b       	std	Y+21, r18	; 0x15
    6cf2:	d9 01       	movw	r26, r18
    6cf4:	6d 91       	ld	r22, X+
    6cf6:	7c 91       	ld	r23, X
    6cf8:	07 2e       	mov	r0, r23
    6cfa:	00 0c       	add	r0, r0
    6cfc:	88 0b       	sbc	r24, r24
    6cfe:	99 0b       	sbc	r25, r25
    6d00:	0e 94 b1 4d 	call	0x9b62	; 0x9b62 <__floatsisf>
    6d04:	20 e0       	ldi	r18, 0x00	; 0
    6d06:	30 e0       	ldi	r19, 0x00	; 0
    6d08:	40 e2       	ldi	r20, 0x20	; 32
    6d0a:	51 e4       	ldi	r21, 0x41	; 65
    6d0c:	0e 94 7d 4f 	call	0x9efa	; 0x9efa <__divsf3>
    6d10:	23 e3       	ldi	r18, 0x33	; 51
    6d12:	33 e9       	ldi	r19, 0x93	; 147
    6d14:	48 e8       	ldi	r20, 0x88	; 136
    6d16:	53 e4       	ldi	r21, 0x43	; 67
    6d18:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <__addsf3>
    6d1c:	4b 01       	movw	r8, r22
    6d1e:	5c 01       	movw	r10, r24
    6d20:	f1 01       	movw	r30, r2
    6d22:	e5 5a       	subi	r30, 0xA5	; 165
    6d24:	ff 4f       	sbci	r31, 0xFF	; 255
    6d26:	60 81       	ld	r22, Z
    6d28:	71 81       	ldd	r23, Z+1	; 0x01
    6d2a:	07 2e       	mov	r0, r23
    6d2c:	00 0c       	add	r0, r0
    6d2e:	88 0b       	sbc	r24, r24
    6d30:	99 0b       	sbc	r25, r25
    6d32:	0e 94 b1 4d 	call	0x9b62	; 0x9b62 <__floatsisf>
    6d36:	20 e0       	ldi	r18, 0x00	; 0
    6d38:	30 e0       	ldi	r19, 0x00	; 0
    6d3a:	40 e2       	ldi	r20, 0x20	; 32
    6d3c:	51 e4       	ldi	r21, 0x41	; 65
    6d3e:	0e 94 7d 4f 	call	0x9efa	; 0x9efa <__divsf3>
    6d42:	23 e3       	ldi	r18, 0x33	; 51
    6d44:	33 e9       	ldi	r19, 0x93	; 147
    6d46:	48 e8       	ldi	r20, 0x88	; 136
    6d48:	53 e4       	ldi	r21, 0x43	; 67
    6d4a:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <__addsf3>
    6d4e:	9b 01       	movw	r18, r22
    6d50:	ac 01       	movw	r20, r24
    6d52:	c5 01       	movw	r24, r10
    6d54:	b4 01       	movw	r22, r8
    6d56:	0e 94 7d 4f 	call	0x9efa	; 0x9efa <__divsf3>
    6d5a:	4b 01       	movw	r8, r22
    6d5c:	5c 01       	movw	r10, r24
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:562
      //Erfassen der PH-Sensor Spannung
      uint32_t measuredVoltage = readVoltage();

      //PH-Berechnung:
      //1.) slope
      float slope = (7.0-4.0)/((((float)calib_neutralVoltage/10.0)-1500.0)/3.0 - (((float)calib_acidVoltage / 10.0)-1500.0)/3.0);
    6d5e:	20 e0       	ldi	r18, 0x00	; 0
    6d60:	30 e0       	ldi	r19, 0x00	; 0
    6d62:	40 e4       	ldi	r20, 0x40	; 64
    6d64:	50 e4       	ldi	r21, 0x40	; 64
    6d66:	c7 01       	movw	r24, r14
    6d68:	b6 01       	movw	r22, r12
    6d6a:	0e 94 7d 4f 	call	0x9efa	; 0x9efa <__divsf3>
    6d6e:	2b 01       	movw	r4, r22
    6d70:	3c 01       	movw	r6, r24
    6d72:	f1 01       	movw	r30, r2
    6d74:	ea 59       	subi	r30, 0x9A	; 154
    6d76:	ff 4f       	sbci	r31, 0xFF	; 255
    6d78:	60 81       	ld	r22, Z
    6d7a:	71 81       	ldd	r23, Z+1	; 0x01
    6d7c:	90 e0       	ldi	r25, 0x00	; 0
    6d7e:	80 e0       	ldi	r24, 0x00	; 0
    6d80:	0e 94 af 4d 	call	0x9b5e	; 0x9b5e <__floatunsisf>
    6d84:	20 e0       	ldi	r18, 0x00	; 0
    6d86:	30 e0       	ldi	r19, 0x00	; 0
    6d88:	40 e2       	ldi	r20, 0x20	; 32
    6d8a:	51 e4       	ldi	r21, 0x41	; 65
    6d8c:	0e 94 7d 4f 	call	0x9efa	; 0x9efa <__divsf3>
    6d90:	20 e0       	ldi	r18, 0x00	; 0
    6d92:	30 e8       	ldi	r19, 0x80	; 128
    6d94:	4b eb       	ldi	r20, 0xBB	; 187
    6d96:	54 e4       	ldi	r21, 0x44	; 68
    6d98:	0e 94 10 4f 	call	0x9e20	; 0x9e20 <__subsf3>
    6d9c:	20 e0       	ldi	r18, 0x00	; 0
    6d9e:	30 e0       	ldi	r19, 0x00	; 0
    6da0:	40 e4       	ldi	r20, 0x40	; 64
    6da2:	50 e4       	ldi	r21, 0x40	; 64
    6da4:	0e 94 7d 4f 	call	0x9efa	; 0x9efa <__divsf3>
    6da8:	9b 01       	movw	r18, r22
    6daa:	ac 01       	movw	r20, r24
    6dac:	c3 01       	movw	r24, r6
    6dae:	b2 01       	movw	r22, r4
    6db0:	0e 94 10 4f 	call	0x9e20	; 0x9e20 <__subsf3>
    6db4:	9b 01       	movw	r18, r22
    6db6:	ac 01       	movw	r20, r24
    6db8:	60 e0       	ldi	r22, 0x00	; 0
    6dba:	70 e0       	ldi	r23, 0x00	; 0
    6dbc:	80 e4       	ldi	r24, 0x40	; 64
    6dbe:	90 e4       	ldi	r25, 0x40	; 64
    6dc0:	0e 94 7d 4f 	call	0x9efa	; 0x9efa <__divsf3>
    6dc4:	9b 01       	movw	r18, r22
    6dc6:	ac 01       	movw	r20, r24
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:566
      //DPRINT(F("         SLOPE    : "));DDECLN(slope);

      //1a.) slope temperature compensation
      float slope_corrected = slope * ( ( ((float)currentTemperature1 / 10.0) +273.15) / ( ((float)calib_Temperature / 10.0)  + 273.15) );
    6dc8:	c5 01       	movw	r24, r10
    6dca:	b4 01       	movw	r22, r8
    6dcc:	0e 94 10 4e 	call	0x9c20	; 0x9c20 <__mulsf3>
    6dd0:	4b 01       	movw	r8, r22
    6dd2:	5c 01       	movw	r10, r24
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:573

      //2.) intercept
      float intercept =  7.0 - slope_corrected*(((float)calib_neutralVoltage/10.0)-1500.0)/3.0;
      //DPRINT(F("         INTERCEPT: "));DDECLN(intercept);
      //3.) PH
      uint16_t _ph = ( slope_corrected*( ((float)measuredVoltage/10.0) - 1500.0 ) / 3.0 + intercept ) * 100.0; //PH Wert muss mit 100 multipliziert werden, da nur "ganze Bytes" übertragen werden können (PH 7.2 ^= 72)
    6dd4:	6d 85       	ldd	r22, Y+13	; 0x0d
    6dd6:	7e 85       	ldd	r23, Y+14	; 0x0e
    6dd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    6dda:	98 89       	ldd	r25, Y+16	; 0x10
    6ddc:	0e 94 af 4d 	call	0x9b5e	; 0x9b5e <__floatunsisf>
    6de0:	20 e0       	ldi	r18, 0x00	; 0
    6de2:	30 e0       	ldi	r19, 0x00	; 0
    6de4:	40 e2       	ldi	r20, 0x20	; 32
    6de6:	51 e4       	ldi	r21, 0x41	; 65
    6de8:	0e 94 7d 4f 	call	0x9efa	; 0x9efa <__divsf3>
    6dec:	20 e0       	ldi	r18, 0x00	; 0
    6dee:	30 e8       	ldi	r19, 0x80	; 128
    6df0:	4b eb       	ldi	r20, 0xBB	; 187
    6df2:	54 e4       	ldi	r21, 0x44	; 68
    6df4:	0e 94 10 4f 	call	0x9e20	; 0x9e20 <__subsf3>
    6df8:	a5 01       	movw	r20, r10
    6dfa:	94 01       	movw	r18, r8
    6dfc:	0e 94 10 4e 	call	0x9c20	; 0x9c20 <__mulsf3>
    6e00:	20 e0       	ldi	r18, 0x00	; 0
    6e02:	30 e0       	ldi	r19, 0x00	; 0
    6e04:	40 e4       	ldi	r20, 0x40	; 64
    6e06:	50 e4       	ldi	r21, 0x40	; 64
    6e08:	0e 94 7d 4f 	call	0x9efa	; 0x9efa <__divsf3>
    6e0c:	2b 01       	movw	r4, r22
    6e0e:	3c 01       	movw	r6, r24
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:570
      //1a.) slope temperature compensation
      float slope_corrected = slope * ( ( ((float)currentTemperature1 / 10.0) +273.15) / ( ((float)calib_Temperature / 10.0)  + 273.15) );
      //DPRINT(F("         SLOPECORR: "));DDECLN(slope_corrected);

      //2.) intercept
      float intercept =  7.0 - slope_corrected*(((float)calib_neutralVoltage/10.0)-1500.0)/3.0;
    6e10:	a5 01       	movw	r20, r10
    6e12:	94 01       	movw	r18, r8
    6e14:	c7 01       	movw	r24, r14
    6e16:	b6 01       	movw	r22, r12
    6e18:	0e 94 10 4e 	call	0x9c20	; 0x9c20 <__mulsf3>
    6e1c:	20 e0       	ldi	r18, 0x00	; 0
    6e1e:	30 e0       	ldi	r19, 0x00	; 0
    6e20:	40 e4       	ldi	r20, 0x40	; 64
    6e22:	50 e4       	ldi	r21, 0x40	; 64
    6e24:	0e 94 7d 4f 	call	0x9efa	; 0x9efa <__divsf3>
    6e28:	9b 01       	movw	r18, r22
    6e2a:	ac 01       	movw	r20, r24
    6e2c:	60 e0       	ldi	r22, 0x00	; 0
    6e2e:	70 e0       	ldi	r23, 0x00	; 0
    6e30:	80 ee       	ldi	r24, 0xE0	; 224
    6e32:	90 e4       	ldi	r25, 0x40	; 64
    6e34:	0e 94 10 4f 	call	0x9e20	; 0x9e20 <__subsf3>
    6e38:	9b 01       	movw	r18, r22
    6e3a:	ac 01       	movw	r20, r24
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:573
      //DPRINT(F("         INTERCEPT: "));DDECLN(intercept);
      //3.) PH
      uint16_t _ph = ( slope_corrected*( ((float)measuredVoltage/10.0) - 1500.0 ) / 3.0 + intercept ) * 100.0; //PH Wert muss mit 100 multipliziert werden, da nur "ganze Bytes" übertragen werden können (PH 7.2 ^= 72)
    6e3c:	c3 01       	movw	r24, r6
    6e3e:	b2 01       	movw	r22, r4
    6e40:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <__addsf3>
    6e44:	20 e0       	ldi	r18, 0x00	; 0
    6e46:	30 e0       	ldi	r19, 0x00	; 0
    6e48:	48 ec       	ldi	r20, 0xC8	; 200
    6e4a:	52 e4       	ldi	r21, 0x42	; 66
    6e4c:	0e 94 10 4e 	call	0x9c20	; 0x9c20 <__mulsf3>
    6e50:	0e 94 f6 4f 	call	0x9fec	; 0x9fec <__fixunssfsi>
    6e54:	6b 01       	movw	r12, r22
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:574
      DPRINT(F("         PH       : "));DDECLN(_ph);
    6e56:	84 e2       	ldi	r24, 0x24	; 36
    6e58:	94 e0       	ldi	r25, 0x04	; 4
    6e5a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    6e5e:	c6 01       	movw	r24, r12
    6e60:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <void DDECLN<unsigned int>(unsigned int)>
run():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:637
      orp = readORP();

      digitalWrite(SENSOR_SWITCH_PIN, ON);
      uint16_t ms = toggleWaitTime;
      while (ms-- > 0) _delay_ms(1);
      ph = readPH();
    6e64:	f1 01       	movw	r30, r2
    6e66:	e2 5a       	subi	r30, 0xA2	; 162
    6e68:	ff 4f       	sbci	r31, 0xFF	; 255
    6e6a:	fe 87       	std	Y+14, r31	; 0x0e
    6e6c:	ed 87       	std	Y+13, r30	; 0x0d
    6e6e:	d1 82       	std	Z+1, r13	; 0x01
    6e70:	c0 82       	st	Z, r12
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:638
      digitalWrite(SENSOR_SWITCH_PIN, OFF);
    6e72:	60 e0       	ldi	r22, 0x00	; 0
    6e74:	8f e0       	ldi	r24, 0x0F	; 15
    6e76:	0e 94 7e 07 	call	0xefc	; 0xefc <digitalWrite>
    6e7a:	8a e0       	ldi	r24, 0x0A	; 10
    6e7c:	f8 2e       	mov	r15, r24
_ZN14MeasureChannel7triggerERN2as10AlarmClockE():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:590
      DPRINT(F("        ORP       : "));DDECLN(orpValue);
      return orpValue;
    }

    uint16_t readPressure() {
      uint16_t analogValue = 0;
    6e7e:	10 e0       	ldi	r17, 0x00	; 0
    6e80:	00 e0       	ldi	r16, 0x00	; 0
readPressure():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:592
      for (uint8_t i = 0; i < 10; i++) {
        analogValue += analogRead(PRESSURE_PIN);
    6e82:	8d e1       	ldi	r24, 0x1D	; 29
    6e84:	0e 94 1a 08 	call	0x1034	; 0x1034 <analogRead>
    6e88:	08 0f       	add	r16, r24
    6e8a:	19 1f       	adc	r17, r25
_delay_ms():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay.h:187
    6e8c:	8f e0       	ldi	r24, 0x0F	; 15
    6e8e:	97 e2       	ldi	r25, 0x27	; 39
    6e90:	01 97       	sbiw	r24, 0x01	; 1
    6e92:	f1 f7       	brne	.-4      	; 0x6e90 <MeasureChannel::trigger(as::AlarmClock&)+0x80a>
    6e94:	00 c0       	rjmp	.+0      	; 0x6e96 <MeasureChannel::trigger(as::AlarmClock&)+0x810>
    6e96:	00 00       	nop
    6e98:	fa 94       	dec	r15
readPressure():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:591
      return orpValue;
    }

    uint16_t readPressure() {
      uint16_t analogValue = 0;
      for (uint8_t i = 0; i < 10; i++) {
    6e9a:	f1 10       	cpse	r15, r1
    6e9c:	f2 cf       	rjmp	.-28     	; 0x6e82 <MeasureChannel::trigger(as::AlarmClock&)+0x7fc>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:595
        analogValue += analogRead(PRESSURE_PIN);
        _delay_ms(5);
      }
      analogValue = analogValue / 10;
    6e9e:	c8 01       	movw	r24, r16
    6ea0:	6a e0       	ldi	r22, 0x0A	; 10
    6ea2:	70 e0       	ldi	r23, 0x00	; 0
    6ea4:	0e 94 c4 50 	call	0xa188	; 0xa188 <__udivmodhi4>
    6ea8:	8b 01       	movw	r16, r22
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:598

      float sensor_factor = 1.6; //1.6 for 0.5MPa Sensor, 0.75 for 1.2 MPa Sensor
      float _p = (((analogValue / 1024.0) - (ANALOG_SOCKET_VALUE / 1000.0)) / sensor_factor) * 1000;
    6eaa:	90 e0       	ldi	r25, 0x00	; 0
    6eac:	80 e0       	ldi	r24, 0x00	; 0
    6eae:	0e 94 af 4d 	call	0x9b5e	; 0x9b5e <__floatunsisf>
    6eb2:	20 e0       	ldi	r18, 0x00	; 0
    6eb4:	30 e0       	ldi	r19, 0x00	; 0
    6eb6:	40 e8       	ldi	r20, 0x80	; 128
    6eb8:	5a e3       	ldi	r21, 0x3A	; 58
    6eba:	0e 94 10 4e 	call	0x9c20	; 0x9c20 <__mulsf3>
    6ebe:	2a e9       	ldi	r18, 0x9A	; 154
    6ec0:	39 e9       	ldi	r19, 0x99	; 153
    6ec2:	49 e1       	ldi	r20, 0x19	; 25
    6ec4:	5e e3       	ldi	r21, 0x3E	; 62
    6ec6:	0e 94 10 4f 	call	0x9e20	; 0x9e20 <__subsf3>
    6eca:	2d ec       	ldi	r18, 0xCD	; 205
    6ecc:	3c ec       	ldi	r19, 0xCC	; 204
    6ece:	4c ec       	ldi	r20, 0xCC	; 204
    6ed0:	5f e3       	ldi	r21, 0x3F	; 63
    6ed2:	0e 94 7d 4f 	call	0x9efa	; 0x9efa <__divsf3>
    6ed6:	20 e0       	ldi	r18, 0x00	; 0
    6ed8:	30 e0       	ldi	r19, 0x00	; 0
    6eda:	4a e7       	ldi	r20, 0x7A	; 122
    6edc:	54 e4       	ldi	r21, 0x44	; 68
    6ede:	0e 94 10 4e 	call	0x9c20	; 0x9c20 <__mulsf3>
    6ee2:	4b 01       	movw	r8, r22
    6ee4:	5c 01       	movw	r10, r24
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:599
      DPRINT(F("+Pressure  (#")); DDEC(number()); DPRINT(F(") Analogwert: ")); DDECLN(analogValue);
    6ee6:	88 e6       	ldi	r24, 0x68	; 104
    6ee8:	94 e0       	ldi	r25, 0x04	; 4
    6eea:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    6eee:	d1 01       	movw	r26, r2
    6ef0:	1b 96       	adiw	r26, 0x0b	; 11
    6ef2:	8c 91       	ld	r24, X
    6ef4:	0e 94 88 23 	call	0x4710	; 0x4710 <void DDEC<unsigned char>(unsigned char)>
    6ef8:	89 e5       	ldi	r24, 0x59	; 89
    6efa:	94 e0       	ldi	r25, 0x04	; 4
    6efc:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    6f00:	c8 01       	movw	r24, r16
    6f02:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <void DDECLN<unsigned int>(unsigned int)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:600
      DPRINT(F("+Pressure  (#")); DDEC(number()); DPRINT(F(")       mBar: ")); DDECLN(_p * 10);
    6f06:	8b e4       	ldi	r24, 0x4B	; 75
    6f08:	94 e0       	ldi	r25, 0x04	; 4
    6f0a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    6f0e:	f1 01       	movw	r30, r2
    6f10:	83 85       	ldd	r24, Z+11	; 0x0b
    6f12:	0e 94 88 23 	call	0x4710	; 0x4710 <void DDEC<unsigned char>(unsigned char)>
    6f16:	8c e3       	ldi	r24, 0x3C	; 60
    6f18:	94 e0       	ldi	r25, 0x04	; 4
    6f1a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    6f1e:	20 e0       	ldi	r18, 0x00	; 0
    6f20:	30 e0       	ldi	r19, 0x00	; 0
    6f22:	40 e2       	ldi	r20, 0x20	; 32
    6f24:	51 e4       	ldi	r21, 0x41	; 65
    6f26:	c5 01       	movw	r24, r10
    6f28:	b4 01       	movw	r22, r8
    6f2a:	0e 94 10 4e 	call	0x9c20	; 0x9c20 <__mulsf3>
    6f2e:	6b 01       	movw	r12, r22
    6f30:	7c 01       	movw	r14, r24
    6f32:	c9 8e       	std	Y+25, r12	; 0x19
    6f34:	da 8e       	std	Y+26, r13	; 0x1a
    6f36:	eb 8e       	std	Y+27, r14	; 0x1b
    6f38:	fc 8e       	std	Y+28, r15	; 0x1c
printFloat():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:256

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    6f3a:	ac 01       	movw	r20, r24
    6f3c:	9b 01       	movw	r18, r22
    6f3e:	0e 94 7a 50 	call	0xa0f4	; 0xa0f4 <__unordsf2>
write():
    6f42:	65 e6       	ldi	r22, 0x65	; 101
    6f44:	73 e0       	ldi	r23, 0x03	; 3
printFloat():
    6f46:	81 11       	cpse	r24, r1
    6f48:	1b c0       	rjmp	.+54     	; 0x6f80 <MeasureChannel::trigger(as::AlarmClock&)+0x8fa>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:257
  if (isinf(number)) return print("inf");
    6f4a:	26 01       	movw	r4, r12
    6f4c:	37 01       	movw	r6, r14
    6f4e:	e8 94       	clt
    6f50:	77 f8       	bld	r7, 7
    6f52:	2f ef       	ldi	r18, 0xFF	; 255
    6f54:	3f ef       	ldi	r19, 0xFF	; 255
    6f56:	4f e7       	ldi	r20, 0x7F	; 127
    6f58:	5f e7       	ldi	r21, 0x7F	; 127
    6f5a:	c3 01       	movw	r24, r6
    6f5c:	b2 01       	movw	r22, r4
    6f5e:	0e 94 7a 50 	call	0xa0f4	; 0xa0f4 <__unordsf2>
    6f62:	81 11       	cpse	r24, r1
    6f64:	99 c2       	rjmp	.+1330   	; 0x7498 <MeasureChannel::trigger(as::AlarmClock&)+0xe12>
    6f66:	2f ef       	ldi	r18, 0xFF	; 255
    6f68:	3f ef       	ldi	r19, 0xFF	; 255
    6f6a:	4f e7       	ldi	r20, 0x7F	; 127
    6f6c:	5f e7       	ldi	r21, 0x7F	; 127
    6f6e:	c3 01       	movw	r24, r6
    6f70:	b2 01       	movw	r22, r4
    6f72:	0e 94 aa 4d 	call	0x9b54	; 0x9b54 <__cmpsf2>
    6f76:	18 16       	cp	r1, r24
    6f78:	0c f0       	brlt	.+2      	; 0x6f7c <MeasureChannel::trigger(as::AlarmClock&)+0x8f6>
    6f7a:	8e c2       	rjmp	.+1308   	; 0x7498 <MeasureChannel::trigger(as::AlarmClock&)+0xe12>
write():
    6f7c:	69 e6       	ldi	r22, 0x69	; 105
    6f7e:	73 e0       	ldi	r23, 0x03	; 3
    6f80:	89 ed       	ldi	r24, 0xD9	; 217
    6f82:	94 e0       	ldi	r25, 0x04	; 4
    6f84:	0e 94 1f 22 	call	0x443e	; 0x443e <Print::write(char const*) [clone .part.2]>
DDECLN():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:113
  }
  inline void DHEXLN(uint8_t b) { DHEX(b); DPRINT(F("\r\n")); }
  inline void DHEXLN(uint16_t b) { DHEX(b); DPRINT(F("\r\n")); }
  inline void DHEXLN(uint32_t b) { DHEX(b); DPRINT(F("\r\n")); }
  template<typename TYPE>
  inline void DDECLN(TYPE b) { DDEC(b); DPRINT(F("\r\n")); }
    6f88:	89 e3       	ldi	r24, 0x39	; 57
    6f8a:	94 e0       	ldi	r25, 0x04	; 4
    6f8c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
readPressure():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:601
      return _p > 0 ? (uint16_t)_p : 0;
    6f90:	20 e0       	ldi	r18, 0x00	; 0
    6f92:	30 e0       	ldi	r19, 0x00	; 0
    6f94:	a9 01       	movw	r20, r18
    6f96:	c5 01       	movw	r24, r10
    6f98:	b4 01       	movw	r22, r8
    6f9a:	0e 94 25 50 	call	0xa04a	; 0xa04a <__gesf2>
    6f9e:	18 16       	cp	r1, r24
    6fa0:	34 f4       	brge	.+12     	; 0x6fae <MeasureChannel::trigger(as::AlarmClock&)+0x928>
    6fa2:	c5 01       	movw	r24, r10
    6fa4:	b4 01       	movw	r22, r8
    6fa6:	0e 94 f6 4f 	call	0x9fec	; 0x9fec <__fixunssfsi>
    6faa:	7a 8b       	std	Y+18, r23	; 0x12
    6fac:	69 8b       	std	Y+17, r22	; 0x11
run():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:640
      uint16_t ms = toggleWaitTime;
      while (ms-- > 0) _delay_ms(1);
      ph = readPH();
      digitalWrite(SENSOR_SWITCH_PIN, OFF);

      pressure = readPressure();
    6fae:	f1 01       	movw	r30, r2
    6fb0:	e0 5a       	subi	r30, 0xA0	; 160
    6fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    6fb4:	49 88       	ldd	r4, Y+17	; 0x11
    6fb6:	5a 88       	ldd	r5, Y+18	; 0x12
    6fb8:	51 82       	std	Z+1, r5	; 0x01
    6fba:	40 82       	st	Z, r4
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:643

      //Anzeige der Daten auf dem LCD Display
      lcd.showMeasureValues(currentTemperature1, currentTemperature2, ph, orp, pressure, flowrate);
    6fbc:	81 01       	movw	r16, r2
    6fbe:	02 58       	subi	r16, 0x82	; 130
    6fc0:	1f 4f       	sbci	r17, 0xFF	; 255
    6fc2:	d8 01       	movw	r26, r16
    6fc4:	7c 90       	ld	r7, X
    6fc6:	32 96       	adiw	r30, 0x02	; 2
    6fc8:	80 80       	ld	r8, Z
    6fca:	91 80       	ldd	r9, Z+1	; 0x01
    6fcc:	ed 85       	ldd	r30, Y+13	; 0x0d
    6fce:	fe 85       	ldd	r31, Y+14	; 0x0e
    6fd0:	c0 80       	ld	r12, Z
    6fd2:	d1 80       	ldd	r13, Z+1	; 0x01
    6fd4:	f1 01       	movw	r30, r2
    6fd6:	e7 5a       	subi	r30, 0xA7	; 167
    6fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    6fda:	e0 80       	ld	r14, Z
    6fdc:	f1 80       	ldd	r15, Z+1	; 0x01
    6fde:	ad 89       	ldd	r26, Y+21	; 0x15
    6fe0:	be 89       	ldd	r27, Y+22	; 0x16
    6fe2:	ad 90       	ld	r10, X+
    6fe4:	bc 90       	ld	r11, X
showMeasureValues():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:246
  LiquidCrystal_I2C lcd;
  LcdType () :  backlightalarm(*this), backlightOnTime(10), lcd(LCD_ADDRESS, LCD_COLUMNS, LCD_ROWS){}
  virtual ~LcdType () {}

  void showMeasureValues(int16_t t1, int16_t t2, uint16_t ph, int16_t orp, uint16_t pressure, uint8_t flow) {
    lcd.clear();
    6fe6:	0e 94 8f 09 	call	0x131e	; 0x131e <LiquidCrystal_I2C::clear() [clone .constprop.123]>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:247
    lcd.setCursor(0,0);
    6fea:	40 e0       	ldi	r20, 0x00	; 0
    6fec:	60 e0       	ldi	r22, 0x00	; 0
    6fee:	82 ea       	ldi	r24, 0xA2	; 162
    6ff0:	97 e0       	ldi	r25, 0x07	; 7
    6ff2:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:248
    lcd.print("  T1  |  PH  |  ORP ");
    6ff6:	61 e7       	ldi	r22, 0x71	; 113
    6ff8:	73 e0       	ldi	r23, 0x03	; 3
    6ffa:	82 ea       	ldi	r24, 0xA2	; 162
    6ffc:	97 e0       	ldi	r25, 0x07	; 7
    6ffe:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <Print::print(char const*)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:249
    lcd.setCursor(t1 > 0 ? 1:0,1);
    7002:	61 e0       	ldi	r22, 0x01	; 1
    7004:	1a 14       	cp	r1, r10
    7006:	1b 04       	cpc	r1, r11
    7008:	0c f0       	brlt	.+2      	; 0x700c <MeasureChannel::trigger(as::AlarmClock&)+0x986>
    700a:	60 e0       	ldi	r22, 0x00	; 0
    700c:	41 e0       	ldi	r20, 0x01	; 1
    700e:	82 ea       	ldi	r24, 0xA2	; 162
    7010:	97 e0       	ldi	r25, 0x07	; 7
    7012:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:250
    lcd.print(tempToStr(t1));
    7016:	b5 01       	movw	r22, r10
    7018:	ce 01       	movw	r24, r28
    701a:	01 96       	adiw	r24, 0x01	; 1
    701c:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <LcdType::tempToStr(int) [clone .isra.75]>
    7020:	ce 01       	movw	r24, r28
    7022:	01 96       	adiw	r24, 0x01	; 1
    7024:	0e 94 27 06 	call	0xc4e	; 0xc4e <Print::print(String const&) [clone .constprop.107]>
    7028:	ce 01       	movw	r24, r28
    702a:	01 96       	adiw	r24, 0x01	; 1
    702c:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <String::~String()>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:251
    lcd.setCursor(6,1);lcd.print("|");
    7030:	41 e0       	ldi	r20, 0x01	; 1
    7032:	66 e0       	ldi	r22, 0x06	; 6
    7034:	82 ea       	ldi	r24, 0xA2	; 162
    7036:	97 e0       	ldi	r25, 0x07	; 7
    7038:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
    703c:	66 e8       	ldi	r22, 0x86	; 134
    703e:	73 e0       	ldi	r23, 0x03	; 3
    7040:	82 ea       	ldi	r24, 0xA2	; 162
    7042:	97 e0       	ldi	r25, 0x07	; 7
    7044:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <Print::print(char const*)>
_ZN7LcdType7phToStrEj.isra.76():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:220
    //if (t < 1000 && t >= 0) s_temp = " " + s_temp;
    return s_temp;
  }

  String phToStr(uint16_t p) {
    String s_ph = " --.-";
    7048:	68 e8       	ldi	r22, 0x88	; 136
    704a:	73 e0       	ldi	r23, 0x03	; 3
    704c:	ce 01       	movw	r24, r28
    704e:	07 96       	adiw	r24, 0x07	; 7
    7050:	0e 94 75 26 	call	0x4cea	; 0x4cea <String::String(char const*)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:221
    s_ph = (String)((float)p / 100.0);
    7054:	b6 01       	movw	r22, r12
    7056:	90 e0       	ldi	r25, 0x00	; 0
    7058:	80 e0       	ldi	r24, 0x00	; 0
    705a:	0e 94 af 4d 	call	0x9b5e	; 0x9b5e <__floatunsisf>
    705e:	20 e0       	ldi	r18, 0x00	; 0
    7060:	30 e0       	ldi	r19, 0x00	; 0
    7062:	48 ec       	ldi	r20, 0xC8	; 200
    7064:	52 e4       	ldi	r21, 0x42	; 66
    7066:	0e 94 7d 4f 	call	0x9efa	; 0x9efa <__divsf3>
    706a:	ab 01       	movw	r20, r22
    706c:	bc 01       	movw	r22, r24
    706e:	ce 01       	movw	r24, r28
    7070:	01 96       	adiw	r24, 0x01	; 1
    7072:	0e 94 28 26 	call	0x4c50	; 0x4c50 <String::String(double, unsigned char) [clone .constprop.148]>
operator=():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.cpp:228
    7076:	be 01       	movw	r22, r28
    7078:	6f 5f       	subi	r22, 0xFF	; 255
    707a:	7f 4f       	sbci	r23, 0xFF	; 255
    707c:	ce 01       	movw	r24, r28
    707e:	07 96       	adiw	r24, 0x07	; 7
    7080:	0e 94 21 25 	call	0x4a42	; 0x4a42 <String::move(String&)>
_ZN7LcdType7phToStrEj.isra.76():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:221
    7084:	ce 01       	movw	r24, r28
    7086:	01 96       	adiw	r24, 0x01	; 1
    7088:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <String::~String()>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:222
    if (p < 1000) s_ph = " " + s_ph;
    708c:	b8 ee       	ldi	r27, 0xE8	; 232
    708e:	cb 16       	cp	r12, r27
    7090:	b3 e0       	ldi	r27, 0x03	; 3
    7092:	db 06       	cpc	r13, r27
    7094:	b0 f4       	brcc	.+44     	; 0x70c2 <MeasureChannel::trigger(as::AlarmClock&)+0xa3c>
_ZN15StringSumHelperC2EPKc():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.h:217
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
    7096:	65 e4       	ldi	r22, 0x45	; 69
    7098:	73 e0       	ldi	r23, 0x03	; 3
    709a:	ce 01       	movw	r24, r28
    709c:	01 96       	adiw	r24, 0x01	; 1
    709e:	0e 94 75 26 	call	0x4cea	; 0x4cea <String::String(char const*)>
_ZN7LcdType7phToStrEj.isra.76():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:222
    70a2:	be 01       	movw	r22, r28
    70a4:	69 5f       	subi	r22, 0xF9	; 249
    70a6:	7f 4f       	sbci	r23, 0xFF	; 255
    70a8:	ce 01       	movw	r24, r28
    70aa:	01 96       	adiw	r24, 0x01	; 1
    70ac:	0e 94 ca 25 	call	0x4b94	; 0x4b94 <operator+(StringSumHelper const&, String const&)>
    70b0:	bc 01       	movw	r22, r24
    70b2:	ce 01       	movw	r24, r28
    70b4:	07 96       	adiw	r24, 0x07	; 7
    70b6:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <String::operator=(String const&)>
_ZN15StringSumHelperD2Ev():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WString.h:213
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
    70ba:	ce 01       	movw	r24, r28
    70bc:	01 96       	adiw	r24, 0x01	; 1
    70be:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <String::~String()>
showMeasureValues():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:252
    lcd.setCursor(0,0);
    lcd.print("  T1  |  PH  |  ORP ");
    lcd.setCursor(t1 > 0 ? 1:0,1);
    lcd.print(tempToStr(t1));
    lcd.setCursor(6,1);lcd.print("|");
    lcd.print(phToStr(ph));
    70c2:	ce 01       	movw	r24, r28
    70c4:	07 96       	adiw	r24, 0x07	; 7
    70c6:	0e 94 27 06 	call	0xc4e	; 0xc4e <Print::print(String const&) [clone .constprop.107]>
    70ca:	ce 01       	movw	r24, r28
    70cc:	07 96       	adiw	r24, 0x07	; 7
    70ce:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <String::~String()>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:253
    lcd.setCursor(13,1);lcd.print("| ");
    70d2:	41 e0       	ldi	r20, 0x01	; 1
    70d4:	6d e0       	ldi	r22, 0x0D	; 13
    70d6:	82 ea       	ldi	r24, 0xA2	; 162
    70d8:	97 e0       	ldi	r25, 0x07	; 7
    70da:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
    70de:	6e e8       	ldi	r22, 0x8E	; 142
    70e0:	73 e0       	ldi	r23, 0x03	; 3
    70e2:	82 ea       	ldi	r24, 0xA2	; 162
    70e4:	97 e0       	ldi	r25, 0x07	; 7
    70e6:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <Print::print(char const*)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:254
    lcd.print(orpToStr(orp));
    70ea:	b4 01       	movw	r22, r8
    70ec:	ce 01       	movw	r24, r28
    70ee:	01 96       	adiw	r24, 0x01	; 1
    70f0:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <LcdType::orpToStr(int) [clone .constprop.111]>
    70f4:	ce 01       	movw	r24, r28
    70f6:	01 96       	adiw	r24, 0x01	; 1
    70f8:	0e 94 27 06 	call	0xc4e	; 0xc4e <Print::print(String const&) [clone .constprop.107]>
    70fc:	ce 01       	movw	r24, r28
    70fe:	01 96       	adiw	r24, 0x01	; 1
    7100:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <String::~String()>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:255
    lcd.setCursor(0,2);
    7104:	42 e0       	ldi	r20, 0x02	; 2
    7106:	60 e0       	ldi	r22, 0x00	; 0
    7108:	82 ea       	ldi	r24, 0xA2	; 162
    710a:	97 e0       	ldi	r25, 0x07	; 7
    710c:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:256
    lcd.print("  T2  |   p  | l/min");
    7110:	61 e9       	ldi	r22, 0x91	; 145
    7112:	73 e0       	ldi	r23, 0x03	; 3
    7114:	82 ea       	ldi	r24, 0xA2	; 162
    7116:	97 e0       	ldi	r25, 0x07	; 7
    7118:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <Print::print(char const*)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:257
    lcd.setCursor(t2 > 0 ? 1:0,3);
    711c:	61 e0       	ldi	r22, 0x01	; 1
    711e:	1e 14       	cp	r1, r14
    7120:	1f 04       	cpc	r1, r15
    7122:	0c f0       	brlt	.+2      	; 0x7126 <MeasureChannel::trigger(as::AlarmClock&)+0xaa0>
    7124:	60 e0       	ldi	r22, 0x00	; 0
    7126:	43 e0       	ldi	r20, 0x03	; 3
    7128:	82 ea       	ldi	r24, 0xA2	; 162
    712a:	97 e0       	ldi	r25, 0x07	; 7
    712c:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:258
    lcd.print(tempToStr(t2));
    7130:	b7 01       	movw	r22, r14
    7132:	ce 01       	movw	r24, r28
    7134:	01 96       	adiw	r24, 0x01	; 1
    7136:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <LcdType::tempToStr(int) [clone .isra.75]>
    713a:	ce 01       	movw	r24, r28
    713c:	01 96       	adiw	r24, 0x01	; 1
    713e:	0e 94 27 06 	call	0xc4e	; 0xc4e <Print::print(String const&) [clone .constprop.107]>
    7142:	ce 01       	movw	r24, r28
    7144:	01 96       	adiw	r24, 0x01	; 1
    7146:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <String::~String()>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:259
    lcd.setCursor(6,3);lcd.print("| ");
    714a:	43 e0       	ldi	r20, 0x03	; 3
    714c:	66 e0       	ldi	r22, 0x06	; 6
    714e:	82 ea       	ldi	r24, 0xA2	; 162
    7150:	97 e0       	ldi	r25, 0x07	; 7
    7152:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
    7156:	6e e8       	ldi	r22, 0x8E	; 142
    7158:	73 e0       	ldi	r23, 0x03	; 3
    715a:	82 ea       	ldi	r24, 0xA2	; 162
    715c:	97 e0       	ldi	r25, 0x07	; 7
    715e:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <Print::print(char const*)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:260
    lcd.print(orpToStr(pressure));
    7162:	69 89       	ldd	r22, Y+17	; 0x11
    7164:	7a 89       	ldd	r23, Y+18	; 0x12
    7166:	ce 01       	movw	r24, r28
    7168:	01 96       	adiw	r24, 0x01	; 1
    716a:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <LcdType::orpToStr(int) [clone .constprop.111]>
    716e:	ce 01       	movw	r24, r28
    7170:	01 96       	adiw	r24, 0x01	; 1
    7172:	0e 94 27 06 	call	0xc4e	; 0xc4e <Print::print(String const&) [clone .constprop.107]>
    7176:	ce 01       	movw	r24, r28
    7178:	01 96       	adiw	r24, 0x01	; 1
    717a:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <String::~String()>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:261
    lcd.setCursor(13,3);lcd.print("| ");
    717e:	43 e0       	ldi	r20, 0x03	; 3
    7180:	6d e0       	ldi	r22, 0x0D	; 13
    7182:	82 ea       	ldi	r24, 0xA2	; 162
    7184:	97 e0       	ldi	r25, 0x07	; 7
    7186:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
    718a:	6e e8       	ldi	r22, 0x8E	; 142
    718c:	73 e0       	ldi	r23, 0x03	; 3
    718e:	82 ea       	ldi	r24, 0xA2	; 162
    7190:	97 e0       	ldi	r25, 0x07	; 7
    7192:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <Print::print(char const*)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:262
    lcd.print(orpToStr(flow));
    7196:	67 2d       	mov	r22, r7
    7198:	70 e0       	ldi	r23, 0x00	; 0
    719a:	ce 01       	movw	r24, r28
    719c:	01 96       	adiw	r24, 0x01	; 1
    719e:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <LcdType::orpToStr(int) [clone .constprop.111]>
    71a2:	ce 01       	movw	r24, r28
    71a4:	01 96       	adiw	r24, 0x01	; 1
    71a6:	0e 94 27 06 	call	0xc4e	; 0xc4e <Print::print(String const&) [clone .constprop.107]>
    71aa:	ce 01       	movw	r24, r28
    71ac:	01 96       	adiw	r24, 0x01	; 1
    71ae:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <String::~String()>
run():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:645
      pressure = readPressure();

      //Anzeige der Daten auf dem LCD Display
      lcd.showMeasureValues(currentTemperature1, currentTemperature2, ph, orp, pressure, flowrate);

      flowrate_cumulated     += flowrate;
    71b2:	21 01       	movw	r4, r2
    71b4:	ef e7       	ldi	r30, 0x7F	; 127
    71b6:	4e 0e       	add	r4, r30
    71b8:	51 1c       	adc	r5, r1
    71ba:	d8 01       	movw	r26, r16
    71bc:	8c 91       	ld	r24, X
    71be:	f2 01       	movw	r30, r4
    71c0:	20 81       	ld	r18, Z
    71c2:	31 81       	ldd	r19, Z+1	; 0x01
    71c4:	82 0f       	add	r24, r18
    71c6:	93 2f       	mov	r25, r19
    71c8:	91 1d       	adc	r25, r1
    71ca:	91 83       	std	Z+1, r25	; 0x01
    71cc:	80 83       	st	Z, r24
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:646
      ph_cumulated           += ph;
    71ce:	91 01       	movw	r18, r2
    71d0:	26 59       	subi	r18, 0x96	; 150
    71d2:	3f 4f       	sbci	r19, 0xFF	; 255
    71d4:	3a 8b       	std	Y+18, r19	; 0x12
    71d6:	29 8b       	std	Y+17, r18	; 0x11
    71d8:	ad 85       	ldd	r26, Y+13	; 0x0d
    71da:	be 85       	ldd	r27, Y+14	; 0x0e
    71dc:	2d 91       	ld	r18, X+
    71de:	3c 91       	ld	r19, X
    71e0:	e9 89       	ldd	r30, Y+17	; 0x11
    71e2:	fa 89       	ldd	r31, Y+18	; 0x12
    71e4:	80 81       	ld	r24, Z
    71e6:	91 81       	ldd	r25, Z+1	; 0x01
    71e8:	a2 81       	ldd	r26, Z+2	; 0x02
    71ea:	b3 81       	ldd	r27, Z+3	; 0x03
    71ec:	82 0f       	add	r24, r18
    71ee:	93 1f       	adc	r25, r19
    71f0:	a1 1d       	adc	r26, r1
    71f2:	b1 1d       	adc	r27, r1
    71f4:	80 83       	st	Z, r24
    71f6:	91 83       	std	Z+1, r25	; 0x01
    71f8:	a2 83       	std	Z+2, r26	; 0x02
    71fa:	b3 83       	std	Z+3, r27	; 0x03
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:647
      orp_cumulated          += orp;
    71fc:	91 01       	movw	r18, r2
    71fe:	2e 58       	subi	r18, 0x8E	; 142
    7200:	3f 4f       	sbci	r19, 0xFF	; 255
    7202:	3e 87       	std	Y+14, r19	; 0x0e
    7204:	2d 87       	std	Y+13, r18	; 0x0d
    7206:	f1 01       	movw	r30, r2
    7208:	ee 59       	subi	r30, 0x9E	; 158
    720a:	ff 4f       	sbci	r31, 0xFF	; 255
    720c:	80 81       	ld	r24, Z
    720e:	91 81       	ldd	r25, Z+1	; 0x01
    7210:	09 2e       	mov	r0, r25
    7212:	00 0c       	add	r0, r0
    7214:	aa 0b       	sbc	r26, r26
    7216:	bb 0b       	sbc	r27, r27
    7218:	f9 01       	movw	r30, r18
    721a:	40 81       	ld	r20, Z
    721c:	51 81       	ldd	r21, Z+1	; 0x01
    721e:	62 81       	ldd	r22, Z+2	; 0x02
    7220:	73 81       	ldd	r23, Z+3	; 0x03
    7222:	84 0f       	add	r24, r20
    7224:	95 1f       	adc	r25, r21
    7226:	a6 1f       	adc	r26, r22
    7228:	b7 1f       	adc	r27, r23
    722a:	80 83       	st	Z, r24
    722c:	91 83       	std	Z+1, r25	; 0x01
    722e:	a2 83       	std	Z+2, r26	; 0x02
    7230:	b3 83       	std	Z+3, r27	; 0x03
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:648
      temperature1_cumulated += currentTemperature1;
    7232:	31 01       	movw	r6, r2
    7234:	f6 e7       	ldi	r31, 0x76	; 118
    7236:	6f 0e       	add	r6, r31
    7238:	71 1c       	adc	r7, r1
    723a:	ad 89       	ldd	r26, Y+21	; 0x15
    723c:	be 89       	ldd	r27, Y+22	; 0x16
    723e:	8d 91       	ld	r24, X+
    7240:	9c 91       	ld	r25, X
    7242:	09 2e       	mov	r0, r25
    7244:	00 0c       	add	r0, r0
    7246:	aa 0b       	sbc	r26, r26
    7248:	bb 0b       	sbc	r27, r27
    724a:	f3 01       	movw	r30, r6
    724c:	40 81       	ld	r20, Z
    724e:	51 81       	ldd	r21, Z+1	; 0x01
    7250:	62 81       	ldd	r22, Z+2	; 0x02
    7252:	73 81       	ldd	r23, Z+3	; 0x03
    7254:	84 0f       	add	r24, r20
    7256:	95 1f       	adc	r25, r21
    7258:	a6 1f       	adc	r26, r22
    725a:	b7 1f       	adc	r27, r23
    725c:	80 83       	st	Z, r24
    725e:	91 83       	std	Z+1, r25	; 0x01
    7260:	a2 83       	std	Z+2, r26	; 0x02
    7262:	b3 83       	std	Z+3, r27	; 0x03
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:649
      temperature2_cumulated += currentTemperature2;
    7264:	41 01       	movw	r8, r2
    7266:	fa e7       	ldi	r31, 0x7A	; 122
    7268:	8f 0e       	add	r8, r31
    726a:	91 1c       	adc	r9, r1
    726c:	f1 01       	movw	r30, r2
    726e:	e7 5a       	subi	r30, 0xA7	; 167
    7270:	ff 4f       	sbci	r31, 0xFF	; 255
    7272:	80 81       	ld	r24, Z
    7274:	91 81       	ldd	r25, Z+1	; 0x01
    7276:	09 2e       	mov	r0, r25
    7278:	00 0c       	add	r0, r0
    727a:	aa 0b       	sbc	r26, r26
    727c:	bb 0b       	sbc	r27, r27
    727e:	f4 01       	movw	r30, r8
    7280:	40 81       	ld	r20, Z
    7282:	51 81       	ldd	r21, Z+1	; 0x01
    7284:	62 81       	ldd	r22, Z+2	; 0x02
    7286:	73 81       	ldd	r23, Z+3	; 0x03
    7288:	84 0f       	add	r24, r20
    728a:	95 1f       	adc	r25, r21
    728c:	a6 1f       	adc	r26, r22
    728e:	b7 1f       	adc	r27, r23
    7290:	80 83       	st	Z, r24
    7292:	91 83       	std	Z+1, r25	; 0x01
    7294:	a2 83       	std	Z+2, r26	; 0x02
    7296:	b3 83       	std	Z+3, r27	; 0x03
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:650
      pressure_cumulated     += pressure;
    7298:	51 01       	movw	r10, r2
    729a:	fe e6       	ldi	r31, 0x6E	; 110
    729c:	af 0e       	add	r10, r31
    729e:	b1 1c       	adc	r11, r1
    72a0:	f1 01       	movw	r30, r2
    72a2:	e0 5a       	subi	r30, 0xA0	; 160
    72a4:	ff 4f       	sbci	r31, 0xFF	; 255
    72a6:	20 81       	ld	r18, Z
    72a8:	31 81       	ldd	r19, Z+1	; 0x01
    72aa:	f5 01       	movw	r30, r10
    72ac:	80 81       	ld	r24, Z
    72ae:	91 81       	ldd	r25, Z+1	; 0x01
    72b0:	a2 81       	ldd	r26, Z+2	; 0x02
    72b2:	b3 81       	ldd	r27, Z+3	; 0x03
    72b4:	82 0f       	add	r24, r18
    72b6:	93 1f       	adc	r25, r19
    72b8:	a1 1d       	adc	r26, r1
    72ba:	b1 1d       	adc	r27, r1
    72bc:	80 83       	st	Z, r24
    72be:	91 83       	std	Z+1, r25	; 0x01
    72c0:	a2 83       	std	Z+2, r26	; 0x02
    72c2:	b3 83       	std	Z+3, r27	; 0x03
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:652

      if (measureCount >= device().getList0().Sendeintervall()) {
    72c4:	af 89       	ldd	r26, Y+23	; 0x17
    72c6:	b8 8d       	ldd	r27, Y+24	; 0x18
    72c8:	0d 91       	ld	r16, X+
    72ca:	1c 91       	ld	r17, X
Sendeintervall():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:107

    bool Sendeintervall (uint8_t value) const {
      return this->writeRegister(0x21, value & 0xff);
    }
    uint8_t Sendeintervall () const {
      return this->readRegister(0x21, 0);
    72cc:	d1 01       	movw	r26, r2
    72ce:	18 96       	adiw	r26, 0x08	; 8
    72d0:	ed 91       	ld	r30, X+
    72d2:	fc 91       	ld	r31, X
    72d4:	40 e0       	ldi	r20, 0x00	; 0
    72d6:	61 e2       	ldi	r22, 0x21	; 33
    72d8:	84 81       	ldd	r24, Z+4	; 0x04
    72da:	95 81       	ldd	r25, Z+5	; 0x05
    72dc:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <as::RegisterList<UReg0>::readRegister(unsigned char, unsigned char) const>
run():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:652
      orp_cumulated          += orp;
      temperature1_cumulated += currentTemperature1;
      temperature2_cumulated += currentTemperature2;
      pressure_cumulated     += pressure;

      if (measureCount >= device().getList0().Sendeintervall()) {
    72e0:	80 17       	cp	r24, r16
    72e2:	11 06       	cpc	r1, r17
    72e4:	11 f0       	breq	.+4      	; 0x72ea <MeasureChannel::trigger(as::AlarmClock&)+0xc64>
    72e6:	08 f0       	brcs	.+2      	; 0x72ea <MeasureChannel::trigger(as::AlarmClock&)+0xc64>
    72e8:	b9 c0       	rjmp	.+370    	; 0x745c <MeasureChannel::trigger(as::AlarmClock&)+0xdd6>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:659
                 temperature1_cumulated / measureCount,
                 temperature2_cumulated / measureCount,
                 ph_cumulated / measureCount,
                 orp_cumulated / measureCount,
                 pressure_cumulated / measureCount,
                 flowrate_cumulated / measureCount);
    72ea:	ef 89       	ldd	r30, Y+23	; 0x17
    72ec:	f8 8d       	ldd	r31, Y+24	; 0x18
    72ee:	c0 80       	ld	r12, Z
    72f0:	d1 80       	ldd	r13, Z+1	; 0x01
    72f2:	d2 01       	movw	r26, r4
    72f4:	8d 91       	ld	r24, X+
    72f6:	9c 91       	ld	r25, X
    72f8:	b6 01       	movw	r22, r12
    72fa:	0e 94 c4 50 	call	0xa188	; 0xa188 <__udivmodhi4>
    72fe:	6d 8b       	std	Y+21, r22	; 0x15
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:658
        msg.init(device().nextcount(),
                 temperature1_cumulated / measureCount,
                 temperature2_cumulated / measureCount,
                 ph_cumulated / measureCount,
                 orp_cumulated / measureCount,
                 pressure_cumulated / measureCount,
    7300:	f1 2c       	mov	r15, r1
    7302:	e1 2c       	mov	r14, r1
    7304:	f5 01       	movw	r30, r10
    7306:	60 81       	ld	r22, Z
    7308:	71 81       	ldd	r23, Z+1	; 0x01
    730a:	82 81       	ldd	r24, Z+2	; 0x02
    730c:	93 81       	ldd	r25, Z+3	; 0x03
    730e:	a7 01       	movw	r20, r14
    7310:	96 01       	movw	r18, r12
    7312:	0e 94 d8 50 	call	0xa1b0	; 0xa1b0 <__udivmodsi4>
    7316:	29 8f       	std	Y+25, r18	; 0x19
    7318:	3d 8f       	std	Y+29, r19	; 0x1d
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:657
      if (measureCount >= device().getList0().Sendeintervall()) {
        msg.init(device().nextcount(),
                 temperature1_cumulated / measureCount,
                 temperature2_cumulated / measureCount,
                 ph_cumulated / measureCount,
                 orp_cumulated / measureCount,
    731a:	ad 85       	ldd	r26, Y+13	; 0x0d
    731c:	be 85       	ldd	r27, Y+14	; 0x0e
    731e:	6d 91       	ld	r22, X+
    7320:	7d 91       	ld	r23, X+
    7322:	8d 91       	ld	r24, X+
    7324:	9c 91       	ld	r25, X
    7326:	a7 01       	movw	r20, r14
    7328:	96 01       	movw	r18, r12
    732a:	0e 94 fa 50 	call	0xa1f4	; 0xa1f4 <__divmodsi4>
    732e:	2e 8f       	std	Y+30, r18	; 0x1e
    7330:	3f 8f       	std	Y+31, r19	; 0x1f
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:656

      if (measureCount >= device().getList0().Sendeintervall()) {
        msg.init(device().nextcount(),
                 temperature1_cumulated / measureCount,
                 temperature2_cumulated / measureCount,
                 ph_cumulated / measureCount,
    7332:	e9 89       	ldd	r30, Y+17	; 0x11
    7334:	fa 89       	ldd	r31, Y+18	; 0x12
    7336:	60 81       	ld	r22, Z
    7338:	71 81       	ldd	r23, Z+1	; 0x01
    733a:	82 81       	ldd	r24, Z+2	; 0x02
    733c:	93 81       	ldd	r25, Z+3	; 0x03
    733e:	a7 01       	movw	r20, r14
    7340:	96 01       	movw	r18, r12
    7342:	0e 94 d8 50 	call	0xa1b0	; 0xa1b0 <__udivmodsi4>
    7346:	28 a3       	std	Y+32, r18	; 0x20
    7348:	39 a3       	std	Y+33, r19	; 0x21
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:655
      pressure_cumulated     += pressure;

      if (measureCount >= device().getList0().Sendeintervall()) {
        msg.init(device().nextcount(),
                 temperature1_cumulated / measureCount,
                 temperature2_cumulated / measureCount,
    734a:	d4 01       	movw	r26, r8
    734c:	6d 91       	ld	r22, X+
    734e:	7d 91       	ld	r23, X+
    7350:	8d 91       	ld	r24, X+
    7352:	9c 91       	ld	r25, X
    7354:	a7 01       	movw	r20, r14
    7356:	96 01       	movw	r18, r12
    7358:	0e 94 d8 50 	call	0xa1b0	; 0xa1b0 <__udivmodsi4>
    735c:	12 2f       	mov	r17, r18
    735e:	03 2f       	mov	r16, r19
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:654
      temperature2_cumulated += currentTemperature2;
      pressure_cumulated     += pressure;

      if (measureCount >= device().getList0().Sendeintervall()) {
        msg.init(device().nextcount(),
                 temperature1_cumulated / measureCount,
    7360:	f3 01       	movw	r30, r6
    7362:	60 81       	ld	r22, Z
    7364:	71 81       	ldd	r23, Z+1	; 0x01
    7366:	82 81       	ldd	r24, Z+2	; 0x02
    7368:	93 81       	ldd	r25, Z+3	; 0x03
    736a:	a7 01       	movw	r20, r14
    736c:	96 01       	movw	r18, r12
    736e:	0e 94 d8 50 	call	0xa1b0	; 0xa1b0 <__udivmodsi4>
    7372:	d1 01       	movw	r26, r2
    7374:	18 96       	adiw	r26, 0x08	; 8
    7376:	ed 91       	ld	r30, X+
    7378:	fc 91       	ld	r31, X
    737a:	19 97       	sbiw	r26, 0x09	; 9
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E9nextcountEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:370
    }
    return false;
  }

  uint8_t nextcount () {
    return ++msgcount;
    737c:	86 81       	ldd	r24, Z+6	; 0x06
    737e:	8f 5f       	subi	r24, 0xFF	; 255
    7380:	86 83       	std	Z+6, r24	; 0x06
_ZN2as7Message13initWithCountEhhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:149
    *(ptr+3) = d4;
    len += 4;
  }

  void initWithCount(uint8_t length, uint8_t typ, uint8_t flags, uint8_t comm) {
    this->len = length;
    7382:	96 e1       	ldi	r25, 0x16	; 22
    7384:	5a 96       	adiw	r26, 0x1a	; 26
    7386:	9c 93       	st	X, r25
    7388:	5a 97       	sbiw	r26, 0x1a	; 26
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:150
    this->typ = typ;
    738a:	93 e5       	ldi	r25, 0x53	; 83
    738c:	5d 96       	adiw	r26, 0x1d	; 29
    738e:	9c 93       	st	X, r25
    7390:	5d 97       	sbiw	r26, 0x1d	; 29
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:152
    this->flag = flags;
    this->comm = comm;
    7392:	91 e4       	ldi	r25, 0x41	; 65
    7394:	94 96       	adiw	r26, 0x24	; 36
    7396:	9c 93       	st	X, r25
    7398:	94 97       	sbiw	r26, 0x24	; 36
_ZN2as7Message4initEhhhhhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:157
  }

  void init(uint8_t length, uint8_t cnt, uint8_t typ, uint8_t flags, uint8_t comm, uint8_t sub) {
    initWithCount(length,typ,flags,comm);
    this->cnt = cnt;
    739a:	5b 96       	adiw	r26, 0x1b	; 27
    739c:	8c 93       	st	X, r24
    739e:	5b 97       	sbiw	r26, 0x1b	; 27
init():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:340
LcdType lcd;

class MeasureEventMsg : public Message {
  public:
    void init(uint8_t msgcnt, int16_t temp, int16_t temp2, uint16_t ph, int16_t orp, uint16_t pressure, uint8_t flow) {
      Message::init(0x16, msgcnt, 0x53, BIDI | WKMEUP, 0x41, (temp >> 8) & 0xff);
    73a0:	95 96       	adiw	r26, 0x25	; 37
    73a2:	3c 93       	st	X, r19
    73a4:	95 97       	sbiw	r26, 0x25	; 37
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:341
      pload[0] = temp & 0xff;
    73a6:	96 96       	adiw	r26, 0x26	; 38
    73a8:	2c 93       	st	X, r18
    73aa:	96 97       	sbiw	r26, 0x26	; 38
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:342
      pload[1] = (ph >> 8) & 0xff;
    73ac:	e9 a1       	ldd	r30, Y+33	; 0x21
    73ae:	97 96       	adiw	r26, 0x27	; 39
    73b0:	ec 93       	st	X, r30
    73b2:	97 97       	sbiw	r26, 0x27	; 39
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:343
      pload[2] =  ph & 0xff;
    73b4:	f8 a1       	ldd	r31, Y+32	; 0x20
    73b6:	98 96       	adiw	r26, 0x28	; 40
    73b8:	fc 93       	st	X, r31
    73ba:	98 97       	sbiw	r26, 0x28	; 40
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:344
      pload[3] = (orp >> 8) & 0xff;
    73bc:	2f 8d       	ldd	r18, Y+31	; 0x1f
    73be:	99 96       	adiw	r26, 0x29	; 41
    73c0:	2c 93       	st	X, r18
    73c2:	99 97       	sbiw	r26, 0x29	; 41
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:345
      pload[4] =  orp & 0xff;
    73c4:	3e 8d       	ldd	r19, Y+30	; 0x1e
    73c6:	9a 96       	adiw	r26, 0x2a	; 42
    73c8:	3c 93       	st	X, r19
    73ca:	9a 97       	sbiw	r26, 0x2a	; 42
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:346
      pload[5] = (pressure >> 8) & 0xff;
    73cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    73ce:	9b 96       	adiw	r26, 0x2b	; 43
    73d0:	8c 93       	st	X, r24
    73d2:	9b 97       	sbiw	r26, 0x2b	; 43
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:347
      pload[6] =  pressure & 0xff;
    73d4:	99 8d       	ldd	r25, Y+25	; 0x19
    73d6:	9c 96       	adiw	r26, 0x2c	; 44
    73d8:	9c 93       	st	X, r25
    73da:	9c 97       	sbiw	r26, 0x2c	; 44
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:348
      pload[7] =  flow & 0xff;
    73dc:	ed 89       	ldd	r30, Y+21	; 0x15
    73de:	9d 96       	adiw	r26, 0x2d	; 45
    73e0:	ec 93       	st	X, r30
    73e2:	9d 97       	sbiw	r26, 0x2d	; 45
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:349
      pload[8] = 0x42;
    73e4:	82 e4       	ldi	r24, 0x42	; 66
    73e6:	9e 96       	adiw	r26, 0x2e	; 46
    73e8:	8c 93       	st	X, r24
    73ea:	9e 97       	sbiw	r26, 0x2e	; 46
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:350
      pload[9] = (temp2 >> 8) & 0xff;
    73ec:	9f 96       	adiw	r26, 0x2f	; 47
    73ee:	0c 93       	st	X, r16
    73f0:	9f 97       	sbiw	r26, 0x2f	; 47
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:351
      pload[10] = temp2 & 0xff;
    73f2:	d0 96       	adiw	r26, 0x30	; 48
    73f4:	1c 93       	st	X, r17
    73f6:	d0 97       	sbiw	r26, 0x30	; 48
    73f8:	18 96       	adiw	r26, 0x08	; 8
    73fa:	8d 91       	ld	r24, X+
    73fc:	9c 91       	ld	r25, X
    73fe:	19 97       	sbiw	r26, 0x09	; 9
_ZN2as7Message12setBroadcastEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Message.h:316
  void setWakeMeUp () {
    flag |= WKMEUP;
  }

  void setBroadcast () {
    flag |= BCAST;
    7400:	26 e0       	ldi	r18, 0x06	; 6
    7402:	5c 96       	adiw	r26, 0x1c	; 28
    7404:	2c 93       	st	X, r18
broadcastEvent():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:644

  void broadcastEvent (Message& msg) {
    msg.clearAck();
    msg.burstRequired(false);
    msg.setBroadcast();
    send(msg,HMID::broadcast);
    7406:	4f e7       	ldi	r20, 0x7F	; 127
    7408:	55 e0       	ldi	r21, 0x05	; 5
    740a:	b1 01       	movw	r22, r2
    740c:	66 5e       	subi	r22, 0xE6	; 230
    740e:	7f 4f       	sbci	r23, 0xFF	; 255
    7410:	0e 94 1d 28 	call	0x503a	; 0x503a <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::send(as::Message&, as::HMID const&)>
run():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:663
                 pressure_cumulated / measureCount,
                 flowrate_cumulated / measureCount);

        device().broadcastEvent(msg);

        measureCount = 0;
    7414:	af 89       	ldd	r26, Y+23	; 0x17
    7416:	b8 8d       	ldd	r27, Y+24	; 0x18
    7418:	1d 92       	st	X+, r1
    741a:	1c 92       	st	X, r1
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:664
        ph_cumulated = 0;
    741c:	e9 89       	ldd	r30, Y+17	; 0x11
    741e:	fa 89       	ldd	r31, Y+18	; 0x12
    7420:	10 82       	st	Z, r1
    7422:	11 82       	std	Z+1, r1	; 0x01
    7424:	12 82       	std	Z+2, r1	; 0x02
    7426:	13 82       	std	Z+3, r1	; 0x03
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:665
        orp_cumulated = 0;
    7428:	ad 85       	ldd	r26, Y+13	; 0x0d
    742a:	be 85       	ldd	r27, Y+14	; 0x0e
    742c:	1d 92       	st	X+, r1
    742e:	1d 92       	st	X+, r1
    7430:	1d 92       	st	X+, r1
    7432:	1c 92       	st	X, r1
    7434:	13 97       	sbiw	r26, 0x03	; 3
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:666
        temperature1_cumulated = 0;
    7436:	f3 01       	movw	r30, r6
    7438:	10 82       	st	Z, r1
    743a:	11 82       	std	Z+1, r1	; 0x01
    743c:	12 82       	std	Z+2, r1	; 0x02
    743e:	13 82       	std	Z+3, r1	; 0x03
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:667
        temperature2_cumulated = 0;
    7440:	d4 01       	movw	r26, r8
    7442:	1d 92       	st	X+, r1
    7444:	1d 92       	st	X+, r1
    7446:	1d 92       	st	X+, r1
    7448:	1c 92       	st	X, r1
    744a:	13 97       	sbiw	r26, 0x03	; 3
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:668
        pressure_cumulated = 0;
    744c:	f5 01       	movw	r30, r10
    744e:	10 82       	st	Z, r1
    7450:	11 82       	std	Z+1, r1	; 0x01
    7452:	12 82       	std	Z+2, r1	; 0x02
    7454:	13 82       	std	Z+3, r1	; 0x03
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:669
        flowrate_cumulated = 0;
    7456:	d2 01       	movw	r26, r4
    7458:	1d 92       	st	X+, r1
    745a:	1c 92       	st	X, r1
_ZN2as8SysClock3addERNS_5AlarmE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:221
    745c:	b1 01       	movw	r22, r2
    745e:	87 e8       	ldi	r24, 0x87	; 135
    7460:	95 e0       	ldi	r25, 0x05	; 5
    7462:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <as::AlarmClock::add(as::Alarm&)>
_ZN14MeasureChannel7triggerERN2as10AlarmClockE():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:680
      if (phcalibrationMode == false) {
        run();
      } else {
        disablePHCalibrationMode();
      }
    }
    7466:	a1 96       	adiw	r28, 0x21	; 33
    7468:	0f b6       	in	r0, 0x3f	; 63
    746a:	f8 94       	cli
    746c:	de bf       	out	0x3e, r29	; 62
    746e:	0f be       	out	0x3f, r0	; 63
    7470:	cd bf       	out	0x3d, r28	; 61
    7472:	df 91       	pop	r29
    7474:	cf 91       	pop	r28
    7476:	1f 91       	pop	r17
    7478:	0f 91       	pop	r16
    747a:	ff 90       	pop	r15
    747c:	ef 90       	pop	r14
    747e:	df 90       	pop	r13
    7480:	cf 90       	pop	r12
    7482:	bf 90       	pop	r11
    7484:	af 90       	pop	r10
    7486:	9f 90       	pop	r9
    7488:	8f 90       	pop	r8
    748a:	7f 90       	pop	r7
    748c:	6f 90       	pop	r6
    748e:	5f 90       	pop	r5
    7490:	4f 90       	pop	r4
    7492:	3f 90       	pop	r3
    7494:	2f 90       	pop	r2
    7496:	08 95       	ret
printFloat():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:258
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    7498:	2f ef       	ldi	r18, 0xFF	; 255
    749a:	3f ef       	ldi	r19, 0xFF	; 255
    749c:	4f e7       	ldi	r20, 0x7F	; 127
    749e:	5f e4       	ldi	r21, 0x4F	; 79
    74a0:	c7 01       	movw	r24, r14
    74a2:	b6 01       	movw	r22, r12
    74a4:	0e 94 25 50 	call	0xa04a	; 0xa04a <__gesf2>
    74a8:	18 16       	cp	r1, r24
    74aa:	1c f4       	brge	.+6      	; 0x74b2 <MeasureChannel::trigger(as::AlarmClock&)+0xe2c>
write():
    74ac:	6d e6       	ldi	r22, 0x6D	; 109
    74ae:	73 e0       	ldi	r23, 0x03	; 3
    74b0:	67 cd       	rjmp	.-1330   	; 0x6f80 <MeasureChannel::trigger(as::AlarmClock&)+0x8fa>
printFloat():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:259
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    74b2:	2f ef       	ldi	r18, 0xFF	; 255
    74b4:	3f ef       	ldi	r19, 0xFF	; 255
    74b6:	4f e7       	ldi	r20, 0x7F	; 127
    74b8:	5f ec       	ldi	r21, 0xCF	; 207
    74ba:	c7 01       	movw	r24, r14
    74bc:	b6 01       	movw	r22, r12
    74be:	0e 94 aa 4d 	call	0x9b54	; 0x9b54 <__cmpsf2>
    74c2:	87 fd       	sbrc	r24, 7
    74c4:	f3 cf       	rjmp	.-26     	; 0x74ac <MeasureChannel::trigger(as::AlarmClock&)+0xe26>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:262
  
  // Handle negative numbers
  if (number < 0.0)
    74c6:	20 e0       	ldi	r18, 0x00	; 0
    74c8:	30 e0       	ldi	r19, 0x00	; 0
    74ca:	a9 01       	movw	r20, r18
    74cc:	c7 01       	movw	r24, r14
    74ce:	b6 01       	movw	r22, r12
    74d0:	0e 94 aa 4d 	call	0x9b54	; 0x9b54 <__cmpsf2>
    74d4:	87 ff       	sbrs	r24, 7
    74d6:	0c c0       	rjmp	.+24     	; 0x74f0 <MeasureChannel::trigger(as::AlarmClock&)+0xe6a>
print():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    74d8:	6d e2       	ldi	r22, 0x2D	; 45
    74da:	89 ed       	ldi	r24, 0xD9	; 217
    74dc:	94 e0       	ldi	r25, 0x04	; 4
    74de:	0e 94 99 06 	call	0xd32	; 0xd32 <HardwareSerial::write(unsigned char)>
printFloat():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:265
  
  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     number = -number;
    74e2:	d7 01       	movw	r26, r14
    74e4:	c6 01       	movw	r24, r12
    74e6:	b0 58       	subi	r27, 0x80	; 128
    74e8:	89 8f       	std	Y+25, r24	; 0x19
    74ea:	9a 8f       	std	Y+26, r25	; 0x1a
    74ec:	ab 8f       	std	Y+27, r26	; 0x1b
    74ee:	bc 8f       	std	Y+28, r27	; 0x1c
_ZN14MeasureChannel7triggerERN2as10AlarmClockE():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:590
      DPRINT(F("        ORP       : "));DDECLN(orpValue);
      return orpValue;
    }

    uint16_t readPressure() {
      uint16_t analogValue = 0;
    74f0:	1a e0       	ldi	r17, 0x0A	; 10
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:269
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    74f2:	60 e0       	ldi	r22, 0x00	; 0
    74f4:	70 e0       	ldi	r23, 0x00	; 0
    74f6:	80 e0       	ldi	r24, 0x00	; 0
    74f8:	9f e3       	ldi	r25, 0x3F	; 63
printFloat():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:271
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
    74fa:	20 e0       	ldi	r18, 0x00	; 0
    74fc:	30 e0       	ldi	r19, 0x00	; 0
    74fe:	40 e2       	ldi	r20, 0x20	; 32
    7500:	51 e4       	ldi	r21, 0x41	; 65
    7502:	0e 94 7d 4f 	call	0x9efa	; 0x9efa <__divsf3>
    7506:	11 50       	subi	r17, 0x01	; 1
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:270
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    7508:	c1 f7       	brne	.-16     	; 0x74fa <MeasureChannel::trigger(as::AlarmClock&)+0xe74>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:273
    rounding /= 10.0;
  
  number += rounding;
    750a:	29 8d       	ldd	r18, Y+25	; 0x19
    750c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    750e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    7510:	5c 8d       	ldd	r21, Y+28	; 0x1c
    7512:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <__addsf3>
    7516:	6b 01       	movw	r12, r22
    7518:	7c 01       	movw	r14, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:276

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    751a:	0e 94 f6 4f 	call	0x9fec	; 0x9fec <__fixunssfsi>
    751e:	2b 01       	movw	r4, r22
    7520:	3c 01       	movw	r6, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:277
  double remainder = number - (double)int_part;
    7522:	0e 94 af 4d 	call	0x9b5e	; 0x9b5e <__floatunsisf>
    7526:	9b 01       	movw	r18, r22
    7528:	ac 01       	movw	r20, r24
    752a:	c7 01       	movw	r24, r14
    752c:	b6 01       	movw	r22, r12
    752e:	0e 94 10 4f 	call	0x9e20	; 0x9e20 <__subsf3>
    7532:	6b 01       	movw	r12, r22
    7534:	7c 01       	movw	r14, r24
print():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    7536:	2a e0       	ldi	r18, 0x0A	; 10
    7538:	b3 01       	movw	r22, r6
    753a:	a2 01       	movw	r20, r4
    753c:	89 ed       	ldi	r24, 0xD9	; 217
    753e:	94 e0       	ldi	r25, 0x04	; 4
    7540:	0e 94 2e 22 	call	0x445c	; 0x445c <Print::printNumber(unsigned long, unsigned char)>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    7544:	6e e2       	ldi	r22, 0x2E	; 46
    7546:	89 ed       	ldi	r24, 0xD9	; 217
    7548:	94 e0       	ldi	r25, 0x04	; 4
    754a:	0e 94 99 06 	call	0xd32	; 0xd32 <HardwareSerial::write(unsigned char)>
    754e:	1b e0       	ldi	r17, 0x0B	; 11
    7550:	11 50       	subi	r17, 0x01	; 1
printFloat():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:286
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    7552:	09 f4       	brne	.+2      	; 0x7556 <MeasureChannel::trigger(as::AlarmClock&)+0xed0>
    7554:	19 cd       	rjmp	.-1486   	; 0x6f88 <MeasureChannel::trigger(as::AlarmClock&)+0x902>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:288
  {
    remainder *= 10.0;
    7556:	20 e0       	ldi	r18, 0x00	; 0
    7558:	30 e0       	ldi	r19, 0x00	; 0
    755a:	40 e2       	ldi	r20, 0x20	; 32
    755c:	51 e4       	ldi	r21, 0x41	; 65
    755e:	c7 01       	movw	r24, r14
    7560:	b6 01       	movw	r22, r12
    7562:	0e 94 10 4e 	call	0x9c20	; 0x9c20 <__mulsf3>
    7566:	2b 01       	movw	r4, r22
    7568:	3c 01       	movw	r6, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:289
    unsigned int toPrint = (unsigned int)(remainder);
    756a:	0e 94 f6 4f 	call	0x9fec	; 0x9fec <__fixunssfsi>
    756e:	6b 01       	movw	r12, r22
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:290
    n += print(toPrint);
    7570:	89 ed       	ldi	r24, 0xD9	; 217
    7572:	94 e0       	ldi	r25, 0x04	; 4
    7574:	0e 94 ce 22 	call	0x459c	; 0x459c <Print::print(unsigned int, int) [clone .constprop.104]>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/Print.cpp:291
    remainder -= toPrint; 
    7578:	b6 01       	movw	r22, r12
    757a:	90 e0       	ldi	r25, 0x00	; 0
    757c:	80 e0       	ldi	r24, 0x00	; 0
    757e:	0e 94 af 4d 	call	0x9b5e	; 0x9b5e <__floatunsisf>
    7582:	9b 01       	movw	r18, r22
    7584:	ac 01       	movw	r20, r24
    7586:	c3 01       	movw	r24, r6
    7588:	b2 01       	movw	r22, r4
    758a:	0e 94 10 4f 	call	0x9e20	; 0x9e20 <__subsf3>
    758e:	6b 01       	movw	r12, r22
    7590:	7c 01       	movw	r14, r24
    7592:	de cf       	rjmp	.-68     	; 0x7550 <MeasureChannel::trigger(as::AlarmClock&)+0xeca>
_ZN14MeasureChannel7triggerERN2as10AlarmClockE():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:678

    virtual void trigger (__attribute__ ((unused)) AlarmClock& clock) {
      if (phcalibrationMode == false) {
        run();
      } else {
        disablePHCalibrationMode();
    7594:	0e 94 15 11 	call	0x222a	; 0x222a <MeasureChannel::disablePHCalibrationMode()>
    7598:	66 cf       	rjmp	.-308    	; 0x7466 <MeasureChannel::trigger(as::AlarmClock&)+0xde0>

0000759a <MeasureChannel::nextCalibrationStep()>:
_ZN14MeasureChannel19nextCalibrationStepEv():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:505

    bool getCalibrationMode() {
      return phcalibrationMode;
    }

    void nextCalibrationStep() {
    759a:	6f 92       	push	r6
    759c:	7f 92       	push	r7
    759e:	8f 92       	push	r8
    75a0:	9f 92       	push	r9
    75a2:	af 92       	push	r10
    75a4:	bf 92       	push	r11
    75a6:	cf 92       	push	r12
    75a8:	df 92       	push	r13
    75aa:	ef 92       	push	r14
    75ac:	ff 92       	push	r15
    75ae:	0f 93       	push	r16
    75b0:	1f 93       	push	r17
    75b2:	cf 93       	push	r28
    75b4:	df 93       	push	r29
    75b6:	00 d0       	rcall	.+0      	; 0x75b8 <MeasureChannel::nextCalibrationStep()+0x1e>
    75b8:	00 d0       	rcall	.+0      	; 0x75ba <MeasureChannel::nextCalibrationStep()+0x20>
    75ba:	00 d0       	rcall	.+0      	; 0x75bc <MeasureChannel::nextCalibrationStep()+0x22>
    75bc:	cd b7       	in	r28, 0x3d	; 61
    75be:	de b7       	in	r29, 0x3e	; 62
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:506
      if (phcalibrationMode == true) {
    75c0:	fc 01       	movw	r30, r24
    75c2:	ec 5a       	subi	r30, 0xAC	; 172
    75c4:	ff 4f       	sbci	r31, 0xFF	; 255
    75c6:	20 81       	ld	r18, Z
    75c8:	ac 01       	movw	r20, r24
    75ca:	43 5a       	subi	r20, 0xA3	; 163
    75cc:	5f 4f       	sbci	r21, 0xFF	; 255
    75ce:	7a 01       	movw	r14, r20
    75d0:	22 23       	and	r18, r18
    75d2:	09 f4       	brne	.+2      	; 0x75d6 <MeasureChannel::nextCalibrationStep()+0x3c>
    75d4:	eb c1       	rjmp	.+982    	; 0x79ac <MeasureChannel::nextCalibrationStep()+0x412>
    75d6:	8c 01       	movw	r16, r24
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:508
        uint32_t voltage = 0;
        DPRINT(F("CALIB STEP "));DDECLN(phcalibrationStep);
    75d8:	8c e8       	ldi	r24, 0x8C	; 140
    75da:	93 e0       	ldi	r25, 0x03	; 3
    75dc:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    75e0:	f7 01       	movw	r30, r14
    75e2:	80 81       	ld	r24, Z
    75e4:	0e 94 1d 24 	call	0x483a	; 0x483a <void DDECLN<unsigned char>(unsigned char)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:509
        switch (phcalibrationStep) {
    75e8:	f7 01       	movw	r30, r14
    75ea:	80 81       	ld	r24, Z
    75ec:	98 01       	movw	r18, r16
    75ee:	2c 59       	subi	r18, 0x9C	; 156
    75f0:	3f 4f       	sbci	r19, 0xFF	; 255
    75f2:	39 01       	movw	r6, r18
    75f4:	a8 01       	movw	r20, r16
    75f6:	4a 59       	subi	r20, 0x9A	; 154
    75f8:	5f 4f       	sbci	r21, 0xFF	; 255
    75fa:	6a 01       	movw	r12, r20
    75fc:	32 97       	sbiw	r30, 0x02	; 2
    75fe:	5f 01       	movw	r10, r30
    7600:	83 30       	cpi	r24, 0x03	; 3
    7602:	09 f4       	brne	.+2      	; 0x7606 <MeasureChannel::nextCalibrationStep()+0x6c>
    7604:	8e c0       	rjmp	.+284    	; 0x7722 <MeasureChannel::nextCalibrationStep()+0x188>
    7606:	78 f5       	brcc	.+94     	; 0x7666 <MeasureChannel::nextCalibrationStep()+0xcc>
    7608:	81 30       	cpi	r24, 0x01	; 1
    760a:	09 f4       	brne	.+2      	; 0x760e <MeasureChannel::nextCalibrationStep()+0x74>
    760c:	8a c0       	rjmp	.+276    	; 0x7722 <MeasureChannel::nextCalibrationStep()+0x188>
    760e:	82 30       	cpi	r24, 0x02	; 2
    7610:	09 f4       	brne	.+2      	; 0x7614 <MeasureChannel::nextCalibrationStep()+0x7a>
    7612:	9b c0       	rjmp	.+310    	; 0x774a <MeasureChannel::nextCalibrationStep()+0x1b0>
DPRINT():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:40
#ifndef DSERIAL
  #define DSERIAL Serial
#endif

  template <class T>
  inline void DPRINT(T str) { DSERIAL.print(str); }
    7614:	66 ea       	ldi	r22, 0xA6	; 166
    7616:	73 e0       	ldi	r23, 0x03	; 3
    7618:	89 ed       	ldi	r24, 0xD9	; 217
    761a:	94 e0       	ldi	r25, 0x04	; 4
    761c:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <Print::print(char const*)>
_ZN14MeasureChannel19nextCalibrationStepEv():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:544
          calib_Temperature = readTemperature1();
          savePHCalibrationValues();
          disablePHCalibrationMode();
          break;
        }
        DPRINT("cd.showCalibrationMenu ");DDECLN(phcalibrationStep);
    7620:	f7 01       	movw	r30, r14
    7622:	80 81       	ld	r24, Z
    7624:	0e 94 1d 24 	call	0x483a	; 0x483a <void DDECLN<unsigned char>(unsigned char)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:545
        lcd.showCalibrationMenu(phcalibrationStep, calib_neutralVoltage, calib_acidVoltage, calib_Temperature);
    7628:	f5 01       	movw	r30, r10
    762a:	00 81       	ld	r16, Z
    762c:	11 81       	ldd	r17, Z+1	; 0x01
    762e:	f6 01       	movw	r30, r12
    7630:	c0 80       	ld	r12, Z
    7632:	d1 80       	ldd	r13, Z+1	; 0x01
    7634:	f3 01       	movw	r30, r6
    7636:	a0 80       	ld	r10, Z
    7638:	b1 80       	ldd	r11, Z+1	; 0x01
    763a:	f7 01       	movw	r30, r14
    763c:	90 80       	ld	r9, Z
showCalibrationMenu():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:266
    lcd.setCursor(13,3);lcd.print("| ");
    lcd.print(orpToStr(flow));
  }

  void showCalibrationMenu(uint8_t step, uint16_t n, uint16_t a, int16_t t) {
    lcd.clear();
    763e:	0e 94 8f 09 	call	0x131e	; 0x131e <LiquidCrystal_I2C::clear() [clone .constprop.123]>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:267
    switch (step) {
    7642:	f6 e0       	ldi	r31, 0x06	; 6
    7644:	f9 15       	cp	r31, r9
    7646:	08 f4       	brcc	.+2      	; 0x764a <MeasureChannel::nextCalibrationStep()+0xb0>
    7648:	c3 c0       	rjmp	.+390    	; 0x77d0 <MeasureChannel::nextCalibrationStep()+0x236>
    764a:	e9 2d       	mov	r30, r9
    764c:	f0 e0       	ldi	r31, 0x00	; 0
    764e:	e4 5d       	subi	r30, 0xD4	; 212
    7650:	f4 4c       	sbci	r31, 0xC4	; 196
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:296
      lcd.setCursor(0,2);lcd.print(F("PH 7 : "));lcd.print(n);
      lcd.setCursor(0,3);lcd.print(F("PH 4 : "));lcd.print(a);
      _delay_ms(2000);
      break;
    case 6:
      lcd.setCursor(5,0);lcd.print(F("CAL FAILED"));
    7652:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:267
    lcd.print(orpToStr(flow));
  }

  void showCalibrationMenu(uint8_t step, uint16_t n, uint16_t a, int16_t t) {
    lcd.clear();
    switch (step) {
    7654:	0c 94 19 51 	jmp	0xa232	; 0xa232 <__tablejump2__>
    7658:	d1 3b       	cpi	r29, 0xB1	; 177
    765a:	04 3c       	cpi	r16, 0xC4	; 196
    765c:	18 3c       	cpi	r17, 0xC8	; 200
    765e:	2c 3c       	cpi	r18, 0xCC	; 204
    7660:	40 3c       	cpi	r20, 0xC0	; 192
    7662:	54 3c       	cpi	r21, 0xC4	; 196
    7664:	b5 3c       	cpi	r27, 0xC5	; 197
_ZN14MeasureChannel19nextCalibrationStepEv():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:509

    void nextCalibrationStep() {
      if (phcalibrationMode == true) {
        uint32_t voltage = 0;
        DPRINT(F("CALIB STEP "));DDECLN(phcalibrationStep);
        switch (phcalibrationStep) {
    7666:	84 30       	cpi	r24, 0x04	; 4
    7668:	09 f4       	brne	.+2      	; 0x766c <MeasureChannel::nextCalibrationStep()+0xd2>
    766a:	88 c0       	rjmp	.+272    	; 0x777c <MeasureChannel::nextCalibrationStep()+0x1e2>
    766c:	85 30       	cpi	r24, 0x05	; 5
    766e:	91 f6       	brne	.-92     	; 0x7614 <MeasureChannel::nextCalibrationStep()+0x7a>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:539
          if (voltage > 18540 && voltage < 22100) {
            calib_acidVoltage = voltage;
          } else phcalibrationStep = 6;
          break;
        case 5:
          calib_Temperature = readTemperature1();
    7670:	c8 01       	movw	r24, r16
    7672:	0e 94 9b 32 	call	0x6536	; 0x6536 <MeasureChannel::readTemperature1()>
    7676:	f5 01       	movw	r30, r10
    7678:	91 83       	std	Z+1, r25	; 0x01
    767a:	80 83       	st	Z, r24
savePHCalibrationValues():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:481
      sysclock.add(*this);
      nextCalibrationStep();
    }

    void savePHCalibrationValues() {
      DPRINTLN(F("Saving Calibration Values:"));
    767c:	8e e8       	ldi	r24, 0x8E	; 142
    767e:	92 e0       	ldi	r25, 0x02	; 2
    7680:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <void DPRINTLN<__FlashStringHelper const*>(__FlashStringHelper const*)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:482
      DPRINT(F("-CAL neutralVoltage: "));DDECLN(calib_neutralVoltage);
    7684:	88 e7       	ldi	r24, 0x78	; 120
    7686:	92 e0       	ldi	r25, 0x02	; 2
    7688:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    768c:	f3 01       	movw	r30, r6
    768e:	80 81       	ld	r24, Z
    7690:	91 81       	ldd	r25, Z+1	; 0x01
    7692:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <void DDECLN<unsigned int>(unsigned int)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:483
      DPRINT(F("-CAL acidVoltage   : "));DDECLN(calib_acidVoltage);
    7696:	82 e6       	ldi	r24, 0x62	; 98
    7698:	92 e0       	ldi	r25, 0x02	; 2
    769a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    769e:	f6 01       	movw	r30, r12
    76a0:	80 81       	ld	r24, Z
    76a2:	91 81       	ldd	r25, Z+1	; 0x01
    76a4:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <void DDECLN<unsigned int>(unsigned int)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:484
      DPRINT(F("-CAL temperature   : "));DDECLN(calib_Temperature);
    76a8:	8c e4       	ldi	r24, 0x4C	; 76
    76aa:	92 e0       	ldi	r25, 0x02	; 2
    76ac:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    76b0:	f5 01       	movw	r30, r10
    76b2:	80 81       	ld	r24, Z
    76b4:	91 81       	ldd	r25, Z+1	; 0x01
    76b6:	0e 94 00 23 	call	0x4600	; 0x4600 <void DDECLN<int>(int)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:486

      us.setByte(1, (calib_neutralVoltage >> 8) & 0xff);
    76ba:	f3 01       	movw	r30, r6
    76bc:	61 81       	ldd	r22, Z+1	; 0x01
setByte():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:619
  }

  void setByte(uint16_t offset,uint8_t data) {
    storage().setByte(getAddress()+offset,data);
    76be:	f8 01       	movw	r30, r16
    76c0:	87 a9       	ldd	r24, Z+55	; 0x37
    76c2:	90 ad       	ldd	r25, Z+56	; 0x38
    76c4:	01 96       	adiw	r24, 0x01	; 1
    76c6:	0e 94 a5 13 	call	0x274a	; 0x274a <as::InternalEprom::setByte(unsigned int, unsigned char) [clone .isra.5]>
    76ca:	f8 01       	movw	r30, r16
    76cc:	87 a9       	ldd	r24, Z+55	; 0x37
    76ce:	90 ad       	ldd	r25, Z+56	; 0x38
    76d0:	f3 01       	movw	r30, r6
    76d2:	60 81       	ld	r22, Z
    76d4:	02 96       	adiw	r24, 0x02	; 2
    76d6:	0e 94 a5 13 	call	0x274a	; 0x274a <as::InternalEprom::setByte(unsigned int, unsigned char) [clone .isra.5]>
savePHCalibrationValues():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:489
      us.setByte(2, (calib_neutralVoltage)      & 0xff);

      us.setByte(3, (calib_acidVoltage >> 8) & 0xff);
    76da:	f6 01       	movw	r30, r12
    76dc:	61 81       	ldd	r22, Z+1	; 0x01
setByte():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:619
    76de:	f8 01       	movw	r30, r16
    76e0:	87 a9       	ldd	r24, Z+55	; 0x37
    76e2:	90 ad       	ldd	r25, Z+56	; 0x38
    76e4:	03 96       	adiw	r24, 0x03	; 3
    76e6:	0e 94 a5 13 	call	0x274a	; 0x274a <as::InternalEprom::setByte(unsigned int, unsigned char) [clone .isra.5]>
    76ea:	f8 01       	movw	r30, r16
    76ec:	87 a9       	ldd	r24, Z+55	; 0x37
    76ee:	90 ad       	ldd	r25, Z+56	; 0x38
    76f0:	f6 01       	movw	r30, r12
    76f2:	60 81       	ld	r22, Z
    76f4:	04 96       	adiw	r24, 0x04	; 4
    76f6:	0e 94 a5 13 	call	0x274a	; 0x274a <as::InternalEprom::setByte(unsigned int, unsigned char) [clone .isra.5]>
savePHCalibrationValues():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:492
      us.setByte(4, (calib_acidVoltage)      & 0xff);

      us.setByte(5, (calib_Temperature >> 8) & 0xff);
    76fa:	f5 01       	movw	r30, r10
    76fc:	61 81       	ldd	r22, Z+1	; 0x01
setByte():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:619
    76fe:	f8 01       	movw	r30, r16
    7700:	87 a9       	ldd	r24, Z+55	; 0x37
    7702:	90 ad       	ldd	r25, Z+56	; 0x38
    7704:	05 96       	adiw	r24, 0x05	; 5
    7706:	0e 94 a5 13 	call	0x274a	; 0x274a <as::InternalEprom::setByte(unsigned int, unsigned char) [clone .isra.5]>
    770a:	f8 01       	movw	r30, r16
    770c:	87 a9       	ldd	r24, Z+55	; 0x37
    770e:	90 ad       	ldd	r25, Z+56	; 0x38
    7710:	f5 01       	movw	r30, r10
    7712:	60 81       	ld	r22, Z
    7714:	06 96       	adiw	r24, 0x06	; 6
    7716:	0e 94 a5 13 	call	0x274a	; 0x274a <as::InternalEprom::setByte(unsigned int, unsigned char) [clone .isra.5]>
_ZN14MeasureChannel19nextCalibrationStepEv():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:541
          } else phcalibrationStep = 6;
          break;
        case 5:
          calib_Temperature = readTemperature1();
          savePHCalibrationValues();
          disablePHCalibrationMode();
    771a:	c8 01       	movw	r24, r16
    771c:	0e 94 15 11 	call	0x222a	; 0x222a <MeasureChannel::disablePHCalibrationMode()>
    7720:	79 cf       	rjmp	.-270    	; 0x7614 <MeasureChannel::nextCalibrationStep()+0x7a>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:513
        DPRINT(F("CALIB STEP "));DDECLN(phcalibrationStep);
        switch (phcalibrationStep) {
        case 0:
          break;
        case 1:
          sysclock.cancel(showCalibAnalogValueAlarm);
    7722:	48 01       	movw	r8, r16
    7724:	fe e0       	ldi	r31, 0x0E	; 14
    7726:	8f 0e       	add	r8, r31
    7728:	91 1c       	adc	r9, r1
    772a:	c4 01       	movw	r24, r8
    772c:	0e 94 22 10 	call	0x2044	; 0x2044 <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]>
_ZN2as5Alarm3setEm():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:41
    7730:	81 e0       	ldi	r24, 0x01	; 1
    7732:	90 e0       	ldi	r25, 0x00	; 0
    7734:	a0 e0       	ldi	r26, 0x00	; 0
    7736:	f8 01       	movw	r30, r16
    7738:	83 8b       	std	Z+19, r24	; 0x13
    773a:	94 8b       	std	Z+20, r25	; 0x14
    773c:	a5 8b       	std	Z+21, r26	; 0x15
_ZN2as8SysClock3addERNS_5AlarmE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:221
    773e:	b4 01       	movw	r22, r8
    7740:	87 e8       	ldi	r24, 0x87	; 135
    7742:	95 e0       	ldi	r25, 0x05	; 5
    7744:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <as::AlarmClock::add(as::Alarm&)>
    7748:	65 cf       	rjmp	.-310    	; 0x7614 <MeasureChannel::nextCalibrationStep()+0x7a>
_ZN14MeasureChannel19nextCalibrationStepEv():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:518
          showCalibAnalogValueAlarm.set(millis2ticks(10));
          sysclock.add(showCalibAnalogValueAlarm);
          break;
        case 2:
          sysclock.cancel(showCalibAnalogValueAlarm);
    774a:	c8 01       	movw	r24, r16
    774c:	0e 96       	adiw	r24, 0x0e	; 14
    774e:	0e 94 22 10 	call	0x2044	; 0x2044 <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:519
          voltage = readVoltage();
    7752:	0e 94 91 23 	call	0x4722	; 0x4722 <MeasureChannel::readVoltage() [clone .isra.83]>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:521
          //voltage = 15791;
          if (voltage > 13220 && voltage < 16780) {
    7756:	8b 01       	movw	r16, r22
    7758:	9c 01       	movw	r18, r24
    775a:	05 5a       	subi	r16, 0xA5	; 165
    775c:	13 43       	sbci	r17, 0x33	; 51
    775e:	21 09       	sbc	r18, r1
    7760:	31 09       	sbc	r19, r1
    7762:	07 3e       	cpi	r16, 0xE7	; 231
    7764:	1d 40       	sbci	r17, 0x0D	; 13
    7766:	21 05       	cpc	r18, r1
    7768:	31 05       	cpc	r19, r1
    776a:	20 f4       	brcc	.+8      	; 0x7774 <MeasureChannel::nextCalibrationStep()+0x1da>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:522
            calib_neutralVoltage = voltage;
    776c:	f3 01       	movw	r30, r6
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:535
        case 4:
          sysclock.cancel(showCalibAnalogValueAlarm);
          voltage = readVoltage();
          //voltage = 20915;
          if (voltage > 18540 && voltage < 22100) {
            calib_acidVoltage = voltage;
    776e:	71 83       	std	Z+1, r23	; 0x01
    7770:	60 83       	st	Z, r22
    7772:	50 cf       	rjmp	.-352    	; 0x7614 <MeasureChannel::nextCalibrationStep()+0x7a>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:523
          sysclock.cancel(showCalibAnalogValueAlarm);
          voltage = readVoltage();
          //voltage = 15791;
          if (voltage > 13220 && voltage < 16780) {
            calib_neutralVoltage = voltage;
          } else phcalibrationStep = 6;
    7774:	86 e0       	ldi	r24, 0x06	; 6
    7776:	f7 01       	movw	r30, r14
    7778:	80 83       	st	Z, r24
    777a:	4c cf       	rjmp	.-360    	; 0x7614 <MeasureChannel::nextCalibrationStep()+0x7a>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:531
          sysclock.cancel(showCalibAnalogValueAlarm);
          showCalibAnalogValueAlarm.set(millis2ticks(10));
          sysclock.add(showCalibAnalogValueAlarm);
          break;
        case 4:
          sysclock.cancel(showCalibAnalogValueAlarm);
    777c:	c8 01       	movw	r24, r16
    777e:	0e 96       	adiw	r24, 0x0e	; 14
    7780:	0e 94 22 10 	call	0x2044	; 0x2044 <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:532
          voltage = readVoltage();
    7784:	0e 94 91 23 	call	0x4722	; 0x4722 <MeasureChannel::readVoltage() [clone .isra.83]>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:534
          //voltage = 20915;
          if (voltage > 18540 && voltage < 22100) {
    7788:	8b 01       	movw	r16, r22
    778a:	9c 01       	movw	r18, r24
    778c:	0d 56       	subi	r16, 0x6D	; 109
    778e:	18 44       	sbci	r17, 0x48	; 72
    7790:	21 09       	sbc	r18, r1
    7792:	31 09       	sbc	r19, r1
    7794:	07 3e       	cpi	r16, 0xE7	; 231
    7796:	1d 40       	sbci	r17, 0x0D	; 13
    7798:	21 05       	cpc	r18, r1
    779a:	31 05       	cpc	r19, r1
    779c:	58 f7       	brcc	.-42     	; 0x7774 <MeasureChannel::nextCalibrationStep()+0x1da>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:535
            calib_acidVoltage = voltage;
    779e:	f6 01       	movw	r30, r12
    77a0:	e6 cf       	rjmp	.-52     	; 0x776e <MeasureChannel::nextCalibrationStep()+0x1d4>
showCalibrationMenu():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:269

  void showCalibrationMenu(uint8_t step, uint16_t n, uint16_t a, int16_t t) {
    lcd.clear();
    switch (step) {
    case 0:
      lcd.setCursor(2,0);lcd.print(F("CALIBRATION MODE"));
    77a2:	62 e0       	ldi	r22, 0x02	; 2
    77a4:	82 ea       	ldi	r24, 0xA2	; 162
    77a6:	97 e0       	ldi	r25, 0x07	; 7
    77a8:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
    77ac:	6b e7       	ldi	r22, 0x7B	; 123
    77ae:	73 e0       	ldi	r23, 0x03	; 3
    77b0:	82 ea       	ldi	r24, 0xA2	; 162
    77b2:	97 e0       	ldi	r25, 0x07	; 7
    77b4:	0e 94 d6 05 	call	0xbac	; 0xbac <Print::print(__FlashStringHelper const*)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:270
      lcd.setCursor(4,1);lcd.print(F("Press button"));
    77b8:	41 e0       	ldi	r20, 0x01	; 1
    77ba:	64 e0       	ldi	r22, 0x04	; 4
    77bc:	82 ea       	ldi	r24, 0xA2	; 162
    77be:	97 e0       	ldi	r25, 0x07	; 7
    77c0:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
    77c4:	6e e6       	ldi	r22, 0x6E	; 110
    77c6:	73 e0       	ldi	r23, 0x03	; 3
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:286
      lcd.setCursor(0,0);lcd.print(F("Put in 4.0 solution"));
      lcd.setCursor(4,1);lcd.print(F("Press button"));
      break;
    case 4:
      lcd.setCursor(2,0);lcd.print(F("Reading 4.0 DONE"));
      lcd.setCursor(4,1);lcd.print(F("Press button"));
    77c8:	82 ea       	ldi	r24, 0xA2	; 162
    77ca:	97 e0       	ldi	r25, 0x07	; 7
    77cc:	0e 94 d6 05 	call	0xbac	; 0xbac <Print::print(__FlashStringHelper const*)>
_ZN14MeasureChannel19nextCalibrationStepEv():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:546
          disablePHCalibrationMode();
          break;
        }
        DPRINT("cd.showCalibrationMenu ");DDECLN(phcalibrationStep);
        lcd.showCalibrationMenu(phcalibrationStep, calib_neutralVoltage, calib_acidVoltage, calib_Temperature);
        if (phcalibrationStep < 6) phcalibrationStep++; else phcalibrationStep = 1;
    77d0:	f7 01       	movw	r30, r14
    77d2:	80 81       	ld	r24, Z
    77d4:	86 30       	cpi	r24, 0x06	; 6
    77d6:	08 f0       	brcs	.+2      	; 0x77da <MeasureChannel::nextCalibrationStep()+0x240>
    77d8:	e7 c0       	rjmp	.+462    	; 0x79a8 <MeasureChannel::nextCalibrationStep()+0x40e>
    77da:	8f 5f       	subi	r24, 0xFF	; 255
    77dc:	80 83       	st	Z, r24
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:550
      } else {
        phcalibrationStep = 0;
      }
    }
    77de:	26 96       	adiw	r28, 0x06	; 6
    77e0:	0f b6       	in	r0, 0x3f	; 63
    77e2:	f8 94       	cli
    77e4:	de bf       	out	0x3e, r29	; 62
    77e6:	0f be       	out	0x3f, r0	; 63
    77e8:	cd bf       	out	0x3d, r28	; 61
    77ea:	df 91       	pop	r29
    77ec:	cf 91       	pop	r28
    77ee:	1f 91       	pop	r17
    77f0:	0f 91       	pop	r16
    77f2:	ff 90       	pop	r15
    77f4:	ef 90       	pop	r14
    77f6:	df 90       	pop	r13
    77f8:	cf 90       	pop	r12
    77fa:	bf 90       	pop	r11
    77fc:	af 90       	pop	r10
    77fe:	9f 90       	pop	r9
    7800:	8f 90       	pop	r8
    7802:	7f 90       	pop	r7
    7804:	6f 90       	pop	r6
    7806:	08 95       	ret
showCalibrationMenu():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:273
    case 0:
      lcd.setCursor(2,0);lcd.print(F("CALIBRATION MODE"));
      lcd.setCursor(4,1);lcd.print(F("Press button"));
      break;
    case 1:
      lcd.setCursor(0,0);lcd.print(F("Put in 7.0 solution"));
    7808:	60 e0       	ldi	r22, 0x00	; 0
    780a:	82 ea       	ldi	r24, 0xA2	; 162
    780c:	97 e0       	ldi	r25, 0x07	; 7
    780e:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
    7812:	6a e5       	ldi	r22, 0x5A	; 90
    7814:	73 e0       	ldi	r23, 0x03	; 3
    7816:	82 ea       	ldi	r24, 0xA2	; 162
    7818:	97 e0       	ldi	r25, 0x07	; 7
    781a:	0e 94 d6 05 	call	0xbac	; 0xbac <Print::print(__FlashStringHelper const*)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:274
      lcd.setCursor(4,1);lcd.print(F("Press button"));
    781e:	41 e0       	ldi	r20, 0x01	; 1
    7820:	64 e0       	ldi	r22, 0x04	; 4
    7822:	82 ea       	ldi	r24, 0xA2	; 162
    7824:	97 e0       	ldi	r25, 0x07	; 7
    7826:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
    782a:	6d e4       	ldi	r22, 0x4D	; 77
    782c:	73 e0       	ldi	r23, 0x03	; 3
    782e:	cc cf       	rjmp	.-104    	; 0x77c8 <MeasureChannel::nextCalibrationStep()+0x22e>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:277
      break;
    case 2:
      lcd.setCursor(2,0);lcd.print(F("Reading 7.0 DONE"));
    7830:	62 e0       	ldi	r22, 0x02	; 2
    7832:	82 ea       	ldi	r24, 0xA2	; 162
    7834:	97 e0       	ldi	r25, 0x07	; 7
    7836:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
    783a:	6c e3       	ldi	r22, 0x3C	; 60
    783c:	73 e0       	ldi	r23, 0x03	; 3
    783e:	82 ea       	ldi	r24, 0xA2	; 162
    7840:	97 e0       	ldi	r25, 0x07	; 7
    7842:	0e 94 d6 05 	call	0xbac	; 0xbac <Print::print(__FlashStringHelper const*)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:278
      lcd.setCursor(4,1);lcd.print(F("Press button"));
    7846:	41 e0       	ldi	r20, 0x01	; 1
    7848:	64 e0       	ldi	r22, 0x04	; 4
    784a:	82 ea       	ldi	r24, 0xA2	; 162
    784c:	97 e0       	ldi	r25, 0x07	; 7
    784e:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
    7852:	6f e2       	ldi	r22, 0x2F	; 47
    7854:	73 e0       	ldi	r23, 0x03	; 3
    7856:	b8 cf       	rjmp	.-144    	; 0x77c8 <MeasureChannel::nextCalibrationStep()+0x22e>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:281
      break;
    case 3:
      lcd.setCursor(0,0);lcd.print(F("Put in 4.0 solution"));
    7858:	60 e0       	ldi	r22, 0x00	; 0
    785a:	82 ea       	ldi	r24, 0xA2	; 162
    785c:	97 e0       	ldi	r25, 0x07	; 7
    785e:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
    7862:	6b e1       	ldi	r22, 0x1B	; 27
    7864:	73 e0       	ldi	r23, 0x03	; 3
    7866:	82 ea       	ldi	r24, 0xA2	; 162
    7868:	97 e0       	ldi	r25, 0x07	; 7
    786a:	0e 94 d6 05 	call	0xbac	; 0xbac <Print::print(__FlashStringHelper const*)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:282
      lcd.setCursor(4,1);lcd.print(F("Press button"));
    786e:	41 e0       	ldi	r20, 0x01	; 1
    7870:	64 e0       	ldi	r22, 0x04	; 4
    7872:	82 ea       	ldi	r24, 0xA2	; 162
    7874:	97 e0       	ldi	r25, 0x07	; 7
    7876:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
    787a:	6e e0       	ldi	r22, 0x0E	; 14
    787c:	73 e0       	ldi	r23, 0x03	; 3
    787e:	a4 cf       	rjmp	.-184    	; 0x77c8 <MeasureChannel::nextCalibrationStep()+0x22e>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:285
      break;
    case 4:
      lcd.setCursor(2,0);lcd.print(F("Reading 4.0 DONE"));
    7880:	62 e0       	ldi	r22, 0x02	; 2
    7882:	82 ea       	ldi	r24, 0xA2	; 162
    7884:	97 e0       	ldi	r25, 0x07	; 7
    7886:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
    788a:	6d ef       	ldi	r22, 0xFD	; 253
    788c:	72 e0       	ldi	r23, 0x02	; 2
    788e:	82 ea       	ldi	r24, 0xA2	; 162
    7890:	97 e0       	ldi	r25, 0x07	; 7
    7892:	0e 94 d6 05 	call	0xbac	; 0xbac <Print::print(__FlashStringHelper const*)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:286
      lcd.setCursor(4,1);lcd.print(F("Press button"));
    7896:	41 e0       	ldi	r20, 0x01	; 1
    7898:	64 e0       	ldi	r22, 0x04	; 4
    789a:	82 ea       	ldi	r24, 0xA2	; 162
    789c:	97 e0       	ldi	r25, 0x07	; 7
    789e:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
    78a2:	60 ef       	ldi	r22, 0xF0	; 240
    78a4:	72 e0       	ldi	r23, 0x02	; 2
    78a6:	90 cf       	rjmp	.-224    	; 0x77c8 <MeasureChannel::nextCalibrationStep()+0x22e>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:289
      break;
    case 5:
      lcd.setCursor(0,0);lcd.print(F("Saving calib. data"));
    78a8:	60 e0       	ldi	r22, 0x00	; 0
    78aa:	82 ea       	ldi	r24, 0xA2	; 162
    78ac:	97 e0       	ldi	r25, 0x07	; 7
    78ae:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
    78b2:	6d ed       	ldi	r22, 0xDD	; 221
    78b4:	72 e0       	ldi	r23, 0x02	; 2
    78b6:	82 ea       	ldi	r24, 0xA2	; 162
    78b8:	97 e0       	ldi	r25, 0x07	; 7
    78ba:	0e 94 d6 05 	call	0xbac	; 0xbac <Print::print(__FlashStringHelper const*)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:290
      lcd.setCursor(0,1);lcd.print(F("Temp.: "));lcd.print(tempToStr(t));lcd.setCursor(11,1);lcd.write(byte(0));lcd.print(F("C"));
    78be:	41 e0       	ldi	r20, 0x01	; 1
    78c0:	60 e0       	ldi	r22, 0x00	; 0
    78c2:	82 ea       	ldi	r24, 0xA2	; 162
    78c4:	97 e0       	ldi	r25, 0x07	; 7
    78c6:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
    78ca:	65 ed       	ldi	r22, 0xD5	; 213
    78cc:	72 e0       	ldi	r23, 0x02	; 2
    78ce:	82 ea       	ldi	r24, 0xA2	; 162
    78d0:	97 e0       	ldi	r25, 0x07	; 7
    78d2:	0e 94 d6 05 	call	0xbac	; 0xbac <Print::print(__FlashStringHelper const*)>
    78d6:	b8 01       	movw	r22, r16
    78d8:	ce 01       	movw	r24, r28
    78da:	01 96       	adiw	r24, 0x01	; 1
    78dc:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <LcdType::tempToStr(int) [clone .isra.75]>
    78e0:	ce 01       	movw	r24, r28
    78e2:	01 96       	adiw	r24, 0x01	; 1
    78e4:	0e 94 27 06 	call	0xc4e	; 0xc4e <Print::print(String const&) [clone .constprop.107]>
    78e8:	ce 01       	movw	r24, r28
    78ea:	01 96       	adiw	r24, 0x01	; 1
    78ec:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <String::~String()>
    78f0:	41 e0       	ldi	r20, 0x01	; 1
    78f2:	6b e0       	ldi	r22, 0x0B	; 11
    78f4:	82 ea       	ldi	r24, 0xA2	; 162
    78f6:	97 e0       	ldi	r25, 0x07	; 7
    78f8:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
    78fc:	60 e0       	ldi	r22, 0x00	; 0
    78fe:	82 ea       	ldi	r24, 0xA2	; 162
    7900:	97 e0       	ldi	r25, 0x07	; 7
    7902:	0e 94 ca 09 	call	0x1394	; 0x1394 <LiquidCrystal_I2C::write(unsigned char)>
    7906:	63 ed       	ldi	r22, 0xD3	; 211
    7908:	72 e0       	ldi	r23, 0x02	; 2
    790a:	82 ea       	ldi	r24, 0xA2	; 162
    790c:	97 e0       	ldi	r25, 0x07	; 7
    790e:	0e 94 d6 05 	call	0xbac	; 0xbac <Print::print(__FlashStringHelper const*)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:291
      lcd.setCursor(0,2);lcd.print(F("PH 7 : "));lcd.print(n);
    7912:	42 e0       	ldi	r20, 0x02	; 2
    7914:	60 e0       	ldi	r22, 0x00	; 0
    7916:	82 ea       	ldi	r24, 0xA2	; 162
    7918:	97 e0       	ldi	r25, 0x07	; 7
    791a:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
    791e:	6b ec       	ldi	r22, 0xCB	; 203
    7920:	72 e0       	ldi	r23, 0x02	; 2
    7922:	82 ea       	ldi	r24, 0xA2	; 162
    7924:	97 e0       	ldi	r25, 0x07	; 7
    7926:	0e 94 d6 05 	call	0xbac	; 0xbac <Print::print(__FlashStringHelper const*)>
    792a:	b5 01       	movw	r22, r10
    792c:	82 ea       	ldi	r24, 0xA2	; 162
    792e:	97 e0       	ldi	r25, 0x07	; 7
    7930:	0e 94 ce 22 	call	0x459c	; 0x459c <Print::print(unsigned int, int) [clone .constprop.104]>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:292
      lcd.setCursor(0,3);lcd.print(F("PH 4 : "));lcd.print(a);
    7934:	43 e0       	ldi	r20, 0x03	; 3
    7936:	60 e0       	ldi	r22, 0x00	; 0
    7938:	82 ea       	ldi	r24, 0xA2	; 162
    793a:	97 e0       	ldi	r25, 0x07	; 7
    793c:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
    7940:	63 ec       	ldi	r22, 0xC3	; 195
    7942:	72 e0       	ldi	r23, 0x02	; 2
    7944:	82 ea       	ldi	r24, 0xA2	; 162
    7946:	97 e0       	ldi	r25, 0x07	; 7
    7948:	0e 94 d6 05 	call	0xbac	; 0xbac <Print::print(__FlashStringHelper const*)>
    794c:	b6 01       	movw	r22, r12
    794e:	82 ea       	ldi	r24, 0xA2	; 162
    7950:	97 e0       	ldi	r25, 0x07	; 7
    7952:	0e 94 ce 22 	call	0x459c	; 0x459c <Print::print(unsigned int, int) [clone .constprop.104]>
_delay_ms():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay.h:187
    7956:	2f ef       	ldi	r18, 0xFF	; 255
    7958:	33 ed       	ldi	r19, 0xD3	; 211
    795a:	40 e3       	ldi	r20, 0x30	; 48
    795c:	21 50       	subi	r18, 0x01	; 1
    795e:	30 40       	sbci	r19, 0x00	; 0
    7960:	40 40       	sbci	r20, 0x00	; 0
    7962:	e1 f7       	brne	.-8      	; 0x795c <MeasureChannel::nextCalibrationStep()+0x3c2>
    7964:	00 c0       	rjmp	.+0      	; 0x7966 <MeasureChannel::nextCalibrationStep()+0x3cc>
    7966:	00 00       	nop
    7968:	33 cf       	rjmp	.-410    	; 0x77d0 <MeasureChannel::nextCalibrationStep()+0x236>
showCalibrationMenu():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:296
      _delay_ms(2000);
      break;
    case 6:
      lcd.setCursor(5,0);lcd.print(F("CAL FAILED"));
    796a:	65 e0       	ldi	r22, 0x05	; 5
    796c:	82 ea       	ldi	r24, 0xA2	; 162
    796e:	97 e0       	ldi	r25, 0x07	; 7
    7970:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
    7974:	68 eb       	ldi	r22, 0xB8	; 184
    7976:	72 e0       	ldi	r23, 0x02	; 2
    7978:	82 ea       	ldi	r24, 0xA2	; 162
    797a:	97 e0       	ldi	r25, 0x07	; 7
    797c:	0e 94 d6 05 	call	0xbac	; 0xbac <Print::print(__FlashStringHelper const*)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:297
      lcd.setCursor(3,1);lcd.print(F("STARTING AGAIN"));
    7980:	41 e0       	ldi	r20, 0x01	; 1
    7982:	63 e0       	ldi	r22, 0x03	; 3
    7984:	82 ea       	ldi	r24, 0xA2	; 162
    7986:	97 e0       	ldi	r25, 0x07	; 7
    7988:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
    798c:	69 ea       	ldi	r22, 0xA9	; 169
    798e:	72 e0       	ldi	r23, 0x02	; 2
    7990:	82 ea       	ldi	r24, 0xA2	; 162
    7992:	97 e0       	ldi	r25, 0x07	; 7
    7994:	0e 94 d6 05 	call	0xbac	; 0xbac <Print::print(__FlashStringHelper const*)>
_delay_ms():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay.h:187
    7998:	5f ef       	ldi	r21, 0xFF	; 255
    799a:	83 ed       	ldi	r24, 0xD3	; 211
    799c:	90 e3       	ldi	r25, 0x30	; 48
    799e:	51 50       	subi	r21, 0x01	; 1
    79a0:	80 40       	sbci	r24, 0x00	; 0
    79a2:	90 40       	sbci	r25, 0x00	; 0
    79a4:	e1 f7       	brne	.-8      	; 0x799e <MeasureChannel::nextCalibrationStep()+0x404>
    79a6:	de cf       	rjmp	.-68     	; 0x7964 <MeasureChannel::nextCalibrationStep()+0x3ca>
_ZN14MeasureChannel19nextCalibrationStepEv():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:546
          disablePHCalibrationMode();
          break;
        }
        DPRINT("cd.showCalibrationMenu ");DDECLN(phcalibrationStep);
        lcd.showCalibrationMenu(phcalibrationStep, calib_neutralVoltage, calib_acidVoltage, calib_Temperature);
        if (phcalibrationStep < 6) phcalibrationStep++; else phcalibrationStep = 1;
    79a8:	81 e0       	ldi	r24, 0x01	; 1
    79aa:	18 cf       	rjmp	.-464    	; 0x77dc <MeasureChannel::nextCalibrationStep()+0x242>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:548
      } else {
        phcalibrationStep = 0;
    79ac:	fa 01       	movw	r30, r20
    79ae:	10 82       	st	Z, r1
    79b0:	16 cf       	rjmp	.-468    	; 0x77de <MeasureChannel::nextCalibrationStep()+0x244>

000079b2 <CalibButton::state(unsigned char)>:
_ZN11CalibButton5stateEh():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:791
  UType& device;
public:
  typedef StateButton<HIGH,LOW,INPUT_PULLUP> ButtonType;
  CalibButton (UType& dev,uint8_t longpresstime=3) : device(dev) { this->setLongPressTime(seconds2ticks(longpresstime)); }
  virtual ~CalibButton () {}
  virtual void state (uint8_t s) {
    79b2:	9f 92       	push	r9
    79b4:	af 92       	push	r10
    79b6:	bf 92       	push	r11
    79b8:	cf 92       	push	r12
    79ba:	df 92       	push	r13
    79bc:	ef 92       	push	r14
    79be:	ff 92       	push	r15
    79c0:	0f 93       	push	r16
    79c2:	1f 93       	push	r17
    79c4:	cf 93       	push	r28
    79c6:	df 93       	push	r29
    79c8:	00 d0       	rcall	.+0      	; 0x79ca <CalibButton::state(unsigned char)+0x18>
    79ca:	1f 92       	push	r1
    79cc:	cd b7       	in	r28, 0x3d	; 61
    79ce:	de b7       	in	r29, 0x3e	; 62
    79d0:	8c 01       	movw	r16, r24
    79d2:	f6 2e       	mov	r15, r22
_ZNK2as11StateButtonILh1ELh0ELh2ENS_18NoDoublePressAlarmEE5stateEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:169
     }
    stat = s;
  }

  uint8_t state() const {
    return stat;
    79d4:	fc 01       	movw	r30, r24
    79d6:	80 85       	ldd	r24, Z+8	; 0x08
    79d8:	87 70       	andi	r24, 0x07	; 7
    79da:	e8 2e       	mov	r14, r24
_ZN11CalibButton5stateEh():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:793
    uint8_t old = ButtonType::state();
    ButtonType::state(s);
    79dc:	c8 01       	movw	r24, r16
    79de:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::state(unsigned char)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:794
    if( s == ButtonType::released ) {
    79e2:	f2 e0       	ldi	r31, 0x02	; 2
    79e4:	ff 12       	cpse	r15, r31
    79e6:	41 c0       	rjmp	.+130    	; 0x7a6a <CalibButton::state(unsigned char)+0xb8>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:795
      if (device.measureChannel().getCalibrationMode() == true) {
    79e8:	f8 01       	movw	r30, r16
    79ea:	07 89       	ldd	r16, Z+23	; 0x17
    79ec:	10 8d       	ldd	r17, Z+24	; 0x18
    79ee:	f8 01       	movw	r30, r16
    79f0:	e6 5c       	subi	r30, 0xC6	; 198
    79f2:	fe 4f       	sbci	r31, 0xFE	; 254
    79f4:	80 81       	ld	r24, Z
    79f6:	88 23       	and	r24, r24
    79f8:	31 f0       	breq	.+12     	; 0x7a06 <CalibButton::state(unsigned char)+0x54>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:796
        device.measureChannel().nextCalibrationStep();
    79fa:	c8 01       	movw	r24, r16
    79fc:	8a 51       	subi	r24, 0x1A	; 26
    79fe:	9f 4f       	sbci	r25, 0xFF	; 255
enablePHCalibrationMode():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:477
      phcalibrationMode = true;
      sysclock.cancel(*this);
      this->changed(true);
      set(seconds2ticks(CALIBRATION_MODE_TIMEOUT));
      sysclock.add(*this);
      nextCalibrationStep();
    7a00:	0e 94 cd 3a 	call	0x759a	; 0x759a <MeasureChannel::nextCalibrationStep()>
    7a04:	23 c0       	rjmp	.+70     	; 0x7a4c <CalibButton::state(unsigned char)+0x9a>
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E9nextcountEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:370
    }
    return false;
  }

  uint8_t nextcount () {
    return ++msgcount;
    7a06:	f8 01       	movw	r30, r16
    7a08:	f6 80       	ldd	r15, Z+6	; 0x06
    7a0a:	f3 94       	inc	r15
    7a0c:	f6 82       	std	Z+6, r15	; 0x06
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E11getMasterIDEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:352
#endif
    memcpy_P(di+1,info.DeviceInfo,sizeof(info.DeviceInfo));
  }

  HMID getMasterID () {
    return list0.masterid();
    7a0e:	64 81       	ldd	r22, Z+4	; 0x04
    7a10:	75 81       	ldd	r23, Z+5	; 0x05
    7a12:	ce 01       	movw	r24, r28
    7a14:	01 96       	adiw	r24, 0x01	; 1
    7a16:	0e 94 e7 18 	call	0x31ce	; 0x31ce <as::RegList0<UReg0>::masterid() const>
sendDeviceInfo():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:461
    send(msg,msg.from());
    ch.changed(false);
  }

  void sendDeviceInfo () {
    sendDeviceInfo(getMasterID(),nextcount());
    7a1a:	4f 2d       	mov	r20, r15
    7a1c:	be 01       	movw	r22, r28
    7a1e:	6f 5f       	subi	r22, 0xFF	; 255
    7a20:	7f 4f       	sbci	r23, 0xFF	; 255
    7a22:	c8 01       	movw	r24, r16
    7a24:	0e 94 41 2c 	call	0x5882	; 0x5882 <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::sendDeviceInfo(as::HMID const&, unsigned char)>
set():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:148
    7a28:	f8 01       	movw	r30, r16
    7a2a:	82 81       	ldd	r24, Z+2	; 0x02
    7a2c:	93 81       	ldd	r25, Z+3	; 0x03
    7a2e:	61 e0       	ldi	r22, 0x01	; 1
    7a30:	70 e0       	ldi	r23, 0x00	; 0
    7a32:	02 96       	adiw	r24, 0x02	; 2
    7a34:	0e 94 a6 12 	call	0x254c	; 0x254c <as::Led<as::ArduinoPins>::set(as::LedStates::Mode, as::LedStates::BlinkPattern const*) [clone .constprop.39]>
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E8activityEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:203
  BatteryType& battery ()  { return hal->battery; }
  const BatteryType& battery () const { return hal->battery; }
  RadioType& radio () { return hal->radio; }
  BuzzerType& buzzer () { return hal->buzzer; }
  KeyStore& keystore () { return this->kstore; }
  Activity& activity () { return hal->activity; }
    7a38:	f8 01       	movw	r30, r16
    7a3a:	82 81       	ldd	r24, Z+2	; 0x02
    7a3c:	93 81       	ldd	r25, Z+3	; 0x03
startPairing():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:178
  }

  void startPairing () {
    this->sendDeviceInfo();
    this->led().set(LedStates::pairing);
    this->activity().stayAwake( seconds2ticks(20) ); // 20 seconds
    7a3e:	40 ed       	ldi	r20, 0xD0	; 208
    7a40:	57 e0       	ldi	r21, 0x07	; 7
    7a42:	60 e0       	ldi	r22, 0x00	; 0
    7a44:	70 e0       	ldi	r23, 0x00	; 0
    7a46:	47 96       	adiw	r24, 0x17	; 23
    7a48:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <as::Activity::stayAwake(unsigned long)>
_ZN11CalibButton5stateEh():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:817
      }
      else {
        device.led().set(LedStates::key_long);
      }
    }
  }
    7a4c:	0f 90       	pop	r0
    7a4e:	0f 90       	pop	r0
    7a50:	0f 90       	pop	r0
    7a52:	df 91       	pop	r29
    7a54:	cf 91       	pop	r28
    7a56:	1f 91       	pop	r17
    7a58:	0f 91       	pop	r16
    7a5a:	ff 90       	pop	r15
    7a5c:	ef 90       	pop	r14
    7a5e:	df 90       	pop	r13
    7a60:	cf 90       	pop	r12
    7a62:	bf 90       	pop	r11
    7a64:	af 90       	pop	r10
    7a66:	9f 90       	pop	r9
    7a68:	08 95       	ret
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:801
        device.measureChannel().nextCalibrationStep();
      } else {
        device.startPairing();
      }
    }
    else if ( s == ButtonType::pressed) {
    7a6a:	f3 e0       	ldi	r31, 0x03	; 3
    7a6c:	ff 12       	cpse	r15, r31
    7a6e:	0c c0       	rjmp	.+24     	; 0x7a88 <CalibButton::state(unsigned char)+0xd6>
backOnTime():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:392
  bool localResetDisable () const { return this->readBit(DREG_LOCALRESETDISABLE,0,false); }

  uint8_t speedMultiplier() const { return this->readRegister(DREG_SPEEDMULTIPLIER, 0); }
  bool speedMultiplier(uint8_t value) const { return this->writeRegister(DREG_SPEEDMULTIPLIER, value); }
  
  uint8_t backOnTime () const { return this->readRegister(DREG_BACKONTIME,3); }
    7a70:	43 e0       	ldi	r20, 0x03	; 3
    7a72:	6e e0       	ldi	r22, 0x0E	; 14
    7a74:	8a e4       	ldi	r24, 0x4A	; 74
    7a76:	96 e0       	ldi	r25, 0x06	; 6
    7a78:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <as::RegisterList<UReg0>::readRegister(unsigned char, unsigned char) const>
_ZN11CalibButton5stateEh():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:802
      lcd.backlightalarm.restartTimer( sdev.getList0().backOnTime() );
    7a7c:	68 2f       	mov	r22, r24
    7a7e:	8f e8       	ldi	r24, 0x8F	; 143
    7a80:	97 e0       	ldi	r25, 0x07	; 7
    7a82:	0e 94 3b 11 	call	0x2276	; 0x2276 <LcdType::BacklightAlarm::restartTimer(unsigned char)>
    7a86:	e2 cf       	rjmp	.-60     	; 0x7a4c <CalibButton::state(unsigned char)+0x9a>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:804
    }
    else if( s == ButtonType::longreleased ) {
    7a88:	26 e0       	ldi	r18, 0x06	; 6
    7a8a:	f2 12       	cpse	r15, r18
    7a8c:	3d c0       	rjmp	.+122    	; 0x7b08 <CalibButton::state(unsigned char)+0x156>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:805
      device.measureChannel().togglePHCalibrationMode();
    7a8e:	f8 01       	movw	r30, r16
    7a90:	07 89       	ldd	r16, Z+23	; 0x17
    7a92:	10 8d       	ldd	r17, Z+24	; 0x18
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE14MeasureChannel6UList0EcvRSE_Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:413
  ChannelType ch;
public:
  VirtChannel () {}
  virtual ~VirtChannel () {}

  operator ChannelType& () { return ch; }
    7a94:	78 01       	movw	r14, r16
    7a96:	f6 ee       	ldi	r31, 0xE6	; 230
    7a98:	ef 0e       	add	r14, r31
    7a9a:	f1 1c       	adc	r15, r1
togglePHCalibrationMode():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:497
      us.setByte(5, (calib_Temperature >> 8) & 0xff);
      us.setByte(6, (calib_Temperature)      & 0xff);
    }

    void togglePHCalibrationMode() {
      phcalibrationMode = !phcalibrationMode;
    7a9c:	58 01       	movw	r10, r16
    7a9e:	86 ec       	ldi	r24, 0xC6	; 198
    7aa0:	a8 1a       	sub	r10, r24
    7aa2:	8e ef       	ldi	r24, 0xFE	; 254
    7aa4:	b8 0a       	sbc	r11, r24
    7aa6:	f5 01       	movw	r30, r10
    7aa8:	80 81       	ld	r24, Z
    7aaa:	99 24       	eor	r9, r9
    7aac:	93 94       	inc	r9
    7aae:	89 25       	eor	r24, r9
    7ab0:	80 83       	st	Z, r24
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:498
      if (phcalibrationMode == true) enablePHCalibrationMode(); else disablePHCalibrationMode();
    7ab2:	88 23       	and	r24, r24
    7ab4:	29 f1       	breq	.+74     	; 0x7b00 <CalibButton::state(unsigned char)+0x14e>
enablePHCalibrationMode():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:469
      set(millis2ticks(1000));
      sysclock.add(*this);
    }

    void enablePHCalibrationMode() {
      DPRINTLN(F("Entering Calibration Mode"));
    7ab6:	8b ec       	ldi	r24, 0xCB	; 203
    7ab8:	94 e0       	ldi	r25, 0x04	; 4
    7aba:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <void DPRINTLN<__FlashStringHelper const*>(__FlashStringHelper const*)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:470
      phcalibrationStep = 0;
    7abe:	f8 01       	movw	r30, r16
    7ac0:	ed 5b       	subi	r30, 0xBD	; 189
    7ac2:	fe 4f       	sbci	r31, 0xFE	; 254
    7ac4:	10 82       	st	Z, r1
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:471
      digitalWrite(SENSOR_SWITCH_PIN, ON);
    7ac6:	61 e0       	ldi	r22, 0x01	; 1
    7ac8:	8f e0       	ldi	r24, 0x0F	; 15
    7aca:	0e 94 7e 07 	call	0xefc	; 0xefc <digitalWrite>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:472
      phcalibrationMode = true;
    7ace:	f5 01       	movw	r30, r10
    7ad0:	90 82       	st	Z, r9
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:473
      sysclock.cancel(*this);
    7ad2:	c7 01       	movw	r24, r14
    7ad4:	0e 94 22 10 	call	0x2044	; 0x2044 <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]>
_ZN2as7ChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList1NS_9EmptyListENS_5List4ELi6E6UList0SF_E7changedEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:50

  uint8_t peers () const { return PeerCount; }

  bool changed () const { return change; }

  void changed (bool c) { change = c; }
    7ad8:	f8 01       	movw	r30, r16
    7ada:	e2 51       	subi	r30, 0x12	; 18
    7adc:	ff 4f       	sbci	r31, 0xFF	; 255
    7ade:	82 81       	ldd	r24, Z+2	; 0x02
    7ae0:	81 60       	ori	r24, 0x01	; 1
    7ae2:	82 83       	std	Z+2, r24	; 0x02
_ZN2as5Alarm3setEm():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:41
    7ae4:	80 e9       	ldi	r24, 0x90	; 144
    7ae6:	9f e5       	ldi	r25, 0x5F	; 95
    7ae8:	a1 e0       	ldi	r26, 0x01	; 1
    7aea:	f7 01       	movw	r30, r14
    7aec:	85 83       	std	Z+5, r24	; 0x05
    7aee:	96 83       	std	Z+6, r25	; 0x06
    7af0:	a7 83       	std	Z+7, r26	; 0x07
_ZN2as8SysClock3addERNS_5AlarmE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:221
    7af2:	b7 01       	movw	r22, r14
    7af4:	87 e8       	ldi	r24, 0x87	; 135
    7af6:	95 e0       	ldi	r25, 0x05	; 5
    7af8:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <as::AlarmClock::add(as::Alarm&)>
enablePHCalibrationMode():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:477
      this->changed(true);
      set(seconds2ticks(CALIBRATION_MODE_TIMEOUT));
      sysclock.add(*this);
      nextCalibrationStep();
    7afc:	c7 01       	movw	r24, r14
    7afe:	80 cf       	rjmp	.-256    	; 0x7a00 <CalibButton::state(unsigned char)+0x4e>
togglePHCalibrationMode():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:498
      us.setByte(6, (calib_Temperature)      & 0xff);
    }

    void togglePHCalibrationMode() {
      phcalibrationMode = !phcalibrationMode;
      if (phcalibrationMode == true) enablePHCalibrationMode(); else disablePHCalibrationMode();
    7b00:	c7 01       	movw	r24, r14
    7b02:	0e 94 15 11 	call	0x222a	; 0x222a <MeasureChannel::disablePHCalibrationMode()>
    7b06:	a2 cf       	rjmp	.-188    	; 0x7a4c <CalibButton::state(unsigned char)+0x9a>
_ZN11CalibButton5stateEh():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:807
      lcd.backlightalarm.restartTimer( sdev.getList0().backOnTime() );
    }
    else if( s == ButtonType::longreleased ) {
      device.measureChannel().togglePHCalibrationMode();
    }
    else if( s == ButtonType::longpressed ) {
    7b08:	f5 e0       	ldi	r31, 0x05	; 5
    7b0a:	ff 12       	cpse	r15, r31
    7b0c:	9f cf       	rjmp	.-194    	; 0x7a4c <CalibButton::state(unsigned char)+0x9a>
    7b0e:	f8 01       	movw	r30, r16
    7b10:	87 89       	ldd	r24, Z+23	; 0x17
    7b12:	90 8d       	ldd	r25, Z+24	; 0x18
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:808
      if( old == ButtonType::longpressed ) {
    7b14:	f5 e0       	ldi	r31, 0x05	; 5
    7b16:	ef 12       	cpse	r14, r31
    7b18:	0b c0       	rjmp	.+22     	; 0x7b30 <CalibButton::state(unsigned char)+0x17e>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:809
        if( device.getList0().localResetDisable() == false ) {
    7b1a:	8e 96       	adiw	r24, 0x2e	; 46
    7b1c:	0e 94 cf 14 	call	0x299e	; 0x299e <as::RegList0<UReg0>::localResetDisable() const>
    7b20:	81 11       	cpse	r24, r1
    7b22:	94 cf       	rjmp	.-216    	; 0x7a4c <CalibButton::state(unsigned char)+0x9a>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:810
          device.reset();
    7b24:	f8 01       	movw	r30, r16
    7b26:	87 89       	ldd	r24, Z+23	; 0x17
    7b28:	90 8d       	ldd	r25, Z+24	; 0x18
    7b2a:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::reset()>
    7b2e:	8e cf       	rjmp	.-228    	; 0x7a4c <CalibButton::state(unsigned char)+0x9a>
set():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:148
    7b30:	fc 01       	movw	r30, r24
    7b32:	82 81       	ldd	r24, Z+2	; 0x02
    7b34:	93 81       	ldd	r25, Z+3	; 0x03
    7b36:	67 e0       	ldi	r22, 0x07	; 7
    7b38:	70 e0       	ldi	r23, 0x00	; 0
    7b3a:	02 96       	adiw	r24, 0x02	; 2
    7b3c:	0e 94 a6 12 	call	0x254c	; 0x254c <as::Led<as::ArduinoPins>::set(as::LedStates::Mode, as::LedStates::BlinkPattern const*) [clone .constprop.39]>
    7b40:	85 cf       	rjmp	.-246    	; 0x7a4c <CalibButton::state(unsigned char)+0x9a>

00007b42 <__vector_21>:
__vector_21():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    7b42:	1f 92       	push	r1
    7b44:	0f 92       	push	r0
    7b46:	0f b6       	in	r0, 0x3f	; 63
    7b48:	0f 92       	push	r0
    7b4a:	11 24       	eor	r1, r1
    7b4c:	0b b6       	in	r0, 0x3b	; 59
    7b4e:	0f 92       	push	r0
    7b50:	2f 93       	push	r18
    7b52:	3f 93       	push	r19
    7b54:	4f 93       	push	r20
    7b56:	5f 93       	push	r21
    7b58:	6f 93       	push	r22
    7b5a:	7f 93       	push	r23
    7b5c:	8f 93       	push	r24
    7b5e:	9f 93       	push	r25
    7b60:	af 93       	push	r26
    7b62:	bf 93       	push	r27
    7b64:	ef 93       	push	r30
    7b66:	ff 93       	push	r31
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    7b68:	89 ed       	ldi	r24, 0xD9	; 217
    7b6a:	94 e0       	ldi	r25, 0x04	; 4
    7b6c:	0e 94 77 06 	call	0xcee	; 0xcee <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    7b70:	ff 91       	pop	r31
    7b72:	ef 91       	pop	r30
    7b74:	bf 91       	pop	r27
    7b76:	af 91       	pop	r26
    7b78:	9f 91       	pop	r25
    7b7a:	8f 91       	pop	r24
    7b7c:	7f 91       	pop	r23
    7b7e:	6f 91       	pop	r22
    7b80:	5f 91       	pop	r21
    7b82:	4f 91       	pop	r20
    7b84:	3f 91       	pop	r19
    7b86:	2f 91       	pop	r18
    7b88:	0f 90       	pop	r0
    7b8a:	0b be       	out	0x3b, r0	; 59
    7b8c:	0f 90       	pop	r0
    7b8e:	0f be       	out	0x3f, r0	; 63
    7b90:	0f 90       	pop	r0
    7b92:	1f 90       	pop	r1
    7b94:	18 95       	reti

00007b96 <__vector_20>:
__vector_20():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    7b96:	1f 92       	push	r1
    7b98:	0f 92       	push	r0
    7b9a:	0f b6       	in	r0, 0x3f	; 63
    7b9c:	0f 92       	push	r0
    7b9e:	11 24       	eor	r1, r1
    7ba0:	0b b6       	in	r0, 0x3b	; 59
    7ba2:	0f 92       	push	r0
    7ba4:	2f 93       	push	r18
    7ba6:	8f 93       	push	r24
    7ba8:	9f 93       	push	r25
    7baa:	ef 93       	push	r30
    7bac:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    7bae:	e0 91 e9 04 	lds	r30, 0x04E9	; 0x8004e9 <Serial+0x10>
    7bb2:	f0 91 ea 04 	lds	r31, 0x04EA	; 0x8004ea <Serial+0x11>
    7bb6:	80 81       	ld	r24, Z
    7bb8:	e0 91 ef 04 	lds	r30, 0x04EF	; 0x8004ef <Serial+0x16>
    7bbc:	f0 91 f0 04 	lds	r31, 0x04F0	; 0x8004f0 <Serial+0x17>
    7bc0:	82 fd       	sbrc	r24, 2
    7bc2:	1d c0       	rjmp	.+58     	; 0x7bfe <__vector_20+0x68>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    7bc4:	90 81       	ld	r25, Z
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    7bc6:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <Serial+0x19>
    7bca:	8f 5f       	subi	r24, 0xFF	; 255
    7bcc:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    7bce:	20 91 f3 04 	lds	r18, 0x04F3	; 0x8004f3 <Serial+0x1a>
    7bd2:	82 17       	cp	r24, r18
    7bd4:	41 f0       	breq	.+16     	; 0x7be6 <__vector_20+0x50>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    7bd6:	e0 91 f2 04 	lds	r30, 0x04F2	; 0x8004f2 <Serial+0x19>
    7bda:	f0 e0       	ldi	r31, 0x00	; 0
    7bdc:	e7 52       	subi	r30, 0x27	; 39
    7bde:	fb 4f       	sbci	r31, 0xFB	; 251
    7be0:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    7be2:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <Serial+0x19>
__vector_20():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    7be6:	ff 91       	pop	r31
    7be8:	ef 91       	pop	r30
    7bea:	9f 91       	pop	r25
    7bec:	8f 91       	pop	r24
    7bee:	2f 91       	pop	r18
    7bf0:	0f 90       	pop	r0
    7bf2:	0b be       	out	0x3b, r0	; 59
    7bf4:	0f 90       	pop	r0
    7bf6:	0f be       	out	0x3f, r0	; 63
    7bf8:	0f 90       	pop	r0
    7bfa:	1f 90       	pop	r1
    7bfc:	18 95       	reti
_rx_complete_irq():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    7bfe:	80 81       	ld	r24, Z
    7c00:	f2 cf       	rjmp	.-28     	; 0x7be6 <__vector_20+0x50>

00007c02 <__vector_18>:
__vector_18():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    7c02:	1f 92       	push	r1
    7c04:	0f 92       	push	r0
    7c06:	0f b6       	in	r0, 0x3f	; 63
    7c08:	0f 92       	push	r0
    7c0a:	11 24       	eor	r1, r1
    7c0c:	2f 93       	push	r18
    7c0e:	3f 93       	push	r19
    7c10:	8f 93       	push	r24
    7c12:	9f 93       	push	r25
    7c14:	af 93       	push	r26
    7c16:	bf 93       	push	r27
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    7c18:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <timer0_millis>
    7c1c:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <timer0_millis+0x1>
    7c20:	a0 91 2f 04 	lds	r26, 0x042F	; 0x80042f <timer0_millis+0x2>
    7c24:	b0 91 30 04 	lds	r27, 0x0430	; 0x800430 <timer0_millis+0x3>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    7c28:	30 91 2c 04 	lds	r19, 0x042C	; 0x80042c <timer0_fract>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    7c2c:	26 e0       	ldi	r18, 0x06	; 6
    7c2e:	23 0f       	add	r18, r19
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    7c30:	2d 37       	cpi	r18, 0x7D	; 125
    7c32:	68 f1       	brcs	.+90     	; 0x7c8e <__vector_18+0x8c>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    7c34:	29 e8       	ldi	r18, 0x89	; 137
    7c36:	23 0f       	add	r18, r19
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    7c38:	03 96       	adiw	r24, 0x03	; 3
    7c3a:	a1 1d       	adc	r26, r1
    7c3c:	b1 1d       	adc	r27, r1
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    7c3e:	20 93 2c 04 	sts	0x042C, r18	; 0x80042c <timer0_fract>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    7c42:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <timer0_millis>
    7c46:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <timer0_millis+0x1>
    7c4a:	a0 93 2f 04 	sts	0x042F, r26	; 0x80042f <timer0_millis+0x2>
    7c4e:	b0 93 30 04 	sts	0x0430, r27	; 0x800430 <timer0_millis+0x3>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    7c52:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <timer0_overflow_count>
    7c56:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <timer0_overflow_count+0x1>
    7c5a:	a0 91 33 04 	lds	r26, 0x0433	; 0x800433 <timer0_overflow_count+0x2>
    7c5e:	b0 91 34 04 	lds	r27, 0x0434	; 0x800434 <timer0_overflow_count+0x3>
    7c62:	01 96       	adiw	r24, 0x01	; 1
    7c64:	a1 1d       	adc	r26, r1
    7c66:	b1 1d       	adc	r27, r1
    7c68:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <timer0_overflow_count>
    7c6c:	90 93 32 04 	sts	0x0432, r25	; 0x800432 <timer0_overflow_count+0x1>
    7c70:	a0 93 33 04 	sts	0x0433, r26	; 0x800433 <timer0_overflow_count+0x2>
    7c74:	b0 93 34 04 	sts	0x0434, r27	; 0x800434 <timer0_overflow_count+0x3>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    7c78:	bf 91       	pop	r27
    7c7a:	af 91       	pop	r26
    7c7c:	9f 91       	pop	r25
    7c7e:	8f 91       	pop	r24
    7c80:	3f 91       	pop	r19
    7c82:	2f 91       	pop	r18
    7c84:	0f 90       	pop	r0
    7c86:	0f be       	out	0x3f, r0	; 63
    7c88:	0f 90       	pop	r0
    7c8a:	1f 90       	pop	r1
    7c8c:	18 95       	reti
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    7c8e:	02 96       	adiw	r24, 0x02	; 2
    7c90:	a1 1d       	adc	r26, r1
    7c92:	b1 1d       	adc	r27, r1
    7c94:	d4 cf       	rjmp	.-88     	; 0x7c3e <__vector_18+0x3c>

00007c96 <__vector_3>:
__vector_3():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WInterrupts.c:471
|| defined(__AVR_ATmega324P__)    || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega324PB__) \
|| defined(__AVR_ATmega644__)     || defined(__AVR_ATmega644P__)  || defined(__AVR_ATmega1284__)  \
|| defined(__AVR_ATmega1284P__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
  IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
  IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_2)
    7c96:	1f 92       	push	r1
    7c98:	0f 92       	push	r0
    7c9a:	0f b6       	in	r0, 0x3f	; 63
    7c9c:	0f 92       	push	r0
    7c9e:	11 24       	eor	r1, r1
    7ca0:	0b b6       	in	r0, 0x3b	; 59
    7ca2:	0f 92       	push	r0
    7ca4:	2f 93       	push	r18
    7ca6:	3f 93       	push	r19
    7ca8:	4f 93       	push	r20
    7caa:	5f 93       	push	r21
    7cac:	6f 93       	push	r22
    7cae:	7f 93       	push	r23
    7cb0:	8f 93       	push	r24
    7cb2:	9f 93       	push	r25
    7cb4:	af 93       	push	r26
    7cb6:	bf 93       	push	r27
    7cb8:	ef 93       	push	r30
    7cba:	ff 93       	push	r31
    7cbc:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
    7cc0:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
    7cc4:	09 95       	icall
    7cc6:	ff 91       	pop	r31
    7cc8:	ef 91       	pop	r30
    7cca:	bf 91       	pop	r27
    7ccc:	af 91       	pop	r26
    7cce:	9f 91       	pop	r25
    7cd0:	8f 91       	pop	r24
    7cd2:	7f 91       	pop	r23
    7cd4:	6f 91       	pop	r22
    7cd6:	5f 91       	pop	r21
    7cd8:	4f 91       	pop	r20
    7cda:	3f 91       	pop	r19
    7cdc:	2f 91       	pop	r18
    7cde:	0f 90       	pop	r0
    7ce0:	0b be       	out	0x3b, r0	; 59
    7ce2:	0f 90       	pop	r0
    7ce4:	0f be       	out	0x3f, r0	; 63
    7ce6:	0f 90       	pop	r0
    7ce8:	1f 90       	pop	r1
    7cea:	18 95       	reti

00007cec <__vector_2>:
__vector_2():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WInterrupts.c:470
#elif defined(__AVR_ATmega164A__) || defined(__AVR_ATmega164P__)  || defined(__AVR_ATmega324A__)  \
|| defined(__AVR_ATmega324P__)    || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega324PB__) \
|| defined(__AVR_ATmega644__)     || defined(__AVR_ATmega644P__)  || defined(__AVR_ATmega1284__)  \
|| defined(__AVR_ATmega1284P__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
  IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    7cec:	1f 92       	push	r1
    7cee:	0f 92       	push	r0
    7cf0:	0f b6       	in	r0, 0x3f	; 63
    7cf2:	0f 92       	push	r0
    7cf4:	11 24       	eor	r1, r1
    7cf6:	0b b6       	in	r0, 0x3b	; 59
    7cf8:	0f 92       	push	r0
    7cfa:	2f 93       	push	r18
    7cfc:	3f 93       	push	r19
    7cfe:	4f 93       	push	r20
    7d00:	5f 93       	push	r21
    7d02:	6f 93       	push	r22
    7d04:	7f 93       	push	r23
    7d06:	8f 93       	push	r24
    7d08:	9f 93       	push	r25
    7d0a:	af 93       	push	r26
    7d0c:	bf 93       	push	r27
    7d0e:	ef 93       	push	r30
    7d10:	ff 93       	push	r31
    7d12:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    7d16:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    7d1a:	09 95       	icall
    7d1c:	ff 91       	pop	r31
    7d1e:	ef 91       	pop	r30
    7d20:	bf 91       	pop	r27
    7d22:	af 91       	pop	r26
    7d24:	9f 91       	pop	r25
    7d26:	8f 91       	pop	r24
    7d28:	7f 91       	pop	r23
    7d2a:	6f 91       	pop	r22
    7d2c:	5f 91       	pop	r21
    7d2e:	4f 91       	pop	r20
    7d30:	3f 91       	pop	r19
    7d32:	2f 91       	pop	r18
    7d34:	0f 90       	pop	r0
    7d36:	0b be       	out	0x3b, r0	; 59
    7d38:	0f 90       	pop	r0
    7d3a:	0f be       	out	0x3f, r0	; 63
    7d3c:	0f 90       	pop	r0
    7d3e:	1f 90       	pop	r1
    7d40:	18 95       	reti

00007d42 <__vector_1>:
__vector_1():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WInterrupts.c:469
// ATmega164A/P, ATmega324A/P/PA/PB, ATmega644/P, ATmega1284/P
#elif defined(__AVR_ATmega164A__) || defined(__AVR_ATmega164P__)  || defined(__AVR_ATmega324A__)  \
|| defined(__AVR_ATmega324P__)    || defined(__AVR_ATmega324PA__) || defined(__AVR_ATmega324PB__) \
|| defined(__AVR_ATmega644__)     || defined(__AVR_ATmega644P__)  || defined(__AVR_ATmega1284__)  \
|| defined(__AVR_ATmega1284P__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    7d42:	1f 92       	push	r1
    7d44:	0f 92       	push	r0
    7d46:	0f b6       	in	r0, 0x3f	; 63
    7d48:	0f 92       	push	r0
    7d4a:	11 24       	eor	r1, r1
    7d4c:	0b b6       	in	r0, 0x3b	; 59
    7d4e:	0f 92       	push	r0
    7d50:	2f 93       	push	r18
    7d52:	3f 93       	push	r19
    7d54:	4f 93       	push	r20
    7d56:	5f 93       	push	r21
    7d58:	6f 93       	push	r22
    7d5a:	7f 93       	push	r23
    7d5c:	8f 93       	push	r24
    7d5e:	9f 93       	push	r25
    7d60:	af 93       	push	r26
    7d62:	bf 93       	push	r27
    7d64:	ef 93       	push	r30
    7d66:	ff 93       	push	r31
    7d68:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    7d6c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    7d70:	09 95       	icall
    7d72:	ff 91       	pop	r31
    7d74:	ef 91       	pop	r30
    7d76:	bf 91       	pop	r27
    7d78:	af 91       	pop	r26
    7d7a:	9f 91       	pop	r25
    7d7c:	8f 91       	pop	r24
    7d7e:	7f 91       	pop	r23
    7d80:	6f 91       	pop	r22
    7d82:	5f 91       	pop	r21
    7d84:	4f 91       	pop	r20
    7d86:	3f 91       	pop	r19
    7d88:	2f 91       	pop	r18
    7d8a:	0f 90       	pop	r0
    7d8c:	0b be       	out	0x3b, r0	; 59
    7d8e:	0f 90       	pop	r0
    7d90:	0f be       	out	0x3f, r0	; 63
    7d92:	0f 90       	pop	r0
    7d94:	1f 90       	pop	r1
    7d96:	18 95       	reti

00007d98 <__vector_26>:
__vector_26():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:534
  }
  return(flag);
}

ISR(TWI_vect)
{
    7d98:	1f 92       	push	r1
    7d9a:	0f 92       	push	r0
    7d9c:	0f b6       	in	r0, 0x3f	; 63
    7d9e:	0f 92       	push	r0
    7da0:	11 24       	eor	r1, r1
    7da2:	0b b6       	in	r0, 0x3b	; 59
    7da4:	0f 92       	push	r0
    7da6:	2f 93       	push	r18
    7da8:	3f 93       	push	r19
    7daa:	4f 93       	push	r20
    7dac:	5f 93       	push	r21
    7dae:	6f 93       	push	r22
    7db0:	7f 93       	push	r23
    7db2:	8f 93       	push	r24
    7db4:	9f 93       	push	r25
    7db6:	af 93       	push	r26
    7db8:	bf 93       	push	r27
    7dba:	ef 93       	push	r30
    7dbc:	ff 93       	push	r31
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:535
  switch(TW_STATUS){
    7dbe:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    7dc2:	88 7f       	andi	r24, 0xF8	; 248
    7dc4:	80 36       	cpi	r24, 0x60	; 96
    7dc6:	09 f4       	brne	.+2      	; 0x7dca <__vector_26+0x32>
    7dc8:	4d c0       	rjmp	.+154    	; 0x7e64 <__vector_26+0xcc>
    7dca:	08 f0       	brcs	.+2      	; 0x7dce <__vector_26+0x36>
    7dcc:	40 c0       	rjmp	.+128    	; 0x7e4e <__vector_26+0xb6>
    7dce:	88 32       	cpi	r24, 0x28	; 40
    7dd0:	09 f4       	brne	.+2      	; 0x7dd4 <__vector_26+0x3c>
    7dd2:	a9 c0       	rjmp	.+338    	; 0x7f26 <__vector_26+0x18e>
    7dd4:	28 f5       	brcc	.+74     	; 0x7e20 <__vector_26+0x88>
    7dd6:	80 31       	cpi	r24, 0x10	; 16
    7dd8:	09 f4       	brne	.+2      	; 0x7ddc <__vector_26+0x44>
    7dda:	9d c0       	rjmp	.+314    	; 0x7f16 <__vector_26+0x17e>
    7ddc:	c8 f4       	brcc	.+50     	; 0x7e10 <__vector_26+0x78>
    7dde:	88 23       	and	r24, r24
    7de0:	09 f4       	brne	.+2      	; 0x7de4 <__vector_26+0x4c>
    7de2:	07 c1       	rjmp	.+526    	; 0x7ff2 <__vector_26+0x25a>
    7de4:	88 30       	cpi	r24, 0x08	; 8
    7de6:	09 f4       	brne	.+2      	; 0x7dea <__vector_26+0x52>
    7de8:	96 c0       	rjmp	.+300    	; 0x7f16 <__vector_26+0x17e>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:696
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    7dea:	ff 91       	pop	r31
    7dec:	ef 91       	pop	r30
    7dee:	bf 91       	pop	r27
    7df0:	af 91       	pop	r26
    7df2:	9f 91       	pop	r25
    7df4:	8f 91       	pop	r24
    7df6:	7f 91       	pop	r23
    7df8:	6f 91       	pop	r22
    7dfa:	5f 91       	pop	r21
    7dfc:	4f 91       	pop	r20
    7dfe:	3f 91       	pop	r19
    7e00:	2f 91       	pop	r18
    7e02:	0f 90       	pop	r0
    7e04:	0b be       	out	0x3b, r0	; 59
    7e06:	0f 90       	pop	r0
    7e08:	0f be       	out	0x3f, r0	; 63
    7e0a:	0f 90       	pop	r0
    7e0c:	1f 90       	pop	r1
    7e0e:	18 95       	reti
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    7e10:	88 31       	cpi	r24, 0x18	; 24
    7e12:	09 f4       	brne	.+2      	; 0x7e16 <__vector_26+0x7e>
    7e14:	88 c0       	rjmp	.+272    	; 0x7f26 <__vector_26+0x18e>
    7e16:	80 32       	cpi	r24, 0x20	; 32
    7e18:	41 f7       	brne	.-48     	; 0x7dea <__vector_26+0x52>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:570
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    7e1a:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <twi_error>
    7e1e:	14 c0       	rjmp	.+40     	; 0x7e48 <__vector_26+0xb0>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    7e20:	80 34       	cpi	r24, 0x40	; 64
    7e22:	09 f4       	brne	.+2      	; 0x7e26 <__vector_26+0x8e>
    7e24:	a5 c0       	rjmp	.+330    	; 0x7f70 <__vector_26+0x1d8>
    7e26:	40 f4       	brcc	.+16     	; 0x7e38 <__vector_26+0xa0>
    7e28:	80 33       	cpi	r24, 0x30	; 48
    7e2a:	b9 f3       	breq	.-18     	; 0x7e1a <__vector_26+0x82>
    7e2c:	88 33       	cpi	r24, 0x38	; 56
    7e2e:	e9 f6       	brne	.-70     	; 0x7dea <__vector_26+0x52>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:574
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    7e30:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <twi_error>
twi_reply():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    7e34:	85 ec       	ldi	r24, 0xC5	; 197
    7e36:	bc c0       	rjmp	.+376    	; 0x7fb0 <__vector_26+0x218>
__vector_26():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    7e38:	80 35       	cpi	r24, 0x50	; 80
    7e3a:	09 f4       	brne	.+2      	; 0x7e3e <__vector_26+0xa6>
    7e3c:	89 c0       	rjmp	.+274    	; 0x7f50 <__vector_26+0x1b8>
    7e3e:	88 35       	cpi	r24, 0x58	; 88
    7e40:	09 f4       	brne	.+2      	; 0x7e44 <__vector_26+0xac>
    7e42:	9e c0       	rjmp	.+316    	; 0x7f80 <__vector_26+0x1e8>
    7e44:	88 34       	cpi	r24, 0x48	; 72
    7e46:	89 f6       	brne	.-94     	; 0x7dea <__vector_26+0x52>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:693
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    7e48:	0e 94 8e 08 	call	0x111c	; 0x111c <twi_stop>
    7e4c:	ce cf       	rjmp	.-100    	; 0x7dea <__vector_26+0x52>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    7e4e:	88 39       	cpi	r24, 0x98	; 152
    7e50:	09 f4       	brne	.+2      	; 0x7e54 <__vector_26+0xbc>
    7e52:	94 c0       	rjmp	.+296    	; 0x7f7c <__vector_26+0x1e4>
    7e54:	38 f5       	brcc	.+78     	; 0x7ea4 <__vector_26+0x10c>
    7e56:	88 37       	cpi	r24, 0x78	; 120
    7e58:	29 f0       	breq	.+10     	; 0x7e64 <__vector_26+0xcc>
    7e5a:	50 f4       	brcc	.+20     	; 0x7e70 <__vector_26+0xd8>
    7e5c:	88 36       	cpi	r24, 0x68	; 104
    7e5e:	11 f0       	breq	.+4      	; 0x7e64 <__vector_26+0xcc>
    7e60:	80 37       	cpi	r24, 0x70	; 112
    7e62:	19 f6       	brne	.-122    	; 0x7dea <__vector_26+0x52>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:616
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    7e64:	83 e0       	ldi	r24, 0x03	; 3
    7e66:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <twi_state>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:618
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    7e6a:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <twi_rxBufferIndex>
    7e6e:	57 c0       	rjmp	.+174    	; 0x7f1e <__vector_26+0x186>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    7e70:	88 38       	cpi	r24, 0x88	; 136
    7e72:	09 f4       	brne	.+2      	; 0x7e76 <__vector_26+0xde>
    7e74:	83 c0       	rjmp	.+262    	; 0x7f7c <__vector_26+0x1e4>
    7e76:	80 39       	cpi	r24, 0x90	; 144
    7e78:	19 f0       	breq	.+6      	; 0x7e80 <__vector_26+0xe8>
    7e7a:	80 38       	cpi	r24, 0x80	; 128
    7e7c:	09 f0       	breq	.+2      	; 0x7e80 <__vector_26+0xe8>
    7e7e:	b5 cf       	rjmp	.-150    	; 0x7dea <__vector_26+0x52>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:624
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    7e80:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <twi_rxBufferIndex>
    7e84:	80 32       	cpi	r24, 0x20	; 32
    7e86:	08 f0       	brcs	.+2      	; 0x7e8a <__vector_26+0xf2>
    7e88:	79 c0       	rjmp	.+242    	; 0x7f7c <__vector_26+0x1e4>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:626
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    7e8a:	e0 91 2b 04 	lds	r30, 0x042B	; 0x80042b <twi_rxBufferIndex>
    7e8e:	81 e0       	ldi	r24, 0x01	; 1
    7e90:	8e 0f       	add	r24, r30
    7e92:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <twi_rxBufferIndex>
    7e96:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    7e9a:	f0 e0       	ldi	r31, 0x00	; 0
    7e9c:	e5 5f       	subi	r30, 0xF5	; 245
    7e9e:	fb 4f       	sbci	r31, 0xFB	; 251
    7ea0:	80 83       	st	Z, r24
    7ea2:	3d c0       	rjmp	.+122    	; 0x7f1e <__vector_26+0x186>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    7ea4:	80 3b       	cpi	r24, 0xB0	; 176
    7ea6:	39 f0       	breq	.+14     	; 0x7eb6 <__vector_26+0x11e>
    7ea8:	e0 f4       	brcc	.+56     	; 0x7ee2 <__vector_26+0x14a>
    7eaa:	80 3a       	cpi	r24, 0xA0	; 160
    7eac:	09 f4       	brne	.+2      	; 0x7eb0 <__vector_26+0x118>
    7eae:	85 c0       	rjmp	.+266    	; 0x7fba <__vector_26+0x222>
    7eb0:	88 3a       	cpi	r24, 0xA8	; 168
    7eb2:	09 f0       	breq	.+2      	; 0x7eb6 <__vector_26+0x11e>
    7eb4:	9a cf       	rjmp	.-204    	; 0x7dea <__vector_26+0x52>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:655

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    7eb6:	84 e0       	ldi	r24, 0x04	; 4
    7eb8:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <twi_state>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:657
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    7ebc:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <twi_txBufferIndex>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:659
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    7ec0:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <twi_txBufferLength>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:662
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    7ec4:	e0 91 5a 04 	lds	r30, 0x045A	; 0x80045a <twi_onSlaveTransmit>
    7ec8:	f0 91 5b 04 	lds	r31, 0x045B	; 0x80045b <twi_onSlaveTransmit+0x1>
    7ecc:	09 95       	icall
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:664
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    7ece:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <twi_txBufferLength>
    7ed2:	81 11       	cpse	r24, r1
    7ed4:	0f c0       	rjmp	.+30     	; 0x7ef4 <__vector_26+0x15c>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:665
        twi_txBufferLength = 1;
    7ed6:	81 e0       	ldi	r24, 0x01	; 1
    7ed8:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <twi_txBufferLength>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:666
        twi_txBuffer[0] = 0x00;
    7edc:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <twi_txBuffer>
    7ee0:	09 c0       	rjmp	.+18     	; 0x7ef4 <__vector_26+0x15c>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    7ee2:	80 3c       	cpi	r24, 0xC0	; 192
    7ee4:	09 f4       	brne	.+2      	; 0x7ee8 <__vector_26+0x150>
    7ee6:	a6 cf       	rjmp	.-180    	; 0x7e34 <__vector_26+0x9c>
    7ee8:	88 3c       	cpi	r24, 0xC8	; 200
    7eea:	09 f4       	brne	.+2      	; 0x7eee <__vector_26+0x156>
    7eec:	a3 cf       	rjmp	.-186    	; 0x7e34 <__vector_26+0x9c>
    7eee:	88 3b       	cpi	r24, 0xB8	; 184
    7ef0:	09 f0       	breq	.+2      	; 0x7ef4 <__vector_26+0x15c>
    7ef2:	7b cf       	rjmp	.-266    	; 0x7dea <__vector_26+0x52>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:672
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    7ef4:	e0 91 0a 04 	lds	r30, 0x040A	; 0x80040a <twi_txBufferIndex>
    7ef8:	81 e0       	ldi	r24, 0x01	; 1
    7efa:	8e 0f       	add	r24, r30
    7efc:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <twi_txBufferIndex>
    7f00:	f0 e0       	ldi	r31, 0x00	; 0
    7f02:	e7 51       	subi	r30, 0x17	; 23
    7f04:	fc 4f       	sbci	r31, 0xFC	; 252
    7f06:	80 81       	ld	r24, Z
    7f08:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:674
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    7f0c:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <twi_txBufferIndex>
    7f10:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <twi_txBufferLength>
    7f14:	31 c0       	rjmp	.+98     	; 0x7f78 <__vector_26+0x1e0>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:540
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    7f16:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <twi_slarw>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:550
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    7f1a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
twi_reply():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    7f1e:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:423
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    7f20:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    7f24:	62 cf       	rjmp	.-316    	; 0x7dea <__vector_26+0x52>
__vector_26():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:548

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    7f26:	90 91 af 04 	lds	r25, 0x04AF	; 0x8004af <twi_masterBufferIndex>
    7f2a:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <twi_masterBufferLength>
    7f2e:	98 17       	cp	r25, r24
    7f30:	b8 f5       	brcc	.+110    	; 0x7fa0 <__vector_26+0x208>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:550
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    7f32:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <twi_masterBuffer>
    7f36:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <twi_masterBuffer+0x1>
    7f3a:	e0 91 af 04 	lds	r30, 0x04AF	; 0x8004af <twi_masterBufferIndex>
    7f3e:	21 e0       	ldi	r18, 0x01	; 1
    7f40:	2e 0f       	add	r18, r30
    7f42:	20 93 af 04 	sts	0x04AF, r18	; 0x8004af <twi_masterBufferIndex>
    7f46:	e8 0f       	add	r30, r24
    7f48:	f9 2f       	mov	r31, r25
    7f4a:	f1 1d       	adc	r31, r1
    7f4c:	80 81       	ld	r24, Z
    7f4e:	e5 cf       	rjmp	.-54     	; 0x7f1a <__vector_26+0x182>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:581
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    7f50:	20 91 b0 04 	lds	r18, 0x04B0	; 0x8004b0 <twi_masterBuffer>
    7f54:	30 91 b1 04 	lds	r19, 0x04B1	; 0x8004b1 <twi_masterBuffer+0x1>
    7f58:	e0 91 af 04 	lds	r30, 0x04AF	; 0x8004af <twi_masterBufferIndex>
    7f5c:	81 e0       	ldi	r24, 0x01	; 1
    7f5e:	8e 0f       	add	r24, r30
    7f60:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <twi_masterBufferIndex>
    7f64:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    7f68:	e2 0f       	add	r30, r18
    7f6a:	f3 2f       	mov	r31, r19
    7f6c:	f1 1d       	adc	r31, r1
    7f6e:	80 83       	st	Z, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:585
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    7f70:	90 91 af 04 	lds	r25, 0x04AF	; 0x8004af <twi_masterBufferIndex>
    7f74:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <twi_masterBufferLength>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:674
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    7f78:	98 17       	cp	r25, r24
    7f7a:	88 f2       	brcs	.-94     	; 0x7f1e <__vector_26+0x186>
twi_reply():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:423
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    7f7c:	85 e8       	ldi	r24, 0x85	; 133
    7f7e:	d0 cf       	rjmp	.-96     	; 0x7f20 <__vector_26+0x188>
__vector_26():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:593
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    7f80:	20 91 b0 04 	lds	r18, 0x04B0	; 0x8004b0 <twi_masterBuffer>
    7f84:	30 91 b1 04 	lds	r19, 0x04B1	; 0x8004b1 <twi_masterBuffer+0x1>
    7f88:	e0 91 af 04 	lds	r30, 0x04AF	; 0x8004af <twi_masterBufferIndex>
    7f8c:	81 e0       	ldi	r24, 0x01	; 1
    7f8e:	8e 0f       	add	r24, r30
    7f90:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <twi_masterBufferIndex>
    7f94:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    7f98:	e2 0f       	add	r30, r18
    7f9a:	f3 2f       	mov	r31, r19
    7f9c:	f1 1d       	adc	r31, r1
    7f9e:	80 83       	st	Z, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:594
  if (twi_sendStop)
    7fa0:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <twi_sendStop>
    7fa4:	81 11       	cpse	r24, r1
    7fa6:	50 cf       	rjmp	.-352    	; 0x7e48 <__vector_26+0xb0>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:597
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    7fa8:	81 e0       	ldi	r24, 0x01	; 1
    7faa:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <twi_inRepStart>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:601
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    7fae:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    7fb0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
__vector_26():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:685
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    7fb4:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <twi_state>
    7fb8:	18 cf       	rjmp	.-464    	; 0x7dea <__vector_26+0x52>
twi_releaseBus():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:474
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    7fba:	85 ec       	ldi	r24, 0xC5	; 197
    7fbc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:477

  // update twi state
  twi_state = TWI_READY;
    7fc0:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <twi_state>
__vector_26():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:637
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    7fc4:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <twi_rxBufferIndex>
    7fc8:	80 32       	cpi	r24, 0x20	; 32
    7fca:	30 f4       	brcc	.+12     	; 0x7fd8 <__vector_26+0x240>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:638
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    7fcc:	e0 91 2b 04 	lds	r30, 0x042B	; 0x80042b <twi_rxBufferIndex>
    7fd0:	f0 e0       	ldi	r31, 0x00	; 0
    7fd2:	e5 5f       	subi	r30, 0xF5	; 245
    7fd4:	fb 4f       	sbci	r31, 0xFB	; 251
    7fd6:	10 82       	st	Z, r1
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:641
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    7fd8:	60 91 2b 04 	lds	r22, 0x042B	; 0x80042b <twi_rxBufferIndex>
    7fdc:	70 e0       	ldi	r23, 0x00	; 0
    7fde:	e0 91 58 04 	lds	r30, 0x0458	; 0x800458 <twi_onSlaveReceive>
    7fe2:	f0 91 59 04 	lds	r31, 0x0459	; 0x800459 <twi_onSlaveReceive+0x1>
    7fe6:	8b e0       	ldi	r24, 0x0B	; 11
    7fe8:	94 e0       	ldi	r25, 0x04	; 4
    7fea:	09 95       	icall
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:643
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    7fec:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <twi_rxBufferIndex>
    7ff0:	fc ce       	rjmp	.-520    	; 0x7dea <__vector_26+0x52>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src\utility/twi.c:692

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    7ff2:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <twi_error>
    7ff6:	28 cf       	rjmp	.-432    	; 0x7e48 <__vector_26+0xb0>

00007ff8 <__vector_8>:
__vector_8():
C:\Users\Mister\Documents\Arduino\libraries\Low-Power/LowPower.cpp:1128
*		       required to allow automatic WDIF and WDIE bit clearance in
*			   hardware.
*
*******************************************************************************/
ISR (WDT_vect)
{
    7ff8:	1f 92       	push	r1
    7ffa:	0f 92       	push	r0
    7ffc:	0f b6       	in	r0, 0x3f	; 63
    7ffe:	0f 92       	push	r0
    8000:	11 24       	eor	r1, r1
    8002:	8f 93       	push	r24
wdt_disable():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\avr/wdt.h:528
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "n"  (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
    8004:	0f b6       	in	r0, 0x3f	; 63
    8006:	f8 94       	cli
    8008:	a8 95       	wdr
    800a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    800e:	88 61       	ori	r24, 0x18	; 24
    8010:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    8014:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    8018:	0f be       	out	0x3f, r0	; 63
__vector_8():
C:\Users\Mister\Documents\Arduino\libraries\Low-Power/LowPower.cpp:1131
	// WDIE & WDIF is cleared in hardware upon entering this ISR
	wdt_disable();
}
    801a:	8f 91       	pop	r24
    801c:	0f 90       	pop	r0
    801e:	0f be       	out	0x3f, r0	; 63
    8020:	0f 90       	pop	r0
    8022:	1f 90       	pop	r1
    8024:	18 95       	reti

00008026 <__vector_9>:
__vector_9():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/PhaseCut.cpp:96
		phaseCut.ZeroCrossEvent();
	}


	ISR(TIMER2_COMPA_vect)
	{
    8026:	1f 92       	push	r1
    8028:	0f 92       	push	r0
    802a:	0f b6       	in	r0, 0x3f	; 63
    802c:	0f 92       	push	r0
    802e:	11 24       	eor	r1, r1
    8030:	0b b6       	in	r0, 0x3b	; 59
    8032:	0f 92       	push	r0
    8034:	2f 93       	push	r18
    8036:	3f 93       	push	r19
    8038:	4f 93       	push	r20
    803a:	5f 93       	push	r21
    803c:	6f 93       	push	r22
    803e:	7f 93       	push	r23
    8040:	8f 93       	push	r24
    8042:	9f 93       	push	r25
    8044:	af 93       	push	r26
    8046:	bf 93       	push	r27
    8048:	cf 93       	push	r28
    804a:	df 93       	push	r29
    804c:	ef 93       	push	r30
    804e:	ff 93       	push	r31
CmpAEvent():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/PhaseCut.cpp:125
	void PhaseCut::CmpAEvent()
	{
				#if PHASECUTMODE == 1
					if ( _timer < 75 )digitalWrite(OUTPUT_PIN, HIGH);
				#else
					digitalWrite(OUTPUT_PIN, LOW);
    8050:	c6 e7       	ldi	r28, 0x76	; 118
    8052:	d5 e0       	ldi	r29, 0x05	; 5
    8054:	60 e0       	ldi	r22, 0x00	; 0
    8056:	89 81       	ldd	r24, Y+1	; 0x01
    8058:	0e 94 7e 07 	call	0xefc	; 0xefc <digitalWrite>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/PhaseCut.cpp:128
				#endif
				
			TCCR2B = 0; // Disable/stop CTC
    805c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
SetTimer():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/PhaseCut.cpp:86
		return true;
	}

	void PhaseCut::SetTimer()
	{
			OCR2A = _timer; 
    8060:	6a 81       	ldd	r22, Y+2	; 0x02
    8062:	7b 81       	ldd	r23, Y+3	; 0x03
    8064:	8c 81       	ldd	r24, Y+4	; 0x04
    8066:	9d 81       	ldd	r25, Y+5	; 0x05
    8068:	0e 94 f6 4f 	call	0x9fec	; 0x9fec <__fixunssfsi>
    806c:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
CmpAEvent():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/PhaseCut.cpp:130
					digitalWrite(OUTPUT_PIN, LOW);
				#endif
				
			TCCR2B = 0; // Disable/stop CTC
			SetTimer();
			_valid_zero_crossing = true;
    8070:	81 e0       	ldi	r24, 0x01	; 1
    8072:	8e 83       	std	Y+6, r24	; 0x06
__vector_9():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/PhaseCut.cpp:98


	ISR(TIMER2_COMPA_vect)
	{
		phaseCut.CmpAEvent();
	}
    8074:	ff 91       	pop	r31
    8076:	ef 91       	pop	r30
    8078:	df 91       	pop	r29
    807a:	cf 91       	pop	r28
    807c:	bf 91       	pop	r27
    807e:	af 91       	pop	r26
    8080:	9f 91       	pop	r25
    8082:	8f 91       	pop	r24
    8084:	7f 91       	pop	r23
    8086:	6f 91       	pop	r22
    8088:	5f 91       	pop	r21
    808a:	4f 91       	pop	r20
    808c:	3f 91       	pop	r19
    808e:	2f 91       	pop	r18
    8090:	0f 90       	pop	r0
    8092:	0b be       	out	0x3b, r0	; 59
    8094:	0f 90       	pop	r0
    8096:	0f be       	out	0x3f, r0	; 63
    8098:	0f 90       	pop	r0
    809a:	1f 90       	pop	r1
    809c:	18 95       	reti

0000809e <__vector_24>:
__vector_24():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Globals.cpp:22

volatile uint16_t IrqBaseBatt::__gb_BatCurrent = 0;
volatile uint8_t IrqBaseBatt::__gb_BatCount = 0;
uint16_t (*IrqBaseBatt::__gb_BatIrq)() = 0;

void IrqBaseBatt::__vectorfunc() {
    809e:	1f 92       	push	r1
    80a0:	0f 92       	push	r0
    80a2:	0f b6       	in	r0, 0x3f	; 63
    80a4:	0f 92       	push	r0
    80a6:	11 24       	eor	r1, r1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Globals.cpp:40
    }

    if( __gb_BatIrq != 0 )
      ADCSRA |= (1 << ADSC);        // start conversion again
  }
}
    80a8:	0f 90       	pop	r0
    80aa:	0f be       	out	0x3f, r0	; 63
    80ac:	0f 90       	pop	r0
    80ae:	1f 90       	pop	r1
    80b0:	18 95       	reti

000080b2 <__vector_11>:
__vector_11():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:32
#if ARDUINO_ARCH_AVR
ISR(TIMER1_OVF_vect) {
  callback();
}
#ifndef NORTC
ISR(TIMER2_OVF_vect) {
    80b2:	1f 92       	push	r1
    80b4:	0f 92       	push	r0
    80b6:	0f b6       	in	r0, 0x3f	; 63
    80b8:	0f 92       	push	r0
    80ba:	11 24       	eor	r1, r1
    80bc:	0b b6       	in	r0, 0x3b	; 59
    80be:	0f 92       	push	r0
    80c0:	2f 93       	push	r18
    80c2:	3f 93       	push	r19
    80c4:	4f 93       	push	r20
    80c6:	5f 93       	push	r21
    80c8:	6f 93       	push	r22
    80ca:	7f 93       	push	r23
    80cc:	8f 93       	push	r24
    80ce:	9f 93       	push	r25
    80d0:	af 93       	push	r26
    80d2:	bf 93       	push	r27
    80d4:	ef 93       	push	r30
    80d6:	ff 93       	push	r31
_ZN2as13RealTimeClock8overflowEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:310
    return 0;
#endif
  }

  void overflow () {
    ovrfl++;
    80d8:	e2 e8       	ldi	r30, 0x82	; 130
    80da:	f5 e0       	ldi	r31, 0x05	; 5
    80dc:	84 81       	ldd	r24, Z+4	; 0x04
    80de:	8f 5f       	subi	r24, 0xFF	; 255
    80e0:	84 83       	std	Z+4, r24	; 0x04
rtccallback():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:23
RealTimeClock rtc;
void rtccallback () {
  //  DPRINT(".");
    rtc.overflow();
  //  rtc.debug();
    --rtc;
    80e2:	cf 01       	movw	r24, r30
    80e4:	0e 94 86 11 	call	0x230c	; 0x230c <as::AlarmClock::operator--()>
__vector_11():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:34
  callback();
}
#ifndef NORTC
ISR(TIMER2_OVF_vect) {
  rtccallback();
}
    80e8:	ff 91       	pop	r31
    80ea:	ef 91       	pop	r30
    80ec:	bf 91       	pop	r27
    80ee:	af 91       	pop	r26
    80f0:	9f 91       	pop	r25
    80f2:	8f 91       	pop	r24
    80f4:	7f 91       	pop	r23
    80f6:	6f 91       	pop	r22
    80f8:	5f 91       	pop	r21
    80fa:	4f 91       	pop	r20
    80fc:	3f 91       	pop	r19
    80fe:	2f 91       	pop	r18
    8100:	0f 90       	pop	r0
    8102:	0b be       	out	0x3b, r0	; 59
    8104:	0f 90       	pop	r0
    8106:	0f be       	out	0x3f, r0	; 63
    8108:	0f 90       	pop	r0
    810a:	1f 90       	pop	r1
    810c:	18 95       	reti

0000810e <__vector_15>:
__vector_15():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:28
    --rtc;
}
#endif

#if ARDUINO_ARCH_AVR
ISR(TIMER1_OVF_vect) {
    810e:	1f 92       	push	r1
    8110:	0f 92       	push	r0
    8112:	0f b6       	in	r0, 0x3f	; 63
    8114:	0f 92       	push	r0
    8116:	11 24       	eor	r1, r1
    8118:	0b b6       	in	r0, 0x3b	; 59
    811a:	0f 92       	push	r0
    811c:	2f 93       	push	r18
    811e:	3f 93       	push	r19
    8120:	4f 93       	push	r20
    8122:	5f 93       	push	r21
    8124:	6f 93       	push	r22
    8126:	7f 93       	push	r23
    8128:	8f 93       	push	r24
    812a:	9f 93       	push	r25
    812c:	af 93       	push	r26
    812e:	bf 93       	push	r27
    8130:	ef 93       	push	r30
    8132:	ff 93       	push	r31
callback():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:13
namespace as {

SysClock sysclock;

void callback(void) {
  --sysclock;
    8134:	87 e8       	ldi	r24, 0x87	; 135
    8136:	95 e0       	ldi	r25, 0x05	; 5
    8138:	0e 94 86 11 	call	0x230c	; 0x230c <as::AlarmClock::operator--()>
__vector_15():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.cpp:30
#endif

#if ARDUINO_ARCH_AVR
ISR(TIMER1_OVF_vect) {
  callback();
}
    813c:	ff 91       	pop	r31
    813e:	ef 91       	pop	r30
    8140:	bf 91       	pop	r27
    8142:	af 91       	pop	r26
    8144:	9f 91       	pop	r25
    8146:	8f 91       	pop	r24
    8148:	7f 91       	pop	r23
    814a:	6f 91       	pop	r22
    814c:	5f 91       	pop	r21
    814e:	4f 91       	pop	r20
    8150:	3f 91       	pop	r19
    8152:	2f 91       	pop	r18
    8154:	0f 90       	pop	r0
    8156:	0b be       	out	0x3b, r0	; 59
    8158:	0f 90       	pop	r0
    815a:	0f be       	out	0x3f, r0	; 63
    815c:	0f 90       	pop	r0
    815e:	1f 90       	pop	r1
    8160:	18 95       	reti

00008162 <__vector_7>:
__vector_7():
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1923
#endif // NEEDFORSPEED
}/*}}}*/
#endif // EI_NOTPORTC

#ifndef EI_NOTPORTD
ISR(PORTD_VECT) {/*{{{*/
    8162:	1f 92       	push	r1
    8164:	0f 92       	push	r0
    8166:	0f b6       	in	r0, 0x3f	; 63
    8168:	0f 92       	push	r0
    816a:	11 24       	eor	r1, r1
    816c:	0b b6       	in	r0, 0x3b	; 59
    816e:	0f 92       	push	r0
    8170:	2f 93       	push	r18
    8172:	3f 93       	push	r19
    8174:	4f 93       	push	r20
    8176:	5f 93       	push	r21
    8178:	6f 93       	push	r22
    817a:	7f 93       	push	r23
    817c:	8f 93       	push	r24
    817e:	9f 93       	push	r25
    8180:	af 93       	push	r26
    8182:	bf 93       	push	r27
    8184:	cf 93       	push	r28
    8186:	ef 93       	push	r30
    8188:	ff 93       	push	r31
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1929
  uint8_t current;
  uint8_t interruptMask;
  uint8_t changedPins;
  uint8_t tmp;

  current=PIND;
    818a:	99 b1       	in	r25, 0x09	; 9
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1934
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotB ^ current) &
//                                       ((risingPinsPORTB & current) | (fallingPinsPORTB & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotD ^ current;
    818c:	c0 91 5e 04 	lds	r28, 0x045E	; 0x80045e <portSnapshotD>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1935
  tmp           = risingPinsPORTD & current;
    8190:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <risingPinsPORTD>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1936
  interruptMask = fallingPinsPORTD & ~current;
    8194:	30 91 a4 04 	lds	r19, 0x04A4	; 0x8004a4 <fallingPinsPORTD>
    8198:	29 2f       	mov	r18, r25
    819a:	20 95       	com	r18
    819c:	23 23       	and	r18, r19
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1935
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotB ^ current) &
//                                       ((risingPinsPORTB & current) | (fallingPinsPORTB & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotD ^ current;
  tmp           = risingPinsPORTD & current;
    819e:	89 23       	and	r24, r25
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1937
  interruptMask = fallingPinsPORTD & ~current;
  interruptMask = interruptMask | tmp;
    81a0:	82 2b       	or	r24, r18
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1940
  interruptMask = changedPins & interruptMask;
#if (defined MIGHTY1284)
  interruptMask = PCMSK3 & interruptMask;
    81a2:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1934
  current=PIND;
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotB ^ current) &
//                                       ((risingPinsPORTB & current) | (fallingPinsPORTB & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotD ^ current;
    81a6:	c9 27       	eor	r28, r25
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1940
  tmp           = risingPinsPORTD & current;
  interruptMask = fallingPinsPORTD & ~current;
  interruptMask = interruptMask | tmp;
  interruptMask = changedPins & interruptMask;
#if (defined MIGHTY1284)
  interruptMask = PCMSK3 & interruptMask;
    81a8:	c2 23       	and	r28, r18
    81aa:	c8 23       	and	r28, r24
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1945
#else
  interruptMask = PCMSK2 & interruptMask;
#endif

  portSnapshotD = current;
    81ac:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <portSnapshotD>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1949
#ifdef NEEDFORSPEED
#include "utility/ei_portd_speed.h"
#else
  if (interruptMask == 0) goto exitPORTDISR; // get out quickly if not interested.
    81b0:	cc 23       	and	r28, r28
    81b2:	c1 f1       	breq	.+112    	; 0x8224 <__vector_7+0xc2>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1960
  if (interruptMask & _BV(4)) { arduinoInterruptedPin=ARDUINO_PIN_D4; arduinoPinState=current & _BV(4); portDFunctions.pinFour(); }
  if (interruptMask & _BV(5)) { arduinoInterruptedPin=ARDUINO_PIN_D5; arduinoPinState=current & _BV(5); portDFunctions.pinFive(); }
  if (interruptMask & _BV(6)) { arduinoInterruptedPin=ARDUINO_PIN_D6; arduinoPinState=current & _BV(6); portDFunctions.pinSix(); }
  if (interruptMask & _BV(7)) { arduinoInterruptedPin=ARDUINO_PIN_D7; arduinoPinState=current & _BV(7); portDFunctions.pinSeven(); }
#else
  if (interruptMask & _BV(0)) portDFunctions.pinZero();
    81b4:	c0 ff       	sbrs	r28, 0
    81b6:	05 c0       	rjmp	.+10     	; 0x81c2 <__vector_7+0x60>
    81b8:	e0 91 5f 04 	lds	r30, 0x045F	; 0x80045f <portDFunctions>
    81bc:	f0 91 60 04 	lds	r31, 0x0460	; 0x800460 <portDFunctions+0x1>
    81c0:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1961
  if (interruptMask & _BV(1)) portDFunctions.pinOne();
    81c2:	c1 ff       	sbrs	r28, 1
    81c4:	05 c0       	rjmp	.+10     	; 0x81d0 <__vector_7+0x6e>
    81c6:	e0 91 61 04 	lds	r30, 0x0461	; 0x800461 <portDFunctions+0x2>
    81ca:	f0 91 62 04 	lds	r31, 0x0462	; 0x800462 <portDFunctions+0x3>
    81ce:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1962
  if (interruptMask & _BV(2)) portDFunctions.pinTwo();
    81d0:	c2 ff       	sbrs	r28, 2
    81d2:	05 c0       	rjmp	.+10     	; 0x81de <__vector_7+0x7c>
    81d4:	e0 91 63 04 	lds	r30, 0x0463	; 0x800463 <portDFunctions+0x4>
    81d8:	f0 91 64 04 	lds	r31, 0x0464	; 0x800464 <portDFunctions+0x5>
    81dc:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1963
  if (interruptMask & _BV(3)) portDFunctions.pinThree();
    81de:	c3 ff       	sbrs	r28, 3
    81e0:	05 c0       	rjmp	.+10     	; 0x81ec <__vector_7+0x8a>
    81e2:	e0 91 65 04 	lds	r30, 0x0465	; 0x800465 <portDFunctions+0x6>
    81e6:	f0 91 66 04 	lds	r31, 0x0466	; 0x800466 <portDFunctions+0x7>
    81ea:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1964
  if (interruptMask & _BV(4)) portDFunctions.pinFour();
    81ec:	c4 ff       	sbrs	r28, 4
    81ee:	05 c0       	rjmp	.+10     	; 0x81fa <__vector_7+0x98>
    81f0:	e0 91 67 04 	lds	r30, 0x0467	; 0x800467 <portDFunctions+0x8>
    81f4:	f0 91 68 04 	lds	r31, 0x0468	; 0x800468 <portDFunctions+0x9>
    81f8:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1965
  if (interruptMask & _BV(5)) portDFunctions.pinFive();
    81fa:	c5 ff       	sbrs	r28, 5
    81fc:	05 c0       	rjmp	.+10     	; 0x8208 <__vector_7+0xa6>
    81fe:	e0 91 69 04 	lds	r30, 0x0469	; 0x800469 <portDFunctions+0xa>
    8202:	f0 91 6a 04 	lds	r31, 0x046A	; 0x80046a <portDFunctions+0xb>
    8206:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1966
  if (interruptMask & _BV(6)) portDFunctions.pinSix();
    8208:	c6 ff       	sbrs	r28, 6
    820a:	05 c0       	rjmp	.+10     	; 0x8216 <__vector_7+0xb4>
    820c:	e0 91 6b 04 	lds	r30, 0x046B	; 0x80046b <portDFunctions+0xc>
    8210:	f0 91 6c 04 	lds	r31, 0x046C	; 0x80046c <portDFunctions+0xd>
    8214:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1967
  if (interruptMask & _BV(7)) portDFunctions.pinSeven();
    8216:	c7 ff       	sbrs	r28, 7
    8218:	05 c0       	rjmp	.+10     	; 0x8224 <__vector_7+0xc2>
    821a:	e0 91 6d 04 	lds	r30, 0x046D	; 0x80046d <portDFunctions+0xe>
    821e:	f0 91 6e 04 	lds	r31, 0x046E	; 0x80046e <portDFunctions+0xf>
    8222:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1971
#endif // EI_ARDUINO_INTERRUPTED_PIN
  exitPORTDISR: return;
#endif // NEEDFORSPEED
}/*}}}*/
    8224:	ff 91       	pop	r31
    8226:	ef 91       	pop	r30
    8228:	cf 91       	pop	r28
    822a:	bf 91       	pop	r27
    822c:	af 91       	pop	r26
    822e:	9f 91       	pop	r25
    8230:	8f 91       	pop	r24
    8232:	7f 91       	pop	r23
    8234:	6f 91       	pop	r22
    8236:	5f 91       	pop	r21
    8238:	4f 91       	pop	r20
    823a:	3f 91       	pop	r19
    823c:	2f 91       	pop	r18
    823e:	0f 90       	pop	r0
    8240:	0b be       	out	0x3b, r0	; 59
    8242:	0f 90       	pop	r0
    8244:	0f be       	out	0x3f, r0	; 63
    8246:	0f 90       	pop	r0
    8248:	1f 90       	pop	r1
    824a:	18 95       	reti

0000824c <__vector_6>:
__vector_6():
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1867
#endif // NEEDFORSPEED
}/*}}}*/
#endif // EI_NOTPORTB

#ifndef EI_NOTPORTC
ISR(PORTC_VECT) {/*{{{*/
    824c:	1f 92       	push	r1
    824e:	0f 92       	push	r0
    8250:	0f b6       	in	r0, 0x3f	; 63
    8252:	0f 92       	push	r0
    8254:	11 24       	eor	r1, r1
    8256:	0b b6       	in	r0, 0x3b	; 59
    8258:	0f 92       	push	r0
    825a:	2f 93       	push	r18
    825c:	3f 93       	push	r19
    825e:	4f 93       	push	r20
    8260:	5f 93       	push	r21
    8262:	6f 93       	push	r22
    8264:	7f 93       	push	r23
    8266:	8f 93       	push	r24
    8268:	9f 93       	push	r25
    826a:	af 93       	push	r26
    826c:	bf 93       	push	r27
    826e:	cf 93       	push	r28
    8270:	ef 93       	push	r30
    8272:	ff 93       	push	r31
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1873
  uint8_t current;
  uint8_t interruptMask;
  uint8_t changedPins;
  uint8_t tmp;

  current=PINC;
    8274:	96 b1       	in	r25, 0x06	; 6
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1878
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotB ^ current) &
//                                       ((risingPinsPORTB & current) | (fallingPinsPORTB & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotC ^ current;
    8276:	c0 91 6f 04 	lds	r28, 0x046F	; 0x80046f <portSnapshotC>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1879
  tmp           = risingPinsPORTC & current;
    827a:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <risingPinsPORTC>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1880
  interruptMask = fallingPinsPORTC & ~current;
    827e:	30 91 a5 04 	lds	r19, 0x04A5	; 0x8004a5 <fallingPinsPORTC>
    8282:	29 2f       	mov	r18, r25
    8284:	20 95       	com	r18
    8286:	23 23       	and	r18, r19
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1879
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotB ^ current) &
//                                       ((risingPinsPORTB & current) | (fallingPinsPORTB & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotC ^ current;
  tmp           = risingPinsPORTC & current;
    8288:	89 23       	and	r24, r25
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1881
  interruptMask = fallingPinsPORTC & ~current;
  interruptMask = interruptMask | tmp;
    828a:	82 2b       	or	r24, r18
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1884
  interruptMask = changedPins & interruptMask;
#if (defined MIGHTY1284)
  interruptMask = PCMSK2 & interruptMask;
    828c:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1878
  current=PINC;
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotB ^ current) &
//                                       ((risingPinsPORTB & current) | (fallingPinsPORTB & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotC ^ current;
    8290:	c9 27       	eor	r28, r25
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1884
  tmp           = risingPinsPORTC & current;
  interruptMask = fallingPinsPORTC & ~current;
  interruptMask = interruptMask | tmp;
  interruptMask = changedPins & interruptMask;
#if (defined MIGHTY1284)
  interruptMask = PCMSK2 & interruptMask;
    8292:	c2 23       	and	r28, r18
    8294:	c8 23       	and	r28, r24
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1889
#else
  interruptMask = PCMSK1 & interruptMask;
#endif

  portSnapshotC = current;
    8296:	90 93 6f 04 	sts	0x046F, r25	; 0x80046f <portSnapshotC>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1893
#ifdef NEEDFORSPEED
#include "utility/ei_portc_speed.h"
#else
  if (interruptMask == 0) goto exitPORTCISR; // get out quickly if not interested.
    829a:	cc 23       	and	r28, r28
    829c:	c1 f1       	breq	.+112    	; 0x830e <__vector_6+0xc2>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1906
#ifdef MIGHTY1284
  if (interruptMask & _BV(6)) { arduinoInterruptedPin=ARDUINO_PIN_C6; arduinoPinState=current & _BV(6); portCFunctions.pinSix(); }
  if (interruptMask & _BV(7)) { arduinoInterruptedPin=ARDUINO_PIN_C7; arduinoPinState=current & _BV(7); portCFunctions.pinSeven(); }
#endif
#else
  if (interruptMask & _BV(0)) portCFunctions.pinZero();
    829e:	c0 ff       	sbrs	r28, 0
    82a0:	05 c0       	rjmp	.+10     	; 0x82ac <__vector_6+0x60>
    82a2:	e0 91 70 04 	lds	r30, 0x0470	; 0x800470 <portCFunctions>
    82a6:	f0 91 71 04 	lds	r31, 0x0471	; 0x800471 <portCFunctions+0x1>
    82aa:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1907
  if (interruptMask & _BV(1)) portCFunctions.pinOne();
    82ac:	c1 ff       	sbrs	r28, 1
    82ae:	05 c0       	rjmp	.+10     	; 0x82ba <__vector_6+0x6e>
    82b0:	e0 91 72 04 	lds	r30, 0x0472	; 0x800472 <portCFunctions+0x2>
    82b4:	f0 91 73 04 	lds	r31, 0x0473	; 0x800473 <portCFunctions+0x3>
    82b8:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1908
  if (interruptMask & _BV(2)) portCFunctions.pinTwo();
    82ba:	c2 ff       	sbrs	r28, 2
    82bc:	05 c0       	rjmp	.+10     	; 0x82c8 <__vector_6+0x7c>
    82be:	e0 91 74 04 	lds	r30, 0x0474	; 0x800474 <portCFunctions+0x4>
    82c2:	f0 91 75 04 	lds	r31, 0x0475	; 0x800475 <portCFunctions+0x5>
    82c6:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1909
  if (interruptMask & _BV(3)) portCFunctions.pinThree();
    82c8:	c3 ff       	sbrs	r28, 3
    82ca:	05 c0       	rjmp	.+10     	; 0x82d6 <__vector_6+0x8a>
    82cc:	e0 91 76 04 	lds	r30, 0x0476	; 0x800476 <portCFunctions+0x6>
    82d0:	f0 91 77 04 	lds	r31, 0x0477	; 0x800477 <portCFunctions+0x7>
    82d4:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1910
  if (interruptMask & _BV(4)) portCFunctions.pinFour();
    82d6:	c4 ff       	sbrs	r28, 4
    82d8:	05 c0       	rjmp	.+10     	; 0x82e4 <__vector_6+0x98>
    82da:	e0 91 78 04 	lds	r30, 0x0478	; 0x800478 <portCFunctions+0x8>
    82de:	f0 91 79 04 	lds	r31, 0x0479	; 0x800479 <portCFunctions+0x9>
    82e2:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1911
  if (interruptMask & _BV(5)) portCFunctions.pinFive();
    82e4:	c5 ff       	sbrs	r28, 5
    82e6:	05 c0       	rjmp	.+10     	; 0x82f2 <__vector_6+0xa6>
    82e8:	e0 91 7a 04 	lds	r30, 0x047A	; 0x80047a <portCFunctions+0xa>
    82ec:	f0 91 7b 04 	lds	r31, 0x047B	; 0x80047b <portCFunctions+0xb>
    82f0:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1913
#ifdef MIGHTY1284
  if (interruptMask & _BV(6)) portCFunctions.pinSix();
    82f2:	c6 ff       	sbrs	r28, 6
    82f4:	05 c0       	rjmp	.+10     	; 0x8300 <__vector_6+0xb4>
    82f6:	e0 91 7c 04 	lds	r30, 0x047C	; 0x80047c <portCFunctions+0xc>
    82fa:	f0 91 7d 04 	lds	r31, 0x047D	; 0x80047d <portCFunctions+0xd>
    82fe:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1914
  if (interruptMask & _BV(7)) portCFunctions.pinSeven();
    8300:	c7 ff       	sbrs	r28, 7
    8302:	05 c0       	rjmp	.+10     	; 0x830e <__vector_6+0xc2>
    8304:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <portCFunctions+0xe>
    8308:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <portCFunctions+0xf>
    830c:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1919
#endif
#endif // EI_ARDUINO_INTERRUPTED_PIN
  exitPORTCISR: return;
#endif // NEEDFORSPEED
}/*}}}*/
    830e:	ff 91       	pop	r31
    8310:	ef 91       	pop	r30
    8312:	cf 91       	pop	r28
    8314:	bf 91       	pop	r27
    8316:	af 91       	pop	r26
    8318:	9f 91       	pop	r25
    831a:	8f 91       	pop	r24
    831c:	7f 91       	pop	r23
    831e:	6f 91       	pop	r22
    8320:	5f 91       	pop	r21
    8322:	4f 91       	pop	r20
    8324:	3f 91       	pop	r19
    8326:	2f 91       	pop	r18
    8328:	0f 90       	pop	r0
    832a:	0b be       	out	0x3b, r0	; 59
    832c:	0f 90       	pop	r0
    832e:	0f be       	out	0x3f, r0	; 63
    8330:	0f 90       	pop	r0
    8332:	1f 90       	pop	r1
    8334:	18 95       	reti

00008336 <__vector_5>:
__vector_5():
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1801
  // exitPORTBISR: PORTC &= ~(1 << PC5); // SIGNAL THAT WE ARE LEAVING THE INTERRUPT
}/*}}}*/
#endif // EI_NOTPORTA

#ifndef EI_NOTPORTB
ISR(PORTB_VECT) {/*{{{*/
    8336:	1f 92       	push	r1
    8338:	0f 92       	push	r0
    833a:	0f b6       	in	r0, 0x3f	; 63
    833c:	0f 92       	push	r0
    833e:	11 24       	eor	r1, r1
    8340:	0b b6       	in	r0, 0x3b	; 59
    8342:	0f 92       	push	r0
    8344:	2f 93       	push	r18
    8346:	3f 93       	push	r19
    8348:	4f 93       	push	r20
    834a:	5f 93       	push	r21
    834c:	6f 93       	push	r22
    834e:	7f 93       	push	r23
    8350:	8f 93       	push	r24
    8352:	9f 93       	push	r25
    8354:	af 93       	push	r26
    8356:	bf 93       	push	r27
    8358:	cf 93       	push	r28
    835a:	ef 93       	push	r30
    835c:	ff 93       	push	r31
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1807
  uint8_t current;
  uint8_t interruptMask;
  uint8_t changedPins;
  uint8_t tmp;

  current=PINB;
    835e:	93 b1       	in	r25, 0x03	; 3
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1812
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotB ^ current) &
//                                       ((risingPinsPORTB & current) | (fallingPinsPORTB & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotB ^ current;
    8360:	c0 91 80 04 	lds	r28, 0x0480	; 0x800480 <portSnapshotB>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1813
  tmp           = risingPinsPORTB & current;
    8364:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <risingPinsPORTB>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1814
  interruptMask = fallingPinsPORTB & ~current;
    8368:	30 91 a6 04 	lds	r19, 0x04A6	; 0x8004a6 <fallingPinsPORTB>
    836c:	29 2f       	mov	r18, r25
    836e:	20 95       	com	r18
    8370:	23 23       	and	r18, r19
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1813
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotB ^ current) &
//                                       ((risingPinsPORTB & current) | (fallingPinsPORTB & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotB ^ current;
  tmp           = risingPinsPORTB & current;
    8372:	89 23       	and	r24, r25
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1815
  interruptMask = fallingPinsPORTB & ~current;
  interruptMask = interruptMask | tmp;
    8374:	82 2b       	or	r24, r18
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1818
  interruptMask = changedPins & interruptMask;
#if (defined MIGHTY1284) || (defined EI_ATTINY24)
  interruptMask = PCMSK1 & interruptMask;
    8376:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1812
  current=PINB;
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotB ^ current) &
//                                       ((risingPinsPORTB & current) | (fallingPinsPORTB & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotB ^ current;
    837a:	c9 27       	eor	r28, r25
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1818
  tmp           = risingPinsPORTB & current;
  interruptMask = fallingPinsPORTB & ~current;
  interruptMask = interruptMask | tmp;
  interruptMask = changedPins & interruptMask;
#if (defined MIGHTY1284) || (defined EI_ATTINY24)
  interruptMask = PCMSK1 & interruptMask;
    837c:	c2 23       	and	r28, r18
    837e:	c8 23       	and	r28, r24
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1827
#else
  interruptMask = PCMSK0 & interruptMask;
#endif
#endif

  portSnapshotB = current;
    8380:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <portSnapshotB>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1831
#ifdef NEEDFORSPEED
#include "utility/ei_portb_speed.h"
#else
  if (interruptMask == 0) goto exitPORTBISR; // get out quickly if not interested.
    8384:	cc 23       	and	r28, r28
    8386:	c1 f1       	breq	.+112    	; 0x83f8 <__vector_5+0xc2>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1846
#if ! (defined ARDUINO_328) && ! (defined EI_ATTINY24) && ! (defined EI_ATTINY25)
  if (interruptMask & _BV(6)) { arduinoInterruptedPin=ARDUINO_PIN_B6; arduinoPinState=current & _BV(6); portBFunctions.pinSix(); }
  if (interruptMask & _BV(7)) { arduinoInterruptedPin=ARDUINO_PIN_B7; arduinoPinState=current & _BV(7); portBFunctions.pinSeven(); }
#endif
#else // EI_ARDUINO_INTERRUPTED_PIN
  if (interruptMask & _BV(0)) portBFunctions.pinZero();
    8388:	c0 ff       	sbrs	r28, 0
    838a:	05 c0       	rjmp	.+10     	; 0x8396 <__vector_5+0x60>
    838c:	e0 91 81 04 	lds	r30, 0x0481	; 0x800481 <portBFunctions>
    8390:	f0 91 82 04 	lds	r31, 0x0482	; 0x800482 <portBFunctions+0x1>
    8394:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1847
  if (interruptMask & _BV(1)) portBFunctions.pinOne();
    8396:	c1 ff       	sbrs	r28, 1
    8398:	05 c0       	rjmp	.+10     	; 0x83a4 <__vector_5+0x6e>
    839a:	e0 91 83 04 	lds	r30, 0x0483	; 0x800483 <portBFunctions+0x2>
    839e:	f0 91 84 04 	lds	r31, 0x0484	; 0x800484 <portBFunctions+0x3>
    83a2:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1848
  if (interruptMask & _BV(2)) portBFunctions.pinTwo();
    83a4:	c2 ff       	sbrs	r28, 2
    83a6:	05 c0       	rjmp	.+10     	; 0x83b2 <__vector_5+0x7c>
    83a8:	e0 91 85 04 	lds	r30, 0x0485	; 0x800485 <portBFunctions+0x4>
    83ac:	f0 91 86 04 	lds	r31, 0x0486	; 0x800486 <portBFunctions+0x5>
    83b0:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1849
  if (interruptMask & _BV(3)) portBFunctions.pinThree();
    83b2:	c3 ff       	sbrs	r28, 3
    83b4:	05 c0       	rjmp	.+10     	; 0x83c0 <__vector_5+0x8a>
    83b6:	e0 91 87 04 	lds	r30, 0x0487	; 0x800487 <portBFunctions+0x6>
    83ba:	f0 91 88 04 	lds	r31, 0x0488	; 0x800488 <portBFunctions+0x7>
    83be:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1851
#if ! (defined EI_ATTINY24)
  if (interruptMask & _BV(4)) portBFunctions.pinFour();
    83c0:	c4 ff       	sbrs	r28, 4
    83c2:	05 c0       	rjmp	.+10     	; 0x83ce <__vector_5+0x98>
    83c4:	e0 91 89 04 	lds	r30, 0x0489	; 0x800489 <portBFunctions+0x8>
    83c8:	f0 91 8a 04 	lds	r31, 0x048A	; 0x80048a <portBFunctions+0x9>
    83cc:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1852
  if (interruptMask & _BV(5)) portBFunctions.pinFive();
    83ce:	c5 ff       	sbrs	r28, 5
    83d0:	05 c0       	rjmp	.+10     	; 0x83dc <__vector_5+0xa6>
    83d2:	e0 91 8b 04 	lds	r30, 0x048B	; 0x80048b <portBFunctions+0xa>
    83d6:	f0 91 8c 04 	lds	r31, 0x048C	; 0x80048c <portBFunctions+0xb>
    83da:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1855
#endif
#if ! (defined ARDUINO_328) && ! (defined EI_ATTINY24) && ! (defined EI_ATTINY25)
  if (interruptMask & _BV(6)) portBFunctions.pinSix();
    83dc:	c6 ff       	sbrs	r28, 6
    83de:	05 c0       	rjmp	.+10     	; 0x83ea <__vector_5+0xb4>
    83e0:	e0 91 8d 04 	lds	r30, 0x048D	; 0x80048d <portBFunctions+0xc>
    83e4:	f0 91 8e 04 	lds	r31, 0x048E	; 0x80048e <portBFunctions+0xd>
    83e8:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1856
  if (interruptMask & _BV(7)) portBFunctions.pinSeven();
    83ea:	c7 ff       	sbrs	r28, 7
    83ec:	05 c0       	rjmp	.+10     	; 0x83f8 <__vector_5+0xc2>
    83ee:	e0 91 8f 04 	lds	r30, 0x048F	; 0x80048f <portBFunctions+0xe>
    83f2:	f0 91 90 04 	lds	r31, 0x0490	; 0x800490 <portBFunctions+0xf>
    83f6:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1863
#endif // EI_ARDUINO_INTERRUPTED_PIN
  exitPORTBISR: return;
  // FOR MEASUREMENT ONLY
  // exitPORTBISR: PORTC &= ~(1 << PC5); // SIGNAL THAT WE ARE LEAVING THE INTERRUPT
#endif // NEEDFORSPEED
}/*}}}*/
    83f8:	ff 91       	pop	r31
    83fa:	ef 91       	pop	r30
    83fc:	cf 91       	pop	r28
    83fe:	bf 91       	pop	r27
    8400:	af 91       	pop	r26
    8402:	9f 91       	pop	r25
    8404:	8f 91       	pop	r24
    8406:	7f 91       	pop	r23
    8408:	6f 91       	pop	r22
    840a:	5f 91       	pop	r21
    840c:	4f 91       	pop	r20
    840e:	3f 91       	pop	r19
    8410:	2f 91       	pop	r18
    8412:	0f 90       	pop	r0
    8414:	0b be       	out	0x3b, r0	; 59
    8416:	0f 90       	pop	r0
    8418:	0f be       	out	0x3f, r0	; 63
    841a:	0f 90       	pop	r0
    841c:	1f 90       	pop	r1
    841e:	18 95       	reti

00008420 <__vector_4>:
__vector_4():
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1750

// *************************************************************************************
// Pin Change Interrupts
// *************************************************************************************
#ifndef EI_NOTPORTA
ISR(PORTA_VECT) {/*{{{*/
    8420:	1f 92       	push	r1
    8422:	0f 92       	push	r0
    8424:	0f b6       	in	r0, 0x3f	; 63
    8426:	0f 92       	push	r0
    8428:	11 24       	eor	r1, r1
    842a:	0b b6       	in	r0, 0x3b	; 59
    842c:	0f 92       	push	r0
    842e:	2f 93       	push	r18
    8430:	3f 93       	push	r19
    8432:	4f 93       	push	r20
    8434:	5f 93       	push	r21
    8436:	6f 93       	push	r22
    8438:	7f 93       	push	r23
    843a:	8f 93       	push	r24
    843c:	9f 93       	push	r25
    843e:	af 93       	push	r26
    8440:	bf 93       	push	r27
    8442:	cf 93       	push	r28
    8444:	ef 93       	push	r30
    8446:	ff 93       	push	r31
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1756
  uint8_t current;
  uint8_t interruptMask;
  uint8_t changedPins;
  uint8_t tmp;

  current=PINA;
    8448:	90 b1       	in	r25, 0x00	; 0
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1761
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotA ^ current) &
//                                       ((risingPinsPORTA & current) | (fallingPinsPORTA & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotA ^ current;
    844a:	c0 91 93 04 	lds	r28, 0x0493	; 0x800493 <portSnapshotA>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1762
  tmp           = risingPinsPORTA & current;
    844e:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <risingPinsPORTA>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1763
  interruptMask = fallingPinsPORTA & ~current;
    8452:	30 91 a7 04 	lds	r19, 0x04A7	; 0x8004a7 <fallingPinsPORTA>
    8456:	29 2f       	mov	r18, r25
    8458:	20 95       	com	r18
    845a:	23 23       	and	r18, r19
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1762
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotA ^ current) &
//                                       ((risingPinsPORTA & current) | (fallingPinsPORTA & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotA ^ current;
  tmp           = risingPinsPORTA & current;
    845c:	89 23       	and	r24, r25
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1764
  interruptMask = fallingPinsPORTA & ~current;
  interruptMask = interruptMask | tmp;
    845e:	82 2b       	or	r24, r18
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1766
  interruptMask = changedPins & interruptMask;
  interruptMask = PCMSK0 & interruptMask;
    8460:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1761
  current=PINA;
// If we trust the compiler to do this, it will use an extra register...
//  changedPins=(portSnapshotA ^ current) &
//                                       ((risingPinsPORTA & current) | (fallingPinsPORTA & ~current));
// ...so we do it ourselves:
  changedPins   = portSnapshotA ^ current;
    8464:	c9 27       	eor	r28, r25
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1766
  tmp           = risingPinsPORTA & current;
  interruptMask = fallingPinsPORTA & ~current;
  interruptMask = interruptMask | tmp;
  interruptMask = changedPins & interruptMask;
  interruptMask = PCMSK0 & interruptMask;
    8466:	c2 23       	and	r28, r18
    8468:	c8 23       	and	r28, r24
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1769


  portSnapshotA = current;
    846a:	90 93 93 04 	sts	0x0493, r25	; 0x800493 <portSnapshotA>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1773
#ifdef NEEDFORSPEED
#include "utility/ei_porta_speed.h"
#else
  if (interruptMask == 0) goto exitPORTAISR; // get out quickly if not interested.
    846e:	cc 23       	and	r28, r28
    8470:	c1 f1       	breq	.+112    	; 0x84e2 <__vector_4+0xc2>
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1784
  if (interruptMask & _BV(4)) { arduinoInterruptedPin=ARDUINO_PIN_A4; arduinoPinState=current & _BV(4); portAFunctions.pinFour(); }
  if (interruptMask & _BV(5)) { arduinoInterruptedPin=ARDUINO_PIN_A5; arduinoPinState=current & _BV(5); portAFunctions.pinFive(); }
  if (interruptMask & _BV(6)) { arduinoInterruptedPin=ARDUINO_PIN_A6; arduinoPinState=current & _BV(6); portAFunctions.pinSix(); }
  if (interruptMask & _BV(7)) { arduinoInterruptedPin=ARDUINO_PIN_A7; arduinoPinState=current & _BV(7); portAFunctions.pinSeven(); }
#else
  if (interruptMask & _BV(0)) portAFunctions.pinZero();
    8472:	c0 ff       	sbrs	r28, 0
    8474:	05 c0       	rjmp	.+10     	; 0x8480 <__vector_4+0x60>
    8476:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <portAFunctions>
    847a:	f0 91 95 04 	lds	r31, 0x0495	; 0x800495 <portAFunctions+0x1>
    847e:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1785
  if (interruptMask & _BV(1)) portAFunctions.pinOne();
    8480:	c1 ff       	sbrs	r28, 1
    8482:	05 c0       	rjmp	.+10     	; 0x848e <__vector_4+0x6e>
    8484:	e0 91 96 04 	lds	r30, 0x0496	; 0x800496 <portAFunctions+0x2>
    8488:	f0 91 97 04 	lds	r31, 0x0497	; 0x800497 <portAFunctions+0x3>
    848c:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1786
  if (interruptMask & _BV(2)) portAFunctions.pinTwo();
    848e:	c2 ff       	sbrs	r28, 2
    8490:	05 c0       	rjmp	.+10     	; 0x849c <__vector_4+0x7c>
    8492:	e0 91 98 04 	lds	r30, 0x0498	; 0x800498 <portAFunctions+0x4>
    8496:	f0 91 99 04 	lds	r31, 0x0499	; 0x800499 <portAFunctions+0x5>
    849a:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1787
  if (interruptMask & _BV(3)) portAFunctions.pinThree();
    849c:	c3 ff       	sbrs	r28, 3
    849e:	05 c0       	rjmp	.+10     	; 0x84aa <__vector_4+0x8a>
    84a0:	e0 91 9a 04 	lds	r30, 0x049A	; 0x80049a <portAFunctions+0x6>
    84a4:	f0 91 9b 04 	lds	r31, 0x049B	; 0x80049b <portAFunctions+0x7>
    84a8:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1788
  if (interruptMask & _BV(4)) portAFunctions.pinFour();
    84aa:	c4 ff       	sbrs	r28, 4
    84ac:	05 c0       	rjmp	.+10     	; 0x84b8 <__vector_4+0x98>
    84ae:	e0 91 9c 04 	lds	r30, 0x049C	; 0x80049c <portAFunctions+0x8>
    84b2:	f0 91 9d 04 	lds	r31, 0x049D	; 0x80049d <portAFunctions+0x9>
    84b6:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1789
  if (interruptMask & _BV(5)) portAFunctions.pinFive();
    84b8:	c5 ff       	sbrs	r28, 5
    84ba:	05 c0       	rjmp	.+10     	; 0x84c6 <__vector_4+0xa6>
    84bc:	e0 91 9e 04 	lds	r30, 0x049E	; 0x80049e <portAFunctions+0xa>
    84c0:	f0 91 9f 04 	lds	r31, 0x049F	; 0x80049f <portAFunctions+0xb>
    84c4:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1790
  if (interruptMask & _BV(6)) portAFunctions.pinSix();
    84c6:	c6 ff       	sbrs	r28, 6
    84c8:	05 c0       	rjmp	.+10     	; 0x84d4 <__vector_4+0xb4>
    84ca:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <portAFunctions+0xc>
    84ce:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <portAFunctions+0xd>
    84d2:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1791
  if (interruptMask & _BV(7)) portAFunctions.pinSeven();
    84d4:	c7 ff       	sbrs	r28, 7
    84d6:	05 c0       	rjmp	.+10     	; 0x84e2 <__vector_4+0xc2>
    84d8:	e0 91 a2 04 	lds	r30, 0x04A2	; 0x8004a2 <portAFunctions+0xe>
    84dc:	f0 91 a3 04 	lds	r31, 0x04A3	; 0x8004a3 <portAFunctions+0xf>
    84e0:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\EnableInterrupt/EnableInterrupt.h:1797
#endif // EI_ARDUINO_INTERRUPTED_PIN
  exitPORTAISR: return;
#endif // NEEDFORSPEED
  // FOR MEASUREMENT ONLY
  // exitPORTBISR: PORTC &= ~(1 << PC5); // SIGNAL THAT WE ARE LEAVING THE INTERRUPT
}/*}}}*/
    84e2:	ff 91       	pop	r31
    84e4:	ef 91       	pop	r30
    84e6:	cf 91       	pop	r28
    84e8:	bf 91       	pop	r27
    84ea:	af 91       	pop	r26
    84ec:	9f 91       	pop	r25
    84ee:	8f 91       	pop	r24
    84f0:	7f 91       	pop	r23
    84f2:	6f 91       	pop	r22
    84f4:	5f 91       	pop	r21
    84f6:	4f 91       	pop	r20
    84f8:	3f 91       	pop	r19
    84fa:	2f 91       	pop	r18
    84fc:	0f 90       	pop	r0
    84fe:	0b be       	out	0x3b, r0	; 59
    8500:	0f 90       	pop	r0
    8502:	0f be       	out	0x3f, r0	; 63
    8504:	0f 90       	pop	r0
    8506:	1f 90       	pop	r1
    8508:	18 95       	reti

0000850a <as::OnePinPosition<0u>::OnePinPosition()>:
_ZN2as14OnePinPositionILj0EEC1Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/sensors/PinPosition.h:19
template <uint16_t WAITMILLIS_AFTER_ENABLE=0>
class OnePinPosition : public Position {
  uint8_t sens;
  uint8_t en;
public:
  OnePinPosition () : sens(0), en(0) { _present = true; }
    850a:	fc 01       	movw	r30, r24
Position():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Sensors.h:63
public:
  enum State { NoPos=0, PosA, PosB, PosC };
protected:
  uint8_t  _position;
public:
  Position () : _position(NoPos) {}
    850c:	12 82       	std	Z+2, r1	; 0x02
OnePinPosition():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/sensors/PinPosition.h:19
    850e:	82 eb       	ldi	r24, 0xB2	; 178
    8510:	91 e0       	ldi	r25, 0x01	; 1
    8512:	91 83       	std	Z+1, r25	; 0x01
    8514:	80 83       	st	Z, r24
    8516:	13 82       	std	Z+3, r1	; 0x03
    8518:	14 82       	std	Z+4, r1	; 0x04
    851a:	81 e0       	ldi	r24, 0x01	; 1
    851c:	85 83       	std	Z+5, r24	; 0x05
_ZN2as14OnePinPositionILj0EEC1Ev():
    851e:	08 95       	ret

00008520 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::StateGenericChannel()>:
_ZN2as19StateGenericChannelINS_14OnePinPositionILj0EEENS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101ISA_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10EEC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:50
  Sensor possens;

public:
  typedef Channel<HALTYPE,List1Type,EmptyList,List4Type,PEERCOUNT,List0Type> BaseChannel;

  StateGenericChannel () : BaseChannel(), Alarm(0), sender(*this), sabpin(0), sabotage(false) {}
    8520:	fc 01       	movw	r30, r24
__base_ctor ():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:36
  typedef List3Type List3;
  typedef List4Type List4;
  typedef Device<HalType,List0Type> DeviceType;

  public:
  Channel () : dev(0), change(false), inhi(false), num(0), addr(0) {}
    8522:	11 86       	std	Z+9, r1	; 0x09
    8524:	10 86       	std	Z+8, r1	; 0x08
    8526:	82 85       	ldd	r24, Z+10	; 0x0a
    8528:	8e 7f       	andi	r24, 0xFE	; 254
    852a:	8d 7f       	andi	r24, 0xFD	; 253
    852c:	82 87       	std	Z+10, r24	; 0x0a
    852e:	13 86       	std	Z+11, r1	; 0x0b
    8530:	15 86       	std	Z+13, r1	; 0x0d
    8532:	14 86       	std	Z+12, r1	; 0x0c
_ZN2as4LinkC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:17

class Link {
  // successor element
  Link* link;
public:
  Link () : link(0) {}
    8534:	13 82       	std	Z+3, r1	; 0x03
    8536:	12 82       	std	Z+2, r1	; 0x02
_ZN2as5AlarmC2Em():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:36
  uint32_t tick : 24;

  virtual void trigger(AlarmClock&) = 0;

  Alarm () : flags(0), tick(0) {}
  Alarm(uint32_t t) : flags(0), tick(t) {}
    8538:	14 82       	std	Z+4, r1	; 0x04
    853a:	15 82       	std	Z+5, r1	; 0x05
    853c:	16 82       	std	Z+6, r1	; 0x06
    853e:	17 82       	std	Z+7, r1	; 0x07
_ZN2as19StateGenericChannelINS_14OnePinPositionILj0EEENS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101ISA_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10EEC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:50
    8540:	86 ea       	ldi	r24, 0xA6	; 166
    8542:	91 e0       	ldi	r25, 0x01	; 1
    8544:	91 83       	std	Z+1, r25	; 0x01
    8546:	80 83       	st	Z, r24
_ZN2as4LinkC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:17
    8548:	11 8a       	std	Z+17, r1	; 0x11
    854a:	10 8a       	std	Z+16, r1	; 0x10
_ZN2as5AlarmC2Em():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:36
    854c:	12 8a       	std	Z+18, r1	; 0x12
    854e:	13 8a       	std	Z+19, r1	; 0x13
    8550:	14 8a       	std	Z+20, r1	; 0x14
    8552:	15 8a       	std	Z+21, r1	; 0x15
__base_ctor ():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:27
  class EventSender : public Alarm {
  public:
    StateGenericChannel& channel;
    uint8_t count, state;

    EventSender (StateGenericChannel& c) : Alarm(0), channel(c), count(0), state(255) {}
    8554:	8c e9       	ldi	r24, 0x9C	; 156
    8556:	91 e0       	ldi	r25, 0x01	; 1
    8558:	97 87       	std	Z+15, r25	; 0x0f
    855a:	86 87       	std	Z+14, r24	; 0x0e
    855c:	f7 8b       	std	Z+23, r31	; 0x17
    855e:	e6 8b       	std	Z+22, r30	; 0x16
    8560:	10 8e       	std	Z+24, r1	; 0x18
    8562:	8f ef       	ldi	r24, 0xFF	; 255
    8564:	81 8f       	std	Z+25, r24	; 0x19
_ZN2as19StateGenericChannelINS_14OnePinPositionILj0EEENS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101ISA_Lh255EEEEENS_8NoBuzzerEEE6UList07SCList1NS_8RegList4INS_20DefaultRegisterList4EEELi10EEC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:50
  Sensor possens;

public:
  typedef Channel<HALTYPE,List1Type,EmptyList,List4Type,PEERCOUNT,List0Type> BaseChannel;

  StateGenericChannel () : BaseChannel(), Alarm(0), sender(*this), sabpin(0), sabotage(false) {}
    8566:	12 8e       	std	Z+26, r1	; 0x1a
    8568:	13 8e       	std	Z+27, r1	; 0x1b
    856a:	cf 01       	movw	r24, r30
    856c:	4c 96       	adiw	r24, 0x1c	; 28
    856e:	0c 94 85 42 	jmp	0x850a	; 0x850a <as::OnePinPosition<0u>::OnePinPosition()>

00008572 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::StateButton()>:
_ZN2as11StateButtonILh1ELh0ELh2ENS_18NoDoublePressAlarmEEC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:94
  uint16_t longpresstime;
  CheckAlarm ca;
  DBLPRESS dbl;

public:
  StateButton() :
    8572:	fc 01       	movw	r30, r24
_ZN2as4LinkC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:17
    8574:	13 82       	std	Z+3, r1	; 0x03
    8576:	12 82       	std	Z+2, r1	; 0x02
_ZN2as5AlarmC2Em():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:36
    8578:	14 82       	std	Z+4, r1	; 0x04
    857a:	15 82       	std	Z+5, r1	; 0x05
    857c:	16 82       	std	Z+6, r1	; 0x06
    857e:	17 82       	std	Z+7, r1	; 0x07
_ZN2as11StateButtonILh1ELh0ELh2ENS_18NoDoublePressAlarmEEC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:95
      Alarm(0), stat(none), pinstate(OFFSTATE), pin(0), longpresstime(millis2ticks(400)), ca(*this)  {
    8580:	80 e9       	ldi	r24, 0x90	; 144
    8582:	91 e0       	ldi	r25, 0x01	; 1
    8584:	91 83       	std	Z+1, r25	; 0x01
    8586:	80 83       	st	Z, r24
    8588:	80 85       	ldd	r24, Z+8	; 0x08
    858a:	88 7f       	andi	r24, 0xF8	; 248
    858c:	81 60       	ori	r24, 0x01	; 1
    858e:	88 60       	ori	r24, 0x08	; 8
    8590:	80 87       	std	Z+8, r24	; 0x08
    8592:	11 86       	std	Z+9, r1	; 0x09
    8594:	88 e2       	ldi	r24, 0x28	; 40
    8596:	90 e0       	ldi	r25, 0x00	; 0
    8598:	93 87       	std	Z+11, r25	; 0x0b
    859a:	82 87       	std	Z+10, r24	; 0x0a
_ZN2as4LinkC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:17
    859c:	17 86       	std	Z+15, r1	; 0x0f
    859e:	16 86       	std	Z+14, r1	; 0x0e
_ZN2as5AlarmC2Em():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:36
    85a0:	10 8a       	std	Z+16, r1	; 0x10
    85a2:	11 8a       	std	Z+17, r1	; 0x11
    85a4:	12 8a       	std	Z+18, r1	; 0x12
    85a6:	13 8a       	std	Z+19, r1	; 0x13
_ZN2as11StateButtonILh1ELh0ELh2ENS_18NoDoublePressAlarmEE10CheckAlarmC2ERS2_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:78
  };

  class CheckAlarm : public Alarm {
  public:
    StateButton& sb;
    CheckAlarm (StateButton& _sb) : Alarm(0), sb(_sb) {}
    85a8:	8a e8       	ldi	r24, 0x8A	; 138
    85aa:	91 e0       	ldi	r25, 0x01	; 1
    85ac:	95 87       	std	Z+13, r25	; 0x0d
    85ae:	84 87       	std	Z+12, r24	; 0x0c
    85b0:	f5 8b       	std	Z+21, r31	; 0x15
    85b2:	e4 8b       	std	Z+20, r30	; 0x14
_ZN2as11StateButtonILh1ELh0ELh2ENS_18NoDoublePressAlarmEEC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:96
  DBLPRESS dbl;

public:
  StateButton() :
      Alarm(0), stat(none), pinstate(OFFSTATE), pin(0), longpresstime(millis2ticks(400)), ca(*this)  {
  }
    85b4:	08 95       	ret

000085b6 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::VirtChannel()>:
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_EC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:410

template <class HalType,class ChannelType,class List0Type=List0>
class VirtChannel : public VirtBaseChannel<HalType,List0Type> {
  ChannelType ch;
public:
  VirtChannel () {}
    85b6:	fc 01       	movw	r30, r24
    85b8:	82 e4       	ldi	r24, 0x42	; 66
    85ba:	91 e0       	ldi	r25, 0x01	; 1
    85bc:	91 83       	std	Z+1, r25	; 0x01
    85be:	80 83       	st	Z, r24
__base_ctor ():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:36
  typedef List3Type List3;
  typedef List4Type List4;
  typedef Device<HalType,List0Type> DeviceType;

  public:
  Channel () : dev(0), change(false), inhi(false), num(0), addr(0) {}
    85c0:	16 86       	std	Z+14, r1	; 0x0e
    85c2:	15 86       	std	Z+13, r1	; 0x0d
    85c4:	87 85       	ldd	r24, Z+15	; 0x0f
    85c6:	8e 7f       	andi	r24, 0xFE	; 254
    85c8:	8d 7f       	andi	r24, 0xFD	; 253
    85ca:	87 87       	std	Z+15, r24	; 0x0f
    85cc:	10 8a       	std	Z+16, r1	; 0x10
    85ce:	12 8a       	std	Z+18, r1	; 0x12
    85d0:	11 8a       	std	Z+17, r1	; 0x11
_ZN2as4LinkC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Link.h:17
    85d2:	15 82       	std	Z+5, r1	; 0x05
    85d4:	14 82       	std	Z+4, r1	; 0x04
_ZN2as5AlarmC2Em():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:36
    85d6:	16 82       	std	Z+6, r1	; 0x06
    85d8:	17 82       	std	Z+7, r1	; 0x07
    85da:	10 86       	std	Z+8, r1	; 0x08
    85dc:	11 86       	std	Z+9, r1	; 0x09
__base_ctor ():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:169
protected:
  uint8_t          state;
  SwitchPeerList   actlst;

public:
  SwitchStateMachine() : Alarm(0), state(AS_CM_JT_NONE), actlst(0) {}
    85de:	12 86       	std	Z+10, r1	; 0x0a
_ZN2as8BaseListC2Ej():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:18

class BaseList {
  uint16_t  addr;

public:
  BaseList (uint16_t a) : addr(a) {}
    85e0:	14 86       	std	Z+12, r1	; 0x0c
    85e2:	13 86       	std	Z+11, r1	; 0x0b
__base_ctor ():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:279
public:
  typedef Channel<HalType,List1Type, List3Type,EmptyList,PeerCount,List0Type, List2Type> BaseChannel;
  uint8_t lastmsgcnt;

public:
  ActorChannel () : BaseChannel(), lastmsgcnt(0xff) {}
    85e4:	8f ef       	ldi	r24, 0xFF	; 255
    85e6:	83 8b       	std	Z+19, r24	; 0x13
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Switch.h:341
protected:
  typedef ActorChannel<HalType,SwitchList1,SwitchList3,PeerCount,List0Type,SwitchStateMachine> BaseChannel;
  uint8_t pin;

public:
  SwitchChannel () : BaseChannel(), pin(0) {}
    85e8:	86 e3       	ldi	r24, 0x36	; 54
    85ea:	91 e0       	ldi	r25, 0x01	; 1
    85ec:	93 83       	std	Z+3, r25	; 0x03
    85ee:	82 83       	std	Z+2, r24	; 0x02
    85f0:	14 8a       	std	Z+20, r1	; 0x14
_ZN2as11VirtChannelINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_13SwitchChannelISD_Li10E6UList0S3_EESF_EC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Channel.h:410

template <class HalType,class ChannelType,class List0Type=List0>
class VirtChannel : public VirtBaseChannel<HalType,List0Type> {
  ChannelType ch;
public:
  VirtChannel () {}
    85f2:	08 95       	ret

000085f4 <as::Ntc<(unsigned char)25, 10000ul, 3950u, (unsigned char)0, (signed char)25, (unsigned char)4>::Ntc()>:
_ZN2as6SensorC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Sensors.h:15

class Sensor {
protected:
  bool _present;
public:
  Sensor () : _present(false) {}
    85f4:	10 92 54 07 	sts	0x0754, r1	; 0x800754 <sdev+0x138>
Temperature():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Sensors.h:34

class Temperature : public virtual Sensor {
protected:
  int16_t         _temperature;
public:
  Temperature () : _temperature(0) {}
    85f8:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <sdev+0x12f>
    85fc:	10 92 4a 07 	sts	0x074A, r1	; 0x80074a <sdev+0x12e>
_ZN2as3NtcILh25ELm10000ELj3950ELh0ELa25ELh4EEC1Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/sensors/Ntc.h:30
class Ntc : public Temperature {
  const int32_t _t0Abs = T0 * 10 + 2732;
  const int32_t _max_ref = (1 << (10 + OVERSAMPLING)) - 10 - OVERSAMPLING;

public:
  Ntc () {}
    8600:	82 e3       	ldi	r24, 0x32	; 50
    8602:	91 e0       	ldi	r25, 0x01	; 1
    8604:	90 93 49 07 	sts	0x0749, r25	; 0x800749 <sdev+0x12d>
    8608:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <sdev+0x12c>
    860c:	86 ea       	ldi	r24, 0xA6	; 166
    860e:	9b e0       	ldi	r25, 0x0B	; 11
    8610:	a0 e0       	ldi	r26, 0x00	; 0
    8612:	b0 e0       	ldi	r27, 0x00	; 0
    8614:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <sdev+0x130>
    8618:	90 93 4d 07 	sts	0x074D, r25	; 0x80074d <sdev+0x131>
    861c:	a0 93 4e 07 	sts	0x074E, r26	; 0x80074e <sdev+0x132>
    8620:	b0 93 4f 07 	sts	0x074F, r27	; 0x80074f <sdev+0x133>
    8624:	82 ef       	ldi	r24, 0xF2	; 242
    8626:	9f e3       	ldi	r25, 0x3F	; 63
    8628:	a0 e0       	ldi	r26, 0x00	; 0
    862a:	b0 e0       	ldi	r27, 0x00	; 0
    862c:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <sdev+0x134>
    8630:	90 93 51 07 	sts	0x0751, r25	; 0x800751 <sdev+0x135>
    8634:	a0 93 52 07 	sts	0x0752, r26	; 0x800752 <sdev+0x136>
    8638:	b0 93 53 07 	sts	0x0753, r27	; 0x800753 <sdev+0x137>
    863c:	08 95       	ret

0000863e <as::Ntc<(unsigned char)24, 10000ul, 3950u, (unsigned char)0, (signed char)25, (unsigned char)4>::Ntc()>:
_ZN2as6SensorC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Sensors.h:15

class Sensor {
protected:
  bool _present;
public:
  Sensor () : _present(false) {}
    863e:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <sdev+0x12b>
Temperature():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Sensors.h:34

class Temperature : public virtual Sensor {
protected:
  int16_t         _temperature;
public:
  Temperature () : _temperature(0) {}
    8642:	10 92 3e 07 	sts	0x073E, r1	; 0x80073e <sdev+0x122>
    8646:	10 92 3d 07 	sts	0x073D, r1	; 0x80073d <sdev+0x121>
_ZN2as3NtcILh24ELm10000ELj3950ELh0ELa25ELh4EEC1Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/sensors/Ntc.h:30
    864a:	82 e3       	ldi	r24, 0x32	; 50
    864c:	91 e0       	ldi	r25, 0x01	; 1
    864e:	90 93 3c 07 	sts	0x073C, r25	; 0x80073c <sdev+0x120>
    8652:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <sdev+0x11f>
    8656:	86 ea       	ldi	r24, 0xA6	; 166
    8658:	9b e0       	ldi	r25, 0x0B	; 11
    865a:	a0 e0       	ldi	r26, 0x00	; 0
    865c:	b0 e0       	ldi	r27, 0x00	; 0
    865e:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <sdev+0x123>
    8662:	90 93 40 07 	sts	0x0740, r25	; 0x800740 <sdev+0x124>
    8666:	a0 93 41 07 	sts	0x0741, r26	; 0x800741 <sdev+0x125>
    866a:	b0 93 42 07 	sts	0x0742, r27	; 0x800742 <sdev+0x126>
    866e:	82 ef       	ldi	r24, 0xF2	; 242
    8670:	9f e3       	ldi	r25, 0x3F	; 63
    8672:	a0 e0       	ldi	r26, 0x00	; 0
    8674:	b0 e0       	ldi	r27, 0x00	; 0
    8676:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <sdev+0x127>
    867a:	90 93 44 07 	sts	0x0744, r25	; 0x800744 <sdev+0x128>
    867e:	a0 93 45 07 	sts	0x0745, r26	; 0x800745 <sdev+0x129>
    8682:	b0 93 46 07 	sts	0x0746, r27	; 0x800746 <sdev+0x12a>
    8686:	08 95       	ret

00008688 <global constructors keyed to 65535_0_HB_UNI_Sen_POOL_1.ino.cpp.o.5243>:
_GLOBAL__I_65535_0_HB_UNI_Sen_POOL_1.ino.cpp.o.5243():
    8688:	6f 92       	push	r6
    868a:	7f 92       	push	r7
    868c:	8f 92       	push	r8
    868e:	9f 92       	push	r9
    8690:	af 92       	push	r10
    8692:	bf 92       	push	r11
    8694:	cf 92       	push	r12
    8696:	df 92       	push	r13
    8698:	ef 92       	push	r14
    869a:	ff 92       	push	r15
    869c:	0f 93       	push	r16
    869e:	1f 93       	push	r17
    86a0:	cf 93       	push	r28
    86a2:	df 93       	push	r29
    86a4:	e9 ed       	ldi	r30, 0xD9	; 217
    86a6:	f4 e0       	ldi	r31, 0x04	; 4
    86a8:	13 82       	std	Z+3, r1	; 0x03
    86aa:	12 82       	std	Z+2, r1	; 0x02
    86ac:	88 ee       	ldi	r24, 0xE8	; 232
    86ae:	93 e0       	ldi	r25, 0x03	; 3
    86b0:	a0 e0       	ldi	r26, 0x00	; 0
    86b2:	b0 e0       	ldi	r27, 0x00	; 0
    86b4:	84 83       	std	Z+4, r24	; 0x04
    86b6:	95 83       	std	Z+5, r25	; 0x05
    86b8:	a6 83       	std	Z+6, r26	; 0x06
    86ba:	b7 83       	std	Z+7, r27	; 0x07
    86bc:	2c eb       	ldi	r18, 0xBC	; 188
    86be:	31 e0       	ldi	r19, 0x01	; 1
    86c0:	31 83       	std	Z+1, r19	; 0x01
    86c2:	20 83       	st	Z, r18
    86c4:	25 ec       	ldi	r18, 0xC5	; 197
    86c6:	30 e0       	ldi	r19, 0x00	; 0
    86c8:	35 87       	std	Z+13, r19	; 0x0d
    86ca:	24 87       	std	Z+12, r18	; 0x0c
    86cc:	24 ec       	ldi	r18, 0xC4	; 196
    86ce:	30 e0       	ldi	r19, 0x00	; 0
    86d0:	37 87       	std	Z+15, r19	; 0x0f
    86d2:	26 87       	std	Z+14, r18	; 0x0e
    86d4:	20 ec       	ldi	r18, 0xC0	; 192
    86d6:	30 e0       	ldi	r19, 0x00	; 0
    86d8:	31 8b       	std	Z+17, r19	; 0x11
    86da:	20 8b       	std	Z+16, r18	; 0x10
    86dc:	21 ec       	ldi	r18, 0xC1	; 193
    86de:	30 e0       	ldi	r19, 0x00	; 0
    86e0:	33 8b       	std	Z+19, r19	; 0x13
    86e2:	22 8b       	std	Z+18, r18	; 0x12
    86e4:	22 ec       	ldi	r18, 0xC2	; 194
    86e6:	30 e0       	ldi	r19, 0x00	; 0
    86e8:	35 8b       	std	Z+21, r19	; 0x15
    86ea:	24 8b       	std	Z+20, r18	; 0x14
    86ec:	26 ec       	ldi	r18, 0xC6	; 198
    86ee:	30 e0       	ldi	r19, 0x00	; 0
    86f0:	37 8b       	std	Z+23, r19	; 0x17
    86f2:	26 8b       	std	Z+22, r18	; 0x16
    86f4:	11 8e       	std	Z+25, r1	; 0x19
    86f6:	12 8e       	std	Z+26, r1	; 0x1a
    86f8:	13 8e       	std	Z+27, r1	; 0x1b
    86fa:	14 8e       	std	Z+28, r1	; 0x1c
    86fc:	eb e8       	ldi	r30, 0x8B	; 139
    86fe:	f5 e0       	ldi	r31, 0x05	; 5
    8700:	13 82       	std	Z+3, r1	; 0x03
    8702:	12 82       	std	Z+2, r1	; 0x02
    8704:	84 83       	std	Z+4, r24	; 0x04
    8706:	95 83       	std	Z+5, r25	; 0x05
    8708:	a6 83       	std	Z+6, r26	; 0x06
    870a:	b7 83       	std	Z+7, r27	; 0x07
    870c:	8e ec       	ldi	r24, 0xCE	; 206
    870e:	91 e0       	ldi	r25, 0x01	; 1
    8710:	91 83       	std	Z+1, r25	; 0x01
    8712:	80 83       	st	Z, r24
    8714:	10 92 7d 05 	sts	0x057D, r1	; 0x80057d <as::phaseCut+0x7>
    8718:	ef e7       	ldi	r30, 0x7F	; 127
    871a:	f5 e0       	ldi	r31, 0x05	; 5
    871c:	12 82       	std	Z+2, r1	; 0x02
    871e:	11 82       	std	Z+1, r1	; 0x01
    8720:	10 82       	st	Z, r1
    8722:	e7 e8       	ldi	r30, 0x87	; 135
    8724:	f5 e0       	ldi	r31, 0x05	; 5
    8726:	11 82       	std	Z+1, r1	; 0x01
    8728:	10 82       	st	Z, r1
    872a:	13 82       	std	Z+3, r1	; 0x03
    872c:	12 82       	std	Z+2, r1	; 0x02
    872e:	e2 e8       	ldi	r30, 0x82	; 130
    8730:	f5 e0       	ldi	r31, 0x05	; 5
    8732:	11 82       	std	Z+1, r1	; 0x01
    8734:	10 82       	st	Z, r1
    8736:	13 82       	std	Z+3, r1	; 0x03
    8738:	12 82       	std	Z+2, r1	; 0x02
    873a:	14 82       	std	Z+4, r1	; 0x04
    873c:	ee ea       	ldi	r30, 0xAE	; 174
    873e:	f7 e0       	ldi	r31, 0x07	; 7
    8740:	15 82       	std	Z+5, r1	; 0x05
    8742:	14 82       	std	Z+4, r1	; 0x04
    8744:	17 82       	std	Z+7, r1	; 0x07
    8746:	10 86       	std	Z+8, r1	; 0x08
    8748:	11 86       	std	Z+9, r1	; 0x09
    874a:	80 e2       	ldi	r24, 0x20	; 32
    874c:	93 e0       	ldi	r25, 0x03	; 3
    874e:	93 83       	std	Z+3, r25	; 0x03
    8750:	82 83       	std	Z+2, r24	; 0x02
    8752:	12 8a       	std	Z+18, r1	; 0x12
    8754:	13 8a       	std	Z+19, r1	; 0x13
    8756:	14 8a       	std	Z+20, r1	; 0x14
    8758:	15 8a       	std	Z+21, r1	; 0x15
    875a:	66 24       	eor	r6, r6
    875c:	63 94       	inc	r6
    875e:	66 82       	std	Z+6, r6	; 0x06
    8760:	12 8e       	std	Z+26, r1	; 0x1a
    8762:	11 8e       	std	Z+25, r1	; 0x19
    8764:	14 8e       	std	Z+28, r1	; 0x1c
    8766:	15 8e       	std	Z+29, r1	; 0x1d
    8768:	16 8e       	std	Z+30, r1	; 0x1e
    876a:	86 e1       	ldi	r24, 0x16	; 22
    876c:	93 e0       	ldi	r25, 0x03	; 3
    876e:	90 8f       	std	Z+24, r25	; 0x18
    8770:	87 8b       	std	Z+23, r24	; 0x17
    8772:	17 8e       	std	Z+31, r1	; 0x1f
    8774:	63 8e       	std	Z+27, r6	; 0x1b
    8776:	11 a2       	std	Z+33, r1	; 0x21
    8778:	15 a2       	std	Z+37, r1	; 0x25
    877a:	14 a2       	std	Z+36, r1	; 0x24
    877c:	17 a2       	std	Z+39, r1	; 0x27
    877e:	10 a6       	std	Z+40, r1	; 0x28
    8780:	11 a6       	std	Z+41, r1	; 0x29
    8782:	8c e0       	ldi	r24, 0x0C	; 12
    8784:	93 e0       	ldi	r25, 0x03	; 3
    8786:	93 a3       	std	Z+35, r25	; 0x23
    8788:	82 a3       	std	Z+34, r24	; 0x22
    878a:	12 a6       	std	Z+42, r1	; 0x2a
    878c:	66 a2       	std	Z+38, r6	; 0x26
    878e:	88 e0       	ldi	r24, 0x08	; 8
    8790:	78 2e       	mov	r7, r24
    8792:	73 a6       	std	Z+43, r7	; 0x2b
    8794:	8a ed       	ldi	r24, 0xDA	; 218
    8796:	97 e0       	ldi	r25, 0x07	; 7
    8798:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <as::Message::Message()>
    879c:	0d e8       	ldi	r16, 0x8D	; 141
    879e:	17 e0       	ldi	r17, 0x07	; 7
    87a0:	84 e0       	ldi	r24, 0x04	; 4
    87a2:	93 e0       	ldi	r25, 0x03	; 3
    87a4:	f8 01       	movw	r30, r16
    87a6:	91 83       	std	Z+1, r25	; 0x01
    87a8:	80 83       	st	Z, r24
    87aa:	15 82       	std	Z+5, r1	; 0x05
    87ac:	14 82       	std	Z+4, r1	; 0x04
    87ae:	16 82       	std	Z+6, r1	; 0x06
    87b0:	17 82       	std	Z+7, r1	; 0x07
    87b2:	10 86       	std	Z+8, r1	; 0x08
    87b4:	11 86       	std	Z+9, r1	; 0x09
    87b6:	8a ef       	ldi	r24, 0xFA	; 250
    87b8:	92 e0       	ldi	r25, 0x02	; 2
    87ba:	93 83       	std	Z+3, r25	; 0x03
    87bc:	82 83       	std	Z+2, r24	; 0x02
    87be:	13 87       	std	Z+11, r17	; 0x0b
    87c0:	02 87       	std	Z+10, r16	; 0x0a
    87c2:	8a e0       	ldi	r24, 0x0A	; 10
    87c4:	84 87       	std	Z+12, r24	; 0x0c
    87c6:	88 e0       	ldi	r24, 0x08	; 8
    87c8:	e4 e2       	ldi	r30, 0x24	; 36
    87ca:	f1 e0       	ldi	r31, 0x01	; 1
    87cc:	aa e9       	ldi	r26, 0x9A	; 154
    87ce:	b7 e0       	ldi	r27, 0x07	; 7
    87d0:	01 90       	ld	r0, Z+
    87d2:	0d 92       	st	X+, r0
    87d4:	8a 95       	dec	r24
    87d6:	e1 f7       	brne	.-8      	; 0x87d0 <global constructors keyed to 65535_0_HB_UNI_Sen_POOL_1.ino.cpp.o.5243+0x148>
    87d8:	f8 01       	movw	r30, r16
    87da:	10 8e       	std	Z+24, r1	; 0x18
    87dc:	17 8a       	std	Z+23, r1	; 0x17
    87de:	8e ee       	ldi	r24, 0xEE	; 238
    87e0:	92 e0       	ldi	r25, 0x02	; 2
    87e2:	96 8b       	std	Z+22, r25	; 0x16
    87e4:	85 8b       	std	Z+21, r24	; 0x15
    87e6:	87 e2       	ldi	r24, 0x27	; 39
    87e8:	81 8f       	std	Z+25, r24	; 0x19
    87ea:	84 e1       	ldi	r24, 0x14	; 20
    87ec:	86 8f       	std	Z+30, r24	; 0x1e
    87ee:	84 e0       	ldi	r24, 0x04	; 4
    87f0:	87 8f       	std	Z+31, r24	; 0x1f
    87f2:	10 a2       	std	Z+32, r1	; 0x20
    87f4:	cc e1       	ldi	r28, 0x1C	; 28
    87f6:	d6 e0       	ldi	r29, 0x06	; 6
    87f8:	86 ed       	ldi	r24, 0xD6	; 214
    87fa:	92 e0       	ldi	r25, 0x02	; 2
    87fc:	99 83       	std	Y+1, r25	; 0x01
    87fe:	88 83       	st	Y, r24
    8800:	1b 82       	std	Y+3, r1	; 0x03
    8802:	1a 82       	std	Y+2, r1	; 0x02
    8804:	8a e4       	ldi	r24, 0x4A	; 74
    8806:	96 e0       	ldi	r25, 0x06	; 6
    8808:	9d 83       	std	Y+5, r25	; 0x05
    880a:	8c 83       	std	Y+4, r24	; 0x04
    880c:	1e 82       	std	Y+6, r1	; 0x06
    880e:	19 86       	std	Y+9, r1	; 0x09
    8810:	18 86       	std	Y+8, r1	; 0x08
    8812:	1f 82       	std	Y+7, r1	; 0x07
    8814:	1a 86       	std	Y+10, r1	; 0x0a
    8816:	87 e2       	ldi	r24, 0x27	; 39
    8818:	96 e0       	ldi	r25, 0x06	; 6
    881a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <as::Message::Message()>
    881e:	80 e2       	ldi	r24, 0x20	; 32
    8820:	90 e0       	ldi	r25, 0x00	; 0
    8822:	99 a7       	std	Y+41, r25	; 0x29
    8824:	88 a7       	std	Y+40, r24	; 0x28
    8826:	29 e2       	ldi	r18, 0x29	; 41
    8828:	38 e0       	ldi	r19, 0x08	; 8
    882a:	3b a7       	std	Y+43, r19	; 0x2b
    882c:	2a a7       	std	Y+42, r18	; 0x2a
    882e:	1c a6       	std	Y+44, r1	; 0x2c
    8830:	7d a6       	std	Y+45, r7	; 0x2d
    8832:	9f a7       	std	Y+47, r25	; 0x2f
    8834:	8e a7       	std	Y+46, r24	; 0x2e
    8836:	8f ef       	ldi	r24, 0xFF	; 255
    8838:	80 93 5c 06 	sts	0x065C, r24	; 0x80065c <sdev+0x40>
    883c:	10 92 5e 06 	sts	0x065E, r1	; 0x80065e <sdev+0x42>
    8840:	10 92 5d 06 	sts	0x065D, r1	; 0x80065d <sdev+0x41>
    8844:	10 92 5f 06 	sts	0x065F, r1	; 0x80065f <sdev+0x43>
    8848:	10 92 61 06 	sts	0x0661, r1	; 0x800661 <sdev+0x45>
    884c:	10 92 60 06 	sts	0x0660, r1	; 0x800660 <sdev+0x44>
    8850:	10 92 63 06 	sts	0x0663, r1	; 0x800663 <sdev+0x47>
    8854:	10 92 62 06 	sts	0x0662, r1	; 0x800662 <sdev+0x46>
    8858:	82 ee       	ldi	r24, 0xE2	; 226
    885a:	92 e0       	ldi	r25, 0x02	; 2
    885c:	99 83       	std	Y+1, r25	; 0x01
    885e:	88 83       	st	Y, r24
    8860:	84 e6       	ldi	r24, 0x64	; 100
    8862:	96 e0       	ldi	r25, 0x06	; 6
    8864:	0e 94 db 42 	call	0x85b6	; 0x85b6 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::VirtChannel()>
    8868:	89 e7       	ldi	r24, 0x79	; 121
    886a:	96 e0       	ldi	r25, 0x06	; 6
    886c:	0e 94 db 42 	call	0x85b6	; 0x85b6 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::VirtChannel()>
    8870:	8e e8       	ldi	r24, 0x8E	; 142
    8872:	96 e0       	ldi	r25, 0x06	; 6
    8874:	0e 94 db 42 	call	0x85b6	; 0x85b6 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::VirtChannel()>
    8878:	83 ea       	ldi	r24, 0xA3	; 163
    887a:	96 e0       	ldi	r25, 0x06	; 6
    887c:	0e 94 db 42 	call	0x85b6	; 0x85b6 <as::VirtChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>, UList0>::VirtChannel()>
    8880:	98 eb       	ldi	r25, 0xB8	; 184
    8882:	c9 2e       	mov	r12, r25
    8884:	96 e0       	ldi	r25, 0x06	; 6
    8886:	d9 2e       	mov	r13, r25
    8888:	2e e8       	ldi	r18, 0x8E	; 142
    888a:	82 2e       	mov	r8, r18
    888c:	22 e0       	ldi	r18, 0x02	; 2
    888e:	92 2e       	mov	r9, r18
    8890:	f6 01       	movw	r30, r12
    8892:	91 82       	std	Z+1, r9	; 0x01
    8894:	80 82       	st	Z, r8
    8896:	8a eb       	ldi	r24, 0xBA	; 186
    8898:	96 e0       	ldi	r25, 0x06	; 6
    889a:	0e 94 90 42 	call	0x8520	; 0x8520 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::StateGenericChannel()>
    889e:	34 e8       	ldi	r19, 0x84	; 132
    88a0:	a3 2e       	mov	r10, r19
    88a2:	32 e0       	ldi	r19, 0x02	; 2
    88a4:	b3 2e       	mov	r11, r19
    88a6:	b0 92 bb 06 	sts	0x06BB, r11	; 0x8006bb <sdev+0x9f>
    88aa:	a0 92 ba 06 	sts	0x06BA, r10	; 0x8006ba <sdev+0x9e>
    88ae:	4c ed       	ldi	r20, 0xDC	; 220
    88b0:	e4 2e       	mov	r14, r20
    88b2:	46 e0       	ldi	r20, 0x06	; 6
    88b4:	f4 2e       	mov	r15, r20
    88b6:	f7 01       	movw	r30, r14
    88b8:	91 82       	std	Z+1, r9	; 0x01
    88ba:	80 82       	st	Z, r8
    88bc:	8e ed       	ldi	r24, 0xDE	; 222
    88be:	96 e0       	ldi	r25, 0x06	; 6
    88c0:	0e 94 90 42 	call	0x8520	; 0x8520 <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::StateGenericChannel()>
    88c4:	b0 92 df 06 	sts	0x06DF, r11	; 0x8006df <sdev+0xc3>
    88c8:	a0 92 de 06 	sts	0x06DE, r10	; 0x8006de <sdev+0xc2>
    88cc:	50 e0       	ldi	r21, 0x00	; 0
    88ce:	a5 2e       	mov	r10, r21
    88d0:	57 e0       	ldi	r21, 0x07	; 7
    88d2:	b5 2e       	mov	r11, r21
    88d4:	8c e3       	ldi	r24, 0x3C	; 60
    88d6:	92 e0       	ldi	r25, 0x02	; 2
    88d8:	f5 01       	movw	r30, r10
    88da:	91 83       	std	Z+1, r25	; 0x01
    88dc:	80 83       	st	Z, r24
    88de:	10 92 0b 07 	sts	0x070B, r1	; 0x80070b <sdev+0xef>
    88e2:	10 92 0a 07 	sts	0x070A, r1	; 0x80070a <sdev+0xee>
    88e6:	ec e0       	ldi	r30, 0x0C	; 12
    88e8:	f7 e0       	ldi	r31, 0x07	; 7
    88ea:	80 81       	ld	r24, Z
    88ec:	8e 7f       	andi	r24, 0xFE	; 254
    88ee:	8d 7f       	andi	r24, 0xFD	; 253
    88f0:	80 83       	st	Z, r24
    88f2:	10 92 0d 07 	sts	0x070D, r1	; 0x80070d <sdev+0xf1>
    88f6:	10 92 0f 07 	sts	0x070F, r1	; 0x80070f <sdev+0xf3>
    88fa:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <sdev+0xf2>
    88fe:	10 92 05 07 	sts	0x0705, r1	; 0x800705 <sdev+0xe9>
    8902:	10 92 04 07 	sts	0x0704, r1	; 0x800704 <sdev+0xe8>
    8906:	10 92 06 07 	sts	0x0706, r1	; 0x800706 <sdev+0xea>
    890a:	8c e2       	ldi	r24, 0x2C	; 44
    890c:	91 e0       	ldi	r25, 0x01	; 1
    890e:	a0 e0       	ldi	r26, 0x00	; 0
    8910:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <sdev+0xeb>
    8914:	90 93 08 07 	sts	0x0708, r25	; 0x800708 <sdev+0xec>
    8918:	a0 93 09 07 	sts	0x0709, r26	; 0x800709 <sdev+0xed>
    891c:	e2 e0       	ldi	r30, 0x02	; 2
    891e:	f7 e0       	ldi	r31, 0x07	; 7
    8920:	82 e3       	ldi	r24, 0x32	; 50
    8922:	92 e0       	ldi	r25, 0x02	; 2
    8924:	91 83       	std	Z+1, r25	; 0x01
    8926:	80 83       	st	Z, r24
    8928:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <sdev+0xf7>
    892c:	10 92 12 07 	sts	0x0712, r1	; 0x800712 <sdev+0xf6>
    8930:	10 92 14 07 	sts	0x0714, r1	; 0x800714 <sdev+0xf8>
    8934:	10 92 15 07 	sts	0x0715, r1	; 0x800715 <sdev+0xf9>
    8938:	10 92 16 07 	sts	0x0716, r1	; 0x800716 <sdev+0xfa>
    893c:	10 92 17 07 	sts	0x0717, r1	; 0x800717 <sdev+0xfb>
    8940:	88 e2       	ldi	r24, 0x28	; 40
    8942:	92 e0       	ldi	r25, 0x02	; 2
    8944:	90 93 11 07 	sts	0x0711, r25	; 0x800711 <sdev+0xf5>
    8948:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <sdev+0xf4>
    894c:	10 93 19 07 	sts	0x0719, r17	; 0x800719 <sdev+0xfd>
    8950:	00 93 18 07 	sts	0x0718, r16	; 0x800718 <sdev+0xfc>
    8954:	f0 93 1b 07 	sts	0x071B, r31	; 0x80071b <sdev+0xff>
    8958:	e0 93 1a 07 	sts	0x071A, r30	; 0x80071a <sdev+0xfe>
    895c:	8c e1       	ldi	r24, 0x1C	; 28
    895e:	97 e0       	ldi	r25, 0x07	; 7
    8960:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <as::Message::Message()>
    8964:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <sdev+0x11e>
    8968:	10 92 39 07 	sts	0x0739, r1	; 0x800739 <sdev+0x11d>
    896c:	8b e3       	ldi	r24, 0x3B	; 59
    896e:	97 e0       	ldi	r25, 0x07	; 7
    8970:	0e 94 1f 43 	call	0x863e	; 0x863e <as::Ntc<(unsigned char)24, 10000ul, 3950u, (unsigned char)0, (signed char)25, (unsigned char)4>::Ntc()>
    8974:	88 e4       	ldi	r24, 0x48	; 72
    8976:	97 e0       	ldi	r25, 0x07	; 7
    8978:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <as::Ntc<(unsigned char)25, 10000ul, 3950u, (unsigned char)0, (signed char)25, (unsigned char)4>::Ntc()>
    897c:	80 e5       	ldi	r24, 0x50	; 80
    897e:	80 93 55 07 	sts	0x0755, r24	; 0x800755 <sdev+0x139>
    8982:	0e 94 ac 07 	call	0xf58	; 0xf58 <TwoWire::begin() [clone .constprop.118]>
    8986:	10 92 56 07 	sts	0x0756, r1	; 0x800756 <sdev+0x13a>
    898a:	60 92 57 07 	sts	0x0757, r6	; 0x800757 <sdev+0x13b>
    898e:	10 92 58 07 	sts	0x0758, r1	; 0x800758 <sdev+0x13c>
    8992:	10 92 5a 07 	sts	0x075A, r1	; 0x80075a <sdev+0x13e>
    8996:	10 92 59 07 	sts	0x0759, r1	; 0x800759 <sdev+0x13d>
    899a:	10 92 5c 07 	sts	0x075C, r1	; 0x80075c <sdev+0x140>
    899e:	10 92 5b 07 	sts	0x075B, r1	; 0x80075b <sdev+0x13f>
    89a2:	10 92 5e 07 	sts	0x075E, r1	; 0x80075e <sdev+0x142>
    89a6:	10 92 5d 07 	sts	0x075D, r1	; 0x80075d <sdev+0x141>
    89aa:	10 92 5f 07 	sts	0x075F, r1	; 0x80075f <sdev+0x143>
    89ae:	10 92 61 07 	sts	0x0761, r1	; 0x800761 <sdev+0x145>
    89b2:	10 92 60 07 	sts	0x0760, r1	; 0x800760 <sdev+0x144>
    89b6:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <sdev+0x147>
    89ba:	10 92 62 07 	sts	0x0762, r1	; 0x800762 <sdev+0x146>
    89be:	10 92 65 07 	sts	0x0765, r1	; 0x800765 <sdev+0x149>
    89c2:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <sdev+0x148>
    89c6:	10 92 67 07 	sts	0x0767, r1	; 0x800767 <sdev+0x14b>
    89ca:	10 92 66 07 	sts	0x0766, r1	; 0x800766 <sdev+0x14a>
    89ce:	10 92 69 07 	sts	0x0769, r1	; 0x800769 <sdev+0x14d>
    89d2:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <sdev+0x14c>
    89d6:	10 92 6b 07 	sts	0x076B, r1	; 0x80076b <sdev+0x14f>
    89da:	10 92 6a 07 	sts	0x076A, r1	; 0x80076a <sdev+0x14e>
    89de:	10 92 6c 07 	sts	0x076C, r1	; 0x80076c <sdev+0x150>
    89e2:	10 92 6d 07 	sts	0x076D, r1	; 0x80076d <sdev+0x151>
    89e6:	10 92 6e 07 	sts	0x076E, r1	; 0x80076e <sdev+0x152>
    89ea:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <sdev+0x153>
    89ee:	10 92 70 07 	sts	0x0770, r1	; 0x800770 <sdev+0x154>
    89f2:	10 92 71 07 	sts	0x0771, r1	; 0x800771 <sdev+0x155>
    89f6:	10 92 72 07 	sts	0x0772, r1	; 0x800772 <sdev+0x156>
    89fa:	10 92 73 07 	sts	0x0773, r1	; 0x800773 <sdev+0x157>
    89fe:	10 92 74 07 	sts	0x0774, r1	; 0x800774 <sdev+0x158>
    8a02:	10 92 75 07 	sts	0x0775, r1	; 0x800775 <sdev+0x159>
    8a06:	10 92 76 07 	sts	0x0776, r1	; 0x800776 <sdev+0x15a>
    8a0a:	10 92 77 07 	sts	0x0777, r1	; 0x800777 <sdev+0x15b>
    8a0e:	10 92 78 07 	sts	0x0778, r1	; 0x800778 <sdev+0x15c>
    8a12:	10 92 79 07 	sts	0x0779, r1	; 0x800779 <sdev+0x15d>
    8a16:	10 92 7a 07 	sts	0x077A, r1	; 0x80077a <sdev+0x15e>
    8a1a:	10 92 7b 07 	sts	0x077B, r1	; 0x80077b <sdev+0x15f>
    8a1e:	10 92 7c 07 	sts	0x077C, r1	; 0x80077c <sdev+0x160>
    8a22:	10 92 7d 07 	sts	0x077D, r1	; 0x80077d <sdev+0x161>
    8a26:	10 92 7e 07 	sts	0x077E, r1	; 0x80077e <sdev+0x162>
    8a2a:	10 92 7f 07 	sts	0x077F, r1	; 0x80077f <sdev+0x163>
    8a2e:	10 92 80 07 	sts	0x0780, r1	; 0x800780 <sdev+0x164>
    8a32:	10 92 82 07 	sts	0x0782, r1	; 0x800782 <sdev+0x166>
    8a36:	10 92 81 07 	sts	0x0781, r1	; 0x800781 <sdev+0x165>
    8a3a:	88 ec       	ldi	r24, 0xC8	; 200
    8a3c:	90 e0       	ldi	r25, 0x00	; 0
    8a3e:	90 93 84 07 	sts	0x0784, r25	; 0x800784 <sdev+0x168>
    8a42:	80 93 83 07 	sts	0x0783, r24	; 0x800783 <sdev+0x167>
    8a46:	e5 e8       	ldi	r30, 0x85	; 133
    8a48:	f7 e0       	ldi	r31, 0x07	; 7
    8a4a:	80 ee       	ldi	r24, 0xE0	; 224
    8a4c:	91 e0       	ldi	r25, 0x01	; 1
    8a4e:	91 83       	std	Z+1, r25	; 0x01
    8a50:	80 83       	st	Z, r24
    8a52:	10 92 88 07 	sts	0x0788, r1	; 0x800788 <sdev+0x16c>
    8a56:	10 92 87 07 	sts	0x0787, r1	; 0x800787 <sdev+0x16b>
    8a5a:	a9 e8       	ldi	r26, 0x89	; 137
    8a5c:	b7 e0       	ldi	r27, 0x07	; 7
    8a5e:	8c 91       	ld	r24, X
    8a60:	8e 7f       	andi	r24, 0xFE	; 254
    8a62:	8d 7f       	andi	r24, 0xFD	; 253
    8a64:	8c 93       	st	X, r24
    8a66:	10 92 8a 07 	sts	0x078A, r1	; 0x80078a <sdev+0x16e>
    8a6a:	10 92 8c 07 	sts	0x078C, r1	; 0x80078c <sdev+0x170>
    8a6e:	10 92 8b 07 	sts	0x078B, r1	; 0x80078b <sdev+0x16f>
    8a72:	b9 aa       	std	Y+49, r11	; 0x31
    8a74:	a8 aa       	std	Y+48, r10	; 0x30
    8a76:	fb ab       	std	Y+51, r31	; 0x33
    8a78:	ea ab       	std	Y+50, r30	; 0x32
    8a7a:	dd aa       	std	Y+53, r13	; 0x35
    8a7c:	cc aa       	std	Y+52, r12	; 0x34
    8a7e:	ff aa       	std	Y+55, r15	; 0x37
    8a80:	ee aa       	std	Y+54, r14	; 0x36
    8a82:	84 e6       	ldi	r24, 0x64	; 100
    8a84:	96 e0       	ldi	r25, 0x06	; 6
    8a86:	99 af       	std	Y+57, r25	; 0x39
    8a88:	88 af       	std	Y+56, r24	; 0x38
    8a8a:	89 e7       	ldi	r24, 0x79	; 121
    8a8c:	96 e0       	ldi	r25, 0x06	; 6
    8a8e:	9b af       	std	Y+59, r25	; 0x3b
    8a90:	8a af       	std	Y+58, r24	; 0x3a
    8a92:	8e e8       	ldi	r24, 0x8E	; 142
    8a94:	96 e0       	ldi	r25, 0x06	; 6
    8a96:	9d af       	std	Y+61, r25	; 0x3d
    8a98:	8c af       	std	Y+60, r24	; 0x3c
    8a9a:	83 ea       	ldi	r24, 0xA3	; 163
    8a9c:	96 e0       	ldi	r25, 0x06	; 6
    8a9e:	9f af       	std	Y+63, r25	; 0x3f
    8aa0:	8e af       	std	Y+62, r24	; 0x3e
    8aa2:	83 e0       	ldi	r24, 0x03	; 3
    8aa4:	96 e0       	ldi	r25, 0x06	; 6
    8aa6:	0e 94 b9 42 	call	0x8572	; 0x8572 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::StateButton()>
    8aaa:	e3 e0       	ldi	r30, 0x03	; 3
    8aac:	f6 e0       	ldi	r31, 0x06	; 6
    8aae:	86 e3       	ldi	r24, 0x36	; 54
    8ab0:	93 e0       	ldi	r25, 0x03	; 3
    8ab2:	91 83       	std	Z+1, r25	; 0x01
    8ab4:	80 83       	st	Z, r24
    8ab6:	d0 8f       	std	Z+24, r29	; 0x18
    8ab8:	c7 8b       	std	Z+23, r28	; 0x17
    8aba:	8c e2       	ldi	r24, 0x2C	; 44
    8abc:	91 e0       	ldi	r25, 0x01	; 1
    8abe:	93 87       	std	Z+11, r25	; 0x0b
    8ac0:	82 87       	std	Z+10, r24	; 0x0a
    8ac2:	88 ee       	ldi	r24, 0xE8	; 232
    8ac4:	95 e0       	ldi	r25, 0x05	; 5
    8ac6:	0e 94 b9 42 	call	0x8572	; 0x8572 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::StateButton()>
    8aca:	e8 ee       	ldi	r30, 0xE8	; 232
    8acc:	f5 e0       	ldi	r31, 0x05	; 5
    8ace:	6a e2       	ldi	r22, 0x2A	; 42
    8ad0:	e6 2e       	mov	r14, r22
    8ad2:	63 e0       	ldi	r22, 0x03	; 3
    8ad4:	f6 2e       	mov	r15, r22
    8ad6:	f1 82       	std	Z+1, r15	; 0x01
    8ad8:	e0 82       	st	Z, r14
    8ada:	d0 8f       	std	Z+24, r29	; 0x18
    8adc:	c7 8b       	std	Z+23, r28	; 0x17
    8ade:	85 e0       	ldi	r24, 0x05	; 5
    8ae0:	81 8f       	std	Z+25, r24	; 0x19
    8ae2:	12 8e       	std	Z+26, r1	; 0x1a
    8ae4:	08 e2       	ldi	r16, 0x28	; 40
    8ae6:	10 e0       	ldi	r17, 0x00	; 0
    8ae8:	13 87       	std	Z+11, r17	; 0x0b
    8aea:	02 87       	std	Z+10, r16	; 0x0a
    8aec:	8d ec       	ldi	r24, 0xCD	; 205
    8aee:	95 e0       	ldi	r25, 0x05	; 5
    8af0:	0e 94 b9 42 	call	0x8572	; 0x8572 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::StateButton()>
    8af4:	ed ec       	ldi	r30, 0xCD	; 205
    8af6:	f5 e0       	ldi	r31, 0x05	; 5
    8af8:	f1 82       	std	Z+1, r15	; 0x01
    8afa:	e0 82       	st	Z, r14
    8afc:	d0 8f       	std	Z+24, r29	; 0x18
    8afe:	c7 8b       	std	Z+23, r28	; 0x17
    8b00:	86 e0       	ldi	r24, 0x06	; 6
    8b02:	81 8f       	std	Z+25, r24	; 0x19
    8b04:	12 8e       	std	Z+26, r1	; 0x1a
    8b06:	13 87       	std	Z+11, r17	; 0x0b
    8b08:	02 87       	std	Z+10, r16	; 0x0a
    8b0a:	82 eb       	ldi	r24, 0xB2	; 178
    8b0c:	95 e0       	ldi	r25, 0x05	; 5
    8b0e:	0e 94 b9 42 	call	0x8572	; 0x8572 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::StateButton()>
    8b12:	e2 eb       	ldi	r30, 0xB2	; 178
    8b14:	f5 e0       	ldi	r31, 0x05	; 5
    8b16:	f1 82       	std	Z+1, r15	; 0x01
    8b18:	e0 82       	st	Z, r14
    8b1a:	d0 8f       	std	Z+24, r29	; 0x18
    8b1c:	c7 8b       	std	Z+23, r28	; 0x17
    8b1e:	87 e0       	ldi	r24, 0x07	; 7
    8b20:	81 8f       	std	Z+25, r24	; 0x19
    8b22:	12 8e       	std	Z+26, r1	; 0x1a
    8b24:	13 87       	std	Z+11, r17	; 0x0b
    8b26:	02 87       	std	Z+10, r16	; 0x0a
    8b28:	87 e9       	ldi	r24, 0x97	; 151
    8b2a:	95 e0       	ldi	r25, 0x05	; 5
    8b2c:	0e 94 b9 42 	call	0x8572	; 0x8572 <as::StateButton<(unsigned char)1, (unsigned char)0, (unsigned char)2, as::NoDoublePressAlarm>::StateButton()>
    8b30:	e7 e9       	ldi	r30, 0x97	; 151
    8b32:	f5 e0       	ldi	r31, 0x05	; 5
    8b34:	f1 82       	std	Z+1, r15	; 0x01
    8b36:	e0 82       	st	Z, r14
    8b38:	d0 8f       	std	Z+24, r29	; 0x18
    8b3a:	c7 8b       	std	Z+23, r28	; 0x17
    8b3c:	71 8e       	std	Z+25, r7	; 0x19
    8b3e:	12 8e       	std	Z+26, r1	; 0x1a
    8b40:	13 87       	std	Z+11, r17	; 0x0b
    8b42:	02 87       	std	Z+10, r16	; 0x0a
    8b44:	df 91       	pop	r29
    8b46:	cf 91       	pop	r28
    8b48:	1f 91       	pop	r17
    8b4a:	0f 91       	pop	r16
    8b4c:	ff 90       	pop	r15
    8b4e:	ef 90       	pop	r14
    8b50:	df 90       	pop	r13
    8b52:	cf 90       	pop	r12
    8b54:	bf 90       	pop	r11
    8b56:	af 90       	pop	r10
    8b58:	9f 90       	pop	r9
    8b5a:	8f 90       	pop	r8
    8b5c:	7f 90       	pop	r7
    8b5e:	6f 90       	pop	r6
    8b60:	08 95       	ret

00008b62 <main>:
main():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
    8b62:	cf 93       	push	r28
    8b64:	df 93       	push	r29
    8b66:	cd b7       	in	r28, 0x3d	; 61
    8b68:	de b7       	in	r29, 0x3e	; 62
    8b6a:	62 97       	sbiw	r28, 0x12	; 18
    8b6c:	0f b6       	in	r0, 0x3f	; 63
    8b6e:	f8 94       	cli
    8b70:	de bf       	out	0x3e, r29	; 62
    8b72:	0f be       	out	0x3f, r0	; 63
    8b74:	cd bf       	out	0x3d, r28	; 61
init():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    8b76:	78 94       	sei
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    8b78:	84 b5       	in	r24, 0x24	; 36
    8b7a:	83 60       	ori	r24, 0x03	; 3
    8b7c:	84 bd       	out	0x24, r24	; 36
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    8b7e:	85 b5       	in	r24, 0x25	; 37
    8b80:	83 60       	ori	r24, 0x03	; 3
    8b82:	85 bd       	out	0x25, r24	; 37
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    8b84:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    8b88:	81 60       	ori	r24, 0x01	; 1
    8b8a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    8b8e:	92 e0       	ldi	r25, 0x02	; 2
    8b90:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    8b94:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    8b98:	81 60       	ori	r24, 0x01	; 1
    8b9a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    8b9e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    8ba2:	81 60       	ori	r24, 0x01	; 1
    8ba4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    8ba8:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    8bac:	84 60       	ori	r24, 0x04	; 4
    8bae:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    8bb2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    8bb6:	81 60       	ori	r24, 0x01	; 1
    8bb8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    8bbc:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    8bc0:	83 60       	ori	r24, 0x03	; 3
    8bc2:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    8bc6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    8bca:	81 60       	ori	r24, 0x01	; 1
    8bcc:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    8bd0:	86 e8       	ldi	r24, 0x86	; 134
    8bd2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    8bd6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
begin():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    8bda:	e0 91 e9 04 	lds	r30, 0x04E9	; 0x8004e9 <Serial+0x10>
    8bde:	f0 91 ea 04 	lds	r31, 0x04EA	; 0x8004ea <Serial+0x11>
    8be2:	90 83       	st	Z, r25
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    8be4:	e0 91 e5 04 	lds	r30, 0x04E5	; 0x8004e5 <Serial+0xc>
    8be8:	f0 91 e6 04 	lds	r31, 0x04E6	; 0x8004e6 <Serial+0xd>
    8bec:	10 82       	st	Z, r1
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    8bee:	e0 91 e7 04 	lds	r30, 0x04E7	; 0x8004e7 <Serial+0xe>
    8bf2:	f0 91 e8 04 	lds	r31, 0x04E8	; 0x8004e8 <Serial+0xf>
    8bf6:	80 e1       	ldi	r24, 0x10	; 16
    8bf8:	80 83       	st	Z, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    8bfa:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <Serial+0x18>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    8bfe:	e0 91 ed 04 	lds	r30, 0x04ED	; 0x8004ed <Serial+0x14>
    8c02:	f0 91 ee 04 	lds	r31, 0x04EE	; 0x8004ee <Serial+0x15>
    8c06:	86 e0       	ldi	r24, 0x06	; 6
    8c08:	80 83       	st	Z, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    8c0a:	e0 91 eb 04 	lds	r30, 0x04EB	; 0x8004eb <Serial+0x12>
    8c0e:	f0 91 ec 04 	lds	r31, 0x04EC	; 0x8004ec <Serial+0x13>
    8c12:	80 81       	ld	r24, Z
    8c14:	88 69       	ori	r24, 0x98	; 152
    8c16:	80 83       	st	Z, r24
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    8c18:	e0 91 eb 04 	lds	r30, 0x04EB	; 0x8004eb <Serial+0x12>
    8c1c:	f0 91 ec 04 	lds	r31, 0x04EC	; 0x8004ec <Serial+0x13>
    8c20:	80 81       	ld	r24, Z
    8c22:	8f 7d       	andi	r24, 0xDF	; 223
    8c24:	80 83       	st	Z, r24
setup():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:837
    sdev.swChannel4().peer(Peer(devid, 8));
  }
}

void setup () {
  DINIT(57600, ASKSIN_PLUS_PLUS_IDENTIFIER);
    8c26:	88 e2       	ldi	r24, 0x28	; 40
    8c28:	97 e0       	ldi	r25, 0x07	; 7
    8c2a:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <void DPRINTLN<__FlashStringHelper const*>(__FlashStringHelper const*)>
layoutChannels():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:50
      devchannels[num-1] = &ch;
    }
  }

  void layoutChannels () {
    uint16_t addr = list0.address() + list0.size();
    8c2e:	e0 90 4a 06 	lds	r14, 0x064A	; 0x80064a <sdev+0x2e>
    8c32:	f0 90 4b 06 	lds	r15, 0x064B	; 0x80064b <sdev+0x2f>
    8c36:	88 e0       	ldi	r24, 0x08	; 8
    8c38:	e8 0e       	add	r14, r24
    8c3a:	f1 1c       	adc	r15, r1
main():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:51
    for( uint8_t i=0; i<this->channels(); ++i ) {
    8c3c:	d1 2c       	mov	r13, r1
layoutChannels():
    8c3e:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <sdev+0x2d>
    8c42:	d8 16       	cp	r13, r24
    8c44:	10 f5       	brcc	.+68     	; 0x8c8a <main+0x128>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:52
      devchannels[i]->setup(this,i+1,addr);
    8c46:	0d 2d       	mov	r16, r13
    8c48:	10 e0       	ldi	r17, 0x00	; 0
    8c4a:	00 0f       	add	r16, r16
    8c4c:	11 1f       	adc	r17, r17
    8c4e:	04 5b       	subi	r16, 0xB4	; 180
    8c50:	19 4f       	sbci	r17, 0xF9	; 249
    8c52:	d8 01       	movw	r26, r16
    8c54:	8d 91       	ld	r24, X+
    8c56:	9c 91       	ld	r25, X
    8c58:	d3 94       	inc	r13
    8c5a:	dc 01       	movw	r26, r24
    8c5c:	ed 91       	ld	r30, X+
    8c5e:	fc 91       	ld	r31, X
    8c60:	04 80       	ldd	r0, Z+4	; 0x04
    8c62:	f5 81       	ldd	r31, Z+5	; 0x05
    8c64:	e0 2d       	mov	r30, r0
    8c66:	97 01       	movw	r18, r14
    8c68:	4d 2d       	mov	r20, r13
    8c6a:	6c e1       	ldi	r22, 0x1C	; 28
    8c6c:	76 e0       	ldi	r23, 0x06	; 6
    8c6e:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:53
      addr += devchannels[i]->size();
    8c70:	f8 01       	movw	r30, r16
    8c72:	80 81       	ld	r24, Z
    8c74:	91 81       	ldd	r25, Z+1	; 0x01
    8c76:	dc 01       	movw	r26, r24
    8c78:	ed 91       	ld	r30, X+
    8c7a:	fc 91       	ld	r31, X
    8c7c:	06 80       	ldd	r0, Z+6	; 0x06
    8c7e:	f7 81       	ldd	r31, Z+7	; 0x07
    8c80:	e0 2d       	mov	r30, r0
    8c82:	09 95       	icall
    8c84:	e8 0e       	add	r14, r24
    8c86:	f9 1e       	adc	r15, r25
    8c88:	da cf       	rjmp	.-76     	; 0x8c3e <main+0xdc>
dumpSize():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:66
  uint8_t channels () const {
    return DeviceType::channels();
  }

  void dumpSize () {
    DPRINT(F("Address Space: "));DDEC(this->keystore().address());DPRINT(F(" - "));DDECLN(getUserStorage().getAddress());
    8c8a:	81 ef       	ldi	r24, 0xF1	; 241
    8c8c:	96 e0       	ldi	r25, 0x06	; 6
    8c8e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
DDEC():
    DSERIAL.print(b,HEX);
  }

  template<typename TYPE>
  inline void DDEC(TYPE b) {
    DSERIAL.print(b,DEC);
    8c92:	60 91 44 06 	lds	r22, 0x0644	; 0x800644 <sdev+0x28>
    8c96:	70 91 45 06 	lds	r23, 0x0645	; 0x800645 <sdev+0x29>
    8c9a:	89 ed       	ldi	r24, 0xD9	; 217
    8c9c:	94 e0       	ldi	r25, 0x04	; 4
    8c9e:	0e 94 ce 22 	call	0x459c	; 0x459c <Print::print(unsigned int, int) [clone .constprop.104]>
dumpSize():
    8ca2:	8d ee       	ldi	r24, 0xED	; 237
    8ca4:	96 e0       	ldi	r25, 0x06	; 6
    8ca6:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    8caa:	0e 94 b1 05 	call	0xb62	; 0xb62 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::getUserStorage() [clone .constprop.76]>
    8cae:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <void DDECLN<unsigned int>(unsigned int)>
checksum():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:79

  uint16_t checksum () {
    uint16_t crc = 0;
#ifndef NOCRC
    // size of keystore data
    crc = HalType::crc16(crc,DeviceType::keystore().size());
    8cb2:	60 e0       	ldi	r22, 0x00	; 0
    8cb4:	90 e0       	ldi	r25, 0x00	; 0
    8cb6:	80 e0       	ldi	r24, 0x00	; 0
    8cb8:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <as::AskSinBase::crc16(unsigned int, unsigned char)>
    8cbc:	8c 01       	movw	r16, r24
    8cbe:	b5 ee       	ldi	r27, 0xE5	; 229
    8cc0:	eb 2e       	mov	r14, r27
    8cc2:	b6 e0       	ldi	r27, 0x06	; 6
    8cc4:	fb 2e       	mov	r15, r27
_ZN2as14AskSinRegister11getRegisterEhPKhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:185
  }
  return 0xff;
  }
  static uint8_t getRegister(uint8_t offset,const uint8_t* reglist,uint8_t size) {
    if (offset < size) {
      return pgm_read_byte(reglist + offset);
    8cc6:	f7 01       	movw	r30, r14
    8cc8:	64 91       	lpm	r22, Z
checksum():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:82
    // add register of list0
    for( uint8_t i=0; i<list0.size(); ++i ) {
      crc = HalType::crc16(crc,list0.getRegister(i));
    8cca:	c8 01       	movw	r24, r16
    8ccc:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <as::AskSinBase::crc16(unsigned int, unsigned char)>
    8cd0:	8c 01       	movw	r16, r24
    8cd2:	ff ef       	ldi	r31, 0xFF	; 255
    8cd4:	ef 1a       	sub	r14, r31
    8cd6:	ff 0a       	sbc	r15, r31
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:81
    uint16_t crc = 0;
#ifndef NOCRC
    // size of keystore data
    crc = HalType::crc16(crc,DeviceType::keystore().size());
    // add register of list0
    for( uint8_t i=0; i<list0.size(); ++i ) {
    8cd8:	8d ee       	ldi	r24, 0xED	; 237
    8cda:	e8 16       	cp	r14, r24
    8cdc:	86 e0       	ldi	r24, 0x06	; 6
    8cde:	f8 06       	cpc	r15, r24
    8ce0:	91 f7       	brne	.-28     	; 0x8cc6 <main+0x164>
main():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:85
      crc = HalType::crc16(crc,list0.getRegister(i));
    }
    // add number of channels
    for( uint8_t c=1; c<=this->channels(); ++c ) {
    8ce2:	dd 24       	eor	r13, r13
    8ce4:	d3 94       	inc	r13
checksum():
    8ce6:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <sdev+0x2d>
    8cea:	8d 15       	cp	r24, r13
    8cec:	08 f4       	brcc	.+2      	; 0x8cf0 <main+0x18e>
    8cee:	82 c0       	rjmp	.+260    	; 0x8df4 <main+0x292>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7channelEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:182
    this->led().set(LedStates::pairing);
    this->activity().stayAwake( seconds2ticks(20) ); // 20 seconds
  }

  ChannelType& channel(uint8_t ch) {
    return *devchannels[ch-1];
    8cf0:	ed 2d       	mov	r30, r13
    8cf2:	f0 e0       	ldi	r31, 0x00	; 0
    8cf4:	ee 0f       	add	r30, r30
    8cf6:	ff 1f       	adc	r31, r31
    8cf8:	e6 5b       	subi	r30, 0xB6	; 182
    8cfa:	f9 4f       	sbci	r31, 0xF9	; 249
    8cfc:	e0 80       	ld	r14, Z
    8cfe:	f1 80       	ldd	r15, Z+1	; 0x01
checksum():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:88
    }
    // add number of channels
    for( uint8_t c=1; c<=this->channels(); ++c ) {
      ChannelType& ch = channel(c);
      // add register list 1
      GenericList l = ch.getList1();
    8d00:	d7 01       	movw	r26, r14
    8d02:	ed 91       	ld	r30, X+
    8d04:	fc 91       	ld	r31, X
    8d06:	06 a8       	ldd	r0, Z+54	; 0x36
    8d08:	f7 a9       	ldd	r31, Z+55	; 0x37
    8d0a:	e0 2d       	mov	r30, r0
    8d0c:	c7 01       	movw	r24, r14
    8d0e:	09 95       	icall
    8d10:	b4 2e       	mov	r11, r20
    8d12:	29 83       	std	Y+1, r18	; 0x01
    8d14:	3a 83       	std	Y+2, r19	; 0x02
    8d16:	4b 83       	std	Y+3, r20	; 0x03
    8d18:	5c 83       	std	Y+4, r21	; 0x04
    8d1a:	6d 83       	std	Y+5, r22	; 0x05
    8d1c:	7e 83       	std	Y+6, r23	; 0x06
    8d1e:	8f 83       	std	Y+7, r24	; 0x07
    8d20:	8c 80       	ldd	r8, Y+4	; 0x04
    8d22:	9d 80       	ldd	r9, Y+5	; 0x05
main():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:89
      for( uint8_t i=0; i<l.getSize(); ++i ) {
    8d24:	c1 2c       	mov	r12, r1
checksum():
    8d26:	bc 14       	cp	r11, r12
    8d28:	51 f0       	breq	.+20     	; 0x8d3e <main+0x1dc>
_ZNK2as11GenericList9getOffsetEh.isra.54():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:81
public:
  GenericList () : BaseList(0), size(0), getregister(0), getoffset(0) {}
  GenericList (uint16_t a,uint8_t s,uint8_t (*getreg) (uint8_t off), uint8_t (*getoff) (uint8_t reg)) : BaseList(a), size(s), getregister(getreg), getoffset(getoff) {}

  uint8_t getOffset (uint8_t reg) const {
    return getoffset(reg);
    8d2a:	8c 2d       	mov	r24, r12
    8d2c:	f4 01       	movw	r30, r8
    8d2e:	09 95       	icall
checksum():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:90
        crc = HalType::crc16(crc,l.getRegister(i));
    8d30:	68 2f       	mov	r22, r24
    8d32:	c8 01       	movw	r24, r16
    8d34:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <as::AskSinBase::crc16(unsigned int, unsigned char)>
    8d38:	8c 01       	movw	r16, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:89
    // add number of channels
    for( uint8_t c=1; c<=this->channels(); ++c ) {
      ChannelType& ch = channel(c);
      // add register list 1
      GenericList l = ch.getList1();
      for( uint8_t i=0; i<l.getSize(); ++i ) {
    8d3a:	c3 94       	inc	r12
    8d3c:	f4 cf       	rjmp	.-24     	; 0x8d26 <main+0x1c4>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:93
        crc = HalType::crc16(crc,l.getRegister(i));
      }
      // add register list 3
      l = ch.getList3((uint8_t)0);
    8d3e:	d7 01       	movw	r26, r14
    8d40:	ed 91       	ld	r30, X+
    8d42:	fc 91       	ld	r31, X
    8d44:	02 ac       	ldd	r0, Z+58	; 0x3a
    8d46:	f3 ad       	ldd	r31, Z+59	; 0x3b
    8d48:	e0 2d       	mov	r30, r0
_ZN2as4HMIDC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:18

class HMID {
  uint8_t id[3];
public:
  HMID () {
    id[0]=id[1]=id[2]=0;
    8d4a:	1e 86       	std	Y+14, r1	; 0x0e
    8d4c:	1d 86       	std	Y+13, r1	; 0x0d
    8d4e:	1c 86       	std	Y+12, r1	; 0x0c
_ZN2as4PeerC2Eh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Peer.h:21
  Peer (uint8_t i1, uint8_t i2, uint8_t i3, uint8_t ch) : HMID(i1,i2,i3), chan(ch) {}
  Peer (uint8_t* ptr) : HMID(*ptr,*(ptr+1),*(ptr+2)), chan(*(ptr+4)) {}
  Peer (uint8_t ch) : chan(ch) {}
    8d50:	1f 86       	std	Y+15, r1	; 0x0f
checksum():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:93
    8d52:	be 01       	movw	r22, r28
    8d54:	64 5f       	subi	r22, 0xF4	; 244
    8d56:	7f 4f       	sbci	r23, 0xFF	; 255
    8d58:	c7 01       	movw	r24, r14
    8d5a:	09 95       	icall
    8d5c:	b4 2e       	mov	r11, r20
    8d5e:	29 83       	std	Y+1, r18	; 0x01
    8d60:	3a 83       	std	Y+2, r19	; 0x02
    8d62:	4b 83       	std	Y+3, r20	; 0x03
    8d64:	5c 83       	std	Y+4, r21	; 0x04
    8d66:	6d 83       	std	Y+5, r22	; 0x05
    8d68:	7e 83       	std	Y+6, r23	; 0x06
    8d6a:	8f 83       	std	Y+7, r24	; 0x07
    8d6c:	8c 80       	ldd	r8, Y+4	; 0x04
    8d6e:	9d 80       	ldd	r9, Y+5	; 0x05
main():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:94
      for( uint8_t i=0; i<l.getSize(); ++i ) {
    8d70:	c1 2c       	mov	r12, r1
checksum():
    8d72:	cb 14       	cp	r12, r11
    8d74:	51 f0       	breq	.+20     	; 0x8d8a <main+0x228>
_ZNK2as11GenericList9getOffsetEh.isra.54():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:81
    8d76:	8c 2d       	mov	r24, r12
    8d78:	f4 01       	movw	r30, r8
    8d7a:	09 95       	icall
checksum():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:95
        crc = HalType::crc16(crc,l.getRegister(i));
    8d7c:	68 2f       	mov	r22, r24
    8d7e:	c8 01       	movw	r24, r16
    8d80:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <as::AskSinBase::crc16(unsigned int, unsigned char)>
    8d84:	8c 01       	movw	r16, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:94
      for( uint8_t i=0; i<l.getSize(); ++i ) {
        crc = HalType::crc16(crc,l.getRegister(i));
      }
      // add register list 3
      l = ch.getList3((uint8_t)0);
      for( uint8_t i=0; i<l.getSize(); ++i ) {
    8d86:	c3 94       	inc	r12
    8d88:	f4 cf       	rjmp	.-24     	; 0x8d72 <main+0x210>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:98
        crc = HalType::crc16(crc,l.getRegister(i));
      }
      // add register list 4
      l = ch.getList4((uint8_t)0);
    8d8a:	d7 01       	movw	r26, r14
    8d8c:	ed 91       	ld	r30, X+
    8d8e:	fc 91       	ld	r31, X
    8d90:	04 ac       	ldd	r0, Z+60	; 0x3c
    8d92:	f5 ad       	ldd	r31, Z+61	; 0x3d
    8d94:	e0 2d       	mov	r30, r0
_ZN2as4HMIDC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:18
    8d96:	1e 86       	std	Y+14, r1	; 0x0e
    8d98:	1d 86       	std	Y+13, r1	; 0x0d
    8d9a:	1c 86       	std	Y+12, r1	; 0x0c
_ZN2as4PeerC2Eh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Peer.h:21
    8d9c:	1f 86       	std	Y+15, r1	; 0x0f
checksum():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:98
    8d9e:	be 01       	movw	r22, r28
    8da0:	64 5f       	subi	r22, 0xF4	; 244
    8da2:	7f 4f       	sbci	r23, 0xFF	; 255
    8da4:	c7 01       	movw	r24, r14
    8da6:	09 95       	icall
    8da8:	b4 2e       	mov	r11, r20
    8daa:	29 83       	std	Y+1, r18	; 0x01
    8dac:	3a 83       	std	Y+2, r19	; 0x02
    8dae:	4b 83       	std	Y+3, r20	; 0x03
    8db0:	5c 83       	std	Y+4, r21	; 0x04
    8db2:	6d 83       	std	Y+5, r22	; 0x05
    8db4:	7e 83       	std	Y+6, r23	; 0x06
    8db6:	8f 83       	std	Y+7, r24	; 0x07
    8db8:	8c 80       	ldd	r8, Y+4	; 0x04
    8dba:	9d 80       	ldd	r9, Y+5	; 0x05
main():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:99
      for( uint8_t i=0; i<l.getSize(); ++i ) {
    8dbc:	c1 2c       	mov	r12, r1
checksum():
    8dbe:	cb 14       	cp	r12, r11
    8dc0:	51 f0       	breq	.+20     	; 0x8dd6 <main+0x274>
_ZNK2as11GenericList9getOffsetEh.isra.54():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:81
    8dc2:	8c 2d       	mov	r24, r12
    8dc4:	f4 01       	movw	r30, r8
    8dc6:	09 95       	icall
checksum():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:100
        crc = HalType::crc16(crc,l.getRegister(i));
    8dc8:	68 2f       	mov	r22, r24
    8dca:	c8 01       	movw	r24, r16
    8dcc:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <as::AskSinBase::crc16(unsigned int, unsigned char)>
    8dd0:	8c 01       	movw	r16, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:99
      for( uint8_t i=0; i<l.getSize(); ++i ) {
        crc = HalType::crc16(crc,l.getRegister(i));
      }
      // add register list 4
      l = ch.getList4((uint8_t)0);
      for( uint8_t i=0; i<l.getSize(); ++i ) {
    8dd2:	c3 94       	inc	r12
    8dd4:	f4 cf       	rjmp	.-24     	; 0x8dbe <main+0x25c>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:103
        crc = HalType::crc16(crc,l.getRegister(i));
      }
      // add number of peers
      crc = HalType::crc16(crc,ch.peers());
    8dd6:	d7 01       	movw	r26, r14
    8dd8:	ed 91       	ld	r30, X+
    8dda:	fc 91       	ld	r31, X
    8ddc:	04 84       	ldd	r0, Z+12	; 0x0c
    8dde:	f5 85       	ldd	r31, Z+13	; 0x0d
    8de0:	e0 2d       	mov	r30, r0
    8de2:	c7 01       	movw	r24, r14
    8de4:	09 95       	icall
    8de6:	68 2f       	mov	r22, r24
    8de8:	c8 01       	movw	r24, r16
    8dea:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <as::AskSinBase::crc16(unsigned int, unsigned char)>
    8dee:	8c 01       	movw	r16, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:85
    // add register of list0
    for( uint8_t i=0; i<list0.size(); ++i ) {
      crc = HalType::crc16(crc,list0.getRegister(i));
    }
    // add number of channels
    for( uint8_t c=1; c<=this->channels(); ++c ) {
    8df0:	d3 94       	inc	r13
    8df2:	79 cf       	rjmp	.-270    	; 0x8ce6 <main+0x184>
_ZN2as13InternalEprom7getDataEjPhj():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:220
    eeprom_write_block(buf,(void*)(uintptr_t)addr,size);
    return true;
  }

  bool getData (uint16_t addr,uint8_t* buf,uint16_t size) {
    eeprom_read_block(buf,(const void*)(uintptr_t)addr,size);
    8df4:	44 e0       	ldi	r20, 0x04	; 4
    8df6:	50 e0       	ldi	r21, 0x00	; 0
    8df8:	70 e0       	ldi	r23, 0x00	; 0
    8dfa:	60 e0       	ldi	r22, 0x00	; 0
    8dfc:	ce 01       	movw	r24, r28
    8dfe:	0c 96       	adiw	r24, 0x0c	; 12
    8e00:	0e 94 ce 4e 	call	0x9d9c	; 0x9d9c <eeprom_read_block>
_ZN2as14StorageWrapperINS_13InternalEpromEE5setupEj.isra.112():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:478

  bool setup (uint16_t checksum=0) {
    bool firststart = false;
    uint32_t mem;
    DRIVER::getData(0x0,(uint8_t*)&mem,4);
    uint32_t magic = 0xCAFE0000 | checksum;
    8e04:	30 e0       	ldi	r19, 0x00	; 0
    8e06:	20 e0       	ldi	r18, 0x00	; 0
    8e08:	2e 6f       	ori	r18, 0xFE	; 254
    8e0a:	3a 6c       	ori	r19, 0xCA	; 202
    8e0c:	09 83       	std	Y+1, r16	; 0x01
    8e0e:	1a 83       	std	Y+2, r17	; 0x02
    8e10:	2b 83       	std	Y+3, r18	; 0x03
    8e12:	3c 83       	std	Y+4, r19	; 0x04
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:479
    if(magic != mem) {
    8e14:	6c 85       	ldd	r22, Y+12	; 0x0c
    8e16:	7d 85       	ldd	r23, Y+13	; 0x0d
    8e18:	8e 85       	ldd	r24, Y+14	; 0x0e
    8e1a:	9f 85       	ldd	r25, Y+15	; 0x0f
    8e1c:	06 17       	cp	r16, r22
    8e1e:	17 07       	cpc	r17, r23
    8e20:	28 07       	cpc	r18, r24
    8e22:	39 07       	cpc	r19, r25
    8e24:	09 f0       	breq	.+2      	; 0x8e28 <main+0x2c6>
    8e26:	35 c1       	rjmp	.+618    	; 0x9092 <main+0x530>
main():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:475

public:
  StorageWrapper () {}

  bool setup (uint16_t checksum=0) {
    bool firststart = false;
    8e28:	10 e0       	ldi	r17, 0x00	; 0
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E6setHalERSD_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:241
    lastmsg = m.count();
    return false;
  }

  void setHal (HalType& h) {
    hal = &h;
    8e2a:	8e ea       	ldi	r24, 0xAE	; 174
    8e2c:	97 e0       	ldi	r25, 0x07	; 7
    8e2e:	90 93 1f 06 	sts	0x061F, r25	; 0x80061f <sdev+0x3>
    8e32:	80 93 1e 06 	sts	0x061E, r24	; 0x80061e <sdev+0x2>
_ZN2as4HMIDC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:18
    8e36:	1b 82       	std	Y+3, r1	; 0x03
    8e38:	1a 82       	std	Y+2, r1	; 0x02
    8e3a:	19 82       	std	Y+1, r1	; 0x01
init():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:125
      storage().store();
    }
    this->keystore().init();
    this->setHal(hal);
    HMID id;
    this->getDeviceID(id);
    8e3c:	be 01       	movw	r22, r28
    8e3e:	6f 5f       	subi	r22, 0xFF	; 255
    8e40:	7f 4f       	sbci	r23, 0xFF	; 255
    8e42:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <sdev+0x2a>
    8e46:	90 91 47 06 	lds	r25, 0x0647	; 0x800647 <sdev+0x2b>
    8e4a:	0e 94 d5 12 	call	0x25aa	; 0x25aa <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::getDeviceID(as::HMID&) [clone .isra.97]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:56
    async(true);
  }
  virtual ~Led() {}

  void init (uint8_t p) {
    pin = p;
    8e4e:	10 92 c2 07 	sts	0x07C2, r1	; 0x8007c2 <hal+0x14>
setOutput():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Pins.h:20
    8e52:	61 e0       	ldi	r22, 0x01	; 1
    8e54:	80 e0       	ldi	r24, 0x00	; 0
    8e56:	0e 94 de 07 	call	0xfbc	; 0xfbc <pinMode>
init():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:58
    PINTYPE::setOutput(pin);
    ledOff();
    8e5a:	80 eb       	ldi	r24, 0xB0	; 176
    8e5c:	97 e0       	ldi	r25, 0x07	; 7
    8e5e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <as::Led<as::ArduinoPins>::ledOff()>
detachInterrupt():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WInterrupts.c:379
          break;
        case 1:
          EIMSK &= ~(1 << INT1);
          break;
        case 2:
          EIMSK &= ~(1 << INT2);
    8e62:	ea 98       	cbi	0x1d, 2	; 29
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WInterrupts.c:414
          EIMSK &= ~(1 << INT0);
          break;

      #endif
    }
    intFunc[interruptNum] = nothing;
    8e64:	84 ed       	ldi	r24, 0xD4	; 212
    8e66:	95 e0       	ldi	r25, 0x05	; 5
    8e68:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
    8e6c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
init():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:888

  bool init () {
    // ensure ISR if off before we start to init CC1101
    // OTA boot loader may leave it on
    disable();
    __gb_radio = this;
    8e70:	8e ec       	ldi	r24, 0xCE	; 206
    8e72:	97 e0       	ldi	r25, 0x07	; 7
    8e74:	90 93 37 04 	sts	0x0437, r25	; 0x800437 <as::__gb_radio+0x1>
    8e78:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <as::__gb_radio>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:889
    DPRINT(F("CC init"));
    8e7c:	8b ec       	ldi	r24, 0xCB	; 203
    8e7e:	96 e0       	ldi	r25, 0x06	; 6
    8e80:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:890
    pinMode(GDO0,INPUT);
    8e84:	60 e0       	ldi	r22, 0x00	; 0
    8e86:	82 e0       	ldi	r24, 0x02	; 2
    8e88:	0e 94 de 07 	call	0xfbc	; 0xfbc <pinMode>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:892

    DPRINTLN(F("1"));
    8e8c:	89 ec       	ldi	r24, 0xC9	; 201
    8e8e:	96 e0       	ldi	r25, 0x06	; 6
    8e90:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <void DPRINTLN<__FlashStringHelper const*>(__FlashStringHelper const*)>
_ZN2as6LibSPIILh4ELm2000000ELh1ELh0EE4initEv.isra.132():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:287
#if defined ARDUINO_ARCH_STM32 && defined STM32L1xx
    SPI.setMOSI(PIN_SPI_MOSI);
    SPI.setMISO(PIN_SPI_MISO);
    SPI.setSCLK(PIN_SPI_SCK);
#endif
    pinMode(CS, OUTPUT);
    8e94:	61 e0       	ldi	r22, 0x01	; 1
    8e96:	84 e0       	ldi	r24, 0x04	; 4
    8e98:	0e 94 de 07 	call	0xfbc	; 0xfbc <pinMode>
begin():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\SPI\src/SPI.cpp:28
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
  uint8_t sreg = SREG;
    8e9c:	0f b7       	in	r16, 0x3f	; 63
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\SPI\src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    8e9e:	f8 94       	cli
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\SPI\src/SPI.cpp:30
  if (!initialized) {
    8ea0:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <SPIClass::initialized>
    8ea4:	81 11       	cpse	r24, r1
    8ea6:	27 c0       	rjmp	.+78     	; 0x8ef6 <main+0x394>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\SPI\src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    8ea8:	ed ee       	ldi	r30, 0xED	; 237
    8eaa:	f7 e0       	ldi	r31, 0x07	; 7
    8eac:	84 91       	lpm	r24, Z
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\SPI\src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
    8eae:	ed e0       	ldi	r30, 0x0D	; 13
    8eb0:	f8 e0       	ldi	r31, 0x08	; 8
    8eb2:	94 91       	lpm	r25, Z
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\SPI\src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
    8eb4:	e8 2f       	mov	r30, r24
    8eb6:	f0 e0       	ldi	r31, 0x00	; 0
    8eb8:	ee 0f       	add	r30, r30
    8eba:	ff 1f       	adc	r31, r31
    8ebc:	eb 58       	subi	r30, 0x8B	; 139
    8ebe:	f9 4f       	sbci	r31, 0xF9	; 249
    8ec0:	a5 91       	lpm	r26, Z+
    8ec2:	b4 91       	lpm	r27, Z
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\SPI\src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    8ec4:	ec 91       	ld	r30, X
    8ec6:	e9 23       	and	r30, r25
    8ec8:	21 f4       	brne	.+8      	; 0x8ed2 <main+0x370>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\SPI\src/SPI.cpp:39
      digitalWrite(SS, HIGH);
    8eca:	61 e0       	ldi	r22, 0x01	; 1
    8ecc:	84 e0       	ldi	r24, 0x04	; 4
    8ece:	0e 94 7e 07 	call	0xefc	; 0xefc <digitalWrite>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\SPI\src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    8ed2:	61 e0       	ldi	r22, 0x01	; 1
    8ed4:	84 e0       	ldi	r24, 0x04	; 4
    8ed6:	0e 94 de 07 	call	0xfbc	; 0xfbc <pinMode>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\SPI\src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    8eda:	8c b5       	in	r24, 0x2c	; 44
    8edc:	80 61       	ori	r24, 0x10	; 16
    8ede:	8c bd       	out	0x2c, r24	; 44
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\SPI\src/SPI.cpp:51
    SPCR |= _BV(SPE);
    8ee0:	8c b5       	in	r24, 0x2c	; 44
    8ee2:	80 64       	ori	r24, 0x40	; 64
    8ee4:	8c bd       	out	0x2c, r24	; 44
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\SPI\src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    8ee6:	61 e0       	ldi	r22, 0x01	; 1
    8ee8:	87 e0       	ldi	r24, 0x07	; 7
    8eea:	0e 94 de 07 	call	0xfbc	; 0xfbc <pinMode>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\SPI\src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
    8eee:	61 e0       	ldi	r22, 0x01	; 1
    8ef0:	85 e0       	ldi	r24, 0x05	; 5
    8ef2:	0e 94 de 07 	call	0xfbc	; 0xfbc <pinMode>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\SPI\src/SPI.cpp:62
  }
  initialized++; // reference count
    8ef6:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <SPIClass::initialized>
    8efa:	8f 5f       	subi	r24, 0xFF	; 255
    8efc:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <SPIClass::initialized>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\SPI\src/SPI.cpp:63
  SREG = sreg;
    8f00:	0f bf       	out	0x3f, r16	; 63
_ZN2as6CC1101INS_6LibSPIILh4ELm2000000ELh1ELh0EEELh255EE5resetEv.isra.150():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:475
  }
  
  uint8_t reset() {

    // Strobe CSn low / high
    spi.select();
    8f02:	0e 94 15 0a 	call	0x142a	; 0x142a <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::select() [clone .isra.133]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:481

    // Automatic POR
    // If the chip has had sufficient time for the crystal oscillator to stabilize after the power-on-reset the SO pin
    // will go low immediately after taking CSn low. If CSn is taken low before reset is completed the
    // SO pin will first go high, indicating that the crystal oscillator is not stabilized, before going low
    spi.waitMiso();
    8f06:	0e 94 0b 0a 	call	0x1416	; 0x1416 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::waitMiso() [clone .isra.148]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:482
    spi.deselect();
    8f0a:	0e 94 11 0a 	call	0x1422	; 0x1422 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::deselect() [clone .isra.134]>
_delay_us():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay.h:276
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    8f0e:	b5 e8       	ldi	r27, 0x85	; 133
    8f10:	ba 95       	dec	r27
    8f12:	f1 f7       	brne	.-4      	; 0x8f10 <main+0x3ae>
    8f14:	00 00       	nop
_ZN2as6CC1101INS_6LibSPIILh4ELm2000000ELh1ELh0EEELh255EE5resetEv.isra.150():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:488

    // Hold CSn high for at least 40μs relative to pulling CSn low
    _delay_us(50);

    // Pull CSn low and wait for SO to go low (CHIP_RDYn).
    spi.select();
    8f16:	0e 94 15 0a 	call	0x142a	; 0x142a <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::select() [clone .isra.133]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:489
    spi.waitMiso();
    8f1a:	0e 94 0b 0a 	call	0x1416	; 0x1416 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::waitMiso() [clone .isra.148]>
_ZN2as6LibSPIILh4ELm2000000ELh1ELh0EE4sendEh.isra.149():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:330
    _delay_us(10);
#endif
  }

  uint8_t send (uint8_t data) {
    SPI.beginTransaction(SPISettings(CLOCK,BITORDER,MODE));
    8f1e:	80 e5       	ldi	r24, 0x50	; 80
    8f20:	90 e0       	ldi	r25, 0x00	; 0
    8f22:	0e 94 6c 05 	call	0xad8	; 0xad8 <SPIClass::beginTransaction(SPISettings) [clone .constprop.139]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:331
    uint8_t ret = SPI.transfer(data);
    8f26:	80 e3       	ldi	r24, 0x30	; 48
    8f28:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <SPIClass::transfer(unsigned char)>
_ZN2as6CC1101INS_6LibSPIILh4ELm2000000ELh1ELh0EEELh255EE5resetEv.isra.150():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:495

    // Issue the SRES strobe on the SI line
    uint8_t ret = spi.send(CC1101_SRES);

    // When SO goes low again, reset is complete and the chip is in the IDLE state.
    spi.waitMiso();
    8f2c:	0e 94 0b 0a 	call	0x1416	; 0x1416 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::waitMiso() [clone .isra.148]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:496
    spi.deselect();
    8f30:	0e 94 11 0a 	call	0x1422	; 0x1422 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::deselect() [clone .isra.134]>
    8f34:	55 e9       	ldi	r21, 0x95	; 149
    8f36:	e5 2e       	mov	r14, r21
    8f38:	56 e0       	ldi	r21, 0x06	; 6
    8f3a:	f5 2e       	mov	r15, r21
main():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:649
    //CC1101_TEST1,     0x31,   //  0x31
    //CC1101_TEST0,     0x0b,   //  0x0b
      CC1101_PATABLE,   0x03,   //    NA
    };

    bool initOK = true;
    8f3c:	01 e0       	ldi	r16, 0x01	; 1
init():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:651
    for (uint8_t i=0; i<sizeof(initVal); i+=2) { // write init value to TRX868
      bool initres = initReg(pgm_read_byte(&initVal[i]), pgm_read_byte(&initVal[i+1]));
    8f3e:	f7 01       	movw	r30, r14
    8f40:	31 96       	adiw	r30, 0x01	; 1
    8f42:	64 91       	lpm	r22, Z
    8f44:	f7 01       	movw	r30, r14
    8f46:	84 91       	lpm	r24, Z
    8f48:	43 e0       	ldi	r20, 0x03	; 3
    8f4a:	0e 94 93 22 	call	0x4526	; 0x4526 <as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255>::initReg(unsigned char, unsigned char, unsigned char) [clone .constprop.37]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:653
      //if any initReg fails, initOK has to be false
      if (initres == false) initOK = false;
    8f4e:	81 11       	cpse	r24, r1
    8f50:	01 c0       	rjmp	.+2      	; 0x8f54 <main+0x3f2>
main():
    8f52:	00 e0       	ldi	r16, 0x00	; 0
    8f54:	f2 e0       	ldi	r31, 0x02	; 2
    8f56:	ef 0e       	add	r14, r31
    8f58:	f1 1c       	adc	r15, r1
init():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:650
    //CC1101_TEST0,     0x0b,   //  0x0b
      CC1101_PATABLE,   0x03,   //    NA
    };

    bool initOK = true;
    for (uint8_t i=0; i<sizeof(initVal); i+=2) { // write init value to TRX868
    8f5a:	89 ec       	ldi	r24, 0xC9	; 201
    8f5c:	e8 16       	cp	r14, r24
    8f5e:	86 e0       	ldi	r24, 0x06	; 6
    8f60:	f8 06       	cpc	r15, r24
    8f62:	69 f7       	brne	.-38     	; 0x8f3e <main+0x3dc>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:666
    initReg(CC1101_FREQ1, f1);
    initReg(CC1101_FREQ0, f0);
#endif

    // Settings that ELV sets
    DPRINT(F("CC Version: ")); DHEXLN(spi.readReg(CC1101_VERSION, CC1101_STATUS));
    8f64:	88 e8       	ldi	r24, 0x88	; 136
    8f66:	96 e0       	ldi	r25, 0x06	; 6
    8f68:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    8f6c:	60 ec       	ldi	r22, 0xC0	; 192
    8f6e:	81 e3       	ldi	r24, 0x31	; 49
    8f70:	0e 94 13 12 	call	0x2426	; 0x2426 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::readReg(unsigned char, unsigned char) [clone .isra.135]>
    8f74:	0e 94 8d 22 	call	0x451a	; 0x451a <DHEXLN(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:668

    spi.strobe(CC1101_SCAL);                                // calibrate frequency synthesizer and turn it off
    8f78:	83 e3       	ldi	r24, 0x33	; 51
    8f7a:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::strobe(unsigned char) [clone .isra.136]>
_delay_ms():
c:\users\mister\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay.h:187
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    8f7e:	af ea       	ldi	r26, 0xAF	; 175
    8f80:	b3 eb       	ldi	r27, 0xB3	; 179
    8f82:	11 97       	sbiw	r26, 0x01	; 1
    8f84:	f1 f7       	brne	.-4      	; 0x8f82 <main+0x420>
    8f86:	00 c0       	rjmp	.+0      	; 0x8f88 <main+0x426>
    8f88:	00 00       	nop
init():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:672

    _delay_ms(23);

    initReg(CC1101_PATABLE, PA_MaxPower);                        // configure PATABLE
    8f8a:	43 e0       	ldi	r20, 0x03	; 3
    8f8c:	60 ec       	ldi	r22, 0xC0	; 192
    8f8e:	8e e3       	ldi	r24, 0x3E	; 62
    8f90:	0e 94 93 22 	call	0x4526	; 0x4526 <as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255>::initReg(unsigned char, unsigned char, unsigned char) [clone .constprop.37]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:674

    DPRINTLN(F(" - ready"));
    8f94:	8f e7       	ldi	r24, 0x7F	; 127
    8f96:	96 e0       	ldi	r25, 0x06	; 6
    8f98:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <void DPRINTLN<__FlashStringHelper const*>(__FlashStringHelper const*)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:895
    pinMode(GDO0,INPUT);

    DPRINTLN(F("1"));

    bool initOK = HWRADIO::init();
    if (initOK) HWRADIO::wakeup(true);
    8f9c:	00 23       	and	r16, r16
    8f9e:	39 f0       	breq	.+14     	; 0x8fae <main+0x44c>
_ZN2as6CC1101INS_6LibSPIILh4ELm2000000ELh1ELh0EEELh255EE6wakeupEb.isra.142():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:460
  void wakeup (bool flush) {
    if (PWRPIN < 0xff) {
      init();
    }

    spi.ping();
    8fa0:	0e 94 da 11 	call	0x23b4	; 0x23b4 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::ping() [clone .isra.141]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:462
    if( flush==true ) {
      flushrx();
    8fa4:	0e 94 0a 12 	call	0x2414	; 0x2414 <as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255>::flushrx() [clone .isra.137]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:469
#ifdef USE_WOR
    // ToDo: is this the right position?
    spi.writeReg(CC1101_PKTCTRL1, 0x0C);    // preamble quality estimator threshold=0
    spi.writeReg(CC1101_MCSM2, 0x07);       // RX_TIME_RSSI=0, RX_TIME_QUAL=0, RX_TIME=7
#endif
    spi.strobe(CC1101_SRX);
    8fa8:	84 e3       	ldi	r24, 0x34	; 52
    8faa:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>::strobe(unsigned char) [clone .isra.136]>
attachInterrupt():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WInterrupts.c:66

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode)
{
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS)
  {
    intFunc[interruptNum] = userFunc;
    8fae:	8d e4       	ldi	r24, 0x4D	; 77
    8fb0:	9d e0       	ldi	r25, 0x0D	; 13
    8fb2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
    8fb6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WInterrupts.c:221
        case 1:
          EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
          EIMSK |= (1 << INT1);
          break;
        case 2:
          EICRA = (EICRA & ~((1 << ISC20) | (1 << ISC21))) | (mode << ISC20);
    8fba:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    8fbe:	8f 7c       	andi	r24, 0xCF	; 207
    8fc0:	80 62       	ori	r24, 0x20	; 32
    8fc2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WInterrupts.c:222
          EIMSK |= (1 << INT2);
    8fc6:	ea 9a       	sbi	0x1d, 2	; 29
_ZN2as8SysClock4initEv.isra.13():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:127

  void init() {
  #ifdef ARDUINO_ARCH_AVR
  #define TIMER1_RESOLUTION 65536UL  // Timer1 is 16 bit
    // use Time1 on AVR
    TCCR1B = _BV(WGM13);        // set mode as phase and frequency correct pwm, stop the timer
    8fc8:	80 e1       	ldi	r24, 0x10	; 16
    8fca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:128
    TCCR1A = 0;                 // clear control register A
    8fce:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:157
    }
    else {
      clockSelectBits = _BV(CS12) | _BV(CS10);
      pwmPeriod = TIMER1_RESOLUTION - 1;
    }
    TCNT1 = 0;
    8fd2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    8fd6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:158
    ICR1 = pwmPeriod;
    8fda:	80 e4       	ldi	r24, 0x40	; 64
    8fdc:	9c e9       	ldi	r25, 0x9C	; 156
    8fde:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    8fe2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:159
    TCCR1B = _BV(WGM13) | clockSelectBits;
    8fe6:	81 e1       	ldi	r24, 0x11	; 17
    8fe8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
_ZN2as8SysClock6enableEv.isra.12():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:203

  void enable () {
  #if defined ARDUINO_AVR_ATmega32|| defined(__AVR_ATmega128__)
    TIMSK |= _BV(TOIE1);
  #elif defined(ARDUINO_ARCH_AVR)
    TIMSK1 |= _BV(TOIE1);
    8fec:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    8ff0:	81 60       	ori	r24, 0x01	; 1
    8ff2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
main():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:245
    bool ccinitOK = radio.init();
    radio.enable();
    // start the system timer
    sysclock.init();
    // signal start to user
    led.set(ccinitOK ? LedStates::welcome : LedStates::failure);
    8ff6:	68 e0       	ldi	r22, 0x08	; 8
    8ff8:	70 e0       	ldi	r23, 0x00	; 0
init():
    8ffa:	00 23       	and	r16, r16
    8ffc:	11 f0       	breq	.+4      	; 0x9002 <main+0x4a0>
main():
    8ffe:	66 e0       	ldi	r22, 0x06	; 6
    9000:	70 e0       	ldi	r23, 0x00	; 0
set():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Led.h:148

  void init () {  led1.init(LEDPIN1); }
  bool active () const { return led1.active(); }
  void ledOn (uint32_t ticks) { led1.ledOn(ticks); }
  void ledOn (uint32_t ticks,__attribute__((unused)) uint32_t tacks) { led1.ledOn(ticks); }
  void set(Mode stat) { led1.set(stat,single); }
    9002:	80 eb       	ldi	r24, 0xB0	; 176
    9004:	97 e0       	ldi	r25, 0x07	; 7
    9006:	0e 94 a6 12 	call	0x254c	; 0x254c <as::Led<as::ArduinoPins>::set(as::LedStates::Mode, as::LedStates::BlinkPattern const*) [clone .constprop.39]>
init():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:247
    // delay first send by 'random' time
    radio.setSendTimeout((id.id2()*10)+10);
    900a:	8b 81       	ldd	r24, Y+3	; 0x03
    900c:	90 e0       	ldi	r25, 0x00	; 0
    900e:	01 96       	adiw	r24, 0x01	; 1
    9010:	2a e0       	ldi	r18, 0x0A	; 10
    9012:	28 9f       	mul	r18, r24
    9014:	70 01       	movw	r14, r0
    9016:	29 9f       	mul	r18, r25
    9018:	f0 0c       	add	r15, r0
    901a:	11 24       	eor	r1, r1
setTimeout():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:841
    }

    void setTimeout (uint16_t millis=SENDDELAY) {
      if( millis > 0 ) {
        // cancel possible old timeout
        sysclock.cancel(*this);
    901c:	80 ed       	ldi	r24, 0xD0	; 208
    901e:	97 e0       	ldi	r25, 0x07	; 7
    9020:	0e 94 22 10 	call	0x2044	; 0x2044 <as::AlarmClock::cancel(as::Alarm&) [clone .constprop.143]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:843
        // set to 100ms
        set(millis2ticks(millis));
    9024:	24 e6       	ldi	r18, 0x64	; 100
    9026:	30 e0       	ldi	r19, 0x00	; 0
    9028:	d7 01       	movw	r26, r14
    902a:	0e 94 22 51 	call	0xa244	; 0xa244 <__usmulhisi3>
    902e:	28 ee       	ldi	r18, 0xE8	; 232
    9030:	33 e0       	ldi	r19, 0x03	; 3
    9032:	40 e0       	ldi	r20, 0x00	; 0
    9034:	50 e0       	ldi	r21, 0x00	; 0
    9036:	0e 94 d8 50 	call	0xa1b0	; 0xa1b0 <__udivmodsi4>
_ZN2as5Alarm3setEm():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:41
  Alarm(uint32_t t,bool asynch) : flags(0), tick(t) {
    async(asynch);
  }
  void set(uint32_t t) {
    tick = t;
    903a:	20 93 d5 07 	sts	0x07D5, r18	; 0x8007d5 <hal+0x27>
    903e:	30 93 d6 07 	sts	0x07D6, r19	; 0x8007d6 <hal+0x28>
    9042:	40 93 d7 07 	sts	0x07D7, r20	; 0x8007d7 <hal+0x29>
setTimeout():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:845
        // signal new wait cycle
        wait = true;
    9046:	81 e0       	ldi	r24, 0x01	; 1
    9048:	80 93 d8 07 	sts	0x07D8, r24	; 0x8007d8 <hal+0x2a>
_ZN2as8SysClock3addERNS_5AlarmE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:221
    }
  #endif
  }

  void add(Alarm& item) {
    AlarmClock::add(item);
    904c:	60 ed       	ldi	r22, 0xD0	; 208
    904e:	77 e0       	ldi	r23, 0x07	; 7
    9050:	87 e8       	ldi	r24, 0x87	; 135
    9052:	95 e0       	ldi	r25, 0x05	; 5
    9054:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <as::AlarmClock::add(as::Alarm&)>
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E13getConfigAreaEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:249
  HalType& getHal () {
    return *hal;
  }

  StorageConfig getConfigArea () {
    return StorageConfig(kstore.address()-STORAGE_CFG_START);
    9058:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <sdev+0x28>
    905c:	4c ef       	ldi	r20, 0xFC	; 252
    905e:	c4 2e       	mov	r12, r20
    9060:	c8 0e       	add	r12, r24
valid():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:574
  void validate () {
    setByte(size-1,checksum());
  }

  bool valid () const {
    return getByte(size-1) == checksum();
    9062:	85 50       	subi	r24, 0x05	; 5
_ZNK2as13StorageConfig7getByteEh.isra.9():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:586
  uint8_t getSize () const {
    return size-1;
  }

  uint8_t getByte (uint8_t offset) const {
    return storage().getByte(STORAGE_CFG_START+offset);
    9064:	90 e0       	ldi	r25, 0x00	; 0
    9066:	04 96       	adiw	r24, 0x04	; 4
    9068:	0e 94 bd 14 	call	0x297a	; 0x297a <as::InternalEprom::getByte(unsigned int) [clone .isra.4]>
    906c:	e8 2e       	mov	r14, r24
main():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:563
public:
  StorageConfig (uint8_t s) : size(s) {}

  uint8_t checksum () const {
    uint8_t sum = 0x5e;
    for( uint8_t i=0; i<size-1; ++i ) {
    906e:	f1 2c       	mov	r15, r1
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:562
  uint8_t  size;
public:
  StorageConfig (uint8_t s) : size(s) {}

  uint8_t checksum () const {
    uint8_t sum = 0x5e;
    9070:	0e e5       	ldi	r16, 0x5E	; 94
checksum():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:563
    for( uint8_t i=0; i<size-1; ++i ) {
    9072:	ec 2d       	mov	r30, r12
    9074:	e1 50       	subi	r30, 0x01	; 1
    9076:	ff 0b       	sbc	r31, r31
    9078:	6f 01       	movw	r12, r30
    907a:	8f 2d       	mov	r24, r15
    907c:	90 e0       	ldi	r25, 0x00	; 0
    907e:	8c 15       	cp	r24, r12
    9080:	9d 05       	cpc	r25, r13
    9082:	0c f0       	brlt	.+2      	; 0x9086 <main+0x524>
    9084:	6b c0       	rjmp	.+214    	; 0x915c <main+0x5fa>
_ZNK2as13StorageConfig7getByteEh.isra.9():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:586
  uint8_t getSize () const {
    return size-1;
  }

  uint8_t getByte (uint8_t offset) const {
    return storage().getByte(STORAGE_CFG_START+offset);
    9086:	04 96       	adiw	r24, 0x04	; 4
    9088:	0e 94 bd 14 	call	0x297a	; 0x297a <as::InternalEprom::getByte(unsigned int) [clone .isra.4]>
checksum():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:564
  StorageConfig (uint8_t s) : size(s) {}

  uint8_t checksum () const {
    uint8_t sum = 0x5e;
    for( uint8_t i=0; i<size-1; ++i ) {
      sum ^= getByte(i);
    908c:	08 27       	eor	r16, r24
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:563
public:
  StorageConfig (uint8_t s) : size(s) {}

  uint8_t checksum () const {
    uint8_t sum = 0x5e;
    for( uint8_t i=0; i<size-1; ++i ) {
    908e:	f3 94       	inc	r15
    9090:	f4 cf       	rjmp	.-24     	; 0x907a <main+0x518>
DHEXLN():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:111
      DHEX(*b); DPRINT(F(" "));
    }
  }
  inline void DHEXLN(uint8_t b) { DHEX(b); DPRINT(F("\r\n")); }
  inline void DHEXLN(uint16_t b) { DHEX(b); DPRINT(F("\r\n")); }
  inline void DHEXLN(uint32_t b) { DHEX(b); DPRINT(F("\r\n")); }
    9092:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <DHEX(unsigned long)>
    9096:	83 ed       	ldi	r24, 0xD3	; 211
    9098:	96 e0       	ldi	r25, 0x06	; 6
    909a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
_ZN2as14StorageWrapperINS_13InternalEpromEE5setupEj.isra.112():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:481
    uint32_t mem;
    DRIVER::getData(0x0,(uint8_t*)&mem,4);
    uint32_t magic = 0xCAFE0000 | checksum;
    if(magic != mem) {
      DHEXLN(mem);
      DPRINT(F("Init Storage: "));
    909e:	86 ed       	ldi	r24, 0xD6	; 214
    90a0:	96 e0       	ldi	r25, 0x06	; 6
    90a2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
DHEXLN():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:111
    90a6:	69 81       	ldd	r22, Y+1	; 0x01
    90a8:	7a 81       	ldd	r23, Y+2	; 0x02
    90aa:	8b 81       	ldd	r24, Y+3	; 0x03
    90ac:	9c 81       	ldd	r25, Y+4	; 0x04
    90ae:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <DHEX(unsigned long)>
    90b2:	83 ed       	ldi	r24, 0xD3	; 211
    90b4:	96 e0       	ldi	r25, 0x06	; 6
    90b6:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
_ZN2as13InternalEprom7setDataEjPhj():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:215
    eeprom_write_block(&b,(void*)(uintptr_t)addr,1);
    return true;
  }

  bool setData (uint16_t addr,uint8_t* buf,uint16_t size) {
    eeprom_write_block(buf,(void*)(uintptr_t)addr,size);
    90ba:	44 e0       	ldi	r20, 0x04	; 4
    90bc:	50 e0       	ldi	r21, 0x00	; 0
    90be:	70 e0       	ldi	r23, 0x00	; 0
    90c0:	60 e0       	ldi	r22, 0x00	; 0
    90c2:	ce 01       	movw	r24, r28
    90c4:	01 96       	adiw	r24, 0x01	; 1
    90c6:	0e 94 de 4e 	call	0x9dbc	; 0x9dbc <eeprom_write_block>
clear():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:62
  bool getData (uint8_t offset,uint8_t* buf,uint16_t size) const {
    return storage().getData(addr + offset,buf,size);
  }

  void clear (uint8_t offset,uint16_t size) {
    storage().clearData(addr + offset,size);
    90ca:	68 e0       	ldi	r22, 0x08	; 8
    90cc:	70 e0       	ldi	r23, 0x00	; 0
    90ce:	80 91 4a 06 	lds	r24, 0x064A	; 0x80064a <sdev+0x2e>
    90d2:	90 91 4b 06 	lds	r25, 0x064B	; 0x80064b <sdev+0x2f>
    90d6:	0e 94 cb 13 	call	0x2796	; 0x2796 <as::StorageWrapper<as::InternalEprom>::clearData(unsigned int, unsigned int) [clone .isra.82]>
lowBatLimit():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:380
  bool sabotageMsg () const { return this->readRegister(DREG_SABOTAGEMSG,true); }
  bool sabotageMsg (bool value) const { return this->writeRegister(DREG_SABOTAGEMSG,value); }
  uint8_t cyclicInfoMsgDis () const { return this->readRegister(DREG_CYCLICINFOMSGDIS,0); }
  bool cyclicInfoMsgDis (uint8_t value) const { return this->writeRegister(DREG_CYCLICINFOMSGDIS,value); }
  uint8_t lowBatLimit () const { return this->readRegister(DREG_LOWBATLIMIT,0); }
  bool lowBatLimit (uint8_t value) const { return this->writeRegister(DREG_LOWBATLIMIT,value); }
    90da:	66 e1       	ldi	r22, 0x16	; 22
    90dc:	82 e1       	ldi	r24, 0x12	; 18
    90de:	0e 94 b7 13 	call	0x276e	; 0x276e <as::RegisterList<UReg0>::writeRegister(unsigned char, unsigned char) const [clone .constprop.101]>
backOnTime():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:393

  uint8_t speedMultiplier() const { return this->readRegister(DREG_SPEEDMULTIPLIER, 0); }
  bool speedMultiplier(uint8_t value) const { return this->writeRegister(DREG_SPEEDMULTIPLIER, value); }
  
  uint8_t backOnTime () const { return this->readRegister(DREG_BACKONTIME,3); }
  bool backOnTime (uint8_t value) const { return this->writeRegister(DREG_BACKONTIME,value); }
    90e2:	6c e3       	ldi	r22, 0x3C	; 60
    90e4:	8e e0       	ldi	r24, 0x0E	; 14
    90e6:	0e 94 b7 13 	call	0x276e	; 0x276e <as::RegisterList<UReg0>::writeRegister(unsigned char, unsigned char) const [clone .constprop.101]>
Sendeintervall():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:104
class UList0 : public RegList0<UReg0> {
  public:
    UList0 (uint16_t addr) : RegList0<UReg0>(addr) {}

    bool Sendeintervall (uint8_t value) const {
      return this->writeRegister(0x21, value & 0xff);
    90ea:	62 e1       	ldi	r22, 0x12	; 18
    90ec:	81 e2       	ldi	r24, 0x21	; 33
    90ee:	0e 94 b7 13 	call	0x276e	; 0x276e <as::RegisterList<UReg0>::writeRegister(unsigned char, unsigned char) const [clone .constprop.101]>
Messintervall():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:111
    uint8_t Sendeintervall () const {
      return this->readRegister(0x21, 0);
    }

    bool Messintervall (uint16_t value) const {
      return this->writeRegister(0x1f, (value >> 8) & 0xff) && this->writeRegister(0x20, value & 0xff);
    90f2:	60 e0       	ldi	r22, 0x00	; 0
    90f4:	8f e1       	ldi	r24, 0x1F	; 31
    90f6:	0e 94 b7 13 	call	0x276e	; 0x276e <as::RegisterList<UReg0>::writeRegister(unsigned char, unsigned char) const [clone .constprop.101]>
    90fa:	88 23       	and	r24, r24
    90fc:	21 f0       	breq	.+8      	; 0x9106 <main+0x5a4>
    90fe:	6a e0       	ldi	r22, 0x0A	; 10
    9100:	80 e2       	ldi	r24, 0x20	; 32
    9102:	0e 94 b7 13 	call	0x276e	; 0x276e <as::RegisterList<UReg0>::writeRegister(unsigned char, unsigned char) const [clone .constprop.101]>
writeBit():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:220
      return setByte(offset,value,mask<<shift,shift);
    }
    return false;
  }
  bool writeBit (uint8_t reg,uint8_t bitnum,bool value) const {
    uint8_t offset = RegisterType::getOffset(reg);
    9106:	82 e0       	ldi	r24, 0x02	; 2
    9108:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <UReg0::getOffset(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Register.h:221
    if( offset != 0xff ) {
    910c:	8f 3f       	cpi	r24, 0xFF	; 255
    910e:	71 f0       	breq	.+28     	; 0x912c <main+0x5ca>
setBit():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ChannelList.h:48
    return (storage().getByte(addr + offset) & bit) == bit;
  }

  bool setBit (uint8_t offset, uint8_t bit, bool value) const {
    if( value == true ) {
      return storage().setBits(addr + offset, bit);
    9110:	00 91 4a 06 	lds	r16, 0x064A	; 0x80064a <sdev+0x2e>
    9114:	10 91 4b 06 	lds	r17, 0x064B	; 0x80064b <sdev+0x2f>
    9118:	08 0f       	add	r16, r24
    911a:	11 1d       	adc	r17, r1
_ZN2as14StorageWrapperINS_13InternalEpromEE7setBitsEjh.isra.85():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:491
    }
    return firststart;
  }

  bool setBits (uint16_t addr, uint8_t bits) {
    DRIVER::setByte(addr,DRIVER::getByte(addr) | bits);
    911c:	c8 01       	movw	r24, r16
    911e:	0e 94 bd 14 	call	0x297a	; 0x297a <as::InternalEprom::getByte(unsigned int) [clone .isra.4]>
    9122:	68 2f       	mov	r22, r24
    9124:	60 68       	ori	r22, 0x80	; 128
    9126:	c8 01       	movw	r24, r16
    9128:	0e 94 a5 13 	call	0x274a	; 0x274a <as::InternalEprom::setByte(unsigned int, unsigned char) [clone .isra.5]>
main():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:99
      for( uint8_t i=0; i<l.getSize(); ++i ) {
        crc = HalType::crc16(crc,l.getRegister(i));
      }
      // add register list 4
      l = ch.getList4((uint8_t)0);
      for( uint8_t i=0; i<l.getSize(); ++i ) {
    912c:	10 e0       	ldi	r17, 0x00	; 0
firstinit():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:145
  }

  void firstinit () {
    this->keystore().defaults(); // init aes key infrastructure
    list0.defaults();
    for( uint8_t i=0; i<this->channels(); ++i ) {
    912e:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <sdev+0x2d>
    9132:	18 17       	cp	r17, r24
    9134:	88 f4       	brcc	.+34     	; 0x9158 <main+0x5f6>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:146
      devchannels[i]->firstinit();
    9136:	e1 2f       	mov	r30, r17
    9138:	f0 e0       	ldi	r31, 0x00	; 0
    913a:	ee 0f       	add	r30, r30
    913c:	ff 1f       	adc	r31, r31
    913e:	e4 5b       	subi	r30, 0xB4	; 180
    9140:	f9 4f       	sbci	r31, 0xF9	; 249
    9142:	80 81       	ld	r24, Z
    9144:	91 81       	ldd	r25, Z+1	; 0x01
    9146:	dc 01       	movw	r26, r24
    9148:	ed 91       	ld	r30, X+
    914a:	fc 91       	ld	r31, X
    914c:	02 a0       	ldd	r0, Z+34	; 0x22
    914e:	f3 a1       	ldd	r31, Z+35	; 0x23
    9150:	e0 2d       	mov	r30, r0
    9152:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:145
  }

  void firstinit () {
    this->keystore().defaults(); // init aes key infrastructure
    list0.defaults();
    for( uint8_t i=0; i<this->channels(); ++i ) {
    9154:	1f 5f       	subi	r17, 0xFF	; 255
    9156:	eb cf       	rjmp	.-42     	; 0x912e <main+0x5cc>
main():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:485
      DHEXLN(mem);
      DPRINT(F("Init Storage: "));
      DHEXLN(magic);
      // init eeprom
      DRIVER::setData(0x0,(uint8_t*)&magic,4);
      firststart = true;
    9158:	11 e0       	ldi	r17, 0x01	; 1
    915a:	67 ce       	rjmp	.-818    	; 0x8e2a <main+0x2c8>
config():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:257
    battery.low(low);
    battery.critical(critical);
  }

  void config (const StorageConfig& sc) {
    if( sc.valid() == true ) {
    915c:	0e 11       	cpse	r16, r14
    915e:	27 c0       	rjmp	.+78     	; 0x91ae <main+0x64c>
_ZNK2as13StorageConfig7getByteEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Storage.h:586
  uint8_t getSize () const {
    return size-1;
  }

  uint8_t getByte (uint8_t offset) const {
    return storage().getByte(STORAGE_CFG_START+offset);
    9160:	84 e0       	ldi	r24, 0x04	; 4
    9162:	90 e0       	ldi	r25, 0x00	; 0
    9164:	0e 94 bd 14 	call	0x297a	; 0x297a <as::InternalEprom::getByte(unsigned int) [clone .isra.4]>
    9168:	08 2f       	mov	r16, r24
    916a:	85 e0       	ldi	r24, 0x05	; 5
    916c:	90 e0       	ldi	r25, 0x00	; 0
    916e:	0e 94 bd 14 	call	0x297a	; 0x297a <as::InternalEprom::getByte(unsigned int) [clone .isra.4]>
    9172:	f8 2e       	mov	r15, r24
config():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:261
      uint8_t f1 = sc.getByte(CONFIG_FREQ1);
      uint8_t f2 = sc.getByte(CONFIG_FREQ2);
      // check if CONFIG_FREQ1 is in range 0x60...0x6A -> 868,3MHz -550kHz/+567kHz
      if( f1 >= 0x60 && f1 <= 0x6A ) {
    9174:	80 ea       	ldi	r24, 0xA0	; 160
    9176:	80 0f       	add	r24, r16
    9178:	8b 30       	cpi	r24, 0x0B	; 11
    917a:	c8 f4       	brcc	.+50     	; 0x91ae <main+0x64c>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:262
        DPRINT(F("Config Freq: 0x21"));DHEX(f1);DHEXLN(f2);
    917c:	83 e6       	ldi	r24, 0x63	; 99
    917e:	96 e0       	ldi	r25, 0x06	; 6
    9180:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <void DPRINT<__FlashStringHelper const*>(__FlashStringHelper const*)>
    9184:	80 2f       	mov	r24, r16
    9186:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <DHEX(unsigned char)>
    918a:	8f 2d       	mov	r24, r15
    918c:	0e 94 8d 22 	call	0x451a	; 0x451a <DHEXLN(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:263
        radio.initReg(CC1101_FREQ2, 0x21);
    9190:	43 e0       	ldi	r20, 0x03	; 3
    9192:	61 e2       	ldi	r22, 0x21	; 33
    9194:	8d e0       	ldi	r24, 0x0D	; 13
    9196:	0e 94 93 22 	call	0x4526	; 0x4526 <as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255>::initReg(unsigned char, unsigned char, unsigned char) [clone .constprop.37]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:264
        radio.initReg(CC1101_FREQ1, f1);
    919a:	43 e0       	ldi	r20, 0x03	; 3
    919c:	60 2f       	mov	r22, r16
    919e:	8e e0       	ldi	r24, 0x0E	; 14
    91a0:	0e 94 93 22 	call	0x4526	; 0x4526 <as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255>::initReg(unsigned char, unsigned char, unsigned char) [clone .constprop.37]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AskSinPP.h:265
        radio.initReg(CC1101_FREQ0, f2);
    91a4:	43 e0       	ldi	r20, 0x03	; 3
    91a6:	6f 2d       	mov	r22, r15
    91a8:	8f e0       	ldi	r24, 0x0F	; 15
    91aa:	0e 94 93 22 	call	0x4526	; 0x4526 <as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255>::initReg(unsigned char, unsigned char, unsigned char) [clone .constprop.37]>
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E15getDeviceSerialEPh.isra.98():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:317
    for (uint8_t i = 3; i < 10; i++) {
      serial[i] = (boot_signature_byte_get(i + 14) % 10) + 48; // Char 0-9
    }
  #endif
#else
    memcpy_P(serial,info.Serial,10);
    91ae:	60 91 46 06 	lds	r22, 0x0646	; 0x800646 <sdev+0x2a>
    91b2:	70 91 47 06 	lds	r23, 0x0647	; 0x800647 <sdev+0x2b>
    91b6:	6d 5f       	subi	r22, 0xFD	; 253
    91b8:	7f 4f       	sbci	r23, 0xFF	; 255
    91ba:	4a e0       	ldi	r20, 0x0A	; 10
    91bc:	50 e0       	ldi	r21, 0x00	; 0
    91be:	ce 01       	movw	r24, r28
    91c0:	01 96       	adiw	r24, 0x01	; 1
    91c2:	0e 94 18 4b 	call	0x9630	; 0x9630 <memcpy_P>
setup():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:840

void setup () {
  DINIT(57600, ASKSIN_PLUS_PLUS_IDENTIFIER);
  bool first = sdev.init(hal);

  uint8_t serial[11];sdev.getDeviceSerial(serial);serial[10]=0;
    91c6:	1b 86       	std	Y+11, r1	; 0x0b
initLCD():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:304
      break;
    }

  }
  void initLCD(uint8_t *serial) {
    Wire.begin();
    91c8:	0e 94 ac 07 	call	0xf58	; 0xf58 <TwoWire::begin() [clone .constprop.118]>
beginTransmission():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    91cc:	81 e0       	ldi	r24, 0x01	; 1
    91ce:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <TwoWire::transmitting>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
    91d2:	87 e2       	ldi	r24, 0x27	; 39
    91d4:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <TwoWire::txAddress>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    91d8:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <TwoWire::txBufferIndex>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\libraries\Wire\src/Wire.cpp:201
  txBufferLength = 0;
    91dc:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <TwoWire::txBufferLength>
initLCD():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:306
    Wire.beginTransmission(LCD_ADDRESS);
    if (Wire.endTransmission() == 0) {
    91e0:	0e 94 4c 04 	call	0x898	; 0x898 <TwoWire::endTransmission() [clone .constprop.152]>
    91e4:	81 11       	cpse	r24, r1
    91e6:	83 c1       	rjmp	.+774    	; 0x94ee <main+0x98c>
init_priv():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:61
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
    91e8:	0e 94 ac 07 	call	0xf58	; 0xf58 <TwoWire::begin() [clone .constprop.118]>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:62
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    91ec:	10 92 a7 07 	sts	0x07A7, r1	; 0x8007a7 <lcd+0x1a>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:63
	begin(_cols, _rows);  
    91f0:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <lcd+0x1f>
begin():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:67
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
	if (lines > 1) {
    91f4:	82 30       	cpi	r24, 0x02	; 2
    91f6:	18 f0       	brcs	.+6      	; 0x91fe <main+0x69c>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:68
		_displayfunction |= LCD_2LINE;
    91f8:	98 e0       	ldi	r25, 0x08	; 8
    91fa:	90 93 a7 07 	sts	0x07A7, r25	; 0x8007a7 <lcd+0x1a>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:70
	}
	_numlines = lines;
    91fe:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <lcd+0x1d>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:80
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    9202:	62 e3       	ldi	r22, 0x32	; 50
    9204:	70 e0       	ldi	r23, 0x00	; 0
    9206:	80 e0       	ldi	r24, 0x00	; 0
    9208:	90 e0       	ldi	r25, 0x00	; 0
    920a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <delay>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:83
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    920e:	60 91 ad 07 	lds	r22, 0x07AD	; 0x8007ad <lcd+0x20>
    9212:	82 ea       	ldi	r24, 0xA2	; 162
    9214:	97 e0       	ldi	r25, 0x07	; 7
    9216:	0e 94 4a 09 	call	0x1294	; 0x1294 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:84
	delay(1000);
    921a:	68 ee       	ldi	r22, 0xE8	; 232
    921c:	73 e0       	ldi	r23, 0x03	; 3
    921e:	80 e0       	ldi	r24, 0x00	; 0
    9220:	90 e0       	ldi	r25, 0x00	; 0
    9222:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <delay>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:91
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    9226:	60 e3       	ldi	r22, 0x30	; 48
    9228:	82 ea       	ldi	r24, 0xA2	; 162
    922a:	97 e0       	ldi	r25, 0x07	; 7
    922c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:92
   delayMicroseconds(4500); // wait min 4.1ms
    9230:	84 e9       	ldi	r24, 0x94	; 148
    9232:	91 e1       	ldi	r25, 0x11	; 17
    9234:	0e 94 2c 08 	call	0x1058	; 0x1058 <delayMicroseconds>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:95
   
   // second try
   write4bits(0x03 << 4);
    9238:	60 e3       	ldi	r22, 0x30	; 48
    923a:	82 ea       	ldi	r24, 0xA2	; 162
    923c:	97 e0       	ldi	r25, 0x07	; 7
    923e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:96
   delayMicroseconds(4500); // wait min 4.1ms
    9242:	84 e9       	ldi	r24, 0x94	; 148
    9244:	91 e1       	ldi	r25, 0x11	; 17
    9246:	0e 94 2c 08 	call	0x1058	; 0x1058 <delayMicroseconds>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:99
   
   // third go!
   write4bits(0x03 << 4); 
    924a:	60 e3       	ldi	r22, 0x30	; 48
    924c:	82 ea       	ldi	r24, 0xA2	; 162
    924e:	97 e0       	ldi	r25, 0x07	; 7
    9250:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:100
   delayMicroseconds(150);
    9254:	86 e9       	ldi	r24, 0x96	; 150
    9256:	90 e0       	ldi	r25, 0x00	; 0
    9258:	0e 94 2c 08 	call	0x1058	; 0x1058 <delayMicroseconds>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:103
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    925c:	60 e2       	ldi	r22, 0x20	; 32
    925e:	82 ea       	ldi	r24, 0xA2	; 162
    9260:	97 e0       	ldi	r25, 0x07	; 7
    9262:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <LiquidCrystal_I2C::write4bits(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:107


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    9266:	60 91 a7 07 	lds	r22, 0x07A7	; 0x8007a7 <lcd+0x1a>
    926a:	60 62       	ori	r22, 0x20	; 32
command():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    926c:	40 e0       	ldi	r20, 0x00	; 0
    926e:	82 ea       	ldi	r24, 0xA2	; 162
    9270:	97 e0       	ldi	r25, 0x07	; 7
    9272:	0e 94 78 09 	call	0x12f0	; 0x12f0 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
begin():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:110

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    9276:	84 e0       	ldi	r24, 0x04	; 4
    9278:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <lcd+0x1b>
command():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    927c:	40 e0       	ldi	r20, 0x00	; 0
    927e:	6c e0       	ldi	r22, 0x0C	; 12
    9280:	82 ea       	ldi	r24, 0xA2	; 162
    9282:	97 e0       	ldi	r25, 0x07	; 7
    9284:	0e 94 78 09 	call	0x12f0	; 0x12f0 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
begin():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:114
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
	display();
	
	// clear it off
	clear();
    9288:	0e 94 8f 09 	call	0x131e	; 0x131e <LiquidCrystal_I2C::clear() [clone .constprop.123]>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:117
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    928c:	82 e0       	ldi	r24, 0x02	; 2
    928e:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <lcd+0x1c>
command():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    9292:	40 e0       	ldi	r20, 0x00	; 0
    9294:	66 e0       	ldi	r22, 0x06	; 6
    9296:	82 ea       	ldi	r24, 0xA2	; 162
    9298:	97 e0       	ldi	r25, 0x07	; 7
    929a:	0e 94 78 09 	call	0x12f0	; 0x12f0 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
    929e:	40 e0       	ldi	r20, 0x00	; 0
    92a0:	62 e0       	ldi	r22, 0x02	; 2
    92a2:	82 ea       	ldi	r24, 0xA2	; 162
    92a4:	97 e0       	ldi	r25, 0x07	; 7
    92a6:	0e 94 78 09 	call	0x12f0	; 0x12f0 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
home():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:134
	delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal_I2C::home(){
	command(LCD_RETURNHOME);  // set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
    92aa:	80 ed       	ldi	r24, 0xD0	; 208
    92ac:	97 e0       	ldi	r25, 0x07	; 7
    92ae:	0e 94 2c 08 	call	0x1058	; 0x1058 <delayMicroseconds>
command():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:233


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
    92b2:	40 e0       	ldi	r20, 0x00	; 0
    92b4:	60 e4       	ldi	r22, 0x40	; 64
    92b6:	82 ea       	ldi	r24, 0xA2	; 162
    92b8:	97 e0       	ldi	r25, 0x07	; 7
    92ba:	0e 94 78 09 	call	0x12f0	; 0x12f0 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
    92be:	2a e9       	ldi	r18, 0x9A	; 154
    92c0:	e2 2e       	mov	r14, r18
    92c2:	27 e0       	ldi	r18, 0x07	; 7
    92c4:	f2 2e       	mov	r15, r18
    92c6:	32 ea       	ldi	r19, 0xA2	; 162
    92c8:	c3 2e       	mov	r12, r19
    92ca:	37 e0       	ldi	r19, 0x07	; 7
    92cc:	d3 2e       	mov	r13, r19
createChar():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:213
// with custom characters
void LiquidCrystal_I2C::createChar(uint8_t location, uint8_t charmap[]) {
	location &= 0x7; // we only have 8 locations 0-7
	command(LCD_SETCGRAMADDR | (location << 3));
	for (int i=0; i<8; i++) {
		write(charmap[i]);
    92ce:	d7 01       	movw	r26, r14
    92d0:	6d 91       	ld	r22, X+
    92d2:	7d 01       	movw	r14, r26
    92d4:	82 ea       	ldi	r24, 0xA2	; 162
    92d6:	97 e0       	ldi	r25, 0x07	; 7
    92d8:	0e 94 ca 09 	call	0x1394	; 0x1394 <LiquidCrystal_I2C::write(unsigned char)>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:212
// Allows us to fill the first 8 CGRAM locations
// with custom characters
void LiquidCrystal_I2C::createChar(uint8_t location, uint8_t charmap[]) {
	location &= 0x7; // we only have 8 locations 0-7
	command(LCD_SETCGRAMADDR | (location << 3));
	for (int i=0; i<8; i++) {
    92dc:	ce 14       	cp	r12, r14
    92de:	df 04       	cpc	r13, r15
    92e0:	b1 f7       	brne	.-20     	; 0x92ce <main+0x76c>
backlight():
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:224
	_backlightval=LCD_NOBACKLIGHT;
	expanderWrite(0);
}

void LiquidCrystal_I2C::backlight(void) {
	_backlightval=LCD_BACKLIGHT;
    92e2:	88 e0       	ldi	r24, 0x08	; 8
    92e4:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <lcd+0x20>
C:\Users\Mister\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:225
	expanderWrite(0);
    92e8:	60 e0       	ldi	r22, 0x00	; 0
    92ea:	82 ea       	ldi	r24, 0xA2	; 162
    92ec:	97 e0       	ldi	r25, 0x07	; 7
    92ee:	0e 94 4a 09 	call	0x1294	; 0x1294 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
initLCD():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:311
      lcd.init();
      lcd.setContrast(200);
      lcd.createChar(0, degree);
      lcd.backlight();
      lcd.setCursor(0, 0);
    92f2:	40 e0       	ldi	r20, 0x00	; 0
    92f4:	60 e0       	ldi	r22, 0x00	; 0
    92f6:	82 ea       	ldi	r24, 0xA2	; 162
    92f8:	97 e0       	ldi	r25, 0x07	; 7
    92fa:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:314
#define ID_L1 F("  AskSin++ v" ASKSIN_PLUS_PLUS_VERSION_STR)
#define ID_L2 F(__DATE__ " " __TIME__)
      lcd.print(ID_L1);
    92fe:	66 e1       	ldi	r22, 0x16	; 22
    9300:	77 e0       	ldi	r23, 0x07	; 7
    9302:	82 ea       	ldi	r24, 0xA2	; 162
    9304:	97 e0       	ldi	r25, 0x07	; 7
    9306:	0e 94 d6 05 	call	0xbac	; 0xbac <Print::print(__FlashStringHelper const*)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:315
      lcd.setCursor(0, 1);
    930a:	41 e0       	ldi	r20, 0x01	; 1
    930c:	60 e0       	ldi	r22, 0x00	; 0
    930e:	82 ea       	ldi	r24, 0xA2	; 162
    9310:	97 e0       	ldi	r25, 0x07	; 7
    9312:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:316
      lcd.print(ID_L2);
    9316:	61 e0       	ldi	r22, 0x01	; 1
    9318:	77 e0       	ldi	r23, 0x07	; 7
    931a:	82 ea       	ldi	r24, 0xA2	; 162
    931c:	97 e0       	ldi	r25, 0x07	; 7
    931e:	0e 94 d6 05 	call	0xbac	; 0xbac <Print::print(__FlashStringHelper const*)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:317
      lcd.setCursor(5, 3);
    9322:	43 e0       	ldi	r20, 0x03	; 3
    9324:	65 e0       	ldi	r22, 0x05	; 5
    9326:	82 ea       	ldi	r24, 0xA2	; 162
    9328:	97 e0       	ldi	r25, 0x07	; 7
    932a:	0e 94 99 09 	call	0x1332	; 0x1332 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:318
      lcd.print((char*)serial);
    932e:	be 01       	movw	r22, r28
    9330:	6f 5f       	subi	r22, 0xFF	; 255
    9332:	7f 4f       	sbci	r23, 0xFF	; 255
    9334:	82 ea       	ldi	r24, 0xA2	; 162
    9336:	97 e0       	ldi	r25, 0x07	; 7
    9338:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <Print::print(char const*)>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:320

      if (backlightOnTime > 0) backlightalarm.restartTimer(backlightOnTime);
    933c:	60 91 99 07 	lds	r22, 0x0799	; 0x800799 <lcd+0xc>
    9340:	66 23       	and	r22, r22
    9342:	21 f0       	breq	.+8      	; 0x934c <main+0x7ea>
    9344:	8f e8       	ldi	r24, 0x8F	; 143
    9346:	97 e0       	ldi	r25, 0x07	; 7
    9348:	0e 94 3b 11 	call	0x2276	; 0x2276 <LcdType::BacklightAlarm::restartTimer(unsigned char)>
_ZN2as11StateButtonILh1ELh0ELh2ENS_18NoDoublePressAlarmEE4initEh.isra.99():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:214
      }
    }
  }

  void init(uint8_t pin) {
    this->pin = pin;
    934c:	81 e0       	ldi	r24, 0x01	; 1
    934e:	80 93 0c 06 	sts	0x060C, r24	; 0x80060c <calibBtn+0x9>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:215
    pinMode(pin, MODE);
    9352:	62 e0       	ldi	r22, 0x02	; 2
    9354:	0e 94 de 07 	call	0xfbc	; 0xfbc <pinMode>
setup():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:843
  bool first = sdev.init(hal);

  uint8_t serial[11];sdev.getDeviceSerial(serial);serial[10]=0;
  lcd.initLCD(serial);

  buttonISR(calibBtn, CONFIG_BUTTON_PIN);
    9358:	61 e0       	ldi	r22, 0x01	; 1
    935a:	71 e1       	ldi	r23, 0x11	; 17
    935c:	81 e0       	ldi	r24, 0x01	; 1
    935e:	0e 94 a4 04 	call	0x948	; 0x948 <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]>
_ZN2as11StateButtonILh1ELh0ELh2ENS_18NoDoublePressAlarmEE4initEh.isra.99():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:214
      }
    }
  }

  void init(uint8_t pin) {
    this->pin = pin;
    9362:	8b e0       	ldi	r24, 0x0B	; 11
    9364:	80 93 f1 05 	sts	0x05F1, r24	; 0x8005f1 <swbtn1+0x9>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:215
    pinMode(pin, MODE);
    9368:	62 e0       	ldi	r22, 0x02	; 2
    936a:	0e 94 de 07 	call	0xfbc	; 0xfbc <pinMode>
attachInterrupt():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WInterrupts.c:66

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode)
{
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS)
  {
    intFunc[interruptNum] = userFunc;
    936e:	85 e0       	ldi	r24, 0x05	; 5
    9370:	91 e1       	ldi	r25, 0x11	; 17
    9372:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    9376:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WInterrupts.c:217
        case 0:
          EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
          EIMSK |= (1 << INT0);
          break;
        case 1:
          EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    937a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    937e:	83 7f       	andi	r24, 0xF3	; 243
    9380:	84 60       	ori	r24, 0x04	; 4
    9382:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/WInterrupts.c:218
          EIMSK |= (1 << INT1);
    9386:	e9 9a       	sbi	0x1d, 1	; 29
_ZN2as11StateButtonILh1ELh0ELh2ENS_18NoDoublePressAlarmEE4initEh.isra.99():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:214
      }
    }
  }

  void init(uint8_t pin) {
    this->pin = pin;
    9388:	8c e0       	ldi	r24, 0x0C	; 12
    938a:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <swbtn2+0x9>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:215
    pinMode(pin, MODE);
    938e:	62 e0       	ldi	r22, 0x02	; 2
    9390:	0e 94 de 07 	call	0xfbc	; 0xfbc <pinMode>
setup():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:845
  buttonISR(swbtn1,SW_BUTTON_PIN_1);
  buttonISR(swbtn2,SW_BUTTON_PIN_2);
    9394:	69 e0       	ldi	r22, 0x09	; 9
    9396:	71 e1       	ldi	r23, 0x11	; 17
    9398:	8c e0       	ldi	r24, 0x0C	; 12
    939a:	0e 94 a4 04 	call	0x948	; 0x948 <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]>
_ZN2as11StateButtonILh1ELh0ELh2ENS_18NoDoublePressAlarmEE4initEh.isra.99():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:214
      }
    }
  }

  void init(uint8_t pin) {
    this->pin = pin;
    939e:	82 e1       	ldi	r24, 0x12	; 18
    93a0:	80 93 bb 05 	sts	0x05BB, r24	; 0x8005bb <swbtn3+0x9>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:215
    pinMode(pin, MODE);
    93a4:	62 e0       	ldi	r22, 0x02	; 2
    93a6:	0e 94 de 07 	call	0xfbc	; 0xfbc <pinMode>
setup():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:846
  buttonISR(swbtn3,SW_BUTTON_PIN_3);
    93aa:	6d e0       	ldi	r22, 0x0D	; 13
    93ac:	71 e1       	ldi	r23, 0x11	; 17
    93ae:	82 e1       	ldi	r24, 0x12	; 18
    93b0:	0e 94 a4 04 	call	0x948	; 0x948 <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]>
_ZN2as11StateButtonILh1ELh0ELh2ENS_18NoDoublePressAlarmEE4initEh.isra.99():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:214
      }
    }
  }

  void init(uint8_t pin) {
    this->pin = pin;
    93b4:	83 e1       	ldi	r24, 0x13	; 19
    93b6:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <swbtn4+0x9>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Button.h:215
    pinMode(pin, MODE);
    93ba:	62 e0       	ldi	r22, 0x02	; 2
    93bc:	0e 94 de 07 	call	0xfbc	; 0xfbc <pinMode>
setup():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:847
  buttonISR(swbtn4,SW_BUTTON_PIN_4);
    93c0:	61 e1       	ldi	r22, 0x11	; 17
    93c2:	71 e1       	ldi	r23, 0x11	; 17
    93c4:	83 e1       	ldi	r24, 0x13	; 19
    93c6:	0e 94 a4 04 	call	0x948	; 0x948 <enableInterrupt(unsigned char, void (*)(), unsigned char) [clone .constprop.140]>
init():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:64
    init();
  }

  void init () {
    // get the current state
    trigger(sysclock);
    93ca:	67 e8       	ldi	r22, 0x87	; 135
    93cc:	75 e0       	ldi	r23, 0x05	; 5
    93ce:	8a eb       	ldi	r24, 0xBA	; 186
    93d0:	96 e0       	ldi	r25, 0x06	; 6
    93d2:	0e 94 1d 2b 	call	0x563a	; 0x563a <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)>
_ZN2as14OnePinPositionILj0EE4initEhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/sensors/PinPosition.h:22

  void init (uint8_t pin, uint8_t enpin) {
    sens=pin;
    93d6:	82 e0       	ldi	r24, 0x02	; 2
    93d8:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <sdev+0xbd>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/sensors/PinPosition.h:23
    en = enpin;
    93dc:	10 92 da 06 	sts	0x06DA, r1	; 0x8006da <sdev+0xbe>
init():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/ContactState.h:64
    93e0:	67 e8       	ldi	r22, 0x87	; 135
    93e2:	75 e0       	ldi	r23, 0x05	; 5
    93e4:	8e ed       	ldi	r24, 0xDE	; 222
    93e6:	96 e0       	ldi	r25, 0x06	; 6
    93e8:	0e 94 1d 2b 	call	0x563a	; 0x563a <as::StateGenericChannel<as::OnePinPosition<0u>, as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0, SCList1, as::RegList4<as::DefaultRegisterList4>, 10>::trigger(as::AlarmClock&)>
_ZN2as14OnePinPositionILj0EE4initEhh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/sensors/PinPosition.h:22
  uint8_t en;
public:
  OnePinPosition () : sens(0), en(0) { _present = true; }

  void init (uint8_t pin, uint8_t enpin) {
    sens=pin;
    93ec:	83 e0       	ldi	r24, 0x03	; 3
    93ee:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <sdev+0xe1>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/sensors/PinPosition.h:23
    en = enpin;
    93f2:	10 92 fe 06 	sts	0x06FE, r1	; 0x8006fe <sdev+0xe2>
setup():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:850
  sdev.scChannel1().init(SC_1_PIN);
  sdev.scChannel2().init(SC_2_PIN);
  sdev.swChannel1().init(RELAY_PIN_1, INVERT_RELAY);
    93f6:	66 e1       	ldi	r22, 0x16	; 22
    93f8:	86 e6       	ldi	r24, 0x66	; 102
    93fa:	96 e0       	ldi	r25, 0x06	; 6
    93fc:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>::init(unsigned char, bool) [clone .constprop.33]>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:851
  sdev.swChannel2().init(RELAY_PIN_2, INVERT_RELAY);
    9400:	67 e1       	ldi	r22, 0x17	; 23
    9402:	8b e7       	ldi	r24, 0x7B	; 123
    9404:	96 e0       	ldi	r25, 0x06	; 6
    9406:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>::init(unsigned char, bool) [clone .constprop.33]>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:852
  sdev.swChannel3().init(RELAY_PIN_3, INVERT_RELAY);
    940a:	64 e1       	ldi	r22, 0x14	; 20
    940c:	80 e9       	ldi	r24, 0x90	; 144
    940e:	96 e0       	ldi	r25, 0x06	; 6
    9410:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>::init(unsigned char, bool) [clone .constprop.33]>
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:853
  sdev.swChannel4().init(RELAY_PIN_4, INVERT_RELAY);
    9414:	65 e1       	ldi	r22, 0x15	; 21
    9416:	85 ea       	ldi	r24, 0xA5	; 165
    9418:	96 e0       	ldi	r25, 0x06	; 6
    941a:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <as::SwitchChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, 10, UList0, as::ArduinoPins>::init(unsigned char, bool) [clone .constprop.33]>
initPeerings():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:826
InternalButton<UType> swbtn2(sdev,6);
InternalButton<UType> swbtn3(sdev,7);
InternalButton<UType> swbtn4(sdev,8);

void initPeerings (bool first) {
  if ( first == true ) {
    941e:	11 23       	and	r17, r17
    9420:	09 f4       	brne	.+2      	; 0x9424 <main+0x8c2>
    9422:	48 c0       	rjmp	.+144    	; 0x94b4 <main+0x952>
_ZN2as4HMIDC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:18
    9424:	1a 8a       	std	Y+18, r1	; 0x12
    9426:	19 8a       	std	Y+17, r1	; 0x11
    9428:	18 8a       	std	Y+16, r1	; 0x10
initPeerings():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:828
    HMID devid;
    sdev.getDeviceID(devid);
    942a:	be 01       	movw	r22, r28
    942c:	60 5f       	subi	r22, 0xF0	; 240
    942e:	7f 4f       	sbci	r23, 0xFF	; 255
    9430:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <sdev+0x2a>
    9434:	90 91 47 06 	lds	r25, 0x0647	; 0x800647 <sdev+0x2b>
    9438:	0e 94 d5 12 	call	0x25aa	; 0x25aa <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::getDeviceID(as::HMID&) [clone .isra.97]>
_ZN2as4HMIDC2ERKS0_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:31
    id[0]=*ptr;
    id[1]=*(ptr+1);
    id[2]=*(ptr+2);
  }
  HMID (const HMID& other) {
    id[0]=other.id[0];
    943c:	88 89       	ldd	r24, Y+16	; 0x10
    943e:	8c 87       	std	Y+12, r24	; 0x0c
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:32
    id[1]=other.id[1];
    9440:	89 89       	ldd	r24, Y+17	; 0x11
    9442:	8d 87       	std	Y+13, r24	; 0x0d
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:33
    id[2]=other.id[2];
    9444:	8a 89       	ldd	r24, Y+18	; 0x12
    9446:	8e 87       	std	Y+14, r24	; 0x0e
_ZN2as4PeerC2ERKNS_4HMIDEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Peer.h:18

class Peer : public HMID {
  uint8_t chan;
public:
  Peer() : chan(0) {}
  Peer (const HMID& id,uint8_t ch) : HMID(id), chan(ch) {}
    9448:	85 e0       	ldi	r24, 0x05	; 5
    944a:	8f 87       	std	Y+15, r24	; 0x0f
initPeerings():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:829
    sdev.swChannel1().peer(Peer(devid, 5));
    944c:	be 01       	movw	r22, r28
    944e:	64 5f       	subi	r22, 0xF4	; 244
    9450:	7f 4f       	sbci	r23, 0xFF	; 255
    9452:	81 e7       	ldi	r24, 0x71	; 113
    9454:	96 e0       	ldi	r25, 0x06	; 6
    9456:	0e 94 a2 21 	call	0x4344	; 0x4344 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peer(as::Peer const&)>
_ZN2as4HMIDC2ERKS0_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:31
    id[0]=*ptr;
    id[1]=*(ptr+1);
    id[2]=*(ptr+2);
  }
  HMID (const HMID& other) {
    id[0]=other.id[0];
    945a:	88 89       	ldd	r24, Y+16	; 0x10
    945c:	8c 87       	std	Y+12, r24	; 0x0c
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:32
    id[1]=other.id[1];
    945e:	89 89       	ldd	r24, Y+17	; 0x11
    9460:	8d 87       	std	Y+13, r24	; 0x0d
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:33
    id[2]=other.id[2];
    9462:	8a 89       	ldd	r24, Y+18	; 0x12
    9464:	8e 87       	std	Y+14, r24	; 0x0e
_ZN2as4PeerC2ERKNS_4HMIDEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Peer.h:18
    9466:	86 e0       	ldi	r24, 0x06	; 6
    9468:	8f 87       	std	Y+15, r24	; 0x0f
initPeerings():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:830
    sdev.swChannel2().peer(Peer(devid, 6));
    946a:	be 01       	movw	r22, r28
    946c:	64 5f       	subi	r22, 0xF4	; 244
    946e:	7f 4f       	sbci	r23, 0xFF	; 255
    9470:	86 e8       	ldi	r24, 0x86	; 134
    9472:	96 e0       	ldi	r25, 0x06	; 6
    9474:	0e 94 a2 21 	call	0x4344	; 0x4344 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peer(as::Peer const&)>
_ZN2as4HMIDC2ERKS0_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:31
    id[0]=*ptr;
    id[1]=*(ptr+1);
    id[2]=*(ptr+2);
  }
  HMID (const HMID& other) {
    id[0]=other.id[0];
    9478:	88 89       	ldd	r24, Y+16	; 0x10
    947a:	8c 87       	std	Y+12, r24	; 0x0c
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:32
    id[1]=other.id[1];
    947c:	89 89       	ldd	r24, Y+17	; 0x11
    947e:	8d 87       	std	Y+13, r24	; 0x0d
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:33
    id[2]=other.id[2];
    9480:	8a 89       	ldd	r24, Y+18	; 0x12
    9482:	8e 87       	std	Y+14, r24	; 0x0e
_ZN2as4PeerC2ERKNS_4HMIDEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Peer.h:18
    9484:	87 e0       	ldi	r24, 0x07	; 7
    9486:	8f 87       	std	Y+15, r24	; 0x0f
initPeerings():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:831
    sdev.swChannel3().peer(Peer(devid, 7));
    9488:	be 01       	movw	r22, r28
    948a:	64 5f       	subi	r22, 0xF4	; 244
    948c:	7f 4f       	sbci	r23, 0xFF	; 255
    948e:	8b e9       	ldi	r24, 0x9B	; 155
    9490:	96 e0       	ldi	r25, 0x06	; 6
    9492:	0e 94 a2 21 	call	0x4344	; 0x4344 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peer(as::Peer const&)>
_ZN2as4HMIDC2ERKS0_():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:31
    id[0]=*ptr;
    id[1]=*(ptr+1);
    id[2]=*(ptr+2);
  }
  HMID (const HMID& other) {
    id[0]=other.id[0];
    9496:	88 89       	ldd	r24, Y+16	; 0x10
    9498:	8c 87       	std	Y+12, r24	; 0x0c
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:32
    id[1]=other.id[1];
    949a:	89 89       	ldd	r24, Y+17	; 0x11
    949c:	8d 87       	std	Y+13, r24	; 0x0d
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:33
    id[2]=other.id[2];
    949e:	8a 89       	ldd	r24, Y+18	; 0x12
    94a0:	8e 87       	std	Y+14, r24	; 0x0e
_ZN2as4PeerC2ERKNS_4HMIDEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Peer.h:18
    94a2:	88 e0       	ldi	r24, 0x08	; 8
    94a4:	8f 87       	std	Y+15, r24	; 0x0f
initPeerings():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:832
    sdev.swChannel4().peer(Peer(devid, 8));
    94a6:	be 01       	movw	r22, r28
    94a8:	64 5f       	subi	r22, 0xF4	; 244
    94aa:	7f 4f       	sbci	r23, 0xFF	; 255
    94ac:	80 eb       	ldi	r24, 0xB0	; 176
    94ae:	96 e0       	ldi	r25, 0x06	; 6
    94b0:	0e 94 a2 21 	call	0x4344	; 0x4344 <as::Channel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::SwitchList1, as::SwitchList3Tmpl<as::RegList3<as::SwitchReg3> >, as::EmptyList, 10, UList0, as::EmptyList>::peer(as::Peer const&)>
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E16hasConfigChangedEb():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:214
    cfgChanged = false;
    return value;
  }

  void hasConfigChanged(bool c) {
    cfgChanged = c;
    94b4:	81 e0       	ldi	r24, 0x01	; 1
    94b6:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <sdev+0x2c>
initDone():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:134
  }

  void initDone () {
    // trigger initial config changed - to allow scan/caching of list data
    this->hasConfigChanged(true);
    this->configChanged();
    94ba:	8c e1       	ldi	r24, 0x1C	; 28
    94bc:	96 e0       	ldi	r25, 0x06	; 6
    94be:	0e 94 9b 24 	call	0x4936	; 0x4936 <UType::configChanged()>
main():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:135
    for( uint8_t cdx=1; cdx<=channels(); ++cdx ) {
    94c2:	11 e0       	ldi	r17, 0x01	; 1
initDone():
    94c4:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <sdev+0x2d>
    94c8:	81 17       	cp	r24, r17
    94ca:	d8 f0       	brcs	.+54     	; 0x9502 <main+0x9a0>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7channelEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:182
    this->led().set(LedStates::pairing);
    this->activity().stayAwake( seconds2ticks(20) ); // 20 seconds
  }

  ChannelType& channel(uint8_t ch) {
    return *devchannels[ch-1];
    94cc:	e1 2f       	mov	r30, r17
    94ce:	f0 e0       	ldi	r31, 0x00	; 0
    94d0:	ee 0f       	add	r30, r30
    94d2:	ff 1f       	adc	r31, r31
    94d4:	e6 5b       	subi	r30, 0xB6	; 182
    94d6:	f9 4f       	sbci	r31, 0xF9	; 249
    94d8:	80 81       	ld	r24, Z
    94da:	91 81       	ldd	r25, Z+1	; 0x01
initDone():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:136
  void initDone () {
    // trigger initial config changed - to allow scan/caching of list data
    this->hasConfigChanged(true);
    this->configChanged();
    for( uint8_t cdx=1; cdx<=channels(); ++cdx ) {
      channel(cdx).configChanged();
    94dc:	dc 01       	movw	r26, r24
    94de:	ed 91       	ld	r30, X+
    94e0:	fc 91       	ld	r31, X
    94e2:	04 a8       	ldd	r0, Z+52	; 0x34
    94e4:	f5 a9       	ldd	r31, Z+53	; 0x35
    94e6:	e0 2d       	mov	r30, r0
    94e8:	09 95       	icall
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:135

  void initDone () {
    // trigger initial config changed - to allow scan/caching of list data
    this->hasConfigChanged(true);
    this->configChanged();
    for( uint8_t cdx=1; cdx<=channels(); ++cdx ) {
    94ea:	1f 5f       	subi	r17, 0xFF	; 255
    94ec:	eb cf       	rjmp	.-42     	; 0x94c4 <main+0x962>
DPRINT():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Debug.h:40
#ifndef DSERIAL
  #define DSERIAL Serial
#endif

  template <class T>
  inline void DPRINT(T str) { DSERIAL.print(str); }
    94ee:	6e eb       	ldi	r22, 0xBE	; 190
    94f0:	73 e0       	ldi	r23, 0x03	; 3
    94f2:	89 ed       	ldi	r24, 0xD9	; 217
    94f4:	94 e0       	ldi	r25, 0x04	; 4
    94f6:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <Print::print(char const*)>
initLCD():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:323
      lcd.print((char*)serial);

      if (backlightOnTime > 0) backlightalarm.restartTimer(backlightOnTime);

    } else {
      DPRINT("LCD Display not found at 0x");DHEXLN((uint8_t)LCD_ADDRESS);
    94fa:	87 e2       	ldi	r24, 0x27	; 39
    94fc:	0e 94 8d 22 	call	0x451a	; 0x451a <DHEXLN(unsigned char)>
    9500:	25 cf       	rjmp	.-438    	; 0x934c <main+0x7ea>
setup():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:856
  sdev.swChannel2().init(RELAY_PIN_2, INVERT_RELAY);
  sdev.swChannel3().init(RELAY_PIN_3, INVERT_RELAY);
  sdev.swChannel4().init(RELAY_PIN_4, INVERT_RELAY);
  initPeerings(first);
  sdev.initDone();
  sdev.measureChannel().setUserStorage(sdev.getUserStorage());
    9502:	0e 94 b1 05 	call	0xb62	; 0xb62 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::getUserStorage() [clone .constprop.76]>
_ZN14MeasureChannel14setUserStorageERKN2as11UserStorageE():
C:\Users\Mister\Documents\01_HOMATIC\.PROJEKTE\HB-UNI-Sen-POOL\HB-UNI-Sen-POOL_1/HB-UNI-Sen-POOL_1.ino:694
      ntc2.init();
      sysclock.add(*this);
    }

    void setUserStorage(const UserStorage& storage) {
      us = storage;
    9506:	90 93 3a 07 	sts	0x073A, r25	; 0x80073a <sdev+0x11e>
    950a:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <sdev+0x11d>
runsingle():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:60
    }
    return worked;
  }

  bool runsingle() {
    Alarm* a = (Alarm*) ready.unlink();
    950e:	89 e8       	ldi	r24, 0x89	; 137
    9510:	95 e0       	ldi	r25, 0x05	; 5
    9512:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <as::Link::unlink()>
    9516:	fc 01       	movw	r30, r24
    9518:	00 97       	sbiw	r24, 0x00	; 0
    951a:	79 f0       	breq	.+30     	; 0x953a <main+0x9d8>
    951c:	02 97       	sbiw	r24, 0x02	; 2
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:61
    if (a != 0) {
    951e:	69 f0       	breq	.+26     	; 0x953a <main+0x9d8>
_ZN2as5Alarm7setflagEbh.isra.10():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Alarm.h:25
  ~Alarm() {}

  uint8_t flags;

public:
  void setflag(bool c,uint8_t mask) { c ? flags |= mask : flags &= ~mask; }
    9520:	22 81       	ldd	r18, Z+2	; 0x02
    9522:	2d 7f       	andi	r18, 0xFD	; 253
    9524:	22 83       	std	Z+2, r18	; 0x02
runsingle():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/AlarmClock.h:63
      a->active(false);
      a->trigger(*this);
    9526:	dc 01       	movw	r26, r24
    9528:	ed 91       	ld	r30, X+
    952a:	fc 91       	ld	r31, X
    952c:	01 90       	ld	r0, Z+
    952e:	f0 81       	ld	r31, Z
    9530:	e0 2d       	mov	r30, r0
    9532:	67 e8       	ldi	r22, 0x87	; 135
    9534:	75 e0       	ldi	r23, 0x05	; 5
    9536:	09 95       	icall
    9538:	ea cf       	rjmp	.-44     	; 0x950e <main+0x9ac>
    953a:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <sdev+0x2>
    953e:	90 91 1f 06 	lds	r25, 0x061F	; 0x80061f <sdev+0x3>
_ZN2as5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS2_Lh255EEEE7isStateENS5_6StatesE():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:877
private:
  enum States { IDLE=0x1, SENDING=0x2, READ=0x4, ALIVE=0x8, READ_ALIVE=0xc };
  volatile uint8_t state;
  Message buffer;

  bool isState(States s) { return (state & s)==s; }
    9542:	fc 01       	movw	r30, r24
    9544:	23 a5       	ldd	r18, Z+43	; 0x2b
read():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Radio.h:963
    detachInterrupt(digitalPinToInterrupt(GDO0));
}

  // read the message form the internal buffer, if any
  uint8_t read (Message& msg) {
    if( isState(READ) == false )
    9546:	22 ff       	sbrs	r18, 2
    9548:	22 c0       	rjmp	.+68     	; 0x958e <main+0xa2c>
    954a:	67 e2       	ldi	r22, 0x27	; 39
    954c:	76 e0       	ldi	r23, 0x06	; 6
    954e:	80 96       	adiw	r24, 0x20	; 32
    9550:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >::read(as::Message&) [clone .part.147]>
pollRadio():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:363

  bool pollRadio () {
    uint8_t num = radio().read(msg);
    // minimal msg is 10 byte
    // ignore own messages from radio
    if( num >= 10 && isDeviceID(msg.from()) == false ) {
    9554:	8a 30       	cpi	r24, 0x0A	; 10
    9556:	d8 f0       	brcs	.+54     	; 0x958e <main+0xa2c>
_ZN2as4HMIDC2Ev():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/HMID.h:18

class HMID {
  uint8_t id[3];
public:
  HMID () {
    id[0]=id[1]=id[2]=0;
    9558:	1b 82       	std	Y+3, r1	; 0x03
    955a:	1a 82       	std	Y+2, r1	; 0x02
    955c:	19 82       	std	Y+1, r1	; 0x01
isDeviceID():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:329
    return memcmp(serial,tmp,10) == 0;
  }

  bool isDeviceID(const HMID& id) {
    HMID me;
    getDeviceID(me);
    955e:	be 01       	movw	r22, r28
    9560:	6f 5f       	subi	r22, 0xFF	; 255
    9562:	7f 4f       	sbci	r23, 0xFF	; 255
    9564:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <sdev+0x2a>
    9568:	90 91 47 06 	lds	r25, 0x0647	; 0x800647 <sdev+0x2b>
    956c:	0e 94 d5 12 	call	0x25aa	; 0x25aa <as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::getDeviceID(as::HMID&) [clone .isra.97]>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:330
    return id == me;
    9570:	be 01       	movw	r22, r28
    9572:	6f 5f       	subi	r22, 0xFF	; 255
    9574:	7f 4f       	sbci	r23, 0xFF	; 255
    9576:	8b e2       	ldi	r24, 0x2B	; 43
    9578:	96 e0       	ldi	r25, 0x06	; 6
    957a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <as::HMID::operator==(as::HMID const&) const>
pollRadio():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:363

  bool pollRadio () {
    uint8_t num = radio().read(msg);
    // minimal msg is 10 byte
    // ignore own messages from radio
    if( num >= 10 && isDeviceID(msg.from()) == false ) {
    957e:	81 11       	cpse	r24, r1
    9580:	06 c0       	rjmp	.+12     	; 0x958e <main+0xa2c>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:364
      return process(msg);
    9582:	67 e2       	ldi	r22, 0x27	; 39
    9584:	76 e0       	ldi	r23, 0x06	; 6
    9586:	8c e1       	ldi	r24, 0x1C	; 28
    9588:	96 e0       	ldi	r25, 0x06	; 6
    958a:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <as::ChannelDevice<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>, 8, UList0>::process(as::Message&)>
main():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:135
    958e:	11 e0       	ldi	r17, 0x01	; 1
pollRadio():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:187
    return *devchannels[ch-1];
  }

  bool pollRadio () {
    bool worked = DeviceType::pollRadio();
    for( uint8_t i=1; i<=this->channels(); ++i ) {
    9590:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <sdev+0x2d>
    9594:	81 17       	cp	r24, r17
    9596:	58 f1       	brcs	.+86     	; 0x95ee <main+0xa8c>
_ZN2as13ChannelDeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEENS_15VirtBaseChannelISD_6UList0EELi8ESF_E7channelEh():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:182
    this->led().set(LedStates::pairing);
    this->activity().stayAwake( seconds2ticks(20) ); // 20 seconds
  }

  ChannelType& channel(uint8_t ch) {
    return *devchannels[ch-1];
    9598:	e1 2f       	mov	r30, r17
    959a:	f0 e0       	ldi	r31, 0x00	; 0
    959c:	ee 0f       	add	r30, r30
    959e:	ff 1f       	adc	r31, r31
    95a0:	e6 5b       	subi	r30, 0xB6	; 182
    95a2:	f9 4f       	sbci	r31, 0xF9	; 249
    95a4:	c0 80       	ld	r12, Z
    95a6:	d1 80       	ldd	r13, Z+1	; 0x01
pollRadio():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:189

  bool pollRadio () {
    bool worked = DeviceType::pollRadio();
    for( uint8_t i=1; i<=this->channels(); ++i ) {
      ChannelType& ch = channel(i);
      if( ch.changed() == true ) {
    95a8:	d6 01       	movw	r26, r12
    95aa:	ed 91       	ld	r30, X+
    95ac:	fc 91       	ld	r31, X
    95ae:	06 84       	ldd	r0, Z+14	; 0x0e
    95b0:	f7 85       	ldd	r31, Z+15	; 0x0f
    95b2:	e0 2d       	mov	r30, r0
    95b4:	c6 01       	movw	r24, r12
    95b6:	09 95       	icall
    95b8:	88 23       	and	r24, r24
    95ba:	b9 f0       	breq	.+46     	; 0x95ea <main+0xa88>
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E9nextcountEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:370
    }
    return false;
  }

  uint8_t nextcount () {
    return ++msgcount;
    95bc:	f0 90 22 06 	lds	r15, 0x0622	; 0x800622 <sdev+0x6>
    95c0:	f3 94       	inc	r15
    95c2:	f0 92 22 06 	sts	0x0622, r15	; 0x800622 <sdev+0x6>
_ZN2as6DeviceINS_6AskSinINS_9StatusLedILh0ENS_11ArduinoPinsEEENS_9NoBatteryENS_5RadioINS_6LibSPIILh4ELm2000000ELh1ELh0EEELh2ELh255ELi100ENS_6CC1101IS8_Lh255EEEEENS_8NoBuzzerEEE6UList0E11getMasterIDEv():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/Device.h:352
#endif
    memcpy_P(di+1,info.DeviceInfo,sizeof(info.DeviceInfo));
  }

  HMID getMasterID () {
    return list0.masterid();
    95c6:	60 91 20 06 	lds	r22, 0x0620	; 0x800620 <sdev+0x4>
    95ca:	70 91 21 06 	lds	r23, 0x0621	; 0x800621 <sdev+0x5>
    95ce:	ce 01       	movw	r24, r28
    95d0:	01 96       	adiw	r24, 0x01	; 1
    95d2:	0e 94 e7 18 	call	0x31ce	; 0x31ce <as::RegList0<UReg0>::masterid() const>
pollRadio():
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:190
        this->sendInfoActuatorStatus(this->getMasterID(),this->nextcount(),ch);
    95d6:	01 e0       	ldi	r16, 0x01	; 1
    95d8:	96 01       	movw	r18, r12
    95da:	4f 2d       	mov	r20, r15
    95dc:	be 01       	movw	r22, r28
    95de:	6f 5f       	subi	r22, 0xFF	; 255
    95e0:	7f 4f       	sbci	r23, 0xFF	; 255
    95e2:	8c e1       	ldi	r24, 0x1C	; 28
    95e4:	96 e0       	ldi	r25, 0x06	; 6
    95e6:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <void as::Device<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>::sendInfoActuatorStatus<as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0> >(as::HMID const&, unsigned char, as::VirtBaseChannel<as::AskSin<as::StatusLed<(unsigned char)0, as::ArduinoPins>, as::NoBattery, as::Radio<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)2, (unsigned char)255, 100, as::CC1101<as::LibSPI<(unsigned char)4, 2000000ul, (unsigned char)1, (unsigned char)0>, (unsigned char)255> >, as::NoBuzzer>, UList0>&, bool)>
C:\Users\Mister\Documents\Arduino\libraries\AskSinPP/MultiChannelDevice.h:187
    return *devchannels[ch-1];
  }

  bool pollRadio () {
    bool worked = DeviceType::pollRadio();
    for( uint8_t i=1; i<=this->channels(); ++i ) {
    95ea:	1f 5f       	subi	r17, 0xFF	; 255
    95ec:	d1 cf       	rjmp	.-94     	; 0x9590 <main+0xa2e>
main():
C:\Users\Mister\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.2.1\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    95ee:	0e 94 06 07 	call	0xe0c	; 0xe0c <serialEventRun()>
    95f2:	8d cf       	rjmp	.-230    	; 0x950e <main+0x9ac>

000095f4 <dtostrf>:
dtostrf():
    95f4:	ef 92       	push	r14
    95f6:	0f 93       	push	r16
    95f8:	1f 93       	push	r17
    95fa:	cf 93       	push	r28
    95fc:	df 93       	push	r29
    95fe:	e8 01       	movw	r28, r16
    9600:	34 e0       	ldi	r19, 0x04	; 4
    9602:	47 fd       	sbrc	r20, 7
    9604:	34 e1       	ldi	r19, 0x14	; 20
    9606:	04 2e       	mov	r0, r20
    9608:	00 0c       	add	r0, r0
    960a:	55 0b       	sbc	r21, r21
    960c:	57 ff       	sbrs	r21, 7
    960e:	03 c0       	rjmp	.+6      	; 0x9616 <dtostrf+0x22>
    9610:	51 95       	neg	r21
    9612:	41 95       	neg	r20
    9614:	51 09       	sbc	r21, r1
    9616:	e3 2e       	mov	r14, r19
    9618:	02 2f       	mov	r16, r18
    961a:	24 2f       	mov	r18, r20
    961c:	ae 01       	movw	r20, r28
    961e:	0e 94 46 4b 	call	0x968c	; 0x968c <dtoa_prf>
    9622:	ce 01       	movw	r24, r28
    9624:	df 91       	pop	r29
    9626:	cf 91       	pop	r28
    9628:	1f 91       	pop	r17
    962a:	0f 91       	pop	r16
    962c:	ef 90       	pop	r14
    962e:	08 95       	ret

00009630 <memcpy_P>:
memcpy_P():
    9630:	fb 01       	movw	r30, r22
    9632:	dc 01       	movw	r26, r24
    9634:	02 c0       	rjmp	.+4      	; 0x963a <memcpy_P+0xa>
    9636:	05 90       	lpm	r0, Z+
    9638:	0d 92       	st	X+, r0
    963a:	41 50       	subi	r20, 0x01	; 1
    963c:	50 40       	sbci	r21, 0x00	; 0
    963e:	d8 f7       	brcc	.-10     	; 0x9636 <memcpy_P+0x6>
    9640:	08 95       	ret

00009642 <__itoa_ncheck>:
__itoa_ncheck():
    9642:	bb 27       	eor	r27, r27
    9644:	4a 30       	cpi	r20, 0x0A	; 10
    9646:	31 f4       	brne	.+12     	; 0x9654 <__itoa_ncheck+0x12>
    9648:	99 23       	and	r25, r25
    964a:	22 f4       	brpl	.+8      	; 0x9654 <__itoa_ncheck+0x12>
    964c:	bd e2       	ldi	r27, 0x2D	; 45
    964e:	90 95       	com	r25
    9650:	81 95       	neg	r24
    9652:	9f 4f       	sbci	r25, 0xFF	; 255
    9654:	0c 94 2d 4b 	jmp	0x965a	; 0x965a <__utoa_common>

00009658 <__utoa_ncheck>:
__utoa_ncheck():
    9658:	bb 27       	eor	r27, r27

0000965a <__utoa_common>:
    965a:	fb 01       	movw	r30, r22
    965c:	55 27       	eor	r21, r21
    965e:	aa 27       	eor	r26, r26
    9660:	88 0f       	add	r24, r24
    9662:	99 1f       	adc	r25, r25
    9664:	aa 1f       	adc	r26, r26
    9666:	a4 17       	cp	r26, r20
    9668:	10 f0       	brcs	.+4      	; 0x966e <__utoa_common+0x14>
    966a:	a4 1b       	sub	r26, r20
    966c:	83 95       	inc	r24
    966e:	50 51       	subi	r21, 0x10	; 16
    9670:	b9 f7       	brne	.-18     	; 0x9660 <__utoa_common+0x6>
    9672:	a0 5d       	subi	r26, 0xD0	; 208
    9674:	aa 33       	cpi	r26, 0x3A	; 58
    9676:	08 f0       	brcs	.+2      	; 0x967a <__utoa_common+0x20>
    9678:	a9 5d       	subi	r26, 0xD9	; 217
    967a:	a1 93       	st	Z+, r26
    967c:	00 97       	sbiw	r24, 0x00	; 0
    967e:	79 f7       	brne	.-34     	; 0x965e <__utoa_common+0x4>
    9680:	b1 11       	cpse	r27, r1
    9682:	b1 93       	st	Z+, r27
    9684:	11 92       	st	Z+, r1
    9686:	cb 01       	movw	r24, r22
    9688:	0c 94 9a 4d 	jmp	0x9b34	; 0x9b34 <strrev>

0000968c <dtoa_prf>:
dtoa_prf():
    968c:	8f 92       	push	r8
    968e:	9f 92       	push	r9
    9690:	af 92       	push	r10
    9692:	bf 92       	push	r11
    9694:	cf 92       	push	r12
    9696:	df 92       	push	r13
    9698:	ef 92       	push	r14
    969a:	ff 92       	push	r15
    969c:	0f 93       	push	r16
    969e:	1f 93       	push	r17
    96a0:	cf 93       	push	r28
    96a2:	df 93       	push	r29
    96a4:	cd b7       	in	r28, 0x3d	; 61
    96a6:	de b7       	in	r29, 0x3e	; 62
    96a8:	29 97       	sbiw	r28, 0x09	; 9
    96aa:	0f b6       	in	r0, 0x3f	; 63
    96ac:	f8 94       	cli
    96ae:	de bf       	out	0x3e, r29	; 62
    96b0:	0f be       	out	0x3f, r0	; 63
    96b2:	cd bf       	out	0x3d, r28	; 61
    96b4:	6a 01       	movw	r12, r20
    96b6:	f2 2e       	mov	r15, r18
    96b8:	b0 2e       	mov	r11, r16
    96ba:	10 2f       	mov	r17, r16
    96bc:	fb e3       	ldi	r31, 0x3B	; 59
    96be:	af 2e       	mov	r10, r31
    96c0:	a0 16       	cp	r10, r16
    96c2:	08 f4       	brcc	.+2      	; 0x96c6 <dtoa_prf+0x3a>
    96c4:	1b e3       	ldi	r17, 0x3B	; 59
    96c6:	1f 5f       	subi	r17, 0xFF	; 255
    96c8:	01 2f       	mov	r16, r17
    96ca:	27 e0       	ldi	r18, 0x07	; 7
    96cc:	ae 01       	movw	r20, r28
    96ce:	4f 5f       	subi	r20, 0xFF	; 255
    96d0:	5f 4f       	sbci	r21, 0xFF	; 255
    96d2:	0e 94 c2 4c 	call	0x9984	; 0x9984 <__ftoa_engine>
    96d6:	bc 01       	movw	r22, r24
    96d8:	89 81       	ldd	r24, Y+1	; 0x01
    96da:	98 2f       	mov	r25, r24
    96dc:	99 70       	andi	r25, 0x09	; 9
    96de:	91 30       	cpi	r25, 0x01	; 1
    96e0:	09 f4       	brne	.+2      	; 0x96e4 <dtoa_prf+0x58>
    96e2:	4e c0       	rjmp	.+156    	; 0x9780 <dtoa_prf+0xf4>
    96e4:	9b e2       	ldi	r25, 0x2B	; 43
    96e6:	e1 fc       	sbrc	r14, 1
    96e8:	04 c0       	rjmp	.+8      	; 0x96f2 <dtoa_prf+0x66>
    96ea:	9e 2d       	mov	r25, r14
    96ec:	91 70       	andi	r25, 0x01	; 1
    96ee:	e0 fc       	sbrc	r14, 0
    96f0:	49 c0       	rjmp	.+146    	; 0x9784 <dtoa_prf+0xf8>
    96f2:	5e 2d       	mov	r21, r14
    96f4:	50 71       	andi	r21, 0x10	; 16
    96f6:	e8 2f       	mov	r30, r24
    96f8:	e8 70       	andi	r30, 0x08	; 8
    96fa:	83 ff       	sbrs	r24, 3
    96fc:	55 c0       	rjmp	.+170    	; 0x97a8 <dtoa_prf+0x11c>
    96fe:	84 e0       	ldi	r24, 0x04	; 4
    9700:	91 11       	cpse	r25, r1
    9702:	01 c0       	rjmp	.+2      	; 0x9706 <dtoa_prf+0x7a>
    9704:	83 e0       	ldi	r24, 0x03	; 3
    9706:	ef 2d       	mov	r30, r15
    9708:	e8 1b       	sub	r30, r24
    970a:	8f 15       	cp	r24, r15
    970c:	08 f0       	brcs	.+2      	; 0x9710 <dtoa_prf+0x84>
    970e:	e0 e0       	ldi	r30, 0x00	; 0
    9710:	d6 01       	movw	r26, r12
    9712:	8e 2f       	mov	r24, r30
    9714:	20 e2       	ldi	r18, 0x20	; 32
    9716:	55 23       	and	r21, r21
    9718:	c9 f1       	breq	.+114    	; 0x978c <dtoa_prf+0x100>
    971a:	99 23       	and	r25, r25
    971c:	29 f0       	breq	.+10     	; 0x9728 <dtoa_prf+0x9c>
    971e:	d6 01       	movw	r26, r12
    9720:	9c 93       	st	X, r25
    9722:	c6 01       	movw	r24, r12
    9724:	01 96       	adiw	r24, 0x01	; 1
    9726:	6c 01       	movw	r12, r24
    9728:	96 01       	movw	r18, r12
    972a:	2d 5f       	subi	r18, 0xFD	; 253
    972c:	3f 4f       	sbci	r19, 0xFF	; 255
    972e:	e2 fe       	sbrs	r14, 2
    9730:	33 c0       	rjmp	.+102    	; 0x9798 <dtoa_prf+0x10c>
    9732:	8e e4       	ldi	r24, 0x4E	; 78
    9734:	d6 01       	movw	r26, r12
    9736:	8c 93       	st	X, r24
    9738:	91 e4       	ldi	r25, 0x41	; 65
    973a:	11 96       	adiw	r26, 0x01	; 1
    973c:	9c 93       	st	X, r25
    973e:	11 97       	sbiw	r26, 0x01	; 1
    9740:	12 96       	adiw	r26, 0x02	; 2
    9742:	8c 93       	st	X, r24
    9744:	d9 01       	movw	r26, r18
    9746:	8e 2f       	mov	r24, r30
    9748:	90 e2       	ldi	r25, 0x20	; 32
    974a:	81 11       	cpse	r24, r1
    974c:	2a c0       	rjmp	.+84     	; 0x97a2 <dtoa_prf+0x116>
    974e:	e2 0f       	add	r30, r18
    9750:	f3 2f       	mov	r31, r19
    9752:	f1 1d       	adc	r31, r1
    9754:	10 82       	st	Z, r1
    9756:	8e ef       	ldi	r24, 0xFE	; 254
    9758:	9f ef       	ldi	r25, 0xFF	; 255
    975a:	29 96       	adiw	r28, 0x09	; 9
    975c:	0f b6       	in	r0, 0x3f	; 63
    975e:	f8 94       	cli
    9760:	de bf       	out	0x3e, r29	; 62
    9762:	0f be       	out	0x3f, r0	; 63
    9764:	cd bf       	out	0x3d, r28	; 61
    9766:	df 91       	pop	r29
    9768:	cf 91       	pop	r28
    976a:	1f 91       	pop	r17
    976c:	0f 91       	pop	r16
    976e:	ff 90       	pop	r15
    9770:	ef 90       	pop	r14
    9772:	df 90       	pop	r13
    9774:	cf 90       	pop	r12
    9776:	bf 90       	pop	r11
    9778:	af 90       	pop	r10
    977a:	9f 90       	pop	r9
    977c:	8f 90       	pop	r8
    977e:	08 95       	ret
    9780:	9d e2       	ldi	r25, 0x2D	; 45
    9782:	b7 cf       	rjmp	.-146    	; 0x96f2 <dtoa_prf+0x66>
    9784:	90 e2       	ldi	r25, 0x20	; 32
    9786:	b5 cf       	rjmp	.-150    	; 0x96f2 <dtoa_prf+0x66>
    9788:	2d 93       	st	X+, r18
    978a:	81 50       	subi	r24, 0x01	; 1
    978c:	81 11       	cpse	r24, r1
    978e:	fc cf       	rjmp	.-8      	; 0x9788 <dtoa_prf+0xfc>
    9790:	ce 0e       	add	r12, r30
    9792:	d1 1c       	adc	r13, r1
    9794:	e0 e0       	ldi	r30, 0x00	; 0
    9796:	c1 cf       	rjmp	.-126    	; 0x971a <dtoa_prf+0x8e>
    9798:	8e e6       	ldi	r24, 0x6E	; 110
    979a:	d6 01       	movw	r26, r12
    979c:	8c 93       	st	X, r24
    979e:	91 e6       	ldi	r25, 0x61	; 97
    97a0:	cc cf       	rjmp	.-104    	; 0x973a <dtoa_prf+0xae>
    97a2:	9d 93       	st	X+, r25
    97a4:	81 50       	subi	r24, 0x01	; 1
    97a6:	d1 cf       	rjmp	.-94     	; 0x974a <dtoa_prf+0xbe>
    97a8:	48 2f       	mov	r20, r24
    97aa:	44 70       	andi	r20, 0x04	; 4
    97ac:	82 ff       	sbrs	r24, 2
    97ae:	3d c0       	rjmp	.+122    	; 0x982a <dtoa_prf+0x19e>
    97b0:	84 e0       	ldi	r24, 0x04	; 4
    97b2:	91 11       	cpse	r25, r1
    97b4:	01 c0       	rjmp	.+2      	; 0x97b8 <dtoa_prf+0x12c>
    97b6:	83 e0       	ldi	r24, 0x03	; 3
    97b8:	8f 15       	cp	r24, r15
    97ba:	10 f4       	brcc	.+4      	; 0x97c0 <dtoa_prf+0x134>
    97bc:	ef 2d       	mov	r30, r15
    97be:	e8 1b       	sub	r30, r24
    97c0:	d6 01       	movw	r26, r12
    97c2:	8e 2f       	mov	r24, r30
    97c4:	20 e2       	ldi	r18, 0x20	; 32
    97c6:	55 23       	and	r21, r21
    97c8:	09 f1       	breq	.+66     	; 0x980c <dtoa_prf+0x180>
    97ca:	99 23       	and	r25, r25
    97cc:	29 f0       	breq	.+10     	; 0x97d8 <dtoa_prf+0x14c>
    97ce:	d6 01       	movw	r26, r12
    97d0:	9c 93       	st	X, r25
    97d2:	c6 01       	movw	r24, r12
    97d4:	01 96       	adiw	r24, 0x01	; 1
    97d6:	6c 01       	movw	r12, r24
    97d8:	96 01       	movw	r18, r12
    97da:	2d 5f       	subi	r18, 0xFD	; 253
    97dc:	3f 4f       	sbci	r19, 0xFF	; 255
    97de:	e2 fe       	sbrs	r14, 2
    97e0:	1b c0       	rjmp	.+54     	; 0x9818 <dtoa_prf+0x18c>
    97e2:	89 e4       	ldi	r24, 0x49	; 73
    97e4:	d6 01       	movw	r26, r12
    97e6:	8c 93       	st	X, r24
    97e8:	8e e4       	ldi	r24, 0x4E	; 78
    97ea:	11 96       	adiw	r26, 0x01	; 1
    97ec:	8c 93       	st	X, r24
    97ee:	11 97       	sbiw	r26, 0x01	; 1
    97f0:	86 e4       	ldi	r24, 0x46	; 70
    97f2:	12 96       	adiw	r26, 0x02	; 2
    97f4:	8c 93       	st	X, r24
    97f6:	d9 01       	movw	r26, r18
    97f8:	8e 2f       	mov	r24, r30
    97fa:	90 e2       	ldi	r25, 0x20	; 32
    97fc:	88 23       	and	r24, r24
    97fe:	09 f4       	brne	.+2      	; 0x9802 <dtoa_prf+0x176>
    9800:	a6 cf       	rjmp	.-180    	; 0x974e <dtoa_prf+0xc2>
    9802:	9d 93       	st	X+, r25
    9804:	81 50       	subi	r24, 0x01	; 1
    9806:	fa cf       	rjmp	.-12     	; 0x97fc <dtoa_prf+0x170>
    9808:	2d 93       	st	X+, r18
    980a:	81 50       	subi	r24, 0x01	; 1
    980c:	81 11       	cpse	r24, r1
    980e:	fc cf       	rjmp	.-8      	; 0x9808 <dtoa_prf+0x17c>
    9810:	ce 0e       	add	r12, r30
    9812:	d1 1c       	adc	r13, r1
    9814:	e0 e0       	ldi	r30, 0x00	; 0
    9816:	d9 cf       	rjmp	.-78     	; 0x97ca <dtoa_prf+0x13e>
    9818:	89 e6       	ldi	r24, 0x69	; 105
    981a:	d6 01       	movw	r26, r12
    981c:	8c 93       	st	X, r24
    981e:	8e e6       	ldi	r24, 0x6E	; 110
    9820:	11 96       	adiw	r26, 0x01	; 1
    9822:	8c 93       	st	X, r24
    9824:	11 97       	sbiw	r26, 0x01	; 1
    9826:	86 e6       	ldi	r24, 0x66	; 102
    9828:	e4 cf       	rjmp	.-56     	; 0x97f2 <dtoa_prf+0x166>
    982a:	9b 01       	movw	r18, r22
    982c:	77 ff       	sbrs	r23, 7
    982e:	02 c0       	rjmp	.+4      	; 0x9834 <dtoa_prf+0x1a8>
    9830:	30 e0       	ldi	r19, 0x00	; 0
    9832:	20 e0       	ldi	r18, 0x00	; 0
    9834:	a1 e0       	ldi	r26, 0x01	; 1
    9836:	b0 e0       	ldi	r27, 0x00	; 0
    9838:	91 11       	cpse	r25, r1
    983a:	02 c0       	rjmp	.+4      	; 0x9840 <dtoa_prf+0x1b4>
    983c:	b0 e0       	ldi	r27, 0x00	; 0
    983e:	a0 e0       	ldi	r26, 0x00	; 0
    9840:	f9 01       	movw	r30, r18
    9842:	31 96       	adiw	r30, 0x01	; 1
    9844:	ae 0f       	add	r26, r30
    9846:	bf 1f       	adc	r27, r31
    9848:	8b 2c       	mov	r8, r11
    984a:	91 2c       	mov	r9, r1
    984c:	bb 20       	and	r11, r11
    984e:	09 f4       	brne	.+2      	; 0x9852 <dtoa_prf+0x1c6>
    9850:	61 c0       	rjmp	.+194    	; 0x9914 <dtoa_prf+0x288>
    9852:	54 01       	movw	r10, r8
    9854:	ef ef       	ldi	r30, 0xFF	; 255
    9856:	ae 1a       	sub	r10, r30
    9858:	be 0a       	sbc	r11, r30
    985a:	aa 0d       	add	r26, r10
    985c:	bb 1d       	adc	r27, r11
    985e:	fa 16       	cp	r15, r26
    9860:	1b 06       	cpc	r1, r27
    9862:	19 f0       	breq	.+6      	; 0x986a <dtoa_prf+0x1de>
    9864:	14 f0       	brlt	.+4      	; 0x986a <dtoa_prf+0x1de>
    9866:	4f 2d       	mov	r20, r15
    9868:	4a 1b       	sub	r20, r26
    986a:	51 11       	cpse	r21, r1
    986c:	88 c0       	rjmp	.+272    	; 0x997e <dtoa_prf+0x2f2>
    986e:	e3 fc       	sbrc	r14, 3
    9870:	59 c0       	rjmp	.+178    	; 0x9924 <dtoa_prf+0x298>
    9872:	76 01       	movw	r14, r12
    9874:	a4 2f       	mov	r26, r20
    9876:	b0 e2       	ldi	r27, 0x20	; 32
    9878:	a1 11       	cpse	r26, r1
    987a:	4f c0       	rjmp	.+158    	; 0x991a <dtoa_prf+0x28e>
    987c:	c4 0e       	add	r12, r20
    987e:	d1 1c       	adc	r13, r1
    9880:	99 23       	and	r25, r25
    9882:	09 f4       	brne	.+2      	; 0x9886 <dtoa_prf+0x1fa>
    9884:	5b c0       	rjmp	.+182    	; 0x993c <dtoa_prf+0x2b0>
    9886:	40 e0       	ldi	r20, 0x00	; 0
    9888:	d6 01       	movw	r26, r12
    988a:	11 96       	adiw	r26, 0x01	; 1
    988c:	f6 01       	movw	r30, r12
    988e:	90 83       	st	Z, r25
    9890:	6d 01       	movw	r12, r26
    9892:	55 23       	and	r21, r21
    9894:	09 f4       	brne	.+2      	; 0x9898 <dtoa_prf+0x20c>
    9896:	48 c0       	rjmp	.+144    	; 0x9928 <dtoa_prf+0x29c>
    9898:	01 2f       	mov	r16, r17
    989a:	06 0f       	add	r16, r22
    989c:	9a 81       	ldd	r25, Y+2	; 0x02
    989e:	58 2f       	mov	r21, r24
    98a0:	50 71       	andi	r21, 0x10	; 16
    98a2:	84 ff       	sbrs	r24, 4
    98a4:	03 c0       	rjmp	.+6      	; 0x98ac <dtoa_prf+0x220>
    98a6:	91 33       	cpi	r25, 0x31	; 49
    98a8:	09 f4       	brne	.+2      	; 0x98ac <dtoa_prf+0x220>
    98aa:	01 50       	subi	r16, 0x01	; 1
    98ac:	10 16       	cp	r1, r16
    98ae:	0c f0       	brlt	.+2      	; 0x98b2 <dtoa_prf+0x226>
    98b0:	47 c0       	rjmp	.+142    	; 0x9940 <dtoa_prf+0x2b4>
    98b2:	09 30       	cpi	r16, 0x09	; 9
    98b4:	08 f0       	brcs	.+2      	; 0x98b8 <dtoa_prf+0x22c>
    98b6:	08 e0       	ldi	r16, 0x08	; 8
    98b8:	ee e2       	ldi	r30, 0x2E	; 46
    98ba:	fe 2e       	mov	r15, r30
    98bc:	5b 01       	movw	r10, r22
    98be:	a0 1a       	sub	r10, r16
    98c0:	b1 08       	sbc	r11, r1
    98c2:	85 01       	movw	r16, r10
    98c4:	91 94       	neg	r9
    98c6:	81 94       	neg	r8
    98c8:	91 08       	sbc	r9, r1
    98ca:	2f 3f       	cpi	r18, 0xFF	; 255
    98cc:	32 07       	cpc	r19, r18
    98ce:	29 f4       	brne	.+10     	; 0x98da <dtoa_prf+0x24e>
    98d0:	d6 01       	movw	r26, r12
    98d2:	fc 92       	st	X, r15
    98d4:	f6 01       	movw	r30, r12
    98d6:	31 96       	adiw	r30, 0x01	; 1
    98d8:	6f 01       	movw	r12, r30
    98da:	62 17       	cp	r22, r18
    98dc:	73 07       	cpc	r23, r19
    98de:	94 f1       	brlt	.+100    	; 0x9944 <dtoa_prf+0x2b8>
    98e0:	02 17       	cp	r16, r18
    98e2:	13 07       	cpc	r17, r19
    98e4:	7c f5       	brge	.+94     	; 0x9944 <dtoa_prf+0x2b8>
    98e6:	db 01       	movw	r26, r22
    98e8:	a2 1b       	sub	r26, r18
    98ea:	b3 0b       	sbc	r27, r19
    98ec:	aa 24       	eor	r10, r10
    98ee:	a3 94       	inc	r10
    98f0:	b1 2c       	mov	r11, r1
    98f2:	ac 0e       	add	r10, r28
    98f4:	bd 1e       	adc	r11, r29
    98f6:	aa 0d       	add	r26, r10
    98f8:	bb 1d       	adc	r27, r11
    98fa:	11 96       	adiw	r26, 0x01	; 1
    98fc:	8c 91       	ld	r24, X
    98fe:	21 50       	subi	r18, 0x01	; 1
    9900:	31 09       	sbc	r19, r1
    9902:	d6 01       	movw	r26, r12
    9904:	11 96       	adiw	r26, 0x01	; 1
    9906:	28 15       	cp	r18, r8
    9908:	39 05       	cpc	r19, r9
    990a:	f4 f0       	brlt	.+60     	; 0x9948 <dtoa_prf+0x2bc>
    990c:	f6 01       	movw	r30, r12
    990e:	80 83       	st	Z, r24
    9910:	6d 01       	movw	r12, r26
    9912:	db cf       	rjmp	.-74     	; 0x98ca <dtoa_prf+0x23e>
    9914:	b1 2c       	mov	r11, r1
    9916:	a1 2c       	mov	r10, r1
    9918:	a0 cf       	rjmp	.-192    	; 0x985a <dtoa_prf+0x1ce>
    991a:	f7 01       	movw	r30, r14
    991c:	b1 93       	st	Z+, r27
    991e:	7f 01       	movw	r14, r30
    9920:	a1 50       	subi	r26, 0x01	; 1
    9922:	aa cf       	rjmp	.-172    	; 0x9878 <dtoa_prf+0x1ec>
    9924:	91 11       	cpse	r25, r1
    9926:	b0 cf       	rjmp	.-160    	; 0x9888 <dtoa_prf+0x1fc>
    9928:	d6 01       	movw	r26, r12
    992a:	94 2f       	mov	r25, r20
    992c:	50 e3       	ldi	r21, 0x30	; 48
    992e:	02 c0       	rjmp	.+4      	; 0x9934 <dtoa_prf+0x2a8>
    9930:	5d 93       	st	X+, r21
    9932:	91 50       	subi	r25, 0x01	; 1
    9934:	91 11       	cpse	r25, r1
    9936:	fc cf       	rjmp	.-8      	; 0x9930 <dtoa_prf+0x2a4>
    9938:	c4 0e       	add	r12, r20
    993a:	d1 1c       	adc	r13, r1
    993c:	40 e0       	ldi	r20, 0x00	; 0
    993e:	ac cf       	rjmp	.-168    	; 0x9898 <dtoa_prf+0x20c>
    9940:	01 e0       	ldi	r16, 0x01	; 1
    9942:	ba cf       	rjmp	.-140    	; 0x98b8 <dtoa_prf+0x22c>
    9944:	80 e3       	ldi	r24, 0x30	; 48
    9946:	db cf       	rjmp	.-74     	; 0x98fe <dtoa_prf+0x272>
    9948:	62 17       	cp	r22, r18
    994a:	73 07       	cpc	r23, r19
    994c:	31 f4       	brne	.+12     	; 0x995a <dtoa_prf+0x2ce>
    994e:	96 33       	cpi	r25, 0x36	; 54
    9950:	88 f4       	brcc	.+34     	; 0x9974 <dtoa_prf+0x2e8>
    9952:	95 33       	cpi	r25, 0x35	; 53
    9954:	11 f4       	brne	.+4      	; 0x995a <dtoa_prf+0x2ce>
    9956:	55 23       	and	r21, r21
    9958:	69 f0       	breq	.+26     	; 0x9974 <dtoa_prf+0x2e8>
    995a:	f6 01       	movw	r30, r12
    995c:	80 83       	st	Z, r24
    995e:	fd 01       	movw	r30, r26
    9960:	84 2f       	mov	r24, r20
    9962:	90 e2       	ldi	r25, 0x20	; 32
    9964:	81 11       	cpse	r24, r1
    9966:	08 c0       	rjmp	.+16     	; 0x9978 <dtoa_prf+0x2ec>
    9968:	a4 0f       	add	r26, r20
    996a:	b1 1d       	adc	r27, r1
    996c:	1c 92       	st	X, r1
    996e:	90 e0       	ldi	r25, 0x00	; 0
    9970:	80 e0       	ldi	r24, 0x00	; 0
    9972:	f3 ce       	rjmp	.-538    	; 0x975a <dtoa_prf+0xce>
    9974:	81 e3       	ldi	r24, 0x31	; 49
    9976:	f1 cf       	rjmp	.-30     	; 0x995a <dtoa_prf+0x2ce>
    9978:	91 93       	st	Z+, r25
    997a:	81 50       	subi	r24, 0x01	; 1
    997c:	f3 cf       	rjmp	.-26     	; 0x9964 <dtoa_prf+0x2d8>
    997e:	91 11       	cpse	r25, r1
    9980:	83 cf       	rjmp	.-250    	; 0x9888 <dtoa_prf+0x1fc>
    9982:	8a cf       	rjmp	.-236    	; 0x9898 <dtoa_prf+0x20c>

00009984 <__ftoa_engine>:
__ftoa_engine():
    9984:	28 30       	cpi	r18, 0x08	; 8
    9986:	08 f0       	brcs	.+2      	; 0x998a <__ftoa_engine+0x6>
    9988:	27 e0       	ldi	r18, 0x07	; 7
    998a:	33 27       	eor	r19, r19
    998c:	da 01       	movw	r26, r20
    998e:	99 0f       	add	r25, r25
    9990:	31 1d       	adc	r19, r1
    9992:	87 fd       	sbrc	r24, 7
    9994:	91 60       	ori	r25, 0x01	; 1
    9996:	00 96       	adiw	r24, 0x00	; 0
    9998:	61 05       	cpc	r22, r1
    999a:	71 05       	cpc	r23, r1
    999c:	39 f4       	brne	.+14     	; 0x99ac <__ftoa_engine+0x28>
    999e:	32 60       	ori	r19, 0x02	; 2
    99a0:	2e 5f       	subi	r18, 0xFE	; 254
    99a2:	3d 93       	st	X+, r19
    99a4:	30 e3       	ldi	r19, 0x30	; 48
    99a6:	2a 95       	dec	r18
    99a8:	e1 f7       	brne	.-8      	; 0x99a2 <__ftoa_engine+0x1e>
    99aa:	08 95       	ret
    99ac:	9f 3f       	cpi	r25, 0xFF	; 255
    99ae:	30 f0       	brcs	.+12     	; 0x99bc <__ftoa_engine+0x38>
    99b0:	80 38       	cpi	r24, 0x80	; 128
    99b2:	71 05       	cpc	r23, r1
    99b4:	61 05       	cpc	r22, r1
    99b6:	09 f0       	breq	.+2      	; 0x99ba <__ftoa_engine+0x36>
    99b8:	3c 5f       	subi	r19, 0xFC	; 252
    99ba:	3c 5f       	subi	r19, 0xFC	; 252
    99bc:	3d 93       	st	X+, r19
    99be:	91 30       	cpi	r25, 0x01	; 1
    99c0:	08 f0       	brcs	.+2      	; 0x99c4 <__ftoa_engine+0x40>
    99c2:	80 68       	ori	r24, 0x80	; 128
    99c4:	91 1d       	adc	r25, r1
    99c6:	df 93       	push	r29
    99c8:	cf 93       	push	r28
    99ca:	1f 93       	push	r17
    99cc:	0f 93       	push	r16
    99ce:	ff 92       	push	r15
    99d0:	ef 92       	push	r14
    99d2:	19 2f       	mov	r17, r25
    99d4:	98 7f       	andi	r25, 0xF8	; 248
    99d6:	96 95       	lsr	r25
    99d8:	e9 2f       	mov	r30, r25
    99da:	96 95       	lsr	r25
    99dc:	96 95       	lsr	r25
    99de:	e9 0f       	add	r30, r25
    99e0:	ff 27       	eor	r31, r31
    99e2:	e0 5c       	subi	r30, 0xC0	; 192
    99e4:	fe 4f       	sbci	r31, 0xFE	; 254
    99e6:	99 27       	eor	r25, r25
    99e8:	33 27       	eor	r19, r19
    99ea:	ee 24       	eor	r14, r14
    99ec:	ff 24       	eor	r15, r15
    99ee:	a7 01       	movw	r20, r14
    99f0:	e7 01       	movw	r28, r14
    99f2:	05 90       	lpm	r0, Z+
    99f4:	08 94       	sec
    99f6:	07 94       	ror	r0
    99f8:	28 f4       	brcc	.+10     	; 0x9a04 <__ftoa_engine+0x80>
    99fa:	36 0f       	add	r19, r22
    99fc:	e7 1e       	adc	r14, r23
    99fe:	f8 1e       	adc	r15, r24
    9a00:	49 1f       	adc	r20, r25
    9a02:	51 1d       	adc	r21, r1
    9a04:	66 0f       	add	r22, r22
    9a06:	77 1f       	adc	r23, r23
    9a08:	88 1f       	adc	r24, r24
    9a0a:	99 1f       	adc	r25, r25
    9a0c:	06 94       	lsr	r0
    9a0e:	a1 f7       	brne	.-24     	; 0x99f8 <__ftoa_engine+0x74>
    9a10:	05 90       	lpm	r0, Z+
    9a12:	07 94       	ror	r0
    9a14:	28 f4       	brcc	.+10     	; 0x9a20 <__ftoa_engine+0x9c>
    9a16:	e7 0e       	add	r14, r23
    9a18:	f8 1e       	adc	r15, r24
    9a1a:	49 1f       	adc	r20, r25
    9a1c:	56 1f       	adc	r21, r22
    9a1e:	c1 1d       	adc	r28, r1
    9a20:	77 0f       	add	r23, r23
    9a22:	88 1f       	adc	r24, r24
    9a24:	99 1f       	adc	r25, r25
    9a26:	66 1f       	adc	r22, r22
    9a28:	06 94       	lsr	r0
    9a2a:	a1 f7       	brne	.-24     	; 0x9a14 <__ftoa_engine+0x90>
    9a2c:	05 90       	lpm	r0, Z+
    9a2e:	07 94       	ror	r0
    9a30:	28 f4       	brcc	.+10     	; 0x9a3c <__ftoa_engine+0xb8>
    9a32:	f8 0e       	add	r15, r24
    9a34:	49 1f       	adc	r20, r25
    9a36:	56 1f       	adc	r21, r22
    9a38:	c7 1f       	adc	r28, r23
    9a3a:	d1 1d       	adc	r29, r1
    9a3c:	88 0f       	add	r24, r24
    9a3e:	99 1f       	adc	r25, r25
    9a40:	66 1f       	adc	r22, r22
    9a42:	77 1f       	adc	r23, r23
    9a44:	06 94       	lsr	r0
    9a46:	a1 f7       	brne	.-24     	; 0x9a30 <__ftoa_engine+0xac>
    9a48:	05 90       	lpm	r0, Z+
    9a4a:	07 94       	ror	r0
    9a4c:	20 f4       	brcc	.+8      	; 0x9a56 <__ftoa_engine+0xd2>
    9a4e:	49 0f       	add	r20, r25
    9a50:	56 1f       	adc	r21, r22
    9a52:	c7 1f       	adc	r28, r23
    9a54:	d8 1f       	adc	r29, r24
    9a56:	99 0f       	add	r25, r25
    9a58:	66 1f       	adc	r22, r22
    9a5a:	77 1f       	adc	r23, r23
    9a5c:	88 1f       	adc	r24, r24
    9a5e:	06 94       	lsr	r0
    9a60:	a9 f7       	brne	.-22     	; 0x9a4c <__ftoa_engine+0xc8>
    9a62:	84 91       	lpm	r24, Z
    9a64:	10 95       	com	r17
    9a66:	17 70       	andi	r17, 0x07	; 7
    9a68:	41 f0       	breq	.+16     	; 0x9a7a <__ftoa_engine+0xf6>
    9a6a:	d6 95       	lsr	r29
    9a6c:	c7 95       	ror	r28
    9a6e:	57 95       	ror	r21
    9a70:	47 95       	ror	r20
    9a72:	f7 94       	ror	r15
    9a74:	e7 94       	ror	r14
    9a76:	1a 95       	dec	r17
    9a78:	c1 f7       	brne	.-16     	; 0x9a6a <__ftoa_engine+0xe6>
    9a7a:	e6 ee       	ldi	r30, 0xE6	; 230
    9a7c:	f0 e0       	ldi	r31, 0x00	; 0
    9a7e:	68 94       	set
    9a80:	15 90       	lpm	r1, Z+
    9a82:	15 91       	lpm	r17, Z+
    9a84:	35 91       	lpm	r19, Z+
    9a86:	65 91       	lpm	r22, Z+
    9a88:	95 91       	lpm	r25, Z+
    9a8a:	05 90       	lpm	r0, Z+
    9a8c:	7f e2       	ldi	r23, 0x2F	; 47
    9a8e:	73 95       	inc	r23
    9a90:	e1 18       	sub	r14, r1
    9a92:	f1 0a       	sbc	r15, r17
    9a94:	43 0b       	sbc	r20, r19
    9a96:	56 0b       	sbc	r21, r22
    9a98:	c9 0b       	sbc	r28, r25
    9a9a:	d0 09       	sbc	r29, r0
    9a9c:	c0 f7       	brcc	.-16     	; 0x9a8e <__ftoa_engine+0x10a>
    9a9e:	e1 0c       	add	r14, r1
    9aa0:	f1 1e       	adc	r15, r17
    9aa2:	43 1f       	adc	r20, r19
    9aa4:	56 1f       	adc	r21, r22
    9aa6:	c9 1f       	adc	r28, r25
    9aa8:	d0 1d       	adc	r29, r0
    9aaa:	7e f4       	brtc	.+30     	; 0x9aca <__ftoa_engine+0x146>
    9aac:	70 33       	cpi	r23, 0x30	; 48
    9aae:	11 f4       	brne	.+4      	; 0x9ab4 <__ftoa_engine+0x130>
    9ab0:	8a 95       	dec	r24
    9ab2:	e6 cf       	rjmp	.-52     	; 0x9a80 <__ftoa_engine+0xfc>
    9ab4:	e8 94       	clt
    9ab6:	01 50       	subi	r16, 0x01	; 1
    9ab8:	30 f0       	brcs	.+12     	; 0x9ac6 <__ftoa_engine+0x142>
    9aba:	08 0f       	add	r16, r24
    9abc:	0a f4       	brpl	.+2      	; 0x9ac0 <__ftoa_engine+0x13c>
    9abe:	00 27       	eor	r16, r16
    9ac0:	02 17       	cp	r16, r18
    9ac2:	08 f4       	brcc	.+2      	; 0x9ac6 <__ftoa_engine+0x142>
    9ac4:	20 2f       	mov	r18, r16
    9ac6:	23 95       	inc	r18
    9ac8:	02 2f       	mov	r16, r18
    9aca:	7a 33       	cpi	r23, 0x3A	; 58
    9acc:	28 f0       	brcs	.+10     	; 0x9ad8 <__ftoa_engine+0x154>
    9ace:	79 e3       	ldi	r23, 0x39	; 57
    9ad0:	7d 93       	st	X+, r23
    9ad2:	2a 95       	dec	r18
    9ad4:	e9 f7       	brne	.-6      	; 0x9ad0 <__ftoa_engine+0x14c>
    9ad6:	10 c0       	rjmp	.+32     	; 0x9af8 <__ftoa_engine+0x174>
    9ad8:	7d 93       	st	X+, r23
    9ada:	2a 95       	dec	r18
    9adc:	89 f6       	brne	.-94     	; 0x9a80 <__ftoa_engine+0xfc>
    9ade:	06 94       	lsr	r0
    9ae0:	97 95       	ror	r25
    9ae2:	67 95       	ror	r22
    9ae4:	37 95       	ror	r19
    9ae6:	17 95       	ror	r17
    9ae8:	17 94       	ror	r1
    9aea:	e1 18       	sub	r14, r1
    9aec:	f1 0a       	sbc	r15, r17
    9aee:	43 0b       	sbc	r20, r19
    9af0:	56 0b       	sbc	r21, r22
    9af2:	c9 0b       	sbc	r28, r25
    9af4:	d0 09       	sbc	r29, r0
    9af6:	98 f0       	brcs	.+38     	; 0x9b1e <__ftoa_engine+0x19a>
    9af8:	23 95       	inc	r18
    9afa:	7e 91       	ld	r23, -X
    9afc:	73 95       	inc	r23
    9afe:	7a 33       	cpi	r23, 0x3A	; 58
    9b00:	08 f0       	brcs	.+2      	; 0x9b04 <__ftoa_engine+0x180>
    9b02:	70 e3       	ldi	r23, 0x30	; 48
    9b04:	7c 93       	st	X, r23
    9b06:	20 13       	cpse	r18, r16
    9b08:	b8 f7       	brcc	.-18     	; 0x9af8 <__ftoa_engine+0x174>
    9b0a:	7e 91       	ld	r23, -X
    9b0c:	70 61       	ori	r23, 0x10	; 16
    9b0e:	7d 93       	st	X+, r23
    9b10:	30 f0       	brcs	.+12     	; 0x9b1e <__ftoa_engine+0x19a>
    9b12:	83 95       	inc	r24
    9b14:	71 e3       	ldi	r23, 0x31	; 49
    9b16:	7d 93       	st	X+, r23
    9b18:	70 e3       	ldi	r23, 0x30	; 48
    9b1a:	2a 95       	dec	r18
    9b1c:	e1 f7       	brne	.-8      	; 0x9b16 <__ftoa_engine+0x192>
    9b1e:	11 24       	eor	r1, r1
    9b20:	ef 90       	pop	r14
    9b22:	ff 90       	pop	r15
    9b24:	0f 91       	pop	r16
    9b26:	1f 91       	pop	r17
    9b28:	cf 91       	pop	r28
    9b2a:	df 91       	pop	r29
    9b2c:	99 27       	eor	r25, r25
    9b2e:	87 fd       	sbrc	r24, 7
    9b30:	90 95       	com	r25
    9b32:	08 95       	ret

00009b34 <strrev>:
strrev():
    9b34:	dc 01       	movw	r26, r24
    9b36:	fc 01       	movw	r30, r24
    9b38:	67 2f       	mov	r22, r23
    9b3a:	71 91       	ld	r23, Z+
    9b3c:	77 23       	and	r23, r23
    9b3e:	e1 f7       	brne	.-8      	; 0x9b38 <strrev+0x4>
    9b40:	32 97       	sbiw	r30, 0x02	; 2
    9b42:	04 c0       	rjmp	.+8      	; 0x9b4c <strrev+0x18>
    9b44:	7c 91       	ld	r23, X
    9b46:	6d 93       	st	X+, r22
    9b48:	70 83       	st	Z, r23
    9b4a:	62 91       	ld	r22, -Z
    9b4c:	ae 17       	cp	r26, r30
    9b4e:	bf 07       	cpc	r27, r31
    9b50:	c8 f3       	brcs	.-14     	; 0x9b44 <strrev+0x10>
    9b52:	08 95       	ret

00009b54 <__cmpsf2>:
__cmpsf2():
    9b54:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <__fp_cmp>
    9b58:	08 f4       	brcc	.+2      	; 0x9b5c <__cmpsf2+0x8>
    9b5a:	81 e0       	ldi	r24, 0x01	; 1
    9b5c:	08 95       	ret

00009b5e <__floatunsisf>:
__floatunsisf():
    9b5e:	e8 94       	clt
    9b60:	09 c0       	rjmp	.+18     	; 0x9b74 <__floatsisf+0x12>

00009b62 <__floatsisf>:
    9b62:	97 fb       	bst	r25, 7
    9b64:	3e f4       	brtc	.+14     	; 0x9b74 <__floatsisf+0x12>
    9b66:	90 95       	com	r25
    9b68:	80 95       	com	r24
    9b6a:	70 95       	com	r23
    9b6c:	61 95       	neg	r22
    9b6e:	7f 4f       	sbci	r23, 0xFF	; 255
    9b70:	8f 4f       	sbci	r24, 0xFF	; 255
    9b72:	9f 4f       	sbci	r25, 0xFF	; 255
    9b74:	99 23       	and	r25, r25
    9b76:	a9 f0       	breq	.+42     	; 0x9ba2 <__floatsisf+0x40>
    9b78:	f9 2f       	mov	r31, r25
    9b7a:	96 e9       	ldi	r25, 0x96	; 150
    9b7c:	bb 27       	eor	r27, r27
    9b7e:	93 95       	inc	r25
    9b80:	f6 95       	lsr	r31
    9b82:	87 95       	ror	r24
    9b84:	77 95       	ror	r23
    9b86:	67 95       	ror	r22
    9b88:	b7 95       	ror	r27
    9b8a:	f1 11       	cpse	r31, r1
    9b8c:	f8 cf       	rjmp	.-16     	; 0x9b7e <__floatsisf+0x1c>
    9b8e:	fa f4       	brpl	.+62     	; 0x9bce <__floatsisf+0x6c>
    9b90:	bb 0f       	add	r27, r27
    9b92:	11 f4       	brne	.+4      	; 0x9b98 <__floatsisf+0x36>
    9b94:	60 ff       	sbrs	r22, 0
    9b96:	1b c0       	rjmp	.+54     	; 0x9bce <__floatsisf+0x6c>
    9b98:	6f 5f       	subi	r22, 0xFF	; 255
    9b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    9b9c:	8f 4f       	sbci	r24, 0xFF	; 255
    9b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    9ba0:	16 c0       	rjmp	.+44     	; 0x9bce <__floatsisf+0x6c>
    9ba2:	88 23       	and	r24, r24
    9ba4:	11 f0       	breq	.+4      	; 0x9baa <__floatsisf+0x48>
    9ba6:	96 e9       	ldi	r25, 0x96	; 150
    9ba8:	11 c0       	rjmp	.+34     	; 0x9bcc <__floatsisf+0x6a>
    9baa:	77 23       	and	r23, r23
    9bac:	21 f0       	breq	.+8      	; 0x9bb6 <__floatsisf+0x54>
    9bae:	9e e8       	ldi	r25, 0x8E	; 142
    9bb0:	87 2f       	mov	r24, r23
    9bb2:	76 2f       	mov	r23, r22
    9bb4:	05 c0       	rjmp	.+10     	; 0x9bc0 <__floatsisf+0x5e>
    9bb6:	66 23       	and	r22, r22
    9bb8:	71 f0       	breq	.+28     	; 0x9bd6 <__floatsisf+0x74>
    9bba:	96 e8       	ldi	r25, 0x86	; 134
    9bbc:	86 2f       	mov	r24, r22
    9bbe:	70 e0       	ldi	r23, 0x00	; 0
    9bc0:	60 e0       	ldi	r22, 0x00	; 0
    9bc2:	2a f0       	brmi	.+10     	; 0x9bce <__floatsisf+0x6c>
    9bc4:	9a 95       	dec	r25
    9bc6:	66 0f       	add	r22, r22
    9bc8:	77 1f       	adc	r23, r23
    9bca:	88 1f       	adc	r24, r24
    9bcc:	da f7       	brpl	.-10     	; 0x9bc4 <__floatsisf+0x62>
    9bce:	88 0f       	add	r24, r24
    9bd0:	96 95       	lsr	r25
    9bd2:	87 95       	ror	r24
    9bd4:	97 f9       	bld	r25, 7
    9bd6:	08 95       	ret

00009bd8 <__fp_cmp>:
__fp_cmp():
    9bd8:	99 0f       	add	r25, r25
    9bda:	00 08       	sbc	r0, r0
    9bdc:	55 0f       	add	r21, r21
    9bde:	aa 0b       	sbc	r26, r26
    9be0:	e0 e8       	ldi	r30, 0x80	; 128
    9be2:	fe ef       	ldi	r31, 0xFE	; 254
    9be4:	16 16       	cp	r1, r22
    9be6:	17 06       	cpc	r1, r23
    9be8:	e8 07       	cpc	r30, r24
    9bea:	f9 07       	cpc	r31, r25
    9bec:	c0 f0       	brcs	.+48     	; 0x9c1e <__fp_cmp+0x46>
    9bee:	12 16       	cp	r1, r18
    9bf0:	13 06       	cpc	r1, r19
    9bf2:	e4 07       	cpc	r30, r20
    9bf4:	f5 07       	cpc	r31, r21
    9bf6:	98 f0       	brcs	.+38     	; 0x9c1e <__fp_cmp+0x46>
    9bf8:	62 1b       	sub	r22, r18
    9bfa:	73 0b       	sbc	r23, r19
    9bfc:	84 0b       	sbc	r24, r20
    9bfe:	95 0b       	sbc	r25, r21
    9c00:	39 f4       	brne	.+14     	; 0x9c10 <__fp_cmp+0x38>
    9c02:	0a 26       	eor	r0, r26
    9c04:	61 f0       	breq	.+24     	; 0x9c1e <__fp_cmp+0x46>
    9c06:	23 2b       	or	r18, r19
    9c08:	24 2b       	or	r18, r20
    9c0a:	25 2b       	or	r18, r21
    9c0c:	21 f4       	brne	.+8      	; 0x9c16 <__fp_cmp+0x3e>
    9c0e:	08 95       	ret
    9c10:	0a 26       	eor	r0, r26
    9c12:	09 f4       	brne	.+2      	; 0x9c16 <__fp_cmp+0x3e>
    9c14:	a1 40       	sbci	r26, 0x01	; 1
    9c16:	a6 95       	lsr	r26
    9c18:	8f ef       	ldi	r24, 0xFF	; 255
    9c1a:	81 1d       	adc	r24, r1
    9c1c:	81 1d       	adc	r24, r1
    9c1e:	08 95       	ret

00009c20 <__mulsf3>:
__mulsf3():
    9c20:	0e 94 23 4e 	call	0x9c46	; 0x9c46 <__mulsf3x>
    9c24:	0c 94 94 4e 	jmp	0x9d28	; 0x9d28 <__fp_round>
    9c28:	0e 94 86 4e 	call	0x9d0c	; 0x9d0c <__fp_pscA>
    9c2c:	38 f0       	brcs	.+14     	; 0x9c3c <__mulsf3+0x1c>
    9c2e:	0e 94 8d 4e 	call	0x9d1a	; 0x9d1a <__fp_pscB>
    9c32:	20 f0       	brcs	.+8      	; 0x9c3c <__mulsf3+0x1c>
    9c34:	95 23       	and	r25, r21
    9c36:	11 f0       	breq	.+4      	; 0x9c3c <__mulsf3+0x1c>
    9c38:	0c 94 7d 4e 	jmp	0x9cfa	; 0x9cfa <__fp_inf>
    9c3c:	0c 94 83 4e 	jmp	0x9d06	; 0x9d06 <__fp_nan>
    9c40:	11 24       	eor	r1, r1
    9c42:	0c 94 c8 4e 	jmp	0x9d90	; 0x9d90 <__fp_szero>

00009c46 <__mulsf3x>:
__mulsf3x():
    9c46:	0e 94 a5 4e 	call	0x9d4a	; 0x9d4a <__fp_split3>
    9c4a:	70 f3       	brcs	.-36     	; 0x9c28 <__mulsf3+0x8>

00009c4c <__mulsf3_pse>:
    9c4c:	95 9f       	mul	r25, r21
    9c4e:	c1 f3       	breq	.-16     	; 0x9c40 <__mulsf3+0x20>
    9c50:	95 0f       	add	r25, r21
    9c52:	50 e0       	ldi	r21, 0x00	; 0
    9c54:	55 1f       	adc	r21, r21
    9c56:	62 9f       	mul	r22, r18
    9c58:	f0 01       	movw	r30, r0
    9c5a:	72 9f       	mul	r23, r18
    9c5c:	bb 27       	eor	r27, r27
    9c5e:	f0 0d       	add	r31, r0
    9c60:	b1 1d       	adc	r27, r1
    9c62:	63 9f       	mul	r22, r19
    9c64:	aa 27       	eor	r26, r26
    9c66:	f0 0d       	add	r31, r0
    9c68:	b1 1d       	adc	r27, r1
    9c6a:	aa 1f       	adc	r26, r26
    9c6c:	64 9f       	mul	r22, r20
    9c6e:	66 27       	eor	r22, r22
    9c70:	b0 0d       	add	r27, r0
    9c72:	a1 1d       	adc	r26, r1
    9c74:	66 1f       	adc	r22, r22
    9c76:	82 9f       	mul	r24, r18
    9c78:	22 27       	eor	r18, r18
    9c7a:	b0 0d       	add	r27, r0
    9c7c:	a1 1d       	adc	r26, r1
    9c7e:	62 1f       	adc	r22, r18
    9c80:	73 9f       	mul	r23, r19
    9c82:	b0 0d       	add	r27, r0
    9c84:	a1 1d       	adc	r26, r1
    9c86:	62 1f       	adc	r22, r18
    9c88:	83 9f       	mul	r24, r19
    9c8a:	a0 0d       	add	r26, r0
    9c8c:	61 1d       	adc	r22, r1
    9c8e:	22 1f       	adc	r18, r18
    9c90:	74 9f       	mul	r23, r20
    9c92:	33 27       	eor	r19, r19
    9c94:	a0 0d       	add	r26, r0
    9c96:	61 1d       	adc	r22, r1
    9c98:	23 1f       	adc	r18, r19
    9c9a:	84 9f       	mul	r24, r20
    9c9c:	60 0d       	add	r22, r0
    9c9e:	21 1d       	adc	r18, r1
    9ca0:	82 2f       	mov	r24, r18
    9ca2:	76 2f       	mov	r23, r22
    9ca4:	6a 2f       	mov	r22, r26
    9ca6:	11 24       	eor	r1, r1
    9ca8:	9f 57       	subi	r25, 0x7F	; 127
    9caa:	50 40       	sbci	r21, 0x00	; 0
    9cac:	9a f0       	brmi	.+38     	; 0x9cd4 <__mulsf3_pse+0x88>
    9cae:	f1 f0       	breq	.+60     	; 0x9cec <__mulsf3_pse+0xa0>
    9cb0:	88 23       	and	r24, r24
    9cb2:	4a f0       	brmi	.+18     	; 0x9cc6 <__mulsf3_pse+0x7a>
    9cb4:	ee 0f       	add	r30, r30
    9cb6:	ff 1f       	adc	r31, r31
    9cb8:	bb 1f       	adc	r27, r27
    9cba:	66 1f       	adc	r22, r22
    9cbc:	77 1f       	adc	r23, r23
    9cbe:	88 1f       	adc	r24, r24
    9cc0:	91 50       	subi	r25, 0x01	; 1
    9cc2:	50 40       	sbci	r21, 0x00	; 0
    9cc4:	a9 f7       	brne	.-22     	; 0x9cb0 <__mulsf3_pse+0x64>
    9cc6:	9e 3f       	cpi	r25, 0xFE	; 254
    9cc8:	51 05       	cpc	r21, r1
    9cca:	80 f0       	brcs	.+32     	; 0x9cec <__mulsf3_pse+0xa0>
    9ccc:	0c 94 7d 4e 	jmp	0x9cfa	; 0x9cfa <__fp_inf>
    9cd0:	0c 94 c8 4e 	jmp	0x9d90	; 0x9d90 <__fp_szero>
    9cd4:	5f 3f       	cpi	r21, 0xFF	; 255
    9cd6:	e4 f3       	brlt	.-8      	; 0x9cd0 <__mulsf3_pse+0x84>
    9cd8:	98 3e       	cpi	r25, 0xE8	; 232
    9cda:	d4 f3       	brlt	.-12     	; 0x9cd0 <__mulsf3_pse+0x84>
    9cdc:	86 95       	lsr	r24
    9cde:	77 95       	ror	r23
    9ce0:	67 95       	ror	r22
    9ce2:	b7 95       	ror	r27
    9ce4:	f7 95       	ror	r31
    9ce6:	e7 95       	ror	r30
    9ce8:	9f 5f       	subi	r25, 0xFF	; 255
    9cea:	c1 f7       	brne	.-16     	; 0x9cdc <__mulsf3_pse+0x90>
    9cec:	fe 2b       	or	r31, r30
    9cee:	88 0f       	add	r24, r24
    9cf0:	91 1d       	adc	r25, r1
    9cf2:	96 95       	lsr	r25
    9cf4:	87 95       	ror	r24
    9cf6:	97 f9       	bld	r25, 7
    9cf8:	08 95       	ret

00009cfa <__fp_inf>:
    9cfa:	97 f9       	bld	r25, 7
    9cfc:	9f 67       	ori	r25, 0x7F	; 127
    9cfe:	80 e8       	ldi	r24, 0x80	; 128
    9d00:	70 e0       	ldi	r23, 0x00	; 0
    9d02:	60 e0       	ldi	r22, 0x00	; 0
    9d04:	08 95       	ret

00009d06 <__fp_nan>:
    9d06:	9f ef       	ldi	r25, 0xFF	; 255
    9d08:	80 ec       	ldi	r24, 0xC0	; 192
    9d0a:	08 95       	ret

00009d0c <__fp_pscA>:
    9d0c:	00 24       	eor	r0, r0
    9d0e:	0a 94       	dec	r0
    9d10:	16 16       	cp	r1, r22
    9d12:	17 06       	cpc	r1, r23
    9d14:	18 06       	cpc	r1, r24
    9d16:	09 06       	cpc	r0, r25
__fp_pscA():
    9d18:	08 95       	ret

00009d1a <__fp_pscB>:
__fp_pscB():
    9d1a:	00 24       	eor	r0, r0
    9d1c:	0a 94       	dec	r0
    9d1e:	12 16       	cp	r1, r18
    9d20:	13 06       	cpc	r1, r19
    9d22:	14 06       	cpc	r1, r20
    9d24:	05 06       	cpc	r0, r21
    9d26:	08 95       	ret

00009d28 <__fp_round>:
__fp_round():
    9d28:	09 2e       	mov	r0, r25
    9d2a:	03 94       	inc	r0
    9d2c:	00 0c       	add	r0, r0
    9d2e:	11 f4       	brne	.+4      	; 0x9d34 <__fp_round+0xc>
    9d30:	88 23       	and	r24, r24
    9d32:	52 f0       	brmi	.+20     	; 0x9d48 <__fp_round+0x20>
    9d34:	bb 0f       	add	r27, r27
    9d36:	40 f4       	brcc	.+16     	; 0x9d48 <__fp_round+0x20>
    9d38:	bf 2b       	or	r27, r31
    9d3a:	11 f4       	brne	.+4      	; 0x9d40 <__fp_round+0x18>
    9d3c:	60 ff       	sbrs	r22, 0
    9d3e:	04 c0       	rjmp	.+8      	; 0x9d48 <__fp_round+0x20>
    9d40:	6f 5f       	subi	r22, 0xFF	; 255
    9d42:	7f 4f       	sbci	r23, 0xFF	; 255
    9d44:	8f 4f       	sbci	r24, 0xFF	; 255
    9d46:	9f 4f       	sbci	r25, 0xFF	; 255
    9d48:	08 95       	ret

00009d4a <__fp_split3>:
__fp_split3():
    9d4a:	57 fd       	sbrc	r21, 7
    9d4c:	90 58       	subi	r25, 0x80	; 128
    9d4e:	44 0f       	add	r20, r20
    9d50:	55 1f       	adc	r21, r21
    9d52:	59 f0       	breq	.+22     	; 0x9d6a <__fp_splitA+0x10>
    9d54:	5f 3f       	cpi	r21, 0xFF	; 255
    9d56:	71 f0       	breq	.+28     	; 0x9d74 <__fp_splitA+0x1a>
    9d58:	47 95       	ror	r20

00009d5a <__fp_splitA>:
    9d5a:	88 0f       	add	r24, r24
    9d5c:	97 fb       	bst	r25, 7
    9d5e:	99 1f       	adc	r25, r25
    9d60:	61 f0       	breq	.+24     	; 0x9d7a <__fp_splitA+0x20>
    9d62:	9f 3f       	cpi	r25, 0xFF	; 255
    9d64:	79 f0       	breq	.+30     	; 0x9d84 <__fp_splitA+0x2a>
    9d66:	87 95       	ror	r24
    9d68:	08 95       	ret
    9d6a:	12 16       	cp	r1, r18
    9d6c:	13 06       	cpc	r1, r19
    9d6e:	14 06       	cpc	r1, r20
    9d70:	55 1f       	adc	r21, r21
    9d72:	f2 cf       	rjmp	.-28     	; 0x9d58 <__fp_split3+0xe>
    9d74:	46 95       	lsr	r20
    9d76:	f1 df       	rcall	.-30     	; 0x9d5a <__fp_splitA>
    9d78:	08 c0       	rjmp	.+16     	; 0x9d8a <__fp_splitA+0x30>
    9d7a:	16 16       	cp	r1, r22
    9d7c:	17 06       	cpc	r1, r23
    9d7e:	18 06       	cpc	r1, r24
    9d80:	99 1f       	adc	r25, r25
    9d82:	f1 cf       	rjmp	.-30     	; 0x9d66 <__fp_splitA+0xc>
    9d84:	86 95       	lsr	r24
    9d86:	71 05       	cpc	r23, r1
    9d88:	61 05       	cpc	r22, r1
    9d8a:	08 94       	sec
    9d8c:	08 95       	ret

00009d8e <__fp_zero>:
__fp_zero():
    9d8e:	e8 94       	clt

00009d90 <__fp_szero>:
    9d90:	bb 27       	eor	r27, r27
    9d92:	66 27       	eor	r22, r22
    9d94:	77 27       	eor	r23, r23
    9d96:	cb 01       	movw	r24, r22
    9d98:	97 f9       	bld	r25, 7
    9d9a:	08 95       	ret

00009d9c <eeprom_read_block>:
eeprom_read_block():
    9d9c:	dc 01       	movw	r26, r24
    9d9e:	cb 01       	movw	r24, r22

00009da0 <eeprom_read_blraw>:
    9da0:	fc 01       	movw	r30, r24
    9da2:	f9 99       	sbic	0x1f, 1	; 31
    9da4:	fe cf       	rjmp	.-4      	; 0x9da2 <eeprom_read_blraw+0x2>
    9da6:	06 c0       	rjmp	.+12     	; 0x9db4 <eeprom_read_blraw+0x14>
    9da8:	f2 bd       	out	0x22, r31	; 34
    9daa:	e1 bd       	out	0x21, r30	; 33
    9dac:	f8 9a       	sbi	0x1f, 0	; 31
    9dae:	31 96       	adiw	r30, 0x01	; 1
    9db0:	00 b4       	in	r0, 0x20	; 32
    9db2:	0d 92       	st	X+, r0
    9db4:	41 50       	subi	r20, 0x01	; 1
    9db6:	50 40       	sbci	r21, 0x00	; 0
    9db8:	b8 f7       	brcc	.-18     	; 0x9da8 <eeprom_read_blraw+0x8>
    9dba:	08 95       	ret

00009dbc <eeprom_write_block>:
eeprom_write_block():
    9dbc:	dc 01       	movw	r26, r24
    9dbe:	cb 01       	movw	r24, r22
    9dc0:	03 c0       	rjmp	.+6      	; 0x9dc8 <eeprom_write_block+0xc>
    9dc2:	2d 91       	ld	r18, X+
    9dc4:	0e 94 e9 4e 	call	0x9dd2	; 0x9dd2 <eeprom_write_r18>
    9dc8:	41 50       	subi	r20, 0x01	; 1
    9dca:	50 40       	sbci	r21, 0x00	; 0
    9dcc:	d0 f7       	brcc	.-12     	; 0x9dc2 <eeprom_write_block+0x6>
    9dce:	08 95       	ret

00009dd0 <eeprom_write_byte>:
eeprom_write_byte():
    9dd0:	26 2f       	mov	r18, r22

00009dd2 <eeprom_write_r18>:
    9dd2:	f9 99       	sbic	0x1f, 1	; 31
    9dd4:	fe cf       	rjmp	.-4      	; 0x9dd2 <eeprom_write_r18>
    9dd6:	1f ba       	out	0x1f, r1	; 31
    9dd8:	92 bd       	out	0x22, r25	; 34
    9dda:	81 bd       	out	0x21, r24	; 33
    9ddc:	20 bd       	out	0x20, r18	; 32
    9dde:	0f b6       	in	r0, 0x3f	; 63
    9de0:	f8 94       	cli
    9de2:	fa 9a       	sbi	0x1f, 2	; 31
    9de4:	f9 9a       	sbi	0x1f, 1	; 31
    9de6:	0f be       	out	0x3f, r0	; 63
    9de8:	01 96       	adiw	r24, 0x01	; 1
    9dea:	08 95       	ret

00009dec <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    9dec:	0e 94 01 4f 	call	0x9e02	; 0x9e02 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    9df0:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    9df2:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    9df4:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    9df6:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    9df8:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    9dfa:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    9dfc:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    9dfe:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    9e00:	08 95       	ret

00009e02 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    9e02:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    9e04:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    9e06:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    9e08:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    9e0a:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    9e0c:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    9e0e:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    9e10:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    9e12:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    9e14:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    9e16:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    9e18:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    9e1a:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    9e1c:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    9e1e:	08 95       	ret

00009e20 <__subsf3>:
__subsf3():
    9e20:	50 58       	subi	r21, 0x80	; 128

00009e22 <__addsf3>:
    9e22:	bb 27       	eor	r27, r27
    9e24:	aa 27       	eor	r26, r26
    9e26:	0e 94 28 4f 	call	0x9e50	; 0x9e50 <__addsf3x>
    9e2a:	0c 94 94 4e 	jmp	0x9d28	; 0x9d28 <__fp_round>
__addsf3():
    9e2e:	0e 94 86 4e 	call	0x9d0c	; 0x9d0c <__fp_pscA>
    9e32:	38 f0       	brcs	.+14     	; 0x9e42 <__addsf3+0x20>
    9e34:	0e 94 8d 4e 	call	0x9d1a	; 0x9d1a <__fp_pscB>
    9e38:	20 f0       	brcs	.+8      	; 0x9e42 <__addsf3+0x20>
    9e3a:	39 f4       	brne	.+14     	; 0x9e4a <__addsf3+0x28>
    9e3c:	9f 3f       	cpi	r25, 0xFF	; 255
    9e3e:	19 f4       	brne	.+6      	; 0x9e46 <__addsf3+0x24>
    9e40:	26 f4       	brtc	.+8      	; 0x9e4a <__addsf3+0x28>
    9e42:	0c 94 83 4e 	jmp	0x9d06	; 0x9d06 <__fp_nan>
    9e46:	0e f4       	brtc	.+2      	; 0x9e4a <__addsf3+0x28>
    9e48:	e0 95       	com	r30
    9e4a:	e7 fb       	bst	r30, 7
    9e4c:	0c 94 7d 4e 	jmp	0x9cfa	; 0x9cfa <__fp_inf>

00009e50 <__addsf3x>:
__addsf3x():
    9e50:	e9 2f       	mov	r30, r25
    9e52:	0e 94 a5 4e 	call	0x9d4a	; 0x9d4a <__fp_split3>
    9e56:	58 f3       	brcs	.-42     	; 0x9e2e <__addsf3+0xc>
    9e58:	ba 17       	cp	r27, r26
    9e5a:	62 07       	cpc	r22, r18
    9e5c:	73 07       	cpc	r23, r19
    9e5e:	84 07       	cpc	r24, r20
    9e60:	95 07       	cpc	r25, r21
    9e62:	20 f0       	brcs	.+8      	; 0x9e6c <__addsf3x+0x1c>
    9e64:	79 f4       	brne	.+30     	; 0x9e84 <__addsf3x+0x34>
    9e66:	a6 f5       	brtc	.+104    	; 0x9ed0 <__addsf3x+0x80>
    9e68:	0c 94 c7 4e 	jmp	0x9d8e	; 0x9d8e <__fp_zero>
    9e6c:	0e f4       	brtc	.+2      	; 0x9e70 <__addsf3x+0x20>
    9e6e:	e0 95       	com	r30
    9e70:	0b 2e       	mov	r0, r27
    9e72:	ba 2f       	mov	r27, r26
    9e74:	a0 2d       	mov	r26, r0
    9e76:	0b 01       	movw	r0, r22
    9e78:	b9 01       	movw	r22, r18
    9e7a:	90 01       	movw	r18, r0
    9e7c:	0c 01       	movw	r0, r24
    9e7e:	ca 01       	movw	r24, r20
    9e80:	a0 01       	movw	r20, r0
    9e82:	11 24       	eor	r1, r1
    9e84:	ff 27       	eor	r31, r31
    9e86:	59 1b       	sub	r21, r25
    9e88:	99 f0       	breq	.+38     	; 0x9eb0 <__addsf3x+0x60>
    9e8a:	59 3f       	cpi	r21, 0xF9	; 249
    9e8c:	50 f4       	brcc	.+20     	; 0x9ea2 <__addsf3x+0x52>
    9e8e:	50 3e       	cpi	r21, 0xE0	; 224
    9e90:	68 f1       	brcs	.+90     	; 0x9eec <__addsf3x+0x9c>
    9e92:	1a 16       	cp	r1, r26
    9e94:	f0 40       	sbci	r31, 0x00	; 0
    9e96:	a2 2f       	mov	r26, r18
    9e98:	23 2f       	mov	r18, r19
    9e9a:	34 2f       	mov	r19, r20
    9e9c:	44 27       	eor	r20, r20
    9e9e:	58 5f       	subi	r21, 0xF8	; 248
    9ea0:	f3 cf       	rjmp	.-26     	; 0x9e88 <__addsf3x+0x38>
    9ea2:	46 95       	lsr	r20
    9ea4:	37 95       	ror	r19
    9ea6:	27 95       	ror	r18
    9ea8:	a7 95       	ror	r26
    9eaa:	f0 40       	sbci	r31, 0x00	; 0
    9eac:	53 95       	inc	r21
    9eae:	c9 f7       	brne	.-14     	; 0x9ea2 <__addsf3x+0x52>
    9eb0:	7e f4       	brtc	.+30     	; 0x9ed0 <__addsf3x+0x80>
    9eb2:	1f 16       	cp	r1, r31
    9eb4:	ba 0b       	sbc	r27, r26
    9eb6:	62 0b       	sbc	r22, r18
    9eb8:	73 0b       	sbc	r23, r19
    9eba:	84 0b       	sbc	r24, r20
    9ebc:	ba f0       	brmi	.+46     	; 0x9eec <__addsf3x+0x9c>
    9ebe:	91 50       	subi	r25, 0x01	; 1
    9ec0:	a1 f0       	breq	.+40     	; 0x9eea <__addsf3x+0x9a>
    9ec2:	ff 0f       	add	r31, r31
    9ec4:	bb 1f       	adc	r27, r27
    9ec6:	66 1f       	adc	r22, r22
    9ec8:	77 1f       	adc	r23, r23
    9eca:	88 1f       	adc	r24, r24
    9ecc:	c2 f7       	brpl	.-16     	; 0x9ebe <__addsf3x+0x6e>
    9ece:	0e c0       	rjmp	.+28     	; 0x9eec <__addsf3x+0x9c>
    9ed0:	ba 0f       	add	r27, r26
    9ed2:	62 1f       	adc	r22, r18
    9ed4:	73 1f       	adc	r23, r19
    9ed6:	84 1f       	adc	r24, r20
    9ed8:	48 f4       	brcc	.+18     	; 0x9eec <__addsf3x+0x9c>
    9eda:	87 95       	ror	r24
    9edc:	77 95       	ror	r23
    9ede:	67 95       	ror	r22
    9ee0:	b7 95       	ror	r27
    9ee2:	f7 95       	ror	r31
    9ee4:	9e 3f       	cpi	r25, 0xFE	; 254
    9ee6:	08 f0       	brcs	.+2      	; 0x9eea <__addsf3x+0x9a>
    9ee8:	b0 cf       	rjmp	.-160    	; 0x9e4a <__addsf3+0x28>
    9eea:	93 95       	inc	r25
    9eec:	88 0f       	add	r24, r24
    9eee:	08 f0       	brcs	.+2      	; 0x9ef2 <__addsf3x+0xa2>
    9ef0:	99 27       	eor	r25, r25
    9ef2:	ee 0f       	add	r30, r30
    9ef4:	97 95       	ror	r25
    9ef6:	87 95       	ror	r24
    9ef8:	08 95       	ret

00009efa <__divsf3>:
    9efa:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <__divsf3x>
    9efe:	0c 94 94 4e 	jmp	0x9d28	; 0x9d28 <__fp_round>
    9f02:	0e 94 8d 4e 	call	0x9d1a	; 0x9d1a <__fp_pscB>
    9f06:	58 f0       	brcs	.+22     	; 0x9f1e <__divsf3+0x24>
    9f08:	0e 94 86 4e 	call	0x9d0c	; 0x9d0c <__fp_pscA>
    9f0c:	40 f0       	brcs	.+16     	; 0x9f1e <__divsf3+0x24>
    9f0e:	29 f4       	brne	.+10     	; 0x9f1a <__divsf3+0x20>
    9f10:	5f 3f       	cpi	r21, 0xFF	; 255
    9f12:	29 f0       	breq	.+10     	; 0x9f1e <__divsf3+0x24>
    9f14:	0c 94 7d 4e 	jmp	0x9cfa	; 0x9cfa <__fp_inf>
    9f18:	51 11       	cpse	r21, r1
    9f1a:	0c 94 c8 4e 	jmp	0x9d90	; 0x9d90 <__fp_szero>
__divsf3():
    9f1e:	0c 94 83 4e 	jmp	0x9d06	; 0x9d06 <__fp_nan>

00009f22 <__divsf3x>:
__divsf3x():
    9f22:	0e 94 a5 4e 	call	0x9d4a	; 0x9d4a <__fp_split3>
    9f26:	68 f3       	brcs	.-38     	; 0x9f02 <__divsf3+0x8>

00009f28 <__divsf3_pse>:
    9f28:	99 23       	and	r25, r25
    9f2a:	b1 f3       	breq	.-20     	; 0x9f18 <__divsf3+0x1e>
    9f2c:	55 23       	and	r21, r21
    9f2e:	91 f3       	breq	.-28     	; 0x9f14 <__divsf3+0x1a>
    9f30:	95 1b       	sub	r25, r21
    9f32:	55 0b       	sbc	r21, r21
    9f34:	bb 27       	eor	r27, r27
    9f36:	aa 27       	eor	r26, r26
    9f38:	62 17       	cp	r22, r18
    9f3a:	73 07       	cpc	r23, r19
    9f3c:	84 07       	cpc	r24, r20
    9f3e:	38 f0       	brcs	.+14     	; 0x9f4e <__divsf3_pse+0x26>
    9f40:	9f 5f       	subi	r25, 0xFF	; 255
    9f42:	5f 4f       	sbci	r21, 0xFF	; 255
    9f44:	22 0f       	add	r18, r18
    9f46:	33 1f       	adc	r19, r19
    9f48:	44 1f       	adc	r20, r20
    9f4a:	aa 1f       	adc	r26, r26
    9f4c:	a9 f3       	breq	.-22     	; 0x9f38 <__divsf3_pse+0x10>
    9f4e:	35 d0       	rcall	.+106    	; 0x9fba <__divsf3_pse+0x92>
    9f50:	0e 2e       	mov	r0, r30
    9f52:	3a f0       	brmi	.+14     	; 0x9f62 <__divsf3_pse+0x3a>
    9f54:	e0 e8       	ldi	r30, 0x80	; 128
    9f56:	32 d0       	rcall	.+100    	; 0x9fbc <__divsf3_pse+0x94>
    9f58:	91 50       	subi	r25, 0x01	; 1
    9f5a:	50 40       	sbci	r21, 0x00	; 0
    9f5c:	e6 95       	lsr	r30
    9f5e:	00 1c       	adc	r0, r0
    9f60:	ca f7       	brpl	.-14     	; 0x9f54 <__divsf3_pse+0x2c>
    9f62:	2b d0       	rcall	.+86     	; 0x9fba <__divsf3_pse+0x92>
    9f64:	fe 2f       	mov	r31, r30
    9f66:	29 d0       	rcall	.+82     	; 0x9fba <__divsf3_pse+0x92>
    9f68:	66 0f       	add	r22, r22
    9f6a:	77 1f       	adc	r23, r23
    9f6c:	88 1f       	adc	r24, r24
    9f6e:	bb 1f       	adc	r27, r27
    9f70:	26 17       	cp	r18, r22
    9f72:	37 07       	cpc	r19, r23
    9f74:	48 07       	cpc	r20, r24
    9f76:	ab 07       	cpc	r26, r27
    9f78:	b0 e8       	ldi	r27, 0x80	; 128
    9f7a:	09 f0       	breq	.+2      	; 0x9f7e <__divsf3_pse+0x56>
    9f7c:	bb 0b       	sbc	r27, r27
    9f7e:	80 2d       	mov	r24, r0
    9f80:	bf 01       	movw	r22, r30
    9f82:	ff 27       	eor	r31, r31
    9f84:	93 58       	subi	r25, 0x83	; 131
    9f86:	5f 4f       	sbci	r21, 0xFF	; 255
    9f88:	3a f0       	brmi	.+14     	; 0x9f98 <__divsf3_pse+0x70>
    9f8a:	9e 3f       	cpi	r25, 0xFE	; 254
    9f8c:	51 05       	cpc	r21, r1
    9f8e:	78 f0       	brcs	.+30     	; 0x9fae <__divsf3_pse+0x86>
    9f90:	0c 94 7d 4e 	jmp	0x9cfa	; 0x9cfa <__fp_inf>
    9f94:	0c 94 c8 4e 	jmp	0x9d90	; 0x9d90 <__fp_szero>
    9f98:	5f 3f       	cpi	r21, 0xFF	; 255
    9f9a:	e4 f3       	brlt	.-8      	; 0x9f94 <__divsf3_pse+0x6c>
    9f9c:	98 3e       	cpi	r25, 0xE8	; 232
    9f9e:	d4 f3       	brlt	.-12     	; 0x9f94 <__divsf3_pse+0x6c>
    9fa0:	86 95       	lsr	r24
    9fa2:	77 95       	ror	r23
    9fa4:	67 95       	ror	r22
    9fa6:	b7 95       	ror	r27
    9fa8:	f7 95       	ror	r31
    9faa:	9f 5f       	subi	r25, 0xFF	; 255
    9fac:	c9 f7       	brne	.-14     	; 0x9fa0 <__divsf3_pse+0x78>
    9fae:	88 0f       	add	r24, r24
    9fb0:	91 1d       	adc	r25, r1
    9fb2:	96 95       	lsr	r25
    9fb4:	87 95       	ror	r24
    9fb6:	97 f9       	bld	r25, 7
    9fb8:	08 95       	ret
    9fba:	e1 e0       	ldi	r30, 0x01	; 1
    9fbc:	66 0f       	add	r22, r22
    9fbe:	77 1f       	adc	r23, r23
    9fc0:	88 1f       	adc	r24, r24
    9fc2:	bb 1f       	adc	r27, r27
    9fc4:	62 17       	cp	r22, r18
    9fc6:	73 07       	cpc	r23, r19
    9fc8:	84 07       	cpc	r24, r20
    9fca:	ba 07       	cpc	r27, r26
    9fcc:	20 f0       	brcs	.+8      	; 0x9fd6 <__divsf3_pse+0xae>
    9fce:	62 1b       	sub	r22, r18
    9fd0:	73 0b       	sbc	r23, r19
    9fd2:	84 0b       	sbc	r24, r20
    9fd4:	ba 0b       	sbc	r27, r26
    9fd6:	ee 1f       	adc	r30, r30
    9fd8:	88 f7       	brcc	.-30     	; 0x9fbc <__divsf3_pse+0x94>
    9fda:	e0 95       	com	r30
    9fdc:	08 95       	ret

00009fde <__fixsfsi>:
    9fde:	0e 94 f6 4f 	call	0x9fec	; 0x9fec <__fixunssfsi>
    9fe2:	68 94       	set
    9fe4:	b1 11       	cpse	r27, r1
    9fe6:	0c 94 c8 4e 	jmp	0x9d90	; 0x9d90 <__fp_szero>
    9fea:	08 95       	ret

00009fec <__fixunssfsi>:
    9fec:	0e 94 ad 4e 	call	0x9d5a	; 0x9d5a <__fp_splitA>
    9ff0:	88 f0       	brcs	.+34     	; 0xa014 <__fixunssfsi+0x28>
    9ff2:	9f 57       	subi	r25, 0x7F	; 127
    9ff4:	98 f0       	brcs	.+38     	; 0xa01c <__fixunssfsi+0x30>
    9ff6:	b9 2f       	mov	r27, r25
    9ff8:	99 27       	eor	r25, r25
    9ffa:	b7 51       	subi	r27, 0x17	; 23
    9ffc:	b0 f0       	brcs	.+44     	; 0xa02a <__fixunssfsi+0x3e>
__fixunssfsi():
    9ffe:	e1 f0       	breq	.+56     	; 0xa038 <__fixunssfsi+0x4c>
    a000:	66 0f       	add	r22, r22
    a002:	77 1f       	adc	r23, r23
    a004:	88 1f       	adc	r24, r24
    a006:	99 1f       	adc	r25, r25
    a008:	1a f0       	brmi	.+6      	; 0xa010 <__fixunssfsi+0x24>
    a00a:	ba 95       	dec	r27
    a00c:	c9 f7       	brne	.-14     	; 0xa000 <__fixunssfsi+0x14>
    a00e:	14 c0       	rjmp	.+40     	; 0xa038 <__fixunssfsi+0x4c>
    a010:	b1 30       	cpi	r27, 0x01	; 1
    a012:	91 f0       	breq	.+36     	; 0xa038 <__fixunssfsi+0x4c>
    a014:	0e 94 c7 4e 	call	0x9d8e	; 0x9d8e <__fp_zero>
    a018:	b1 e0       	ldi	r27, 0x01	; 1
    a01a:	08 95       	ret
    a01c:	0c 94 c7 4e 	jmp	0x9d8e	; 0x9d8e <__fp_zero>
    a020:	67 2f       	mov	r22, r23
    a022:	78 2f       	mov	r23, r24
    a024:	88 27       	eor	r24, r24
    a026:	b8 5f       	subi	r27, 0xF8	; 248
    a028:	39 f0       	breq	.+14     	; 0xa038 <__fixunssfsi+0x4c>
    a02a:	b9 3f       	cpi	r27, 0xF9	; 249
    a02c:	cc f3       	brlt	.-14     	; 0xa020 <__fixunssfsi+0x34>
    a02e:	86 95       	lsr	r24
    a030:	77 95       	ror	r23
    a032:	67 95       	ror	r22
    a034:	b3 95       	inc	r27
    a036:	d9 f7       	brne	.-10     	; 0xa02e <__fixunssfsi+0x42>
    a038:	3e f4       	brtc	.+14     	; 0xa048 <__fixunssfsi+0x5c>
    a03a:	90 95       	com	r25
    a03c:	80 95       	com	r24
    a03e:	70 95       	com	r23
    a040:	61 95       	neg	r22
    a042:	7f 4f       	sbci	r23, 0xFF	; 255
    a044:	8f 4f       	sbci	r24, 0xFF	; 255
    a046:	9f 4f       	sbci	r25, 0xFF	; 255
    a048:	08 95       	ret

0000a04a <__gesf2>:
__gesf2():
    a04a:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <__fp_cmp>
    a04e:	08 f4       	brcc	.+2      	; 0xa052 <__gesf2+0x8>
    a050:	8f ef       	ldi	r24, 0xFF	; 255
    a052:	08 95       	ret
    a054:	16 f0       	brts	.+4      	; 0xa05a <__gesf2+0x10>
    a056:	0c 94 7f 50 	jmp	0xa0fe	; 0xa0fe <__fp_mpack>
    a05a:	0c 94 83 4e 	jmp	0x9d06	; 0x9d06 <__fp_nan>
    a05e:	68 94       	set
    a060:	0c 94 7d 4e 	jmp	0x9cfa	; 0x9cfa <__fp_inf>

0000a064 <log>:
log():
    a064:	0e 94 ad 4e 	call	0x9d5a	; 0x9d5a <__fp_splitA>
    a068:	a8 f3       	brcs	.-22     	; 0xa054 <__gesf2+0xa>
    a06a:	99 23       	and	r25, r25
    a06c:	c1 f3       	breq	.-16     	; 0xa05e <__gesf2+0x14>
    a06e:	ae f3       	brts	.-22     	; 0xa05a <__gesf2+0x10>
    a070:	df 93       	push	r29
    a072:	cf 93       	push	r28
    a074:	1f 93       	push	r17
    a076:	0f 93       	push	r16
    a078:	ff 92       	push	r15
    a07a:	c9 2f       	mov	r28, r25
    a07c:	dd 27       	eor	r29, r29
    a07e:	88 23       	and	r24, r24
    a080:	2a f0       	brmi	.+10     	; 0xa08c <log+0x28>
    a082:	21 97       	sbiw	r28, 0x01	; 1
    a084:	66 0f       	add	r22, r22
    a086:	77 1f       	adc	r23, r23
    a088:	88 1f       	adc	r24, r24
    a08a:	da f7       	brpl	.-10     	; 0xa082 <log+0x1e>
    a08c:	20 e0       	ldi	r18, 0x00	; 0
    a08e:	30 e0       	ldi	r19, 0x00	; 0
    a090:	40 e8       	ldi	r20, 0x80	; 128
    a092:	5f eb       	ldi	r21, 0xBF	; 191
    a094:	9f e3       	ldi	r25, 0x3F	; 63
    a096:	88 39       	cpi	r24, 0x98	; 152
    a098:	20 f0       	brcs	.+8      	; 0xa0a2 <log+0x3e>
    a09a:	80 3e       	cpi	r24, 0xE0	; 224
    a09c:	38 f0       	brcs	.+14     	; 0xa0ac <log+0x48>
    a09e:	21 96       	adiw	r28, 0x01	; 1
    a0a0:	8f 77       	andi	r24, 0x7F	; 127
    a0a2:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <__addsf3>
    a0a6:	ec e8       	ldi	r30, 0x8C	; 140
    a0a8:	f0 e0       	ldi	r31, 0x00	; 0
    a0aa:	04 c0       	rjmp	.+8      	; 0xa0b4 <log+0x50>
    a0ac:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <__addsf3>
    a0b0:	e9 eb       	ldi	r30, 0xB9	; 185
    a0b2:	f0 e0       	ldi	r31, 0x00	; 0
    a0b4:	0e 94 8d 50 	call	0xa11a	; 0xa11a <__fp_powser>
    a0b8:	8b 01       	movw	r16, r22
    a0ba:	be 01       	movw	r22, r28
    a0bc:	ec 01       	movw	r28, r24
    a0be:	fb 2e       	mov	r15, r27
    a0c0:	6f 57       	subi	r22, 0x7F	; 127
    a0c2:	71 09       	sbc	r23, r1
    a0c4:	75 95       	asr	r23
    a0c6:	77 1f       	adc	r23, r23
    a0c8:	88 0b       	sbc	r24, r24
    a0ca:	99 0b       	sbc	r25, r25
    a0cc:	0e 94 b1 4d 	call	0x9b62	; 0x9b62 <__floatsisf>
    a0d0:	28 e1       	ldi	r18, 0x18	; 24
    a0d2:	32 e7       	ldi	r19, 0x72	; 114
    a0d4:	41 e3       	ldi	r20, 0x31	; 49
    a0d6:	5f e3       	ldi	r21, 0x3F	; 63
    a0d8:	0e 94 23 4e 	call	0x9c46	; 0x9c46 <__mulsf3x>
    a0dc:	af 2d       	mov	r26, r15
    a0de:	98 01       	movw	r18, r16
    a0e0:	ae 01       	movw	r20, r28
    a0e2:	ff 90       	pop	r15
    a0e4:	0f 91       	pop	r16
    a0e6:	1f 91       	pop	r17
    a0e8:	cf 91       	pop	r28
    a0ea:	df 91       	pop	r29
    a0ec:	0e 94 28 4f 	call	0x9e50	; 0x9e50 <__addsf3x>
    a0f0:	0c 94 94 4e 	jmp	0x9d28	; 0x9d28 <__fp_round>

0000a0f4 <__unordsf2>:
    a0f4:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <__fp_cmp>
    a0f8:	88 0b       	sbc	r24, r24
    a0fa:	99 0b       	sbc	r25, r25
    a0fc:	08 95       	ret

0000a0fe <__fp_mpack>:
    a0fe:	9f 3f       	cpi	r25, 0xFF	; 255
    a100:	31 f0       	breq	.+12     	; 0xa10e <__fp_mpack_finite+0xc>

0000a102 <__fp_mpack_finite>:
    a102:	91 50       	subi	r25, 0x01	; 1
__fp_mpack_finite():
    a104:	20 f4       	brcc	.+8      	; 0xa10e <__fp_mpack_finite+0xc>
    a106:	87 95       	ror	r24
    a108:	77 95       	ror	r23
    a10a:	67 95       	ror	r22
    a10c:	b7 95       	ror	r27
    a10e:	88 0f       	add	r24, r24
    a110:	91 1d       	adc	r25, r1
    a112:	96 95       	lsr	r25
    a114:	87 95       	ror	r24
    a116:	97 f9       	bld	r25, 7
    a118:	08 95       	ret

0000a11a <__fp_powser>:
__fp_powser():
    a11a:	df 93       	push	r29
    a11c:	cf 93       	push	r28
    a11e:	1f 93       	push	r17
    a120:	0f 93       	push	r16
    a122:	ff 92       	push	r15
    a124:	ef 92       	push	r14
    a126:	df 92       	push	r13
    a128:	7b 01       	movw	r14, r22
    a12a:	8c 01       	movw	r16, r24
    a12c:	68 94       	set
    a12e:	06 c0       	rjmp	.+12     	; 0xa13c <__fp_powser+0x22>
    a130:	da 2e       	mov	r13, r26
    a132:	ef 01       	movw	r28, r30
    a134:	0e 94 23 4e 	call	0x9c46	; 0x9c46 <__mulsf3x>
    a138:	fe 01       	movw	r30, r28
    a13a:	e8 94       	clt
    a13c:	a5 91       	lpm	r26, Z+
    a13e:	25 91       	lpm	r18, Z+
    a140:	35 91       	lpm	r19, Z+
    a142:	45 91       	lpm	r20, Z+
    a144:	55 91       	lpm	r21, Z+
    a146:	a6 f3       	brts	.-24     	; 0xa130 <__fp_powser+0x16>
    a148:	ef 01       	movw	r28, r30
    a14a:	0e 94 28 4f 	call	0x9e50	; 0x9e50 <__addsf3x>
    a14e:	fe 01       	movw	r30, r28
    a150:	97 01       	movw	r18, r14
    a152:	a8 01       	movw	r20, r16
    a154:	da 94       	dec	r13
    a156:	69 f7       	brne	.-38     	; 0xa132 <__fp_powser+0x18>
    a158:	df 90       	pop	r13
    a15a:	ef 90       	pop	r14
    a15c:	ff 90       	pop	r15
    a15e:	0f 91       	pop	r16
    a160:	1f 91       	pop	r17
    a162:	cf 91       	pop	r28
    a164:	df 91       	pop	r29
    a166:	08 95       	ret

0000a168 <__mulsi3>:
__mulsi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
    a168:	db 01       	movw	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
    a16a:	8f 93       	push	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
    a16c:	9f 93       	push	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
    a16e:	0e 94 f6 4e 	call	0x9dec	; 0x9dec <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
    a172:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
    a174:	af 91       	pop	r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
    a176:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
    a178:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
    a17a:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
    a17c:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
    a17e:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
    a180:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
    a182:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
    a184:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
    a186:	08 95       	ret

0000a188 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    a188:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    a18a:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    a18c:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    a18e:	07 c0       	rjmp	.+14     	; 0xa19e <__udivmodhi4_ep>

0000a190 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    a190:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    a192:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    a194:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    a196:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    a198:	10 f0       	brcs	.+4      	; 0xa19e <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    a19a:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    a19c:	b7 0b       	sbc	r27, r23

0000a19e <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    a19e:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    a1a0:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    a1a2:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    a1a4:	a9 f7       	brne	.-22     	; 0xa190 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    a1a6:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    a1a8:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    a1aa:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    a1ac:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    a1ae:	08 95       	ret

0000a1b0 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    a1b0:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    a1b2:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    a1b4:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    a1b6:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    a1b8:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    a1ba:	0d c0       	rjmp	.+26     	; 0xa1d6 <__udivmodsi4_ep>

0000a1bc <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    a1bc:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    a1be:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    a1c0:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    a1c2:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    a1c4:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    a1c6:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    a1c8:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    a1ca:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    a1cc:	20 f0       	brcs	.+8      	; 0xa1d6 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    a1ce:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    a1d0:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    a1d2:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    a1d4:	f5 0b       	sbc	r31, r21

0000a1d6 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    a1d6:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    a1d8:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    a1da:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    a1dc:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    a1de:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    a1e0:	69 f7       	brne	.-38     	; 0xa1bc <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    a1e2:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    a1e4:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    a1e6:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    a1e8:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    a1ea:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    a1ec:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    a1ee:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    a1f0:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    a1f2:	08 95       	ret

0000a1f4 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    a1f4:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    a1f6:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    a1f8:	1e f4       	brtc	.+6      	; 0xa200 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    a1fa:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    a1fc:	0e 94 11 51 	call	0xa222	; 0xa222 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    a200:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    a202:	07 d0       	rcall	.+14     	; 0xa212 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    a204:	0e 94 d8 50 	call	0xa1b0	; 0xa1b0 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    a208:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    a20a:	03 d0       	rcall	.+6      	; 0xa212 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    a20c:	4e f4       	brtc	.+18     	; 0xa220 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    a20e:	0c 94 11 51 	jmp	0xa222	; 0xa222 <__negsi2>

0000a212 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    a212:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    a214:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    a216:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    a218:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    a21a:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    a21c:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    a21e:	5f 4f       	sbci	r21, 0xFF	; 255

0000a220 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    a220:	08 95       	ret

0000a222 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    a222:	90 95       	com	r25
    a224:	80 95       	com	r24
    a226:	70 95       	com	r23
    a228:	61 95       	neg	r22
    a22a:	7f 4f       	sbci	r23, 0xFF	; 255
    a22c:	8f 4f       	sbci	r24, 0xFF	; 255
    a22e:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    a230:	08 95       	ret

0000a232 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    a232:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    a234:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    a236:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    a238:	00 1c       	adc	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    a23a:	0b be       	out	0x3b, r0	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    a23c:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    a23e:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    a240:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    a242:	09 94       	ijmp

0000a244 <__usmulhisi3>:
__usmulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:545
    a244:	0e 94 01 4f 	call	0x9e02	; 0x9e02 <__umulhisi3>

0000a248 <__usmulhisi3_tail>:
__usmulhisi3_tail():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:551
    a248:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:552
    a24a:	08 95       	ret
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:553
    a24c:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:554
    a24e:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:555
    a250:	08 95       	ret

0000a252 <malloc>:
malloc():
    a252:	0f 93       	push	r16
    a254:	1f 93       	push	r17
    a256:	cf 93       	push	r28
    a258:	df 93       	push	r29
    a25a:	82 30       	cpi	r24, 0x02	; 2
    a25c:	91 05       	cpc	r25, r1
    a25e:	10 f4       	brcc	.+4      	; 0xa264 <malloc+0x12>
    a260:	82 e0       	ldi	r24, 0x02	; 2
    a262:	90 e0       	ldi	r25, 0x00	; 0
    a264:	e0 91 fa 07 	lds	r30, 0x07FA	; 0x8007fa <__flp>
    a268:	f0 91 fb 07 	lds	r31, 0x07FB	; 0x8007fb <__flp+0x1>
    a26c:	30 e0       	ldi	r19, 0x00	; 0
    a26e:	20 e0       	ldi	r18, 0x00	; 0
    a270:	b0 e0       	ldi	r27, 0x00	; 0
    a272:	a0 e0       	ldi	r26, 0x00	; 0
    a274:	30 97       	sbiw	r30, 0x00	; 0
    a276:	99 f4       	brne	.+38     	; 0xa29e <malloc+0x4c>
    a278:	21 15       	cp	r18, r1
    a27a:	31 05       	cpc	r19, r1
    a27c:	09 f4       	brne	.+2      	; 0xa280 <malloc+0x2e>
    a27e:	4a c0       	rjmp	.+148    	; 0xa314 <malloc+0xc2>
    a280:	28 1b       	sub	r18, r24
    a282:	39 0b       	sbc	r19, r25
    a284:	24 30       	cpi	r18, 0x04	; 4
    a286:	31 05       	cpc	r19, r1
    a288:	d8 f5       	brcc	.+118    	; 0xa300 <malloc+0xae>
    a28a:	8a 81       	ldd	r24, Y+2	; 0x02
    a28c:	9b 81       	ldd	r25, Y+3	; 0x03
    a28e:	61 15       	cp	r22, r1
    a290:	71 05       	cpc	r23, r1
    a292:	89 f1       	breq	.+98     	; 0xa2f6 <malloc+0xa4>
    a294:	fb 01       	movw	r30, r22
    a296:	93 83       	std	Z+3, r25	; 0x03
    a298:	82 83       	std	Z+2, r24	; 0x02
    a29a:	fe 01       	movw	r30, r28
    a29c:	11 c0       	rjmp	.+34     	; 0xa2c0 <malloc+0x6e>
    a29e:	40 81       	ld	r20, Z
    a2a0:	51 81       	ldd	r21, Z+1	; 0x01
    a2a2:	02 81       	ldd	r16, Z+2	; 0x02
    a2a4:	13 81       	ldd	r17, Z+3	; 0x03
    a2a6:	48 17       	cp	r20, r24
    a2a8:	59 07       	cpc	r21, r25
    a2aa:	e0 f0       	brcs	.+56     	; 0xa2e4 <malloc+0x92>
    a2ac:	48 17       	cp	r20, r24
    a2ae:	59 07       	cpc	r21, r25
    a2b0:	99 f4       	brne	.+38     	; 0xa2d8 <malloc+0x86>
    a2b2:	10 97       	sbiw	r26, 0x00	; 0
    a2b4:	61 f0       	breq	.+24     	; 0xa2ce <malloc+0x7c>
    a2b6:	12 96       	adiw	r26, 0x02	; 2
    a2b8:	0c 93       	st	X, r16
    a2ba:	12 97       	sbiw	r26, 0x02	; 2
    a2bc:	13 96       	adiw	r26, 0x03	; 3
    a2be:	1c 93       	st	X, r17
    a2c0:	32 96       	adiw	r30, 0x02	; 2
    a2c2:	cf 01       	movw	r24, r30
    a2c4:	df 91       	pop	r29
    a2c6:	cf 91       	pop	r28
    a2c8:	1f 91       	pop	r17
    a2ca:	0f 91       	pop	r16
    a2cc:	08 95       	ret
    a2ce:	00 93 fa 07 	sts	0x07FA, r16	; 0x8007fa <__flp>
    a2d2:	10 93 fb 07 	sts	0x07FB, r17	; 0x8007fb <__flp+0x1>
    a2d6:	f4 cf       	rjmp	.-24     	; 0xa2c0 <malloc+0x6e>
    a2d8:	21 15       	cp	r18, r1
    a2da:	31 05       	cpc	r19, r1
    a2dc:	51 f0       	breq	.+20     	; 0xa2f2 <malloc+0xa0>
    a2de:	42 17       	cp	r20, r18
    a2e0:	53 07       	cpc	r21, r19
    a2e2:	38 f0       	brcs	.+14     	; 0xa2f2 <malloc+0xa0>
    a2e4:	a9 01       	movw	r20, r18
    a2e6:	db 01       	movw	r26, r22
    a2e8:	9a 01       	movw	r18, r20
    a2ea:	bd 01       	movw	r22, r26
    a2ec:	df 01       	movw	r26, r30
    a2ee:	f8 01       	movw	r30, r16
    a2f0:	c1 cf       	rjmp	.-126    	; 0xa274 <malloc+0x22>
    a2f2:	ef 01       	movw	r28, r30
    a2f4:	f9 cf       	rjmp	.-14     	; 0xa2e8 <malloc+0x96>
    a2f6:	90 93 fb 07 	sts	0x07FB, r25	; 0x8007fb <__flp+0x1>
    a2fa:	80 93 fa 07 	sts	0x07FA, r24	; 0x8007fa <__flp>
    a2fe:	cd cf       	rjmp	.-102    	; 0xa29a <malloc+0x48>
    a300:	fe 01       	movw	r30, r28
    a302:	e2 0f       	add	r30, r18
    a304:	f3 1f       	adc	r31, r19
    a306:	81 93       	st	Z+, r24
    a308:	91 93       	st	Z+, r25
    a30a:	22 50       	subi	r18, 0x02	; 2
    a30c:	31 09       	sbc	r19, r1
    a30e:	39 83       	std	Y+1, r19	; 0x01
    a310:	28 83       	st	Y, r18
    a312:	d7 cf       	rjmp	.-82     	; 0xa2c2 <malloc+0x70>
    a314:	20 91 f8 07 	lds	r18, 0x07F8	; 0x8007f8 <__brkval>
    a318:	30 91 f9 07 	lds	r19, 0x07F9	; 0x8007f9 <__brkval+0x1>
    a31c:	23 2b       	or	r18, r19
    a31e:	41 f4       	brne	.+16     	; 0xa330 <malloc+0xde>
    a320:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__malloc_heap_start>
    a324:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__malloc_heap_start+0x1>
    a328:	30 93 f9 07 	sts	0x07F9, r19	; 0x8007f9 <__brkval+0x1>
    a32c:	20 93 f8 07 	sts	0x07F8, r18	; 0x8007f8 <__brkval>
    a330:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_end>
    a334:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_end+0x1>
    a338:	21 15       	cp	r18, r1
    a33a:	31 05       	cpc	r19, r1
    a33c:	41 f4       	brne	.+16     	; 0xa34e <malloc+0xfc>
    a33e:	2d b7       	in	r18, 0x3d	; 61
    a340:	3e b7       	in	r19, 0x3e	; 62
    a342:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <__malloc_margin>
    a346:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <__malloc_margin+0x1>
    a34a:	24 1b       	sub	r18, r20
    a34c:	35 0b       	sbc	r19, r21
    a34e:	e0 91 f8 07 	lds	r30, 0x07F8	; 0x8007f8 <__brkval>
    a352:	f0 91 f9 07 	lds	r31, 0x07F9	; 0x8007f9 <__brkval+0x1>
    a356:	e2 17       	cp	r30, r18
    a358:	f3 07       	cpc	r31, r19
    a35a:	a0 f4       	brcc	.+40     	; 0xa384 <malloc+0x132>
    a35c:	2e 1b       	sub	r18, r30
    a35e:	3f 0b       	sbc	r19, r31
    a360:	28 17       	cp	r18, r24
    a362:	39 07       	cpc	r19, r25
    a364:	78 f0       	brcs	.+30     	; 0xa384 <malloc+0x132>
    a366:	ac 01       	movw	r20, r24
    a368:	4e 5f       	subi	r20, 0xFE	; 254
    a36a:	5f 4f       	sbci	r21, 0xFF	; 255
    a36c:	24 17       	cp	r18, r20
    a36e:	35 07       	cpc	r19, r21
    a370:	48 f0       	brcs	.+18     	; 0xa384 <malloc+0x132>
    a372:	4e 0f       	add	r20, r30
    a374:	5f 1f       	adc	r21, r31
    a376:	50 93 f9 07 	sts	0x07F9, r21	; 0x8007f9 <__brkval+0x1>
    a37a:	40 93 f8 07 	sts	0x07F8, r20	; 0x8007f8 <__brkval>
    a37e:	81 93       	st	Z+, r24
    a380:	91 93       	st	Z+, r25
    a382:	9f cf       	rjmp	.-194    	; 0xa2c2 <malloc+0x70>
    a384:	f0 e0       	ldi	r31, 0x00	; 0
    a386:	e0 e0       	ldi	r30, 0x00	; 0
    a388:	9c cf       	rjmp	.-200    	; 0xa2c2 <malloc+0x70>

0000a38a <free>:
free():
    a38a:	cf 93       	push	r28
    a38c:	df 93       	push	r29
    a38e:	00 97       	sbiw	r24, 0x00	; 0
    a390:	e9 f0       	breq	.+58     	; 0xa3cc <free+0x42>
    a392:	fc 01       	movw	r30, r24
    a394:	32 97       	sbiw	r30, 0x02	; 2
    a396:	13 82       	std	Z+3, r1	; 0x03
    a398:	12 82       	std	Z+2, r1	; 0x02
    a39a:	a0 91 fa 07 	lds	r26, 0x07FA	; 0x8007fa <__flp>
    a39e:	b0 91 fb 07 	lds	r27, 0x07FB	; 0x8007fb <__flp+0x1>
    a3a2:	ed 01       	movw	r28, r26
    a3a4:	30 e0       	ldi	r19, 0x00	; 0
    a3a6:	20 e0       	ldi	r18, 0x00	; 0
    a3a8:	10 97       	sbiw	r26, 0x00	; 0
    a3aa:	a1 f4       	brne	.+40     	; 0xa3d4 <free+0x4a>
    a3ac:	20 81       	ld	r18, Z
    a3ae:	31 81       	ldd	r19, Z+1	; 0x01
    a3b0:	82 0f       	add	r24, r18
    a3b2:	93 1f       	adc	r25, r19
    a3b4:	20 91 f8 07 	lds	r18, 0x07F8	; 0x8007f8 <__brkval>
    a3b8:	30 91 f9 07 	lds	r19, 0x07F9	; 0x8007f9 <__brkval+0x1>
    a3bc:	28 17       	cp	r18, r24
    a3be:	39 07       	cpc	r19, r25
    a3c0:	09 f0       	breq	.+2      	; 0xa3c4 <free+0x3a>
    a3c2:	61 c0       	rjmp	.+194    	; 0xa486 <free+0xfc>
    a3c4:	f0 93 f9 07 	sts	0x07F9, r31	; 0x8007f9 <__brkval+0x1>
    a3c8:	e0 93 f8 07 	sts	0x07F8, r30	; 0x8007f8 <__brkval>
    a3cc:	df 91       	pop	r29
    a3ce:	cf 91       	pop	r28
    a3d0:	08 95       	ret
    a3d2:	ea 01       	movw	r28, r20
    a3d4:	ce 17       	cp	r28, r30
    a3d6:	df 07       	cpc	r29, r31
    a3d8:	e8 f5       	brcc	.+122    	; 0xa454 <free+0xca>
    a3da:	4a 81       	ldd	r20, Y+2	; 0x02
    a3dc:	5b 81       	ldd	r21, Y+3	; 0x03
    a3de:	9e 01       	movw	r18, r28
    a3e0:	41 15       	cp	r20, r1
    a3e2:	51 05       	cpc	r21, r1
    a3e4:	b1 f7       	brne	.-20     	; 0xa3d2 <free+0x48>
    a3e6:	e9 01       	movw	r28, r18
    a3e8:	fb 83       	std	Y+3, r31	; 0x03
    a3ea:	ea 83       	std	Y+2, r30	; 0x02
    a3ec:	49 91       	ld	r20, Y+
    a3ee:	59 91       	ld	r21, Y+
    a3f0:	c4 0f       	add	r28, r20
    a3f2:	d5 1f       	adc	r29, r21
    a3f4:	ec 17       	cp	r30, r28
    a3f6:	fd 07       	cpc	r31, r29
    a3f8:	61 f4       	brne	.+24     	; 0xa412 <free+0x88>
    a3fa:	80 81       	ld	r24, Z
    a3fc:	91 81       	ldd	r25, Z+1	; 0x01
    a3fe:	02 96       	adiw	r24, 0x02	; 2
    a400:	84 0f       	add	r24, r20
    a402:	95 1f       	adc	r25, r21
    a404:	e9 01       	movw	r28, r18
    a406:	99 83       	std	Y+1, r25	; 0x01
    a408:	88 83       	st	Y, r24
    a40a:	82 81       	ldd	r24, Z+2	; 0x02
    a40c:	93 81       	ldd	r25, Z+3	; 0x03
    a40e:	9b 83       	std	Y+3, r25	; 0x03
    a410:	8a 83       	std	Y+2, r24	; 0x02
    a412:	f0 e0       	ldi	r31, 0x00	; 0
    a414:	e0 e0       	ldi	r30, 0x00	; 0
    a416:	12 96       	adiw	r26, 0x02	; 2
    a418:	8d 91       	ld	r24, X+
    a41a:	9c 91       	ld	r25, X
    a41c:	13 97       	sbiw	r26, 0x03	; 3
    a41e:	00 97       	sbiw	r24, 0x00	; 0
    a420:	b9 f5       	brne	.+110    	; 0xa490 <free+0x106>
    a422:	2d 91       	ld	r18, X+
    a424:	3c 91       	ld	r19, X
    a426:	11 97       	sbiw	r26, 0x01	; 1
    a428:	cd 01       	movw	r24, r26
    a42a:	02 96       	adiw	r24, 0x02	; 2
    a42c:	82 0f       	add	r24, r18
    a42e:	93 1f       	adc	r25, r19
    a430:	20 91 f8 07 	lds	r18, 0x07F8	; 0x8007f8 <__brkval>
    a434:	30 91 f9 07 	lds	r19, 0x07F9	; 0x8007f9 <__brkval+0x1>
    a438:	28 17       	cp	r18, r24
    a43a:	39 07       	cpc	r19, r25
    a43c:	39 f6       	brne	.-114    	; 0xa3cc <free+0x42>
    a43e:	30 97       	sbiw	r30, 0x00	; 0
    a440:	51 f5       	brne	.+84     	; 0xa496 <free+0x10c>
    a442:	10 92 fb 07 	sts	0x07FB, r1	; 0x8007fb <__flp+0x1>
    a446:	10 92 fa 07 	sts	0x07FA, r1	; 0x8007fa <__flp>
    a44a:	b0 93 f9 07 	sts	0x07F9, r27	; 0x8007f9 <__brkval+0x1>
    a44e:	a0 93 f8 07 	sts	0x07F8, r26	; 0x8007f8 <__brkval>
    a452:	bc cf       	rjmp	.-136    	; 0xa3cc <free+0x42>
    a454:	d3 83       	std	Z+3, r29	; 0x03
    a456:	c2 83       	std	Z+2, r28	; 0x02
    a458:	40 81       	ld	r20, Z
    a45a:	51 81       	ldd	r21, Z+1	; 0x01
    a45c:	84 0f       	add	r24, r20
    a45e:	95 1f       	adc	r25, r21
    a460:	c8 17       	cp	r28, r24
    a462:	d9 07       	cpc	r29, r25
    a464:	61 f4       	brne	.+24     	; 0xa47e <free+0xf4>
    a466:	4e 5f       	subi	r20, 0xFE	; 254
    a468:	5f 4f       	sbci	r21, 0xFF	; 255
    a46a:	88 81       	ld	r24, Y
    a46c:	99 81       	ldd	r25, Y+1	; 0x01
    a46e:	48 0f       	add	r20, r24
    a470:	59 1f       	adc	r21, r25
    a472:	51 83       	std	Z+1, r21	; 0x01
    a474:	40 83       	st	Z, r20
    a476:	8a 81       	ldd	r24, Y+2	; 0x02
    a478:	9b 81       	ldd	r25, Y+3	; 0x03
    a47a:	93 83       	std	Z+3, r25	; 0x03
    a47c:	82 83       	std	Z+2, r24	; 0x02
    a47e:	21 15       	cp	r18, r1
    a480:	31 05       	cpc	r19, r1
    a482:	09 f0       	breq	.+2      	; 0xa486 <free+0xfc>
    a484:	b0 cf       	rjmp	.-160    	; 0xa3e6 <free+0x5c>
    a486:	f0 93 fb 07 	sts	0x07FB, r31	; 0x8007fb <__flp+0x1>
    a48a:	e0 93 fa 07 	sts	0x07FA, r30	; 0x8007fa <__flp>
    a48e:	9e cf       	rjmp	.-196    	; 0xa3cc <free+0x42>
    a490:	fd 01       	movw	r30, r26
    a492:	dc 01       	movw	r26, r24
    a494:	c0 cf       	rjmp	.-128    	; 0xa416 <free+0x8c>
    a496:	13 82       	std	Z+3, r1	; 0x03
    a498:	12 82       	std	Z+2, r1	; 0x02
    a49a:	d7 cf       	rjmp	.-82     	; 0xa44a <free+0xc0>

0000a49c <realloc>:
realloc():
    a49c:	4f 92       	push	r4
    a49e:	5f 92       	push	r5
    a4a0:	6f 92       	push	r6
    a4a2:	7f 92       	push	r7
    a4a4:	8f 92       	push	r8
    a4a6:	9f 92       	push	r9
    a4a8:	af 92       	push	r10
    a4aa:	bf 92       	push	r11
    a4ac:	cf 92       	push	r12
    a4ae:	df 92       	push	r13
    a4b0:	ef 92       	push	r14
    a4b2:	ff 92       	push	r15
    a4b4:	0f 93       	push	r16
    a4b6:	1f 93       	push	r17
    a4b8:	cf 93       	push	r28
    a4ba:	df 93       	push	r29
    a4bc:	8c 01       	movw	r16, r24
    a4be:	00 97       	sbiw	r24, 0x00	; 0
    a4c0:	99 f4       	brne	.+38     	; 0xa4e8 <realloc+0x4c>
    a4c2:	cb 01       	movw	r24, r22
    a4c4:	df 91       	pop	r29
    a4c6:	cf 91       	pop	r28
    a4c8:	1f 91       	pop	r17
    a4ca:	0f 91       	pop	r16
    a4cc:	ff 90       	pop	r15
    a4ce:	ef 90       	pop	r14
    a4d0:	df 90       	pop	r13
    a4d2:	cf 90       	pop	r12
    a4d4:	bf 90       	pop	r11
    a4d6:	af 90       	pop	r10
    a4d8:	9f 90       	pop	r9
    a4da:	8f 90       	pop	r8
    a4dc:	7f 90       	pop	r7
    a4de:	6f 90       	pop	r6
    a4e0:	5f 90       	pop	r5
    a4e2:	4f 90       	pop	r4
    a4e4:	0c 94 29 51 	jmp	0xa252	; 0xa252 <malloc>
    a4e8:	fc 01       	movw	r30, r24
    a4ea:	e6 0f       	add	r30, r22
    a4ec:	f7 1f       	adc	r31, r23
    a4ee:	9c 01       	movw	r18, r24
    a4f0:	22 50       	subi	r18, 0x02	; 2
    a4f2:	31 09       	sbc	r19, r1
    a4f4:	e2 17       	cp	r30, r18
    a4f6:	f3 07       	cpc	r31, r19
    a4f8:	08 f4       	brcc	.+2      	; 0xa4fc <realloc+0x60>
    a4fa:	ae c0       	rjmp	.+348    	; 0xa658 <realloc+0x1bc>
    a4fc:	d9 01       	movw	r26, r18
    a4fe:	cd 91       	ld	r28, X+
    a500:	dc 91       	ld	r29, X
    a502:	11 97       	sbiw	r26, 0x01	; 1
    a504:	c6 17       	cp	r28, r22
    a506:	d7 07       	cpc	r29, r23
    a508:	20 f1       	brcs	.+72     	; 0xa552 <realloc+0xb6>
    a50a:	c5 30       	cpi	r28, 0x05	; 5
    a50c:	d1 05       	cpc	r29, r1
    a50e:	78 f0       	brcs	.+30     	; 0xa52e <realloc+0x92>
    a510:	ce 01       	movw	r24, r28
    a512:	04 97       	sbiw	r24, 0x04	; 4
    a514:	86 17       	cp	r24, r22
    a516:	97 07       	cpc	r25, r23
    a518:	50 f0       	brcs	.+20     	; 0xa52e <realloc+0x92>
    a51a:	c6 1b       	sub	r28, r22
    a51c:	d7 0b       	sbc	r29, r23
    a51e:	22 97       	sbiw	r28, 0x02	; 2
    a520:	c1 93       	st	Z+, r28
    a522:	d1 93       	st	Z+, r29
    a524:	6d 93       	st	X+, r22
    a526:	7c 93       	st	X, r23
    a528:	cf 01       	movw	r24, r30
    a52a:	0e 94 c5 51 	call	0xa38a	; 0xa38a <free>
    a52e:	c8 01       	movw	r24, r16
    a530:	df 91       	pop	r29
    a532:	cf 91       	pop	r28
    a534:	1f 91       	pop	r17
    a536:	0f 91       	pop	r16
    a538:	ff 90       	pop	r15
    a53a:	ef 90       	pop	r14
    a53c:	df 90       	pop	r13
    a53e:	cf 90       	pop	r12
    a540:	bf 90       	pop	r11
    a542:	af 90       	pop	r10
    a544:	9f 90       	pop	r9
    a546:	8f 90       	pop	r8
    a548:	7f 90       	pop	r7
    a54a:	6f 90       	pop	r6
    a54c:	5f 90       	pop	r5
    a54e:	4f 90       	pop	r4
    a550:	08 95       	ret
    a552:	5b 01       	movw	r10, r22
    a554:	ac 1a       	sub	r10, r28
    a556:	bd 0a       	sbc	r11, r29
    a558:	4c 01       	movw	r8, r24
    a55a:	8c 0e       	add	r8, r28
    a55c:	9d 1e       	adc	r9, r29
    a55e:	a0 91 fa 07 	lds	r26, 0x07FA	; 0x8007fa <__flp>
    a562:	b0 91 fb 07 	lds	r27, 0x07FB	; 0x8007fb <__flp+0x1>
    a566:	51 2c       	mov	r5, r1
    a568:	41 2c       	mov	r4, r1
    a56a:	f1 2c       	mov	r15, r1
    a56c:	e1 2c       	mov	r14, r1
    a56e:	10 97       	sbiw	r26, 0x00	; 0
    a570:	31 f5       	brne	.+76     	; 0xa5be <realloc+0x122>
    a572:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <__brkval>
    a576:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <__brkval+0x1>
    a57a:	88 15       	cp	r24, r8
    a57c:	99 05       	cpc	r25, r9
    a57e:	09 f0       	breq	.+2      	; 0xa582 <realloc+0xe6>
    a580:	5c c0       	rjmp	.+184    	; 0xa63a <realloc+0x19e>
    a582:	46 16       	cp	r4, r22
    a584:	57 06       	cpc	r5, r23
    a586:	08 f0       	brcs	.+2      	; 0xa58a <realloc+0xee>
    a588:	58 c0       	rjmp	.+176    	; 0xa63a <realloc+0x19e>
    a58a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__malloc_heap_end>
    a58e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__malloc_heap_end+0x1>
    a592:	00 97       	sbiw	r24, 0x00	; 0
    a594:	41 f4       	brne	.+16     	; 0xa5a6 <realloc+0x10a>
    a596:	8d b7       	in	r24, 0x3d	; 61
    a598:	9e b7       	in	r25, 0x3e	; 62
    a59a:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <__malloc_margin>
    a59e:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <__malloc_margin+0x1>
    a5a2:	84 1b       	sub	r24, r20
    a5a4:	95 0b       	sbc	r25, r21
    a5a6:	e8 17       	cp	r30, r24
    a5a8:	f9 07       	cpc	r31, r25
    a5aa:	08 f0       	brcs	.+2      	; 0xa5ae <realloc+0x112>
    a5ac:	55 c0       	rjmp	.+170    	; 0xa658 <realloc+0x1bc>
    a5ae:	f0 93 f9 07 	sts	0x07F9, r31	; 0x8007f9 <__brkval+0x1>
    a5b2:	e0 93 f8 07 	sts	0x07F8, r30	; 0x8007f8 <__brkval>
    a5b6:	f9 01       	movw	r30, r18
    a5b8:	71 83       	std	Z+1, r23	; 0x01
    a5ba:	60 83       	st	Z, r22
    a5bc:	b8 cf       	rjmp	.-144    	; 0xa52e <realloc+0x92>
    a5be:	8d 91       	ld	r24, X+
    a5c0:	9c 91       	ld	r25, X
    a5c2:	11 97       	sbiw	r26, 0x01	; 1
    a5c4:	12 96       	adiw	r26, 0x02	; 2
    a5c6:	6c 90       	ld	r6, X
    a5c8:	12 97       	sbiw	r26, 0x02	; 2
    a5ca:	13 96       	adiw	r26, 0x03	; 3
    a5cc:	7c 90       	ld	r7, X
    a5ce:	13 97       	sbiw	r26, 0x03	; 3
    a5d0:	a8 15       	cp	r26, r8
    a5d2:	b9 05       	cpc	r27, r9
    a5d4:	59 f5       	brne	.+86     	; 0xa62c <realloc+0x190>
    a5d6:	6c 01       	movw	r12, r24
    a5d8:	42 e0       	ldi	r20, 0x02	; 2
    a5da:	c4 0e       	add	r12, r20
    a5dc:	d1 1c       	adc	r13, r1
    a5de:	ca 14       	cp	r12, r10
    a5e0:	db 04       	cpc	r13, r11
    a5e2:	20 f1       	brcs	.+72     	; 0xa62c <realloc+0x190>
    a5e4:	ac 01       	movw	r20, r24
    a5e6:	4a 19       	sub	r20, r10
    a5e8:	5b 09       	sbc	r21, r11
    a5ea:	da 01       	movw	r26, r20
    a5ec:	12 96       	adiw	r26, 0x02	; 2
    a5ee:	15 97       	sbiw	r26, 0x05	; 5
    a5f0:	80 f0       	brcs	.+32     	; 0xa612 <realloc+0x176>
    a5f2:	62 82       	std	Z+2, r6	; 0x02
    a5f4:	73 82       	std	Z+3, r7	; 0x03
    a5f6:	51 83       	std	Z+1, r21	; 0x01
    a5f8:	40 83       	st	Z, r20
    a5fa:	d9 01       	movw	r26, r18
    a5fc:	6d 93       	st	X+, r22
    a5fe:	7c 93       	st	X, r23
    a600:	e1 14       	cp	r14, r1
    a602:	f1 04       	cpc	r15, r1
    a604:	71 f0       	breq	.+28     	; 0xa622 <realloc+0x186>
    a606:	d7 01       	movw	r26, r14
    a608:	13 96       	adiw	r26, 0x03	; 3
    a60a:	fc 93       	st	X, r31
    a60c:	ee 93       	st	-X, r30
    a60e:	12 97       	sbiw	r26, 0x02	; 2
    a610:	8e cf       	rjmp	.-228    	; 0xa52e <realloc+0x92>
    a612:	22 96       	adiw	r28, 0x02	; 2
    a614:	8c 0f       	add	r24, r28
    a616:	9d 1f       	adc	r25, r29
    a618:	f9 01       	movw	r30, r18
    a61a:	91 83       	std	Z+1, r25	; 0x01
    a61c:	80 83       	st	Z, r24
    a61e:	f3 01       	movw	r30, r6
    a620:	ef cf       	rjmp	.-34     	; 0xa600 <realloc+0x164>
    a622:	f0 93 fb 07 	sts	0x07FB, r31	; 0x8007fb <__flp+0x1>
    a626:	e0 93 fa 07 	sts	0x07FA, r30	; 0x8007fa <__flp>
    a62a:	81 cf       	rjmp	.-254    	; 0xa52e <realloc+0x92>
    a62c:	48 16       	cp	r4, r24
    a62e:	59 06       	cpc	r5, r25
    a630:	08 f4       	brcc	.+2      	; 0xa634 <realloc+0x198>
    a632:	2c 01       	movw	r4, r24
    a634:	7d 01       	movw	r14, r26
    a636:	d3 01       	movw	r26, r6
    a638:	9a cf       	rjmp	.-204    	; 0xa56e <realloc+0xd2>
    a63a:	cb 01       	movw	r24, r22
    a63c:	0e 94 29 51 	call	0xa252	; 0xa252 <malloc>
    a640:	7c 01       	movw	r14, r24
    a642:	00 97       	sbiw	r24, 0x00	; 0
    a644:	49 f0       	breq	.+18     	; 0xa658 <realloc+0x1bc>
    a646:	ae 01       	movw	r20, r28
    a648:	b8 01       	movw	r22, r16
    a64a:	0e 94 3c 53 	call	0xa678	; 0xa678 <memcpy>
    a64e:	c8 01       	movw	r24, r16
    a650:	0e 94 c5 51 	call	0xa38a	; 0xa38a <free>
    a654:	87 01       	movw	r16, r14
    a656:	6b cf       	rjmp	.-298    	; 0xa52e <realloc+0x92>
    a658:	10 e0       	ldi	r17, 0x00	; 0
    a65a:	00 e0       	ldi	r16, 0x00	; 0
    a65c:	68 cf       	rjmp	.-304    	; 0xa52e <realloc+0x92>

0000a65e <memcmp>:
memcmp():
    a65e:	fb 01       	movw	r30, r22
    a660:	dc 01       	movw	r26, r24
    a662:	04 c0       	rjmp	.+8      	; 0xa66c <memcmp+0xe>
    a664:	8d 91       	ld	r24, X+
    a666:	01 90       	ld	r0, Z+
    a668:	80 19       	sub	r24, r0
    a66a:	21 f4       	brne	.+8      	; 0xa674 <memcmp+0x16>
    a66c:	41 50       	subi	r20, 0x01	; 1
    a66e:	50 40       	sbci	r21, 0x00	; 0
    a670:	c8 f7       	brcc	.-14     	; 0xa664 <memcmp+0x6>
    a672:	88 1b       	sub	r24, r24
    a674:	99 0b       	sbc	r25, r25
    a676:	08 95       	ret

0000a678 <memcpy>:
memcpy():
    a678:	fb 01       	movw	r30, r22
    a67a:	dc 01       	movw	r26, r24
    a67c:	02 c0       	rjmp	.+4      	; 0xa682 <memcpy+0xa>
    a67e:	01 90       	ld	r0, Z+
    a680:	0d 92       	st	X+, r0
    a682:	41 50       	subi	r20, 0x01	; 1
    a684:	50 40       	sbci	r21, 0x00	; 0
    a686:	d8 f7       	brcc	.-10     	; 0xa67e <memcpy+0x6>
    a688:	08 95       	ret

0000a68a <strcpy>:
strcpy():
    a68a:	fb 01       	movw	r30, r22
    a68c:	dc 01       	movw	r26, r24
    a68e:	01 90       	ld	r0, Z+
    a690:	0d 92       	st	X+, r0
    a692:	00 20       	and	r0, r0
    a694:	e1 f7       	brne	.-8      	; 0xa68e <strcpy+0x4>
    a696:	08 95       	ret

0000a698 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    a698:	f8 94       	cli

0000a69a <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    a69a:	ff cf       	rjmp	.-2      	; 0xa69a <__stop_program>
